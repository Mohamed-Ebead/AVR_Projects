
Robot_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000098a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00001134  00000000  00000000  000009e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000ad5  00000000  00000000  00001b14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b4 04 	call	0x968	; 0x968 <main>
  64:	0c 94 c3 04 	jmp	0x986	; 0x986 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPinValue>:
#include "DIO_reg.h"


/* IO Pins */
void DIO_SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	27 97       	sbiw	r28, 0x07	; 7
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	89 83       	std	Y+1, r24	; 0x01
  82:	6a 83       	std	Y+2, r22	; 0x02
  84:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD_DIO) && (u8PinIdCopy <= PIN7))
  86:	89 81       	ldd	r24, Y+1	; 0x01
  88:	84 30       	cpi	r24, 0x04	; 4
  8a:	08 f0       	brcs	.+2      	; 0x8e <DIO_SetPinValue+0x22>
  8c:	ee c0       	rjmp	.+476    	; 0x26a <DIO_SetPinValue+0x1fe>
  8e:	8a 81       	ldd	r24, Y+2	; 0x02
  90:	88 30       	cpi	r24, 0x08	; 8
  92:	08 f0       	brcs	.+2      	; 0x96 <DIO_SetPinValue+0x2a>
  94:	ea c0       	rjmp	.+468    	; 0x26a <DIO_SetPinValue+0x1fe>
	{
		if (u8PinValCopy == HIGH)
  96:	8b 81       	ldd	r24, Y+3	; 0x03
  98:	81 30       	cpi	r24, 0x01	; 1
  9a:	09 f0       	breq	.+2      	; 0x9e <DIO_SetPinValue+0x32>
  9c:	6f c0       	rjmp	.+222    	; 0x17c <DIO_SetPinValue+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
  9e:	89 81       	ldd	r24, Y+1	; 0x01
  a0:	28 2f       	mov	r18, r24
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	3f 83       	std	Y+7, r19	; 0x07
  a6:	2e 83       	std	Y+6, r18	; 0x06
  a8:	8e 81       	ldd	r24, Y+6	; 0x06
  aa:	9f 81       	ldd	r25, Y+7	; 0x07
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	91 05       	cpc	r25, r1
  b0:	49 f1       	breq	.+82     	; 0x104 <DIO_SetPinValue+0x98>
  b2:	2e 81       	ldd	r18, Y+6	; 0x06
  b4:	3f 81       	ldd	r19, Y+7	; 0x07
  b6:	22 30       	cpi	r18, 0x02	; 2
  b8:	31 05       	cpc	r19, r1
  ba:	2c f4       	brge	.+10     	; 0xc6 <DIO_SetPinValue+0x5a>
  bc:	8e 81       	ldd	r24, Y+6	; 0x06
  be:	9f 81       	ldd	r25, Y+7	; 0x07
  c0:	00 97       	sbiw	r24, 0x00	; 0
  c2:	61 f0       	breq	.+24     	; 0xdc <DIO_SetPinValue+0x70>
  c4:	d2 c0       	rjmp	.+420    	; 0x26a <DIO_SetPinValue+0x1fe>
  c6:	2e 81       	ldd	r18, Y+6	; 0x06
  c8:	3f 81       	ldd	r19, Y+7	; 0x07
  ca:	22 30       	cpi	r18, 0x02	; 2
  cc:	31 05       	cpc	r19, r1
  ce:	71 f1       	breq	.+92     	; 0x12c <DIO_SetPinValue+0xc0>
  d0:	8e 81       	ldd	r24, Y+6	; 0x06
  d2:	9f 81       	ldd	r25, Y+7	; 0x07
  d4:	83 30       	cpi	r24, 0x03	; 3
  d6:	91 05       	cpc	r25, r1
  d8:	e9 f1       	breq	.+122    	; 0x154 <DIO_SetPinValue+0xe8>
  da:	c7 c0       	rjmp	.+398    	; 0x26a <DIO_SetPinValue+0x1fe>
			{
				case PORTA_DIO: SET_BIT(PORTA_Register,u8PinIdCopy); break;
  dc:	ab e3       	ldi	r26, 0x3B	; 59
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	eb e3       	ldi	r30, 0x3B	; 59
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	48 2f       	mov	r20, r24
  e8:	8a 81       	ldd	r24, Y+2	; 0x02
  ea:	28 2f       	mov	r18, r24
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 2e       	mov	r0, r18
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_SetPinValue+0x8e>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	0a 94       	dec	r0
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_SetPinValue+0x8a>
  fe:	84 2b       	or	r24, r20
 100:	8c 93       	st	X, r24
 102:	b3 c0       	rjmp	.+358    	; 0x26a <DIO_SetPinValue+0x1fe>
				case PORTB_DIO: SET_BIT(PORTB_Register,u8PinIdCopy); break;
 104:	a8 e3       	ldi	r26, 0x38	; 56
 106:	b0 e0       	ldi	r27, 0x00	; 0
 108:	e8 e3       	ldi	r30, 0x38	; 56
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	48 2f       	mov	r20, r24
 110:	8a 81       	ldd	r24, Y+2	; 0x02
 112:	28 2f       	mov	r18, r24
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 2e       	mov	r0, r18
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_SetPinValue+0xb6>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	0a 94       	dec	r0
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_SetPinValue+0xb2>
 126:	84 2b       	or	r24, r20
 128:	8c 93       	st	X, r24
 12a:	9f c0       	rjmp	.+318    	; 0x26a <DIO_SetPinValue+0x1fe>
				case PORTC_DIO: SET_BIT(PORTC_Register,u8PinIdCopy); break;
 12c:	a5 e3       	ldi	r26, 0x35	; 53
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	e5 e3       	ldi	r30, 0x35	; 53
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	48 2f       	mov	r20, r24
 138:	8a 81       	ldd	r24, Y+2	; 0x02
 13a:	28 2f       	mov	r18, r24
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 2e       	mov	r0, r18
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_SetPinValue+0xde>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	0a 94       	dec	r0
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_SetPinValue+0xda>
 14e:	84 2b       	or	r24, r20
 150:	8c 93       	st	X, r24
 152:	8b c0       	rjmp	.+278    	; 0x26a <DIO_SetPinValue+0x1fe>
				case PORTD_DIO: SET_BIT(PORTD_Register,u8PinIdCopy); break;
 154:	a2 e3       	ldi	r26, 0x32	; 50
 156:	b0 e0       	ldi	r27, 0x00	; 0
 158:	e2 e3       	ldi	r30, 0x32	; 50
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	48 2f       	mov	r20, r24
 160:	8a 81       	ldd	r24, Y+2	; 0x02
 162:	28 2f       	mov	r18, r24
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 2e       	mov	r0, r18
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_SetPinValue+0x106>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	0a 94       	dec	r0
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_SetPinValue+0x102>
 176:	84 2b       	or	r24, r20
 178:	8c 93       	st	X, r24
 17a:	77 c0       	rjmp	.+238    	; 0x26a <DIO_SetPinValue+0x1fe>
			}
		
		}
		
		else if (u8PinValCopy == LOW)
 17c:	8b 81       	ldd	r24, Y+3	; 0x03
 17e:	88 23       	and	r24, r24
 180:	09 f0       	breq	.+2      	; 0x184 <DIO_SetPinValue+0x118>
 182:	73 c0       	rjmp	.+230    	; 0x26a <DIO_SetPinValue+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	28 2f       	mov	r18, r24
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	3d 83       	std	Y+5, r19	; 0x05
 18c:	2c 83       	std	Y+4, r18	; 0x04
 18e:	8c 81       	ldd	r24, Y+4	; 0x04
 190:	9d 81       	ldd	r25, Y+5	; 0x05
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	91 05       	cpc	r25, r1
 196:	59 f1       	breq	.+86     	; 0x1ee <DIO_SetPinValue+0x182>
 198:	2c 81       	ldd	r18, Y+4	; 0x04
 19a:	3d 81       	ldd	r19, Y+5	; 0x05
 19c:	22 30       	cpi	r18, 0x02	; 2
 19e:	31 05       	cpc	r19, r1
 1a0:	2c f4       	brge	.+10     	; 0x1ac <DIO_SetPinValue+0x140>
 1a2:	8c 81       	ldd	r24, Y+4	; 0x04
 1a4:	9d 81       	ldd	r25, Y+5	; 0x05
 1a6:	00 97       	sbiw	r24, 0x00	; 0
 1a8:	69 f0       	breq	.+26     	; 0x1c4 <DIO_SetPinValue+0x158>
 1aa:	5f c0       	rjmp	.+190    	; 0x26a <DIO_SetPinValue+0x1fe>
 1ac:	2c 81       	ldd	r18, Y+4	; 0x04
 1ae:	3d 81       	ldd	r19, Y+5	; 0x05
 1b0:	22 30       	cpi	r18, 0x02	; 2
 1b2:	31 05       	cpc	r19, r1
 1b4:	89 f1       	breq	.+98     	; 0x218 <DIO_SetPinValue+0x1ac>
 1b6:	8c 81       	ldd	r24, Y+4	; 0x04
 1b8:	9d 81       	ldd	r25, Y+5	; 0x05
 1ba:	83 30       	cpi	r24, 0x03	; 3
 1bc:	91 05       	cpc	r25, r1
 1be:	09 f4       	brne	.+2      	; 0x1c2 <DIO_SetPinValue+0x156>
 1c0:	40 c0       	rjmp	.+128    	; 0x242 <DIO_SetPinValue+0x1d6>
 1c2:	53 c0       	rjmp	.+166    	; 0x26a <DIO_SetPinValue+0x1fe>
			{
				case PORTA_DIO: CLR_BIT(PORTA_Register,u8PinIdCopy); break;
 1c4:	ab e3       	ldi	r26, 0x3B	; 59
 1c6:	b0 e0       	ldi	r27, 0x00	; 0
 1c8:	eb e3       	ldi	r30, 0x3B	; 59
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	48 2f       	mov	r20, r24
 1d0:	8a 81       	ldd	r24, Y+2	; 0x02
 1d2:	28 2f       	mov	r18, r24
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 2e       	mov	r0, r18
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_SetPinValue+0x176>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	0a 94       	dec	r0
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_SetPinValue+0x172>
 1e6:	80 95       	com	r24
 1e8:	84 23       	and	r24, r20
 1ea:	8c 93       	st	X, r24
 1ec:	3e c0       	rjmp	.+124    	; 0x26a <DIO_SetPinValue+0x1fe>
				case PORTB_DIO: CLR_BIT(PORTB_Register,u8PinIdCopy); break;
 1ee:	a8 e3       	ldi	r26, 0x38	; 56
 1f0:	b0 e0       	ldi	r27, 0x00	; 0
 1f2:	e8 e3       	ldi	r30, 0x38	; 56
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	48 2f       	mov	r20, r24
 1fa:	8a 81       	ldd	r24, Y+2	; 0x02
 1fc:	28 2f       	mov	r18, r24
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 2e       	mov	r0, r18
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_SetPinValue+0x1a0>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	0a 94       	dec	r0
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_SetPinValue+0x19c>
 210:	80 95       	com	r24
 212:	84 23       	and	r24, r20
 214:	8c 93       	st	X, r24
 216:	29 c0       	rjmp	.+82     	; 0x26a <DIO_SetPinValue+0x1fe>
				case PORTC_DIO: CLR_BIT(PORTC_Register,u8PinIdCopy); break;
 218:	a5 e3       	ldi	r26, 0x35	; 53
 21a:	b0 e0       	ldi	r27, 0x00	; 0
 21c:	e5 e3       	ldi	r30, 0x35	; 53
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	48 2f       	mov	r20, r24
 224:	8a 81       	ldd	r24, Y+2	; 0x02
 226:	28 2f       	mov	r18, r24
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 2e       	mov	r0, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_SetPinValue+0x1ca>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	0a 94       	dec	r0
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_SetPinValue+0x1c6>
 23a:	80 95       	com	r24
 23c:	84 23       	and	r24, r20
 23e:	8c 93       	st	X, r24
 240:	14 c0       	rjmp	.+40     	; 0x26a <DIO_SetPinValue+0x1fe>
				case PORTD_DIO: CLR_BIT(PORTD_Register,u8PinIdCopy); break;
 242:	a2 e3       	ldi	r26, 0x32	; 50
 244:	b0 e0       	ldi	r27, 0x00	; 0
 246:	e2 e3       	ldi	r30, 0x32	; 50
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	48 2f       	mov	r20, r24
 24e:	8a 81       	ldd	r24, Y+2	; 0x02
 250:	28 2f       	mov	r18, r24
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 2e       	mov	r0, r18
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_SetPinValue+0x1f4>
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	0a 94       	dec	r0
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_SetPinValue+0x1f0>
 264:	80 95       	com	r24
 266:	84 23       	and	r24, r20
 268:	8c 93       	st	X, r24
	
	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
 26a:	27 96       	adiw	r28, 0x07	; 7
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	f8 94       	cli
 270:	de bf       	out	0x3e, r29	; 62
 272:	0f be       	out	0x3f, r0	; 63
 274:	cd bf       	out	0x3d, r28	; 61
 276:	cf 91       	pop	r28
 278:	df 91       	pop	r29
 27a:	08 95       	ret

0000027c <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy)
{
 27c:	df 93       	push	r29
 27e:	cf 93       	push	r28
 280:	00 d0       	rcall	.+0      	; 0x282 <DIO_GetPinValue+0x6>
 282:	00 d0       	rcall	.+0      	; 0x284 <DIO_GetPinValue+0x8>
 284:	0f 92       	push	r0
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62
 28a:	8a 83       	std	Y+2, r24	; 0x02
 28c:	6b 83       	std	Y+3, r22	; 0x03
	/* Define Local Variable to get the BIT Value */
	u8 u8ResultLocal;
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD_DIO) && (u8PinIdCopy <= PIN7))
 28e:	8a 81       	ldd	r24, Y+2	; 0x02
 290:	84 30       	cpi	r24, 0x04	; 4
 292:	08 f0       	brcs	.+2      	; 0x296 <DIO_GetPinValue+0x1a>
 294:	6c c0       	rjmp	.+216    	; 0x36e <DIO_GetPinValue+0xf2>
 296:	8b 81       	ldd	r24, Y+3	; 0x03
 298:	88 30       	cpi	r24, 0x08	; 8
 29a:	08 f0       	brcs	.+2      	; 0x29e <DIO_GetPinValue+0x22>
 29c:	68 c0       	rjmp	.+208    	; 0x36e <DIO_GetPinValue+0xf2>
	{
		/* Check on the Required PORT Number */
		switch (u8PortIdCopy)
 29e:	8a 81       	ldd	r24, Y+2	; 0x02
 2a0:	28 2f       	mov	r18, r24
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	3d 83       	std	Y+5, r19	; 0x05
 2a6:	2c 83       	std	Y+4, r18	; 0x04
 2a8:	4c 81       	ldd	r20, Y+4	; 0x04
 2aa:	5d 81       	ldd	r21, Y+5	; 0x05
 2ac:	41 30       	cpi	r20, 0x01	; 1
 2ae:	51 05       	cpc	r21, r1
 2b0:	41 f1       	breq	.+80     	; 0x302 <DIO_GetPinValue+0x86>
 2b2:	8c 81       	ldd	r24, Y+4	; 0x04
 2b4:	9d 81       	ldd	r25, Y+5	; 0x05
 2b6:	82 30       	cpi	r24, 0x02	; 2
 2b8:	91 05       	cpc	r25, r1
 2ba:	34 f4       	brge	.+12     	; 0x2c8 <DIO_GetPinValue+0x4c>
 2bc:	2c 81       	ldd	r18, Y+4	; 0x04
 2be:	3d 81       	ldd	r19, Y+5	; 0x05
 2c0:	21 15       	cp	r18, r1
 2c2:	31 05       	cpc	r19, r1
 2c4:	61 f0       	breq	.+24     	; 0x2de <DIO_GetPinValue+0x62>
 2c6:	55 c0       	rjmp	.+170    	; 0x372 <DIO_GetPinValue+0xf6>
 2c8:	4c 81       	ldd	r20, Y+4	; 0x04
 2ca:	5d 81       	ldd	r21, Y+5	; 0x05
 2cc:	42 30       	cpi	r20, 0x02	; 2
 2ce:	51 05       	cpc	r21, r1
 2d0:	51 f1       	breq	.+84     	; 0x326 <DIO_GetPinValue+0xaa>
 2d2:	8c 81       	ldd	r24, Y+4	; 0x04
 2d4:	9d 81       	ldd	r25, Y+5	; 0x05
 2d6:	83 30       	cpi	r24, 0x03	; 3
 2d8:	91 05       	cpc	r25, r1
 2da:	b9 f1       	breq	.+110    	; 0x34a <DIO_GetPinValue+0xce>
 2dc:	4a c0       	rjmp	.+148    	; 0x372 <DIO_GetPinValue+0xf6>
		{
			case PORTA_DIO: u8ResultLocal= GET_BIT(PINA_Register,u8PinIdCopy); break;
 2de:	e9 e3       	ldi	r30, 0x39	; 57
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	28 2f       	mov	r18, r24
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ea:	88 2f       	mov	r24, r24
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	a9 01       	movw	r20, r18
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_GetPinValue+0x7a>
 2f2:	55 95       	asr	r21
 2f4:	47 95       	ror	r20
 2f6:	8a 95       	dec	r24
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_GetPinValue+0x76>
 2fa:	ca 01       	movw	r24, r20
 2fc:	81 70       	andi	r24, 0x01	; 1
 2fe:	89 83       	std	Y+1, r24	; 0x01
 300:	38 c0       	rjmp	.+112    	; 0x372 <DIO_GetPinValue+0xf6>
			case PORTB_DIO: u8ResultLocal= GET_BIT(PINB_Register,u8PinIdCopy); break;
 302:	e6 e3       	ldi	r30, 0x36	; 54
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	80 81       	ld	r24, Z
 308:	28 2f       	mov	r18, r24
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	8b 81       	ldd	r24, Y+3	; 0x03
 30e:	88 2f       	mov	r24, r24
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	a9 01       	movw	r20, r18
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_GetPinValue+0x9e>
 316:	55 95       	asr	r21
 318:	47 95       	ror	r20
 31a:	8a 95       	dec	r24
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_GetPinValue+0x9a>
 31e:	ca 01       	movw	r24, r20
 320:	81 70       	andi	r24, 0x01	; 1
 322:	89 83       	std	Y+1, r24	; 0x01
 324:	26 c0       	rjmp	.+76     	; 0x372 <DIO_GetPinValue+0xf6>
			case PORTC_DIO: u8ResultLocal= GET_BIT(PINC_Register,u8PinIdCopy); break;
 326:	e3 e3       	ldi	r30, 0x33	; 51
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	28 2f       	mov	r18, r24
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	8b 81       	ldd	r24, Y+3	; 0x03
 332:	88 2f       	mov	r24, r24
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	a9 01       	movw	r20, r18
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_GetPinValue+0xc2>
 33a:	55 95       	asr	r21
 33c:	47 95       	ror	r20
 33e:	8a 95       	dec	r24
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_GetPinValue+0xbe>
 342:	ca 01       	movw	r24, r20
 344:	81 70       	andi	r24, 0x01	; 1
 346:	89 83       	std	Y+1, r24	; 0x01
 348:	14 c0       	rjmp	.+40     	; 0x372 <DIO_GetPinValue+0xf6>
			case PORTD_DIO: u8ResultLocal= GET_BIT(PIND_Register,u8PinIdCopy); break;
 34a:	e0 e3       	ldi	r30, 0x30	; 48
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	28 2f       	mov	r18, r24
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	8b 81       	ldd	r24, Y+3	; 0x03
 356:	88 2f       	mov	r24, r24
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	a9 01       	movw	r20, r18
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_GetPinValue+0xe6>
 35e:	55 95       	asr	r21
 360:	47 95       	ror	r20
 362:	8a 95       	dec	r24
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_GetPinValue+0xe2>
 366:	ca 01       	movw	r24, r20
 368:	81 70       	andi	r24, 0x01	; 1
 36a:	89 83       	std	Y+1, r24	; 0x01
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_GetPinValue+0xf6>
	}
	
	else
	{
		/* return 0xff in case of error in the Pin ID or PORT ID */
		u8ResultLocal = 0xFF;
 36e:	8f ef       	ldi	r24, 0xFF	; 255
 370:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return u8ResultLocal;
 372:	89 81       	ldd	r24, Y+1	; 0x01
}
 374:	0f 90       	pop	r0
 376:	0f 90       	pop	r0
 378:	0f 90       	pop	r0
 37a:	0f 90       	pop	r0
 37c:	0f 90       	pop	r0
 37e:	cf 91       	pop	r28
 380:	df 91       	pop	r29
 382:	08 95       	ret

00000384 <DIO_SetPinDirection>:

void DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
 384:	df 93       	push	r29
 386:	cf 93       	push	r28
 388:	cd b7       	in	r28, 0x3d	; 61
 38a:	de b7       	in	r29, 0x3e	; 62
 38c:	27 97       	sbiw	r28, 0x07	; 7
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	f8 94       	cli
 392:	de bf       	out	0x3e, r29	; 62
 394:	0f be       	out	0x3f, r0	; 63
 396:	cd bf       	out	0x3d, r28	; 61
 398:	89 83       	std	Y+1, r24	; 0x01
 39a:	6a 83       	std	Y+2, r22	; 0x02
 39c:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD_DIO) && (u8PinIdCopy <= PIN7))
 39e:	89 81       	ldd	r24, Y+1	; 0x01
 3a0:	84 30       	cpi	r24, 0x04	; 4
 3a2:	08 f0       	brcs	.+2      	; 0x3a6 <DIO_SetPinDirection+0x22>
 3a4:	ee c0       	rjmp	.+476    	; 0x582 <DIO_SetPinDirection+0x1fe>
 3a6:	8a 81       	ldd	r24, Y+2	; 0x02
 3a8:	88 30       	cpi	r24, 0x08	; 8
 3aa:	08 f0       	brcs	.+2      	; 0x3ae <DIO_SetPinDirection+0x2a>
 3ac:	ea c0       	rjmp	.+468    	; 0x582 <DIO_SetPinDirection+0x1fe>
	{
		if ( u8PinDirCopy == OUTPUT )
 3ae:	8b 81       	ldd	r24, Y+3	; 0x03
 3b0:	81 30       	cpi	r24, 0x01	; 1
 3b2:	09 f0       	breq	.+2      	; 0x3b6 <DIO_SetPinDirection+0x32>
 3b4:	6f c0       	rjmp	.+222    	; 0x494 <DIO_SetPinDirection+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
 3b6:	89 81       	ldd	r24, Y+1	; 0x01
 3b8:	28 2f       	mov	r18, r24
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	3f 83       	std	Y+7, r19	; 0x07
 3be:	2e 83       	std	Y+6, r18	; 0x06
 3c0:	8e 81       	ldd	r24, Y+6	; 0x06
 3c2:	9f 81       	ldd	r25, Y+7	; 0x07
 3c4:	81 30       	cpi	r24, 0x01	; 1
 3c6:	91 05       	cpc	r25, r1
 3c8:	49 f1       	breq	.+82     	; 0x41c <DIO_SetPinDirection+0x98>
 3ca:	2e 81       	ldd	r18, Y+6	; 0x06
 3cc:	3f 81       	ldd	r19, Y+7	; 0x07
 3ce:	22 30       	cpi	r18, 0x02	; 2
 3d0:	31 05       	cpc	r19, r1
 3d2:	2c f4       	brge	.+10     	; 0x3de <DIO_SetPinDirection+0x5a>
 3d4:	8e 81       	ldd	r24, Y+6	; 0x06
 3d6:	9f 81       	ldd	r25, Y+7	; 0x07
 3d8:	00 97       	sbiw	r24, 0x00	; 0
 3da:	61 f0       	breq	.+24     	; 0x3f4 <DIO_SetPinDirection+0x70>
 3dc:	d2 c0       	rjmp	.+420    	; 0x582 <DIO_SetPinDirection+0x1fe>
 3de:	2e 81       	ldd	r18, Y+6	; 0x06
 3e0:	3f 81       	ldd	r19, Y+7	; 0x07
 3e2:	22 30       	cpi	r18, 0x02	; 2
 3e4:	31 05       	cpc	r19, r1
 3e6:	71 f1       	breq	.+92     	; 0x444 <DIO_SetPinDirection+0xc0>
 3e8:	8e 81       	ldd	r24, Y+6	; 0x06
 3ea:	9f 81       	ldd	r25, Y+7	; 0x07
 3ec:	83 30       	cpi	r24, 0x03	; 3
 3ee:	91 05       	cpc	r25, r1
 3f0:	e9 f1       	breq	.+122    	; 0x46c <DIO_SetPinDirection+0xe8>
 3f2:	c7 c0       	rjmp	.+398    	; 0x582 <DIO_SetPinDirection+0x1fe>
			{
				case PORTA_DIO: SET_BIT(DDRA_Register,u8PinIdCopy); break;
 3f4:	aa e3       	ldi	r26, 0x3A	; 58
 3f6:	b0 e0       	ldi	r27, 0x00	; 0
 3f8:	ea e3       	ldi	r30, 0x3A	; 58
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	48 2f       	mov	r20, r24
 400:	8a 81       	ldd	r24, Y+2	; 0x02
 402:	28 2f       	mov	r18, r24
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	02 2e       	mov	r0, r18
 40c:	02 c0       	rjmp	.+4      	; 0x412 <DIO_SetPinDirection+0x8e>
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	0a 94       	dec	r0
 414:	e2 f7       	brpl	.-8      	; 0x40e <DIO_SetPinDirection+0x8a>
 416:	84 2b       	or	r24, r20
 418:	8c 93       	st	X, r24
 41a:	b3 c0       	rjmp	.+358    	; 0x582 <DIO_SetPinDirection+0x1fe>
				case PORTB_DIO: SET_BIT(DDRB_Register,u8PinIdCopy); break;
 41c:	a7 e3       	ldi	r26, 0x37	; 55
 41e:	b0 e0       	ldi	r27, 0x00	; 0
 420:	e7 e3       	ldi	r30, 0x37	; 55
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	80 81       	ld	r24, Z
 426:	48 2f       	mov	r20, r24
 428:	8a 81       	ldd	r24, Y+2	; 0x02
 42a:	28 2f       	mov	r18, r24
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	02 2e       	mov	r0, r18
 434:	02 c0       	rjmp	.+4      	; 0x43a <DIO_SetPinDirection+0xb6>
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	0a 94       	dec	r0
 43c:	e2 f7       	brpl	.-8      	; 0x436 <DIO_SetPinDirection+0xb2>
 43e:	84 2b       	or	r24, r20
 440:	8c 93       	st	X, r24
 442:	9f c0       	rjmp	.+318    	; 0x582 <DIO_SetPinDirection+0x1fe>
				case PORTC_DIO: SET_BIT(DDRC_Register,u8PinIdCopy); break;
 444:	a4 e3       	ldi	r26, 0x34	; 52
 446:	b0 e0       	ldi	r27, 0x00	; 0
 448:	e4 e3       	ldi	r30, 0x34	; 52
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	80 81       	ld	r24, Z
 44e:	48 2f       	mov	r20, r24
 450:	8a 81       	ldd	r24, Y+2	; 0x02
 452:	28 2f       	mov	r18, r24
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	02 2e       	mov	r0, r18
 45c:	02 c0       	rjmp	.+4      	; 0x462 <DIO_SetPinDirection+0xde>
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	0a 94       	dec	r0
 464:	e2 f7       	brpl	.-8      	; 0x45e <DIO_SetPinDirection+0xda>
 466:	84 2b       	or	r24, r20
 468:	8c 93       	st	X, r24
 46a:	8b c0       	rjmp	.+278    	; 0x582 <DIO_SetPinDirection+0x1fe>
				case PORTD_DIO: SET_BIT(DDRD_Register,u8PinIdCopy); break;
 46c:	a1 e3       	ldi	r26, 0x31	; 49
 46e:	b0 e0       	ldi	r27, 0x00	; 0
 470:	e1 e3       	ldi	r30, 0x31	; 49
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	80 81       	ld	r24, Z
 476:	48 2f       	mov	r20, r24
 478:	8a 81       	ldd	r24, Y+2	; 0x02
 47a:	28 2f       	mov	r18, r24
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	02 2e       	mov	r0, r18
 484:	02 c0       	rjmp	.+4      	; 0x48a <DIO_SetPinDirection+0x106>
 486:	88 0f       	add	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	0a 94       	dec	r0
 48c:	e2 f7       	brpl	.-8      	; 0x486 <DIO_SetPinDirection+0x102>
 48e:	84 2b       	or	r24, r20
 490:	8c 93       	st	X, r24
 492:	77 c0       	rjmp	.+238    	; 0x582 <DIO_SetPinDirection+0x1fe>
			}
		}
		
		else if ( u8PinDirCopy == INPUT )
 494:	8b 81       	ldd	r24, Y+3	; 0x03
 496:	88 23       	and	r24, r24
 498:	09 f0       	breq	.+2      	; 0x49c <DIO_SetPinDirection+0x118>
 49a:	73 c0       	rjmp	.+230    	; 0x582 <DIO_SetPinDirection+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
 49c:	89 81       	ldd	r24, Y+1	; 0x01
 49e:	28 2f       	mov	r18, r24
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	3d 83       	std	Y+5, r19	; 0x05
 4a4:	2c 83       	std	Y+4, r18	; 0x04
 4a6:	8c 81       	ldd	r24, Y+4	; 0x04
 4a8:	9d 81       	ldd	r25, Y+5	; 0x05
 4aa:	81 30       	cpi	r24, 0x01	; 1
 4ac:	91 05       	cpc	r25, r1
 4ae:	59 f1       	breq	.+86     	; 0x506 <DIO_SetPinDirection+0x182>
 4b0:	2c 81       	ldd	r18, Y+4	; 0x04
 4b2:	3d 81       	ldd	r19, Y+5	; 0x05
 4b4:	22 30       	cpi	r18, 0x02	; 2
 4b6:	31 05       	cpc	r19, r1
 4b8:	2c f4       	brge	.+10     	; 0x4c4 <DIO_SetPinDirection+0x140>
 4ba:	8c 81       	ldd	r24, Y+4	; 0x04
 4bc:	9d 81       	ldd	r25, Y+5	; 0x05
 4be:	00 97       	sbiw	r24, 0x00	; 0
 4c0:	69 f0       	breq	.+26     	; 0x4dc <DIO_SetPinDirection+0x158>
 4c2:	5f c0       	rjmp	.+190    	; 0x582 <DIO_SetPinDirection+0x1fe>
 4c4:	2c 81       	ldd	r18, Y+4	; 0x04
 4c6:	3d 81       	ldd	r19, Y+5	; 0x05
 4c8:	22 30       	cpi	r18, 0x02	; 2
 4ca:	31 05       	cpc	r19, r1
 4cc:	89 f1       	breq	.+98     	; 0x530 <DIO_SetPinDirection+0x1ac>
 4ce:	8c 81       	ldd	r24, Y+4	; 0x04
 4d0:	9d 81       	ldd	r25, Y+5	; 0x05
 4d2:	83 30       	cpi	r24, 0x03	; 3
 4d4:	91 05       	cpc	r25, r1
 4d6:	09 f4       	brne	.+2      	; 0x4da <DIO_SetPinDirection+0x156>
 4d8:	40 c0       	rjmp	.+128    	; 0x55a <DIO_SetPinDirection+0x1d6>
 4da:	53 c0       	rjmp	.+166    	; 0x582 <DIO_SetPinDirection+0x1fe>
			{
				case PORTA_DIO: CLR_BIT(DDRA_Register,u8PinIdCopy); break;
 4dc:	aa e3       	ldi	r26, 0x3A	; 58
 4de:	b0 e0       	ldi	r27, 0x00	; 0
 4e0:	ea e3       	ldi	r30, 0x3A	; 58
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	80 81       	ld	r24, Z
 4e6:	48 2f       	mov	r20, r24
 4e8:	8a 81       	ldd	r24, Y+2	; 0x02
 4ea:	28 2f       	mov	r18, r24
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	02 2e       	mov	r0, r18
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <DIO_SetPinDirection+0x176>
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	0a 94       	dec	r0
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <DIO_SetPinDirection+0x172>
 4fe:	80 95       	com	r24
 500:	84 23       	and	r24, r20
 502:	8c 93       	st	X, r24
 504:	3e c0       	rjmp	.+124    	; 0x582 <DIO_SetPinDirection+0x1fe>
				case PORTB_DIO: CLR_BIT(DDRB_Register,u8PinIdCopy); break;
 506:	a7 e3       	ldi	r26, 0x37	; 55
 508:	b0 e0       	ldi	r27, 0x00	; 0
 50a:	e7 e3       	ldi	r30, 0x37	; 55
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	80 81       	ld	r24, Z
 510:	48 2f       	mov	r20, r24
 512:	8a 81       	ldd	r24, Y+2	; 0x02
 514:	28 2f       	mov	r18, r24
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	02 2e       	mov	r0, r18
 51e:	02 c0       	rjmp	.+4      	; 0x524 <DIO_SetPinDirection+0x1a0>
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	0a 94       	dec	r0
 526:	e2 f7       	brpl	.-8      	; 0x520 <DIO_SetPinDirection+0x19c>
 528:	80 95       	com	r24
 52a:	84 23       	and	r24, r20
 52c:	8c 93       	st	X, r24
 52e:	29 c0       	rjmp	.+82     	; 0x582 <DIO_SetPinDirection+0x1fe>
				case PORTC_DIO: CLR_BIT(DDRC_Register,u8PinIdCopy); break;
 530:	a4 e3       	ldi	r26, 0x34	; 52
 532:	b0 e0       	ldi	r27, 0x00	; 0
 534:	e4 e3       	ldi	r30, 0x34	; 52
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	80 81       	ld	r24, Z
 53a:	48 2f       	mov	r20, r24
 53c:	8a 81       	ldd	r24, Y+2	; 0x02
 53e:	28 2f       	mov	r18, r24
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	02 2e       	mov	r0, r18
 548:	02 c0       	rjmp	.+4      	; 0x54e <DIO_SetPinDirection+0x1ca>
 54a:	88 0f       	add	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	0a 94       	dec	r0
 550:	e2 f7       	brpl	.-8      	; 0x54a <DIO_SetPinDirection+0x1c6>
 552:	80 95       	com	r24
 554:	84 23       	and	r24, r20
 556:	8c 93       	st	X, r24
 558:	14 c0       	rjmp	.+40     	; 0x582 <DIO_SetPinDirection+0x1fe>
				case PORTD_DIO: CLR_BIT(DDRD_Register,u8PinIdCopy); break;
 55a:	a1 e3       	ldi	r26, 0x31	; 49
 55c:	b0 e0       	ldi	r27, 0x00	; 0
 55e:	e1 e3       	ldi	r30, 0x31	; 49
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	80 81       	ld	r24, Z
 564:	48 2f       	mov	r20, r24
 566:	8a 81       	ldd	r24, Y+2	; 0x02
 568:	28 2f       	mov	r18, r24
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	02 2e       	mov	r0, r18
 572:	02 c0       	rjmp	.+4      	; 0x578 <DIO_SetPinDirection+0x1f4>
 574:	88 0f       	add	r24, r24
 576:	99 1f       	adc	r25, r25
 578:	0a 94       	dec	r0
 57a:	e2 f7       	brpl	.-8      	; 0x574 <DIO_SetPinDirection+0x1f0>
 57c:	80 95       	com	r24
 57e:	84 23       	and	r24, r20
 580:	8c 93       	st	X, r24
	
	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
 582:	27 96       	adiw	r28, 0x07	; 7
 584:	0f b6       	in	r0, 0x3f	; 63
 586:	f8 94       	cli
 588:	de bf       	out	0x3e, r29	; 62
 58a:	0f be       	out	0x3f, r0	; 63
 58c:	cd bf       	out	0x3d, r28	; 61
 58e:	cf 91       	pop	r28
 590:	df 91       	pop	r29
 592:	08 95       	ret

00000594 <DIO_SetPortDirection>:


/* IO Ports */
void DIO_SetPortDirection (u8 u8PortId, u8 u8PortDir)
{
 594:	df 93       	push	r29
 596:	cf 93       	push	r28
 598:	00 d0       	rcall	.+0      	; 0x59a <DIO_SetPortDirection+0x6>
 59a:	00 d0       	rcall	.+0      	; 0x59c <DIO_SetPortDirection+0x8>
 59c:	cd b7       	in	r28, 0x3d	; 61
 59e:	de b7       	in	r29, 0x3e	; 62
 5a0:	89 83       	std	Y+1, r24	; 0x01
 5a2:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
 5a4:	89 81       	ldd	r24, Y+1	; 0x01
 5a6:	28 2f       	mov	r18, r24
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	3c 83       	std	Y+4, r19	; 0x04
 5ac:	2b 83       	std	Y+3, r18	; 0x03
 5ae:	8b 81       	ldd	r24, Y+3	; 0x03
 5b0:	9c 81       	ldd	r25, Y+4	; 0x04
 5b2:	81 30       	cpi	r24, 0x01	; 1
 5b4:	91 05       	cpc	r25, r1
 5b6:	d1 f0       	breq	.+52     	; 0x5ec <DIO_SetPortDirection+0x58>
 5b8:	2b 81       	ldd	r18, Y+3	; 0x03
 5ba:	3c 81       	ldd	r19, Y+4	; 0x04
 5bc:	22 30       	cpi	r18, 0x02	; 2
 5be:	31 05       	cpc	r19, r1
 5c0:	2c f4       	brge	.+10     	; 0x5cc <DIO_SetPortDirection+0x38>
 5c2:	8b 81       	ldd	r24, Y+3	; 0x03
 5c4:	9c 81       	ldd	r25, Y+4	; 0x04
 5c6:	00 97       	sbiw	r24, 0x00	; 0
 5c8:	61 f0       	breq	.+24     	; 0x5e2 <DIO_SetPortDirection+0x4e>
 5ca:	1e c0       	rjmp	.+60     	; 0x608 <DIO_SetPortDirection+0x74>
 5cc:	2b 81       	ldd	r18, Y+3	; 0x03
 5ce:	3c 81       	ldd	r19, Y+4	; 0x04
 5d0:	22 30       	cpi	r18, 0x02	; 2
 5d2:	31 05       	cpc	r19, r1
 5d4:	81 f0       	breq	.+32     	; 0x5f6 <DIO_SetPortDirection+0x62>
 5d6:	8b 81       	ldd	r24, Y+3	; 0x03
 5d8:	9c 81       	ldd	r25, Y+4	; 0x04
 5da:	83 30       	cpi	r24, 0x03	; 3
 5dc:	91 05       	cpc	r25, r1
 5de:	81 f0       	breq	.+32     	; 0x600 <DIO_SetPortDirection+0x6c>
 5e0:	13 c0       	rjmp	.+38     	; 0x608 <DIO_SetPortDirection+0x74>
	{
			case PORTA_DIO: DDRA_Register = u8PortDir; break;
 5e2:	ea e3       	ldi	r30, 0x3A	; 58
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	8a 81       	ldd	r24, Y+2	; 0x02
 5e8:	80 83       	st	Z, r24
 5ea:	0e c0       	rjmp	.+28     	; 0x608 <DIO_SetPortDirection+0x74>
			case PORTB_DIO: DDRB_Register = u8PortDir; break;
 5ec:	e7 e3       	ldi	r30, 0x37	; 55
 5ee:	f0 e0       	ldi	r31, 0x00	; 0
 5f0:	8a 81       	ldd	r24, Y+2	; 0x02
 5f2:	80 83       	st	Z, r24
 5f4:	09 c0       	rjmp	.+18     	; 0x608 <DIO_SetPortDirection+0x74>
			case PORTC_DIO: DDRC_Register = u8PortDir; break;
 5f6:	e4 e3       	ldi	r30, 0x34	; 52
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	8a 81       	ldd	r24, Y+2	; 0x02
 5fc:	80 83       	st	Z, r24
 5fe:	04 c0       	rjmp	.+8      	; 0x608 <DIO_SetPortDirection+0x74>
			case PORTD_DIO: DDRD_Register = u8PortDir; break;
 600:	e1 e3       	ldi	r30, 0x31	; 49
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	8a 81       	ldd	r24, Y+2	; 0x02
 606:	80 83       	st	Z, r24
		default: /* Wrong Port ID */       break;
	}
}
 608:	0f 90       	pop	r0
 60a:	0f 90       	pop	r0
 60c:	0f 90       	pop	r0
 60e:	0f 90       	pop	r0
 610:	cf 91       	pop	r28
 612:	df 91       	pop	r29
 614:	08 95       	ret

00000616 <DIO_SetPortValue>:

void DIO_SetPortValue (u8 u8PortId, u8 u8PortVal)
{
 616:	df 93       	push	r29
 618:	cf 93       	push	r28
 61a:	00 d0       	rcall	.+0      	; 0x61c <DIO_SetPortValue+0x6>
 61c:	00 d0       	rcall	.+0      	; 0x61e <DIO_SetPortValue+0x8>
 61e:	cd b7       	in	r28, 0x3d	; 61
 620:	de b7       	in	r29, 0x3e	; 62
 622:	89 83       	std	Y+1, r24	; 0x01
 624:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
 626:	89 81       	ldd	r24, Y+1	; 0x01
 628:	28 2f       	mov	r18, r24
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	3c 83       	std	Y+4, r19	; 0x04
 62e:	2b 83       	std	Y+3, r18	; 0x03
 630:	8b 81       	ldd	r24, Y+3	; 0x03
 632:	9c 81       	ldd	r25, Y+4	; 0x04
 634:	81 30       	cpi	r24, 0x01	; 1
 636:	91 05       	cpc	r25, r1
 638:	d1 f0       	breq	.+52     	; 0x66e <DIO_SetPortValue+0x58>
 63a:	2b 81       	ldd	r18, Y+3	; 0x03
 63c:	3c 81       	ldd	r19, Y+4	; 0x04
 63e:	22 30       	cpi	r18, 0x02	; 2
 640:	31 05       	cpc	r19, r1
 642:	2c f4       	brge	.+10     	; 0x64e <DIO_SetPortValue+0x38>
 644:	8b 81       	ldd	r24, Y+3	; 0x03
 646:	9c 81       	ldd	r25, Y+4	; 0x04
 648:	00 97       	sbiw	r24, 0x00	; 0
 64a:	61 f0       	breq	.+24     	; 0x664 <DIO_SetPortValue+0x4e>
 64c:	1e c0       	rjmp	.+60     	; 0x68a <DIO_SetPortValue+0x74>
 64e:	2b 81       	ldd	r18, Y+3	; 0x03
 650:	3c 81       	ldd	r19, Y+4	; 0x04
 652:	22 30       	cpi	r18, 0x02	; 2
 654:	31 05       	cpc	r19, r1
 656:	81 f0       	breq	.+32     	; 0x678 <DIO_SetPortValue+0x62>
 658:	8b 81       	ldd	r24, Y+3	; 0x03
 65a:	9c 81       	ldd	r25, Y+4	; 0x04
 65c:	83 30       	cpi	r24, 0x03	; 3
 65e:	91 05       	cpc	r25, r1
 660:	81 f0       	breq	.+32     	; 0x682 <DIO_SetPortValue+0x6c>
 662:	13 c0       	rjmp	.+38     	; 0x68a <DIO_SetPortValue+0x74>
	{
			case PORTA_DIO: PORTA_Register = u8PortVal; break;
 664:	eb e3       	ldi	r30, 0x3B	; 59
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	8a 81       	ldd	r24, Y+2	; 0x02
 66a:	80 83       	st	Z, r24
 66c:	0e c0       	rjmp	.+28     	; 0x68a <DIO_SetPortValue+0x74>
			case PORTB_DIO: PORTB_Register = u8PortVal; break;
 66e:	e8 e3       	ldi	r30, 0x38	; 56
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	8a 81       	ldd	r24, Y+2	; 0x02
 674:	80 83       	st	Z, r24
 676:	09 c0       	rjmp	.+18     	; 0x68a <DIO_SetPortValue+0x74>
			case PORTC_DIO: PORTC_Register = u8PortVal; break;
 678:	e5 e3       	ldi	r30, 0x35	; 53
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	8a 81       	ldd	r24, Y+2	; 0x02
 67e:	80 83       	st	Z, r24
 680:	04 c0       	rjmp	.+8      	; 0x68a <DIO_SetPortValue+0x74>
			case PORTD_DIO: PORTD_Register = u8PortVal; break;
 682:	e2 e3       	ldi	r30, 0x32	; 50
 684:	f0 e0       	ldi	r31, 0x00	; 0
 686:	8a 81       	ldd	r24, Y+2	; 0x02
 688:	80 83       	st	Z, r24
		default: /* Wrong Port ID */        break;
	}
}
 68a:	0f 90       	pop	r0
 68c:	0f 90       	pop	r0
 68e:	0f 90       	pop	r0
 690:	0f 90       	pop	r0
 692:	cf 91       	pop	r28
 694:	df 91       	pop	r29
 696:	08 95       	ret

00000698 <vid_ExtInt0_vid_InitializeExtInt>:
#include "Configuration.h"
#include "BIT_MATH.h"
#include "EXT_INT_INTERFACE.H"


void vid_ExtInt0_vid_InitializeExtInt (void) {
 698:	df 93       	push	r29
 69a:	cf 93       	push	r28
 69c:	cd b7       	in	r28, 0x3d	; 61
 69e:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(MCUCR_REG,0) ;
 6a0:	a5 e5       	ldi	r26, 0x55	; 85
 6a2:	b0 e0       	ldi	r27, 0x00	; 0
 6a4:	e5 e5       	ldi	r30, 0x55	; 85
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	80 81       	ld	r24, Z
 6aa:	81 60       	ori	r24, 0x01	; 1
 6ac:	8c 93       	st	X, r24
	SET_BIT(MCUCR_REG,1) ;
 6ae:	a5 e5       	ldi	r26, 0x55	; 85
 6b0:	b0 e0       	ldi	r27, 0x00	; 0
 6b2:	e5 e5       	ldi	r30, 0x55	; 85
 6b4:	f0 e0       	ldi	r31, 0x00	; 0
 6b6:	80 81       	ld	r24, Z
 6b8:	82 60       	ori	r24, 0x02	; 2
 6ba:	8c 93       	st	X, r24

	 SET_BIT(GICR_REG,6) ;
 6bc:	ab e5       	ldi	r26, 0x5B	; 91
 6be:	b0 e0       	ldi	r27, 0x00	; 0
 6c0:	eb e5       	ldi	r30, 0x5B	; 91
 6c2:	f0 e0       	ldi	r31, 0x00	; 0
 6c4:	80 81       	ld	r24, Z
 6c6:	80 64       	ori	r24, 0x40	; 64
 6c8:	8c 93       	st	X, r24

   // SET_BIT (SREG_REG,7) ;

	 asm ("SEI") ;   //ENABLE GLOBAL INTERRUPT
 6ca:	78 94       	sei

}
 6cc:	cf 91       	pop	r28
 6ce:	df 91       	pop	r29
 6d0:	08 95       	ret

000006d2 <__vector_1>:

/**************************************************************************/


ISR(INT0_vect)
{
 6d2:	1f 92       	push	r1
 6d4:	0f 92       	push	r0
 6d6:	0f b6       	in	r0, 0x3f	; 63
 6d8:	0f 92       	push	r0
 6da:	11 24       	eor	r1, r1
 6dc:	2f 93       	push	r18
 6de:	3f 93       	push	r19
 6e0:	4f 93       	push	r20
 6e2:	5f 93       	push	r21
 6e4:	6f 93       	push	r22
 6e6:	7f 93       	push	r23
 6e8:	8f 93       	push	r24
 6ea:	9f 93       	push	r25
 6ec:	af 93       	push	r26
 6ee:	bf 93       	push	r27
 6f0:	ef 93       	push	r30
 6f2:	ff 93       	push	r31
 6f4:	df 93       	push	r29
 6f6:	cf 93       	push	r28
 6f8:	cd b7       	in	r28, 0x3d	; 61
 6fa:	de b7       	in	r29, 0x3e	; 62


if(!(DIO_GetPinValue(IR_PORT,IR_R)))
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	60 e0       	ldi	r22, 0x00	; 0
 700:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_GetPinValue>
 704:	88 23       	and	r24, r24
 706:	19 f4       	brne	.+6      	; 0x70e <__vector_1+0x3c>
{
	vid_DIO_vid_RobotRight () ;
 708:	0e 94 58 04 	call	0x8b0	; 0x8b0 <vid_DIO_vid_RobotRight>
 70c:	14 c0       	rjmp	.+40     	; 0x736 <__vector_1+0x64>
}
else if (!(DIO_GetPinValue(IR_PORT,IR_L)))
 70e:	81 e0       	ldi	r24, 0x01	; 1
 710:	61 e0       	ldi	r22, 0x01	; 1
 712:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_GetPinValue>
 716:	88 23       	and	r24, r24
 718:	19 f4       	brne	.+6      	; 0x720 <__vector_1+0x4e>
{
	vid_DIO_vid_RobotLeft() ;
 71a:	0e 94 35 04 	call	0x86a	; 0x86a <vid_DIO_vid_RobotLeft>
 71e:	0b c0       	rjmp	.+22     	; 0x736 <__vector_1+0x64>
}

else if (!(DIO_GetPinValue(IR_PORT,IR_B)))
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	62 e0       	ldi	r22, 0x02	; 2
 724:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_GetPinValue>
 728:	88 23       	and	r24, r24
 72a:	19 f4       	brne	.+6      	; 0x732 <__vector_1+0x60>
{
	vid_DIO_vid_RobotBackward() ;
 72c:	0e 94 12 04 	call	0x824	; 0x824 <vid_DIO_vid_RobotBackward>
 730:	02 c0       	rjmp	.+4      	; 0x736 <__vector_1+0x64>
}

else
{
	vid_DIO_vid_RobotStop () ;
 732:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <vid_DIO_vid_RobotStop>
}



}
 736:	cf 91       	pop	r28
 738:	df 91       	pop	r29
 73a:	ff 91       	pop	r31
 73c:	ef 91       	pop	r30
 73e:	bf 91       	pop	r27
 740:	af 91       	pop	r26
 742:	9f 91       	pop	r25
 744:	8f 91       	pop	r24
 746:	7f 91       	pop	r23
 748:	6f 91       	pop	r22
 74a:	5f 91       	pop	r21
 74c:	4f 91       	pop	r20
 74e:	3f 91       	pop	r19
 750:	2f 91       	pop	r18
 752:	0f 90       	pop	r0
 754:	0f be       	out	0x3f, r0	; 63
 756:	0f 90       	pop	r0
 758:	1f 90       	pop	r1
 75a:	18 95       	reti

0000075c <vid_DIO_vid_SetDioDirections>:

/************************************************************/


void vid_DIO_vid_SetDioDirections (void)
 {
 75c:	df 93       	push	r29
 75e:	cf 93       	push	r28
 760:	cd b7       	in	r28, 0x3d	; 61
 762:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPortDirection (L298PORT , 0XFF) ;
 764:	82 e0       	ldi	r24, 0x02	; 2
 766:	6f ef       	ldi	r22, 0xFF	; 255
 768:	0e 94 ca 02 	call	0x594	; 0x594 <DIO_SetPortDirection>
	DIO_SetPortValue(L298PORT , 0X00) ;
 76c:	82 e0       	ldi	r24, 0x02	; 2
 76e:	60 e0       	ldi	r22, 0x00	; 0
 770:	0e 94 0b 03 	call	0x616	; 0x616 <DIO_SetPortValue>



	// IR SENSORS : INPUT PULLED UP
	DIO_SetPinDirection (PORTD_DIO,IR_F,INPUT);
 774:	83 e0       	ldi	r24, 0x03	; 3
 776:	62 e0       	ldi	r22, 0x02	; 2
 778:	40 e0       	ldi	r20, 0x00	; 0
 77a:	0e 94 c2 01 	call	0x384	; 0x384 <DIO_SetPinDirection>
	DIO_SetPinValue(PORTD_DIO,IR_F,HIGH);
 77e:	83 e0       	ldi	r24, 0x03	; 3
 780:	62 e0       	ldi	r22, 0x02	; 2
 782:	41 e0       	ldi	r20, 0x01	; 1
 784:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>

	DIO_SetPinDirection (IR_PORT,IR_R,INPUT);
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	60 e0       	ldi	r22, 0x00	; 0
 78c:	40 e0       	ldi	r20, 0x00	; 0
 78e:	0e 94 c2 01 	call	0x384	; 0x384 <DIO_SetPinDirection>
	DIO_SetPinValue(IR_PORT,IR_R,HIGH);
 792:	81 e0       	ldi	r24, 0x01	; 1
 794:	60 e0       	ldi	r22, 0x00	; 0
 796:	41 e0       	ldi	r20, 0x01	; 1
 798:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>

	DIO_SetPinDirection (IR_PORT,IR_L,INPUT);
 79c:	81 e0       	ldi	r24, 0x01	; 1
 79e:	61 e0       	ldi	r22, 0x01	; 1
 7a0:	40 e0       	ldi	r20, 0x00	; 0
 7a2:	0e 94 c2 01 	call	0x384	; 0x384 <DIO_SetPinDirection>
	DIO_SetPinValue(IR_PORT,IR_L,HIGH);
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	61 e0       	ldi	r22, 0x01	; 1
 7aa:	41 e0       	ldi	r20, 0x01	; 1
 7ac:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>

	DIO_SetPinDirection (IR_PORT,IR_B,INPUT);
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	62 e0       	ldi	r22, 0x02	; 2
 7b4:	40 e0       	ldi	r20, 0x00	; 0
 7b6:	0e 94 c2 01 	call	0x384	; 0x384 <DIO_SetPinDirection>
	DIO_SetPinValue(IR_PORT,IR_B,HIGH);
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	62 e0       	ldi	r22, 0x02	; 2
 7be:	41 e0       	ldi	r20, 0x01	; 1
 7c0:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>



	DIO_SetPinDirection(PORTD_DIO,EN_A,OUTPUT) ;    // PWM ENABLE A TO L298
 7c4:	83 e0       	ldi	r24, 0x03	; 3
 7c6:	67 e0       	ldi	r22, 0x07	; 7
 7c8:	41 e0       	ldi	r20, 0x01	; 1
 7ca:	0e 94 c2 01 	call	0x384	; 0x384 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTB_DIO,EN_B,OUTPUT) ;    // PWM ENABLE B TO L298
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	63 e0       	ldi	r22, 0x03	; 3
 7d2:	41 e0       	ldi	r20, 0x01	; 1
 7d4:	0e 94 c2 01 	call	0x384	; 0x384 <DIO_SetPinDirection>


}
 7d8:	cf 91       	pop	r28
 7da:	df 91       	pop	r29
 7dc:	08 95       	ret

000007de <vid_DIO_vid_RobotForward>:

/************************************************************/
void vid_DIO_vid_RobotForward (void)
{
 7de:	df 93       	push	r29
 7e0:	cf 93       	push	r28
 7e2:	cd b7       	in	r28, 0x3d	; 61
 7e4:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(L298PORT,IN1,HIGH);
 7e6:	82 e0       	ldi	r24, 0x02	; 2
 7e8:	60 e0       	ldi	r22, 0x00	; 0
 7ea:	41 e0       	ldi	r20, 0x01	; 1
 7ec:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
	DIO_SetPinValue(L298PORT,IN2,LOW);
 7f0:	82 e0       	ldi	r24, 0x02	; 2
 7f2:	61 e0       	ldi	r22, 0x01	; 1
 7f4:	40 e0       	ldi	r20, 0x00	; 0
 7f6:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
	DIO_SetPinValue(L298PORT,IN3,HIGH);
 7fa:	82 e0       	ldi	r24, 0x02	; 2
 7fc:	62 e0       	ldi	r22, 0x02	; 2
 7fe:	41 e0       	ldi	r20, 0x01	; 1
 800:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
    DIO_SetPinValue(L298PORT,IN4,LOW);
 804:	82 e0       	ldi	r24, 0x02	; 2
 806:	63 e0       	ldi	r22, 0x03	; 3
 808:	40 e0       	ldi	r20, 0x00	; 0
 80a:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>

	OCR0_REG = 50 ;
 80e:	ec e5       	ldi	r30, 0x5C	; 92
 810:	f0 e0       	ldi	r31, 0x00	; 0
 812:	82 e3       	ldi	r24, 0x32	; 50
 814:	80 83       	st	Z, r24
	OCR2_REG = 50 ;
 816:	e3 e4       	ldi	r30, 0x43	; 67
 818:	f0 e0       	ldi	r31, 0x00	; 0
 81a:	82 e3       	ldi	r24, 0x32	; 50
 81c:	80 83       	st	Z, r24

}
 81e:	cf 91       	pop	r28
 820:	df 91       	pop	r29
 822:	08 95       	ret

00000824 <vid_DIO_vid_RobotBackward>:

/************************************************************/
void vid_DIO_vid_RobotBackward (void)
{
 824:	df 93       	push	r29
 826:	cf 93       	push	r28
 828:	cd b7       	in	r28, 0x3d	; 61
 82a:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(L298PORT,IN1,LOW);
 82c:	82 e0       	ldi	r24, 0x02	; 2
 82e:	60 e0       	ldi	r22, 0x00	; 0
 830:	40 e0       	ldi	r20, 0x00	; 0
 832:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
	DIO_SetPinValue(L298PORT,IN2,HIGH);
 836:	82 e0       	ldi	r24, 0x02	; 2
 838:	61 e0       	ldi	r22, 0x01	; 1
 83a:	41 e0       	ldi	r20, 0x01	; 1
 83c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
	DIO_SetPinValue(L298PORT,IN3,LOW);
 840:	82 e0       	ldi	r24, 0x02	; 2
 842:	62 e0       	ldi	r22, 0x02	; 2
 844:	40 e0       	ldi	r20, 0x00	; 0
 846:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
	DIO_SetPinValue(L298PORT,IN4,HIGH);
 84a:	82 e0       	ldi	r24, 0x02	; 2
 84c:	63 e0       	ldi	r22, 0x03	; 3
 84e:	41 e0       	ldi	r20, 0x01	; 1
 850:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>

	OCR0_REG = 50 ;
 854:	ec e5       	ldi	r30, 0x5C	; 92
 856:	f0 e0       	ldi	r31, 0x00	; 0
 858:	82 e3       	ldi	r24, 0x32	; 50
 85a:	80 83       	st	Z, r24
	OCR2_REG = 50 ;
 85c:	e3 e4       	ldi	r30, 0x43	; 67
 85e:	f0 e0       	ldi	r31, 0x00	; 0
 860:	82 e3       	ldi	r24, 0x32	; 50
 862:	80 83       	st	Z, r24

}
 864:	cf 91       	pop	r28
 866:	df 91       	pop	r29
 868:	08 95       	ret

0000086a <vid_DIO_vid_RobotLeft>:
/************************************************************/
void vid_DIO_vid_RobotLeft (void)
{
 86a:	df 93       	push	r29
 86c:	cf 93       	push	r28
 86e:	cd b7       	in	r28, 0x3d	; 61
 870:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(L298PORT,IN1,HIGH);
 872:	82 e0       	ldi	r24, 0x02	; 2
 874:	60 e0       	ldi	r22, 0x00	; 0
 876:	41 e0       	ldi	r20, 0x01	; 1
 878:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
	DIO_SetPinValue(L298PORT,IN2,LOW);
 87c:	82 e0       	ldi	r24, 0x02	; 2
 87e:	61 e0       	ldi	r22, 0x01	; 1
 880:	40 e0       	ldi	r20, 0x00	; 0
 882:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
	DIO_SetPinValue(L298PORT,IN3,HIGH);
 886:	82 e0       	ldi	r24, 0x02	; 2
 888:	62 e0       	ldi	r22, 0x02	; 2
 88a:	41 e0       	ldi	r20, 0x01	; 1
 88c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
	DIO_SetPinValue(L298PORT,IN4,LOW);
 890:	82 e0       	ldi	r24, 0x02	; 2
 892:	63 e0       	ldi	r22, 0x03	; 3
 894:	40 e0       	ldi	r20, 0x00	; 0
 896:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>

	OCR0_REG = 60 ;
 89a:	ec e5       	ldi	r30, 0x5C	; 92
 89c:	f0 e0       	ldi	r31, 0x00	; 0
 89e:	8c e3       	ldi	r24, 0x3C	; 60
 8a0:	80 83       	st	Z, r24
		OCR2_REG = 40 ;
 8a2:	e3 e4       	ldi	r30, 0x43	; 67
 8a4:	f0 e0       	ldi	r31, 0x00	; 0
 8a6:	88 e2       	ldi	r24, 0x28	; 40
 8a8:	80 83       	st	Z, r24

}
 8aa:	cf 91       	pop	r28
 8ac:	df 91       	pop	r29
 8ae:	08 95       	ret

000008b0 <vid_DIO_vid_RobotRight>:

/************************************************************/
void vid_DIO_vid_RobotRight (void)
{
 8b0:	df 93       	push	r29
 8b2:	cf 93       	push	r28
 8b4:	cd b7       	in	r28, 0x3d	; 61
 8b6:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(L298PORT,IN1,HIGH);
 8b8:	82 e0       	ldi	r24, 0x02	; 2
 8ba:	60 e0       	ldi	r22, 0x00	; 0
 8bc:	41 e0       	ldi	r20, 0x01	; 1
 8be:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
	DIO_SetPinValue(L298PORT,IN2,LOW);
 8c2:	82 e0       	ldi	r24, 0x02	; 2
 8c4:	61 e0       	ldi	r22, 0x01	; 1
 8c6:	40 e0       	ldi	r20, 0x00	; 0
 8c8:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
	DIO_SetPinValue(L298PORT,IN3,HIGH);
 8cc:	82 e0       	ldi	r24, 0x02	; 2
 8ce:	62 e0       	ldi	r22, 0x02	; 2
 8d0:	41 e0       	ldi	r20, 0x01	; 1
 8d2:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
	DIO_SetPinValue(L298PORT,IN4,LOW);
 8d6:	82 e0       	ldi	r24, 0x02	; 2
 8d8:	63 e0       	ldi	r22, 0x03	; 3
 8da:	40 e0       	ldi	r20, 0x00	; 0
 8dc:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>

	OCR0_REG = 40 ;
 8e0:	ec e5       	ldi	r30, 0x5C	; 92
 8e2:	f0 e0       	ldi	r31, 0x00	; 0
 8e4:	88 e2       	ldi	r24, 0x28	; 40
 8e6:	80 83       	st	Z, r24
			OCR2_REG = 60 ;
 8e8:	e3 e4       	ldi	r30, 0x43	; 67
 8ea:	f0 e0       	ldi	r31, 0x00	; 0
 8ec:	8c e3       	ldi	r24, 0x3C	; 60
 8ee:	80 83       	st	Z, r24

}
 8f0:	cf 91       	pop	r28
 8f2:	df 91       	pop	r29
 8f4:	08 95       	ret

000008f6 <vid_DIO_vid_RobotStop>:

/************************************************************/


void vid_DIO_vid_RobotStop (void)
{
 8f6:	df 93       	push	r29
 8f8:	cf 93       	push	r28
 8fa:	cd b7       	in	r28, 0x3d	; 61
 8fc:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(L298PORT,IN1,LOW);
 8fe:	82 e0       	ldi	r24, 0x02	; 2
 900:	60 e0       	ldi	r22, 0x00	; 0
 902:	40 e0       	ldi	r20, 0x00	; 0
 904:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
	DIO_SetPinValue(L298PORT,IN2,LOW);
 908:	82 e0       	ldi	r24, 0x02	; 2
 90a:	61 e0       	ldi	r22, 0x01	; 1
 90c:	40 e0       	ldi	r20, 0x00	; 0
 90e:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
	DIO_SetPinValue(L298PORT,IN3,LOW);
 912:	82 e0       	ldi	r24, 0x02	; 2
 914:	62 e0       	ldi	r22, 0x02	; 2
 916:	40 e0       	ldi	r20, 0x00	; 0
 918:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
    DIO_SetPinValue(L298PORT,IN4,LOW);
 91c:	82 e0       	ldi	r24, 0x02	; 2
 91e:	63 e0       	ldi	r22, 0x03	; 3
 920:	40 e0       	ldi	r20, 0x00	; 0
 922:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
}
 926:	cf 91       	pop	r28
 928:	df 91       	pop	r29
 92a:	08 95       	ret

0000092c <vid_Timer0_vid_InitializePWM>:


#include "Timer0_interface.h"


void vid_Timer0_vid_InitializePWM (void)  {
 92c:	df 93       	push	r29
 92e:	cf 93       	push	r28
 930:	cd b7       	in	r28, 0x3d	; 61
 932:	de b7       	in	r29, 0x3e	; 62

		TCCR0_REG=0b01100011 ;
 934:	e3 e5       	ldi	r30, 0x53	; 83
 936:	f0 e0       	ldi	r31, 0x00	; 0
 938:	83 e6       	ldi	r24, 0x63	; 99
 93a:	80 83       	st	Z, r24
		OCR0_REG = 50 ;
 93c:	ec e5       	ldi	r30, 0x5C	; 92
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	82 e3       	ldi	r24, 0x32	; 50
 942:	80 83       	st	Z, r24

}
 944:	cf 91       	pop	r28
 946:	df 91       	pop	r29
 948:	08 95       	ret

0000094a <vid_Timer2_vid_InitializePWM>:


#include "Timer2_interface.h"


void vid_Timer2_vid_InitializePWM (void)  {
 94a:	df 93       	push	r29
 94c:	cf 93       	push	r28
 94e:	cd b7       	in	r28, 0x3d	; 61
 950:	de b7       	in	r29, 0x3e	; 62

		TCCR2_REG=0b01100011 ;
 952:	e5 e4       	ldi	r30, 0x45	; 69
 954:	f0 e0       	ldi	r31, 0x00	; 0
 956:	83 e6       	ldi	r24, 0x63	; 99
 958:	80 83       	st	Z, r24

		OCR2_REG = 50 ;
 95a:	e3 e4       	ldi	r30, 0x43	; 67
 95c:	f0 e0       	ldi	r31, 0x00	; 0
 95e:	82 e3       	ldi	r24, 0x32	; 50
 960:	80 83       	st	Z, r24

}
 962:	cf 91       	pop	r28
 964:	df 91       	pop	r29
 966:	08 95       	ret

00000968 <main>:
 */

#include "STD_TYPES.h"


void main (void) {
 968:	df 93       	push	r29
 96a:	cf 93       	push	r28
 96c:	cd b7       	in	r28, 0x3d	; 61
 96e:	de b7       	in	r29, 0x3e	; 62

	vid_DIO_vid_SetDioDirections() ;
 970:	0e 94 ae 03 	call	0x75c	; 0x75c <vid_DIO_vid_SetDioDirections>
	vid_Timer0_vid_InitializePWM();
 974:	0e 94 96 04 	call	0x92c	; 0x92c <vid_Timer0_vid_InitializePWM>
	vid_Timer2_vid_InitializePWM() ;
 978:	0e 94 a5 04 	call	0x94a	; 0x94a <vid_Timer2_vid_InitializePWM>
	vid_ExtInt0_vid_InitializeExtInt();
 97c:	0e 94 4c 03 	call	0x698	; 0x698 <vid_ExtInt0_vid_InitializeExtInt>

	vid_DIO_vid_RobotForward();
 980:	0e 94 ef 03 	call	0x7de	; 0x7de <vid_DIO_vid_RobotForward>
 984:	ff cf       	rjmp	.-2      	; 0x984 <main+0x1c>

00000986 <_exit>:
 986:	f8 94       	cli

00000988 <__stop_program>:
 988:	ff cf       	rjmp	.-2      	; 0x988 <__stop_program>
