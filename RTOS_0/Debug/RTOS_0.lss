
RTOS_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000562e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  0000562e  000056c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a0  0080008a  0080008a  000056ec  2**0
                  ALLOC
  3 .stab         000076e0  00000000  00000000  000056ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000046a3  00000000  00000000  0000cdcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0001146f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000115af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0001171f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00013368  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00014253  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00015000  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00015160  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000153ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00015bbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e2       	ldi	r30, 0x2E	; 46
      68:	f6 e5       	ldi	r31, 0x56	; 86
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 32       	cpi	r26, 0x2A	; 42
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 51 28 	call	0x50a2	; 0x50a2 <main>
      8a:	0c 94 15 2b 	jmp	0x562a	; 0x562a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d0 29 	jmp	0x53a0	; 0x53a0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e7       	ldi	r26, 0x7C	; 124
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ec 29 	jmp	0x53d8	; 0x53d8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 dc 29 	jmp	0x53b8	; 0x53b8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f8 29 	jmp	0x53f0	; 0x53f0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 dc 29 	jmp	0x53b8	; 0x53b8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f8 29 	jmp	0x53f0	; 0x53f0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d0 29 	jmp	0x53a0	; 0x53a0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e7       	ldi	r24, 0x7C	; 124
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ec 29 	jmp	0x53d8	; 0x53d8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 dc 29 	jmp	0x53b8	; 0x53b8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f8 29 	jmp	0x53f0	; 0x53f0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 dc 29 	jmp	0x53b8	; 0x53b8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f8 29 	jmp	0x53f0	; 0x53f0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 dc 29 	jmp	0x53b8	; 0x53b8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f8 29 	jmp	0x53f0	; 0x53f0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e0 29 	jmp	0x53c0	; 0x53c0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fc 29 	jmp	0x53f8	; 0x53f8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <pvPortMalloc+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <pvPortMalloc+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9c 83       	std	Y+4, r25	; 0x04
     b54:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn;

	vTaskSuspendAll();
     b56:	0e 94 b2 1b 	call	0x3764	; 0x3764 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
     b5a:	8b 81       	ldd	r24, Y+3	; 0x03
     b5c:	9c 81       	ldd	r25, Y+4	; 0x04
     b5e:	0e 94 07 2a 	call	0x540e	; 0x540e <malloc>
     b62:	9a 83       	std	Y+2, r25	; 0x02
     b64:	89 83       	std	Y+1, r24	; 0x01
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     b66:	0e 94 be 1b 	call	0x377c	; 0x377c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	9a 81       	ldd	r25, Y+2	; 0x02
}
     b6e:	0f 90       	pop	r0
     b70:	0f 90       	pop	r0
     b72:	0f 90       	pop	r0
     b74:	0f 90       	pop	r0
     b76:	cf 91       	pop	r28
     b78:	df 91       	pop	r29
     b7a:	08 95       	ret

00000b7c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	00 d0       	rcall	.+0      	; 0xb82 <vPortFree+0x6>
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	9a 83       	std	Y+2, r25	; 0x02
     b88:	89 83       	std	Y+1, r24	; 0x01
	if( pv )
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	9a 81       	ldd	r25, Y+2	; 0x02
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	41 f0       	breq	.+16     	; 0xba2 <vPortFree+0x26>
	{
		vTaskSuspendAll();
     b92:	0e 94 b2 1b 	call	0x3764	; 0x3764 <vTaskSuspendAll>
		{
			free( pv );
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	9a 81       	ldd	r25, Y+2	; 0x02
     b9a:	0e 94 b4 2a 	call	0x5568	; 0x5568 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
     b9e:	0e 94 be 1b 	call	0x377c	; 0x377c <xTaskResumeAll>
	}
}
     ba2:	0f 90       	pop	r0
     ba4:	0f 90       	pop	r0
     ba6:	cf 91       	pop	r28
     ba8:	df 91       	pop	r29
     baa:	08 95       	ret

00000bac <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
     bac:	df 93       	push	r29
     bae:	cf 93       	push	r28
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
     bb4:	28 97       	sbiw	r28, 0x08	; 8
     bb6:	0f b6       	in	r0, 0x3f	; 63
     bb8:	f8 94       	cli
     bba:	de bf       	out	0x3e, r29	; 62
     bbc:	0f be       	out	0x3f, r0	; 63
     bbe:	cd bf       	out	0x3d, r28	; 61
     bc0:	9c 83       	std	Y+4, r25	; 0x04
     bc2:	8b 83       	std	Y+3, r24	; 0x03
     bc4:	7e 83       	std	Y+6, r23	; 0x06
     bc6:	6d 83       	std	Y+5, r22	; 0x05
     bc8:	58 87       	std	Y+8, r21	; 0x08
     bca:	4f 83       	std	Y+7, r20	; 0x07
uint16_t usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
     bcc:	eb 81       	ldd	r30, Y+3	; 0x03
     bce:	fc 81       	ldd	r31, Y+4	; 0x04
     bd0:	81 e1       	ldi	r24, 0x11	; 17
     bd2:	80 83       	st	Z, r24
	pxTopOfStack--;
     bd4:	8b 81       	ldd	r24, Y+3	; 0x03
     bd6:	9c 81       	ldd	r25, Y+4	; 0x04
     bd8:	01 97       	sbiw	r24, 0x01	; 1
     bda:	9c 83       	std	Y+4, r25	; 0x04
     bdc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
     bde:	eb 81       	ldd	r30, Y+3	; 0x03
     be0:	fc 81       	ldd	r31, Y+4	; 0x04
     be2:	82 e2       	ldi	r24, 0x22	; 34
     be4:	80 83       	st	Z, r24
	pxTopOfStack--;
     be6:	8b 81       	ldd	r24, Y+3	; 0x03
     be8:	9c 81       	ldd	r25, Y+4	; 0x04
     bea:	01 97       	sbiw	r24, 0x01	; 1
     bec:	9c 83       	std	Y+4, r25	; 0x04
     bee:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
     bf0:	eb 81       	ldd	r30, Y+3	; 0x03
     bf2:	fc 81       	ldd	r31, Y+4	; 0x04
     bf4:	83 e3       	ldi	r24, 0x33	; 51
     bf6:	80 83       	st	Z, r24
	pxTopOfStack--;
     bf8:	8b 81       	ldd	r24, Y+3	; 0x03
     bfa:	9c 81       	ldd	r25, Y+4	; 0x04
     bfc:	01 97       	sbiw	r24, 0x01	; 1
     bfe:	9c 83       	std	Y+4, r25	; 0x04
     c00:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( uint16_t ) pxCode;
     c02:	8d 81       	ldd	r24, Y+5	; 0x05
     c04:	9e 81       	ldd	r25, Y+6	; 0x06
     c06:	9a 83       	std	Y+2, r25	; 0x02
     c08:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	eb 81       	ldd	r30, Y+3	; 0x03
     c0e:	fc 81       	ldd	r31, Y+4	; 0x04
     c10:	80 83       	st	Z, r24
	pxTopOfStack--;
     c12:	8b 81       	ldd	r24, Y+3	; 0x03
     c14:	9c 81       	ldd	r25, Y+4	; 0x04
     c16:	01 97       	sbiw	r24, 0x01	; 1
     c18:	9c 83       	std	Y+4, r25	; 0x04
     c1a:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	9a 81       	ldd	r25, Y+2	; 0x02
     c20:	89 2f       	mov	r24, r25
     c22:	99 27       	eor	r25, r25
     c24:	9a 83       	std	Y+2, r25	; 0x02
     c26:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	eb 81       	ldd	r30, Y+3	; 0x03
     c2c:	fc 81       	ldd	r31, Y+4	; 0x04
     c2e:	80 83       	st	Z, r24
	pxTopOfStack--;
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	9c 81       	ldd	r25, Y+4	; 0x04
     c34:	01 97       	sbiw	r24, 0x01	; 1
     c36:	9c 83       	std	Y+4, r25	; 0x04
     c38:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
     c3a:	eb 81       	ldd	r30, Y+3	; 0x03
     c3c:	fc 81       	ldd	r31, Y+4	; 0x04
     c3e:	10 82       	st	Z, r1
	pxTopOfStack--;
     c40:	8b 81       	ldd	r24, Y+3	; 0x03
     c42:	9c 81       	ldd	r25, Y+4	; 0x04
     c44:	01 97       	sbiw	r24, 0x01	; 1
     c46:	9c 83       	std	Y+4, r25	; 0x04
     c48:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
     c4a:	eb 81       	ldd	r30, Y+3	; 0x03
     c4c:	fc 81       	ldd	r31, Y+4	; 0x04
     c4e:	80 e8       	ldi	r24, 0x80	; 128
     c50:	80 83       	st	Z, r24
	pxTopOfStack--;
     c52:	8b 81       	ldd	r24, Y+3	; 0x03
     c54:	9c 81       	ldd	r25, Y+4	; 0x04
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	9c 83       	std	Y+4, r25	; 0x04
     c5a:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
     c5c:	eb 81       	ldd	r30, Y+3	; 0x03
     c5e:	fc 81       	ldd	r31, Y+4	; 0x04
     c60:	10 82       	st	Z, r1
	pxTopOfStack--;
     c62:	8b 81       	ldd	r24, Y+3	; 0x03
     c64:	9c 81       	ldd	r25, Y+4	; 0x04
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	9c 83       	std	Y+4, r25	; 0x04
     c6a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
     c6c:	eb 81       	ldd	r30, Y+3	; 0x03
     c6e:	fc 81       	ldd	r31, Y+4	; 0x04
     c70:	82 e0       	ldi	r24, 0x02	; 2
     c72:	80 83       	st	Z, r24
	pxTopOfStack--;
     c74:	8b 81       	ldd	r24, Y+3	; 0x03
     c76:	9c 81       	ldd	r25, Y+4	; 0x04
     c78:	01 97       	sbiw	r24, 0x01	; 1
     c7a:	9c 83       	std	Y+4, r25	; 0x04
     c7c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
     c7e:	eb 81       	ldd	r30, Y+3	; 0x03
     c80:	fc 81       	ldd	r31, Y+4	; 0x04
     c82:	83 e0       	ldi	r24, 0x03	; 3
     c84:	80 83       	st	Z, r24
	pxTopOfStack--;
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	9c 81       	ldd	r25, Y+4	; 0x04
     c8a:	01 97       	sbiw	r24, 0x01	; 1
     c8c:	9c 83       	std	Y+4, r25	; 0x04
     c8e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
     c90:	eb 81       	ldd	r30, Y+3	; 0x03
     c92:	fc 81       	ldd	r31, Y+4	; 0x04
     c94:	84 e0       	ldi	r24, 0x04	; 4
     c96:	80 83       	st	Z, r24
	pxTopOfStack--;
     c98:	8b 81       	ldd	r24, Y+3	; 0x03
     c9a:	9c 81       	ldd	r25, Y+4	; 0x04
     c9c:	01 97       	sbiw	r24, 0x01	; 1
     c9e:	9c 83       	std	Y+4, r25	; 0x04
     ca0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
     ca2:	eb 81       	ldd	r30, Y+3	; 0x03
     ca4:	fc 81       	ldd	r31, Y+4	; 0x04
     ca6:	85 e0       	ldi	r24, 0x05	; 5
     ca8:	80 83       	st	Z, r24
	pxTopOfStack--;
     caa:	8b 81       	ldd	r24, Y+3	; 0x03
     cac:	9c 81       	ldd	r25, Y+4	; 0x04
     cae:	01 97       	sbiw	r24, 0x01	; 1
     cb0:	9c 83       	std	Y+4, r25	; 0x04
     cb2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
     cb4:	eb 81       	ldd	r30, Y+3	; 0x03
     cb6:	fc 81       	ldd	r31, Y+4	; 0x04
     cb8:	86 e0       	ldi	r24, 0x06	; 6
     cba:	80 83       	st	Z, r24
	pxTopOfStack--;
     cbc:	8b 81       	ldd	r24, Y+3	; 0x03
     cbe:	9c 81       	ldd	r25, Y+4	; 0x04
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	9c 83       	std	Y+4, r25	; 0x04
     cc4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
     cc6:	eb 81       	ldd	r30, Y+3	; 0x03
     cc8:	fc 81       	ldd	r31, Y+4	; 0x04
     cca:	87 e0       	ldi	r24, 0x07	; 7
     ccc:	80 83       	st	Z, r24
	pxTopOfStack--;
     cce:	8b 81       	ldd	r24, Y+3	; 0x03
     cd0:	9c 81       	ldd	r25, Y+4	; 0x04
     cd2:	01 97       	sbiw	r24, 0x01	; 1
     cd4:	9c 83       	std	Y+4, r25	; 0x04
     cd6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
     cd8:	eb 81       	ldd	r30, Y+3	; 0x03
     cda:	fc 81       	ldd	r31, Y+4	; 0x04
     cdc:	88 e0       	ldi	r24, 0x08	; 8
     cde:	80 83       	st	Z, r24
	pxTopOfStack--;
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	9c 81       	ldd	r25, Y+4	; 0x04
     ce4:	01 97       	sbiw	r24, 0x01	; 1
     ce6:	9c 83       	std	Y+4, r25	; 0x04
     ce8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
     cea:	eb 81       	ldd	r30, Y+3	; 0x03
     cec:	fc 81       	ldd	r31, Y+4	; 0x04
     cee:	89 e0       	ldi	r24, 0x09	; 9
     cf0:	80 83       	st	Z, r24
	pxTopOfStack--;
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	9c 81       	ldd	r25, Y+4	; 0x04
     cf6:	01 97       	sbiw	r24, 0x01	; 1
     cf8:	9c 83       	std	Y+4, r25	; 0x04
     cfa:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
     cfc:	eb 81       	ldd	r30, Y+3	; 0x03
     cfe:	fc 81       	ldd	r31, Y+4	; 0x04
     d00:	80 e1       	ldi	r24, 0x10	; 16
     d02:	80 83       	st	Z, r24
	pxTopOfStack--;
     d04:	8b 81       	ldd	r24, Y+3	; 0x03
     d06:	9c 81       	ldd	r25, Y+4	; 0x04
     d08:	01 97       	sbiw	r24, 0x01	; 1
     d0a:	9c 83       	std	Y+4, r25	; 0x04
     d0c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
     d0e:	eb 81       	ldd	r30, Y+3	; 0x03
     d10:	fc 81       	ldd	r31, Y+4	; 0x04
     d12:	81 e1       	ldi	r24, 0x11	; 17
     d14:	80 83       	st	Z, r24
	pxTopOfStack--;
     d16:	8b 81       	ldd	r24, Y+3	; 0x03
     d18:	9c 81       	ldd	r25, Y+4	; 0x04
     d1a:	01 97       	sbiw	r24, 0x01	; 1
     d1c:	9c 83       	std	Y+4, r25	; 0x04
     d1e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
     d20:	eb 81       	ldd	r30, Y+3	; 0x03
     d22:	fc 81       	ldd	r31, Y+4	; 0x04
     d24:	82 e1       	ldi	r24, 0x12	; 18
     d26:	80 83       	st	Z, r24
	pxTopOfStack--;
     d28:	8b 81       	ldd	r24, Y+3	; 0x03
     d2a:	9c 81       	ldd	r25, Y+4	; 0x04
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	9c 83       	std	Y+4, r25	; 0x04
     d30:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
     d32:	eb 81       	ldd	r30, Y+3	; 0x03
     d34:	fc 81       	ldd	r31, Y+4	; 0x04
     d36:	83 e1       	ldi	r24, 0x13	; 19
     d38:	80 83       	st	Z, r24
	pxTopOfStack--;
     d3a:	8b 81       	ldd	r24, Y+3	; 0x03
     d3c:	9c 81       	ldd	r25, Y+4	; 0x04
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	9c 83       	std	Y+4, r25	; 0x04
     d42:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
     d44:	eb 81       	ldd	r30, Y+3	; 0x03
     d46:	fc 81       	ldd	r31, Y+4	; 0x04
     d48:	84 e1       	ldi	r24, 0x14	; 20
     d4a:	80 83       	st	Z, r24
	pxTopOfStack--;
     d4c:	8b 81       	ldd	r24, Y+3	; 0x03
     d4e:	9c 81       	ldd	r25, Y+4	; 0x04
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	9c 83       	std	Y+4, r25	; 0x04
     d54:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
     d56:	eb 81       	ldd	r30, Y+3	; 0x03
     d58:	fc 81       	ldd	r31, Y+4	; 0x04
     d5a:	85 e1       	ldi	r24, 0x15	; 21
     d5c:	80 83       	st	Z, r24
	pxTopOfStack--;
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	9c 81       	ldd	r25, Y+4	; 0x04
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	9c 83       	std	Y+4, r25	; 0x04
     d66:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
     d68:	eb 81       	ldd	r30, Y+3	; 0x03
     d6a:	fc 81       	ldd	r31, Y+4	; 0x04
     d6c:	86 e1       	ldi	r24, 0x16	; 22
     d6e:	80 83       	st	Z, r24
	pxTopOfStack--;
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	9c 81       	ldd	r25, Y+4	; 0x04
     d74:	01 97       	sbiw	r24, 0x01	; 1
     d76:	9c 83       	std	Y+4, r25	; 0x04
     d78:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
     d7a:	eb 81       	ldd	r30, Y+3	; 0x03
     d7c:	fc 81       	ldd	r31, Y+4	; 0x04
     d7e:	87 e1       	ldi	r24, 0x17	; 23
     d80:	80 83       	st	Z, r24
	pxTopOfStack--;
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	9c 81       	ldd	r25, Y+4	; 0x04
     d86:	01 97       	sbiw	r24, 0x01	; 1
     d88:	9c 83       	std	Y+4, r25	; 0x04
     d8a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
     d8c:	eb 81       	ldd	r30, Y+3	; 0x03
     d8e:	fc 81       	ldd	r31, Y+4	; 0x04
     d90:	88 e1       	ldi	r24, 0x18	; 24
     d92:	80 83       	st	Z, r24
	pxTopOfStack--;
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	9c 81       	ldd	r25, Y+4	; 0x04
     d98:	01 97       	sbiw	r24, 0x01	; 1
     d9a:	9c 83       	std	Y+4, r25	; 0x04
     d9c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
     d9e:	eb 81       	ldd	r30, Y+3	; 0x03
     da0:	fc 81       	ldd	r31, Y+4	; 0x04
     da2:	89 e1       	ldi	r24, 0x19	; 25
     da4:	80 83       	st	Z, r24
	pxTopOfStack--;
     da6:	8b 81       	ldd	r24, Y+3	; 0x03
     da8:	9c 81       	ldd	r25, Y+4	; 0x04
     daa:	01 97       	sbiw	r24, 0x01	; 1
     dac:	9c 83       	std	Y+4, r25	; 0x04
     dae:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
     db0:	eb 81       	ldd	r30, Y+3	; 0x03
     db2:	fc 81       	ldd	r31, Y+4	; 0x04
     db4:	80 e2       	ldi	r24, 0x20	; 32
     db6:	80 83       	st	Z, r24
	pxTopOfStack--;
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	9c 81       	ldd	r25, Y+4	; 0x04
     dbc:	01 97       	sbiw	r24, 0x01	; 1
     dbe:	9c 83       	std	Y+4, r25	; 0x04
     dc0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
     dc2:	eb 81       	ldd	r30, Y+3	; 0x03
     dc4:	fc 81       	ldd	r31, Y+4	; 0x04
     dc6:	81 e2       	ldi	r24, 0x21	; 33
     dc8:	80 83       	st	Z, r24
	pxTopOfStack--;
     dca:	8b 81       	ldd	r24, Y+3	; 0x03
     dcc:	9c 81       	ldd	r25, Y+4	; 0x04
     dce:	01 97       	sbiw	r24, 0x01	; 1
     dd0:	9c 83       	std	Y+4, r25	; 0x04
     dd2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
     dd4:	eb 81       	ldd	r30, Y+3	; 0x03
     dd6:	fc 81       	ldd	r31, Y+4	; 0x04
     dd8:	82 e2       	ldi	r24, 0x22	; 34
     dda:	80 83       	st	Z, r24
	pxTopOfStack--;
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	9c 81       	ldd	r25, Y+4	; 0x04
     de0:	01 97       	sbiw	r24, 0x01	; 1
     de2:	9c 83       	std	Y+4, r25	; 0x04
     de4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
     de6:	eb 81       	ldd	r30, Y+3	; 0x03
     de8:	fc 81       	ldd	r31, Y+4	; 0x04
     dea:	83 e2       	ldi	r24, 0x23	; 35
     dec:	80 83       	st	Z, r24
	pxTopOfStack--;
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	9c 81       	ldd	r25, Y+4	; 0x04
     df2:	01 97       	sbiw	r24, 0x01	; 1
     df4:	9c 83       	std	Y+4, r25	; 0x04
     df6:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( uint16_t ) pvParameters;
     df8:	8f 81       	ldd	r24, Y+7	; 0x07
     dfa:	98 85       	ldd	r25, Y+8	; 0x08
     dfc:	9a 83       	std	Y+2, r25	; 0x02
     dfe:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	eb 81       	ldd	r30, Y+3	; 0x03
     e04:	fc 81       	ldd	r31, Y+4	; 0x04
     e06:	80 83       	st	Z, r24
	pxTopOfStack--;
     e08:	8b 81       	ldd	r24, Y+3	; 0x03
     e0a:	9c 81       	ldd	r25, Y+4	; 0x04
     e0c:	01 97       	sbiw	r24, 0x01	; 1
     e0e:	9c 83       	std	Y+4, r25	; 0x04
     e10:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	9a 81       	ldd	r25, Y+2	; 0x02
     e16:	89 2f       	mov	r24, r25
     e18:	99 27       	eor	r25, r25
     e1a:	9a 83       	std	Y+2, r25	; 0x02
     e1c:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	eb 81       	ldd	r30, Y+3	; 0x03
     e22:	fc 81       	ldd	r31, Y+4	; 0x04
     e24:	80 83       	st	Z, r24
	pxTopOfStack--;
     e26:	8b 81       	ldd	r24, Y+3	; 0x03
     e28:	9c 81       	ldd	r25, Y+4	; 0x04
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	9c 83       	std	Y+4, r25	; 0x04
     e2e:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
     e30:	eb 81       	ldd	r30, Y+3	; 0x03
     e32:	fc 81       	ldd	r31, Y+4	; 0x04
     e34:	86 e2       	ldi	r24, 0x26	; 38
     e36:	80 83       	st	Z, r24
	pxTopOfStack--;
     e38:	8b 81       	ldd	r24, Y+3	; 0x03
     e3a:	9c 81       	ldd	r25, Y+4	; 0x04
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	9c 83       	std	Y+4, r25	; 0x04
     e40:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
     e42:	eb 81       	ldd	r30, Y+3	; 0x03
     e44:	fc 81       	ldd	r31, Y+4	; 0x04
     e46:	87 e2       	ldi	r24, 0x27	; 39
     e48:	80 83       	st	Z, r24
	pxTopOfStack--;
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	9c 81       	ldd	r25, Y+4	; 0x04
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	9c 83       	std	Y+4, r25	; 0x04
     e52:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
     e54:	eb 81       	ldd	r30, Y+3	; 0x03
     e56:	fc 81       	ldd	r31, Y+4	; 0x04
     e58:	88 e2       	ldi	r24, 0x28	; 40
     e5a:	80 83       	st	Z, r24
	pxTopOfStack--;
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	9c 81       	ldd	r25, Y+4	; 0x04
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	9c 83       	std	Y+4, r25	; 0x04
     e64:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
     e66:	eb 81       	ldd	r30, Y+3	; 0x03
     e68:	fc 81       	ldd	r31, Y+4	; 0x04
     e6a:	89 e2       	ldi	r24, 0x29	; 41
     e6c:	80 83       	st	Z, r24
	pxTopOfStack--;
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	9c 81       	ldd	r25, Y+4	; 0x04
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	9c 83       	std	Y+4, r25	; 0x04
     e76:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
     e78:	eb 81       	ldd	r30, Y+3	; 0x03
     e7a:	fc 81       	ldd	r31, Y+4	; 0x04
     e7c:	80 e3       	ldi	r24, 0x30	; 48
     e7e:	80 83       	st	Z, r24
	pxTopOfStack--;
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	9c 81       	ldd	r25, Y+4	; 0x04
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	9c 83       	std	Y+4, r25	; 0x04
     e88:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
     e8a:	eb 81       	ldd	r30, Y+3	; 0x03
     e8c:	fc 81       	ldd	r31, Y+4	; 0x04
     e8e:	81 e3       	ldi	r24, 0x31	; 49
     e90:	80 83       	st	Z, r24
	pxTopOfStack--;
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	9c 81       	ldd	r25, Y+4	; 0x04
     e96:	01 97       	sbiw	r24, 0x01	; 1
     e98:	9c 83       	std	Y+4, r25	; 0x04
     e9a:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	9c 81       	ldd	r25, Y+4	; 0x04
}
     ea0:	28 96       	adiw	r28, 0x08	; 8
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	de bf       	out	0x3e, r29	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	cd bf       	out	0x3d, r28	; 61
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	08 95       	ret

00000eb2 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void )
{
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
     eba:	0e 94 4b 08 	call	0x1096	; 0x1096 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
     ebe:	a0 91 c4 00 	lds	r26, 0x00C4
     ec2:	b0 91 c5 00 	lds	r27, 0x00C5
     ec6:	cd 91       	ld	r28, X+
     ec8:	cd bf       	out	0x3d, r28	; 61
     eca:	dd 91       	ld	r29, X+
     ecc:	de bf       	out	0x3e, r29	; 62
     ece:	ff 91       	pop	r31
     ed0:	ef 91       	pop	r30
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	bf 91       	pop	r27
     ed8:	af 91       	pop	r26
     eda:	9f 91       	pop	r25
     edc:	8f 91       	pop	r24
     ede:	7f 91       	pop	r23
     ee0:	6f 91       	pop	r22
     ee2:	5f 91       	pop	r21
     ee4:	4f 91       	pop	r20
     ee6:	3f 91       	pop	r19
     ee8:	2f 91       	pop	r18
     eea:	1f 91       	pop	r17
     eec:	0f 91       	pop	r16
     eee:	ff 90       	pop	r15
     ef0:	ef 90       	pop	r14
     ef2:	df 90       	pop	r13
     ef4:	cf 90       	pop	r12
     ef6:	bf 90       	pop	r11
     ef8:	af 90       	pop	r10
     efa:	9f 90       	pop	r9
     efc:	8f 90       	pop	r8
     efe:	7f 90       	pop	r7
     f00:	6f 90       	pop	r6
     f02:	5f 90       	pop	r5
     f04:	4f 90       	pop	r4
     f06:	3f 90       	pop	r3
     f08:	2f 90       	pop	r2
     f0a:	1f 90       	pop	r1
     f0c:	0f 90       	pop	r0
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
     f12:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
     f14:	81 e0       	ldi	r24, 0x01	; 1
}
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	08 95       	ret

00000f1c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     f2a:	0f 92       	push	r0
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	f8 94       	cli
     f30:	0f 92       	push	r0
     f32:	1f 92       	push	r1
     f34:	11 24       	eor	r1, r1
     f36:	2f 92       	push	r2
     f38:	3f 92       	push	r3
     f3a:	4f 92       	push	r4
     f3c:	5f 92       	push	r5
     f3e:	6f 92       	push	r6
     f40:	7f 92       	push	r7
     f42:	8f 92       	push	r8
     f44:	9f 92       	push	r9
     f46:	af 92       	push	r10
     f48:	bf 92       	push	r11
     f4a:	cf 92       	push	r12
     f4c:	df 92       	push	r13
     f4e:	ef 92       	push	r14
     f50:	ff 92       	push	r15
     f52:	0f 93       	push	r16
     f54:	1f 93       	push	r17
     f56:	2f 93       	push	r18
     f58:	3f 93       	push	r19
     f5a:	4f 93       	push	r20
     f5c:	5f 93       	push	r21
     f5e:	6f 93       	push	r22
     f60:	7f 93       	push	r23
     f62:	8f 93       	push	r24
     f64:	9f 93       	push	r25
     f66:	af 93       	push	r26
     f68:	bf 93       	push	r27
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
     f6e:	ef 93       	push	r30
     f70:	ff 93       	push	r31
     f72:	a0 91 c4 00 	lds	r26, 0x00C4
     f76:	b0 91 c5 00 	lds	r27, 0x00C5
     f7a:	0d b6       	in	r0, 0x3d	; 61
     f7c:	0d 92       	st	X+, r0
     f7e:	0e b6       	in	r0, 0x3e	; 62
     f80:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     f82:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     f86:	a0 91 c4 00 	lds	r26, 0x00C4
     f8a:	b0 91 c5 00 	lds	r27, 0x00C5
     f8e:	cd 91       	ld	r28, X+
     f90:	cd bf       	out	0x3d, r28	; 61
     f92:	dd 91       	ld	r29, X+
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	ff 91       	pop	r31
     f98:	ef 91       	pop	r30
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
     f9e:	bf 91       	pop	r27
     fa0:	af 91       	pop	r26
     fa2:	9f 91       	pop	r25
     fa4:	8f 91       	pop	r24
     fa6:	7f 91       	pop	r23
     fa8:	6f 91       	pop	r22
     faa:	5f 91       	pop	r21
     fac:	4f 91       	pop	r20
     fae:	3f 91       	pop	r19
     fb0:	2f 91       	pop	r18
     fb2:	1f 91       	pop	r17
     fb4:	0f 91       	pop	r16
     fb6:	ff 90       	pop	r15
     fb8:	ef 90       	pop	r14
     fba:	df 90       	pop	r13
     fbc:	cf 90       	pop	r12
     fbe:	bf 90       	pop	r11
     fc0:	af 90       	pop	r10
     fc2:	9f 90       	pop	r9
     fc4:	8f 90       	pop	r8
     fc6:	7f 90       	pop	r7
     fc8:	6f 90       	pop	r6
     fca:	5f 90       	pop	r5
     fcc:	4f 90       	pop	r4
     fce:	3f 90       	pop	r3
     fd0:	2f 90       	pop	r2
     fd2:	1f 90       	pop	r1
     fd4:	0f 90       	pop	r0
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	0f 90       	pop	r0

	asm volatile ( "ret" );
     fda:	08 95       	ret

00000fdc <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     fdc:	0f 92       	push	r0
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	0f 92       	push	r0
     fe4:	1f 92       	push	r1
     fe6:	11 24       	eor	r1, r1
     fe8:	2f 92       	push	r2
     fea:	3f 92       	push	r3
     fec:	4f 92       	push	r4
     fee:	5f 92       	push	r5
     ff0:	6f 92       	push	r6
     ff2:	7f 92       	push	r7
     ff4:	8f 92       	push	r8
     ff6:	9f 92       	push	r9
     ff8:	af 92       	push	r10
     ffa:	bf 92       	push	r11
     ffc:	cf 92       	push	r12
     ffe:	df 92       	push	r13
    1000:	ef 92       	push	r14
    1002:	ff 92       	push	r15
    1004:	0f 93       	push	r16
    1006:	1f 93       	push	r17
    1008:	2f 93       	push	r18
    100a:	3f 93       	push	r19
    100c:	4f 93       	push	r20
    100e:	5f 93       	push	r21
    1010:	6f 93       	push	r22
    1012:	7f 93       	push	r23
    1014:	8f 93       	push	r24
    1016:	9f 93       	push	r25
    1018:	af 93       	push	r26
    101a:	bf 93       	push	r27
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	ef 93       	push	r30
    1022:	ff 93       	push	r31
    1024:	a0 91 c4 00 	lds	r26, 0x00C4
    1028:	b0 91 c5 00 	lds	r27, 0x00C5
    102c:	0d b6       	in	r0, 0x3d	; 61
    102e:	0d 92       	st	X+, r0
    1030:	0e b6       	in	r0, 0x3e	; 62
    1032:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    1034:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <xTaskIncrementTick>
    1038:	88 23       	and	r24, r24
    103a:	11 f0       	breq	.+4      	; 0x1040 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    103c:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    1040:	a0 91 c4 00 	lds	r26, 0x00C4
    1044:	b0 91 c5 00 	lds	r27, 0x00C5
    1048:	cd 91       	ld	r28, X+
    104a:	cd bf       	out	0x3d, r28	; 61
    104c:	dd 91       	ld	r29, X+
    104e:	de bf       	out	0x3e, r29	; 62
    1050:	ff 91       	pop	r31
    1052:	ef 91       	pop	r30
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	bf 91       	pop	r27
    105a:	af 91       	pop	r26
    105c:	9f 91       	pop	r25
    105e:	8f 91       	pop	r24
    1060:	7f 91       	pop	r23
    1062:	6f 91       	pop	r22
    1064:	5f 91       	pop	r21
    1066:	4f 91       	pop	r20
    1068:	3f 91       	pop	r19
    106a:	2f 91       	pop	r18
    106c:	1f 91       	pop	r17
    106e:	0f 91       	pop	r16
    1070:	ff 90       	pop	r15
    1072:	ef 90       	pop	r14
    1074:	df 90       	pop	r13
    1076:	cf 90       	pop	r12
    1078:	bf 90       	pop	r11
    107a:	af 90       	pop	r10
    107c:	9f 90       	pop	r9
    107e:	8f 90       	pop	r8
    1080:	7f 90       	pop	r7
    1082:	6f 90       	pop	r6
    1084:	5f 90       	pop	r5
    1086:	4f 90       	pop	r4
    1088:	3f 90       	pop	r3
    108a:	2f 90       	pop	r2
    108c:	1f 90       	pop	r1
    108e:	0f 90       	pop	r0
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1094:	08 95       	ret

00001096 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    1096:	df 93       	push	r29
    1098:	cf 93       	push	r28
    109a:	00 d0       	rcall	.+0      	; 0x109c <prvSetupTimerInterrupt+0x6>
    109c:	00 d0       	rcall	.+0      	; 0x109e <prvSetupTimerInterrupt+0x8>
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <prvSetupTimerInterrupt+0xa>
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    10a4:	80 e4       	ldi	r24, 0x40	; 64
    10a6:	9f e1       	ldi	r25, 0x1F	; 31
    10a8:	a0 e0       	ldi	r26, 0x00	; 0
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	8b 83       	std	Y+3, r24	; 0x03
    10ae:	9c 83       	std	Y+4, r25	; 0x04
    10b0:	ad 83       	std	Y+5, r26	; 0x05
    10b2:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	9c 81       	ldd	r25, Y+4	; 0x04
    10b8:	ad 81       	ldd	r26, Y+5	; 0x05
    10ba:	be 81       	ldd	r27, Y+6	; 0x06
    10bc:	68 94       	set
    10be:	15 f8       	bld	r1, 5
    10c0:	b6 95       	lsr	r27
    10c2:	a7 95       	ror	r26
    10c4:	97 95       	ror	r25
    10c6:	87 95       	ror	r24
    10c8:	16 94       	lsr	r1
    10ca:	d1 f7       	brne	.-12     	; 0x10c0 <prvSetupTimerInterrupt+0x2a>
    10cc:	8b 83       	std	Y+3, r24	; 0x03
    10ce:	9c 83       	std	Y+4, r25	; 0x04
    10d0:	ad 83       	std	Y+5, r26	; 0x05
    10d2:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	9c 81       	ldd	r25, Y+4	; 0x04
    10d8:	ad 81       	ldd	r26, Y+5	; 0x05
    10da:	be 81       	ldd	r27, Y+6	; 0x06
    10dc:	01 97       	sbiw	r24, 0x01	; 1
    10de:	a1 09       	sbc	r26, r1
    10e0:	b1 09       	sbc	r27, r1
    10e2:	8b 83       	std	Y+3, r24	; 0x03
    10e4:	9c 83       	std	Y+4, r25	; 0x04
    10e6:	ad 83       	std	Y+5, r26	; 0x05
    10e8:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	9c 81       	ldd	r25, Y+4	; 0x04
    10f2:	ad 81       	ldd	r26, Y+5	; 0x05
    10f4:	be 81       	ldd	r27, Y+6	; 0x06
    10f6:	89 2f       	mov	r24, r25
    10f8:	9a 2f       	mov	r25, r26
    10fa:	ab 2f       	mov	r26, r27
    10fc:	bb 27       	eor	r27, r27
    10fe:	8b 83       	std	Y+3, r24	; 0x03
    1100:	9c 83       	std	Y+4, r25	; 0x04
    1102:	ad 83       	std	Y+5, r26	; 0x05
    1104:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    110a:	eb e4       	ldi	r30, 0x4B	; 75
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    1112:	ea e4       	ldi	r30, 0x4A	; 74
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    111a:	8b e0       	ldi	r24, 0x0B	; 11
    111c:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    111e:	ee e4       	ldi	r30, 0x4E	; 78
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    1126:	e9 e5       	ldi	r30, 0x59	; 89
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	80 61       	ori	r24, 0x10	; 16
    1132:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    1134:	e9 e5       	ldi	r30, 0x59	; 89
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	80 83       	st	Z, r24
}
    113c:	26 96       	adiw	r28, 0x06	; 6
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    114e:	0e 94 ee 07 	call	0xfdc	; 0xfdc <vPortYieldFromTick>
		asm volatile ( "reti" );
    1152:	18 95       	reti

00001154 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

BaseType_t xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, UBaseType_t uxPriority, UBaseType_t uxIndex )
{
    1154:	df 93       	push	r29
    1156:	cf 93       	push	r28
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	27 97       	sbiw	r28, 0x07	; 7
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	cd bf       	out	0x3d, r28	; 61
    1168:	9d 83       	std	Y+5, r25	; 0x05
    116a:	8c 83       	std	Y+4, r24	; 0x04
    116c:	6e 83       	std	Y+6, r22	; 0x06
    116e:	4f 83       	std	Y+7, r20	; 0x07
BaseType_t xReturn;
CRCB_t *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );
    1170:	8a e1       	ldi	r24, 0x1A	; 26
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	0e 94 a3 05 	call	0xb46	; 0xb46 <pvPortMalloc>
    1178:	9a 83       	std	Y+2, r25	; 0x02
    117a:	89 83       	std	Y+1, r24	; 0x01
	if( pxCoRoutine )
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	9a 81       	ldd	r25, Y+2	; 0x02
    1180:	00 97       	sbiw	r24, 0x00	; 0
    1182:	09 f4       	brne	.+2      	; 0x1186 <xCoRoutineCreate+0x32>
    1184:	6f c0       	rjmp	.+222    	; 0x1264 <xCoRoutineCreate+0x110>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    1186:	80 91 8a 00 	lds	r24, 0x008A
    118a:	90 91 8b 00 	lds	r25, 0x008B
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	41 f4       	brne	.+16     	; 0x11a2 <xCoRoutineCreate+0x4e>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	9a 81       	ldd	r25, Y+2	; 0x02
    1196:	90 93 8b 00 	sts	0x008B, r25
    119a:	80 93 8a 00 	sts	0x008A, r24
			prvInitialiseCoRoutineLists();
    119e:	0e 94 11 0b 	call	0x1622	; 0x1622 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    11a2:	8e 81       	ldd	r24, Y+6	; 0x06
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	10 f0       	brcs	.+4      	; 0x11ac <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	8e 83       	std	Y+6, r24	; 0x06
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    11ac:	e9 81       	ldd	r30, Y+1	; 0x01
    11ae:	fa 81       	ldd	r31, Y+2	; 0x02
    11b0:	11 8e       	std	Z+25, r1	; 0x19
    11b2:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
    11b4:	e9 81       	ldd	r30, Y+1	; 0x01
    11b6:	fa 81       	ldd	r31, Y+2	; 0x02
    11b8:	8e 81       	ldd	r24, Y+6	; 0x06
    11ba:	86 8b       	std	Z+22, r24	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
    11bc:	e9 81       	ldd	r30, Y+1	; 0x01
    11be:	fa 81       	ldd	r31, Y+2	; 0x02
    11c0:	8f 81       	ldd	r24, Y+7	; 0x07
    11c2:	87 8b       	std	Z+23, r24	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    11c4:	e9 81       	ldd	r30, Y+1	; 0x01
    11c6:	fa 81       	ldd	r31, Y+2	; 0x02
    11c8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ca:	9d 81       	ldd	r25, Y+5	; 0x05
    11cc:	91 83       	std	Z+1, r25	; 0x01
    11ce:	80 83       	st	Z, r24

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	9a 81       	ldd	r25, Y+2	; 0x02
    11d4:	02 96       	adiw	r24, 0x02	; 2
    11d6:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	9a 81       	ldd	r25, Y+2	; 0x02
    11de:	0c 96       	adiw	r24, 0x0c	; 12
    11e0:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the ListItem_t.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    11e4:	e9 81       	ldd	r30, Y+1	; 0x01
    11e6:	fa 81       	ldd	r31, Y+2	; 0x02
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	9a 81       	ldd	r25, Y+2	; 0x02
    11ec:	91 87       	std	Z+9, r25	; 0x09
    11ee:	80 87       	std	Z+8, r24	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    11f0:	e9 81       	ldd	r30, Y+1	; 0x01
    11f2:	fa 81       	ldd	r31, Y+2	; 0x02
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	9a 81       	ldd	r25, Y+2	; 0x02
    11f8:	93 8b       	std	Z+19, r25	; 0x13
    11fa:	82 8b       	std	Z+18, r24	; 0x12

		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );
    11fc:	8e 81       	ldd	r24, Y+6	; 0x06
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	82 e0       	ldi	r24, 0x02	; 2
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	82 1b       	sub	r24, r18
    1208:	93 0b       	sbc	r25, r19
    120a:	e9 81       	ldd	r30, Y+1	; 0x01
    120c:	fa 81       	ldd	r31, Y+2	; 0x02
    120e:	95 87       	std	Z+13, r25	; 0x0d
    1210:	84 87       	std	Z+12, r24	; 0x0c

		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    1212:	e9 81       	ldd	r30, Y+1	; 0x01
    1214:	fa 81       	ldd	r31, Y+2	; 0x02
    1216:	96 89       	ldd	r25, Z+22	; 0x16
    1218:	80 91 8c 00 	lds	r24, 0x008C
    121c:	89 17       	cp	r24, r25
    121e:	28 f4       	brcc	.+10     	; 0x122a <xCoRoutineCreate+0xd6>
    1220:	e9 81       	ldd	r30, Y+1	; 0x01
    1222:	fa 81       	ldd	r31, Y+2	; 0x02
    1224:	86 89       	ldd	r24, Z+22	; 0x16
    1226:	80 93 8c 00 	sts	0x008C, r24
    122a:	e9 81       	ldd	r30, Y+1	; 0x01
    122c:	fa 81       	ldd	r31, Y+2	; 0x02
    122e:	86 89       	ldd	r24, Z+22	; 0x16
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	c9 01       	movw	r24, r18
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	82 0f       	add	r24, r18
    1244:	93 1f       	adc	r25, r19
    1246:	ac 01       	movw	r20, r24
    1248:	4d 56       	subi	r20, 0x6D	; 109
    124a:	5f 4f       	sbci	r21, 0xFF	; 255
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	9a 81       	ldd	r25, Y+2	; 0x02
    1250:	9c 01       	movw	r18, r24
    1252:	2e 5f       	subi	r18, 0xFE	; 254
    1254:	3f 4f       	sbci	r19, 0xFF	; 255
    1256:	ca 01       	movw	r24, r20
    1258:	b9 01       	movw	r22, r18
    125a:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <vListInsertEnd>

		xReturn = pdPASS;
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	8b 83       	std	Y+3, r24	; 0x03
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <xCoRoutineCreate+0x114>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1264:	8f ef       	ldi	r24, 0xFF	; 255
    1266:	8b 83       	std	Y+3, r24	; 0x03
	}

	return xReturn;
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
}
    126a:	27 96       	adiw	r28, 0x07	; 7
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	f8 94       	cli
    1270:	de bf       	out	0x3e, r29	; 62
    1272:	0f be       	out	0x3f, r0	; 63
    1274:	cd bf       	out	0x3d, r28	; 61
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay, List_t *pxEventList )
{
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	00 d0       	rcall	.+0      	; 0x1282 <vCoRoutineAddToDelayedList+0x6>
    1282:	00 d0       	rcall	.+0      	; 0x1284 <vCoRoutineAddToDelayedList+0x8>
    1284:	00 d0       	rcall	.+0      	; 0x1286 <vCoRoutineAddToDelayedList+0xa>
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	9c 83       	std	Y+4, r25	; 0x04
    128c:	8b 83       	std	Y+3, r24	; 0x03
    128e:	7e 83       	std	Y+6, r23	; 0x06
    1290:	6d 83       	std	Y+5, r22	; 0x05
TickType_t xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    1292:	20 91 8d 00 	lds	r18, 0x008D
    1296:	30 91 8e 00 	lds	r19, 0x008E
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	9c 81       	ldd	r25, Y+4	; 0x04
    129e:	82 0f       	add	r24, r18
    12a0:	93 1f       	adc	r25, r19
    12a2:	9a 83       	std	Y+2, r25	; 0x02
    12a4:	89 83       	std	Y+1, r24	; 0x01

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    12a6:	80 91 8a 00 	lds	r24, 0x008A
    12aa:	90 91 8b 00 	lds	r25, 0x008B
    12ae:	02 96       	adiw	r24, 0x02	; 2
    12b0:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <uxListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    12b4:	e0 91 8a 00 	lds	r30, 0x008A
    12b8:	f0 91 8b 00 	lds	r31, 0x008B
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	9a 81       	ldd	r25, Y+2	; 0x02
    12c0:	93 83       	std	Z+3, r25	; 0x03
    12c2:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
    12c4:	20 91 8d 00 	lds	r18, 0x008D
    12c8:	30 91 8e 00 	lds	r19, 0x008E
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	9a 81       	ldd	r25, Y+2	; 0x02
    12d0:	82 17       	cp	r24, r18
    12d2:	93 07       	cpc	r25, r19
    12d4:	70 f4       	brcc	.+28     	; 0x12f2 <vCoRoutineAddToDelayedList+0x76>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( List_t * ) pxOverflowDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    12d6:	80 91 b9 00 	lds	r24, 0x00B9
    12da:	90 91 ba 00 	lds	r25, 0x00BA
    12de:	20 91 8a 00 	lds	r18, 0x008A
    12e2:	30 91 8b 00 	lds	r19, 0x008B
    12e6:	2e 5f       	subi	r18, 0xFE	; 254
    12e8:	3f 4f       	sbci	r19, 0xFF	; 255
    12ea:	b9 01       	movw	r22, r18
    12ec:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <vListInsert>
    12f0:	0d c0       	rjmp	.+26     	; 0x130c <vCoRoutineAddToDelayedList+0x90>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    12f2:	80 91 b7 00 	lds	r24, 0x00B7
    12f6:	90 91 b8 00 	lds	r25, 0x00B8
    12fa:	20 91 8a 00 	lds	r18, 0x008A
    12fe:	30 91 8b 00 	lds	r19, 0x008B
    1302:	2e 5f       	subi	r18, 0xFE	; 254
    1304:	3f 4f       	sbci	r19, 0xFF	; 255
    1306:	b9 01       	movw	r22, r18
    1308:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <vListInsert>
	}

	if( pxEventList )
    130c:	8d 81       	ldd	r24, Y+5	; 0x05
    130e:	9e 81       	ldd	r25, Y+6	; 0x06
    1310:	00 97       	sbiw	r24, 0x00	; 0
    1312:	61 f0       	breq	.+24     	; 0x132c <vCoRoutineAddToDelayedList+0xb0>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    1314:	80 91 8a 00 	lds	r24, 0x008A
    1318:	90 91 8b 00 	lds	r25, 0x008B
    131c:	9c 01       	movw	r18, r24
    131e:	24 5f       	subi	r18, 0xF4	; 244
    1320:	3f 4f       	sbci	r19, 0xFF	; 255
    1322:	8d 81       	ldd	r24, Y+5	; 0x05
    1324:	9e 81       	ldd	r25, Y+6	; 0x06
    1326:	b9 01       	movw	r22, r18
    1328:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <vListInsert>
	}
}
    132c:	26 96       	adiw	r28, 0x06	; 6
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	de bf       	out	0x3e, r29	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	cd bf       	out	0x3d, r28	; 61
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	00 d0       	rcall	.+0      	; 0x1344 <prvCheckPendingReadyList+0x6>
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	3a c0       	rjmp	.+116    	; 0x13be <prvCheckPendingReadyList+0x80>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		CRCB_t *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    134a:	f8 94       	cli
		{
			pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );
    134c:	e0 91 c0 00 	lds	r30, 0x00C0
    1350:	f0 91 c1 00 	lds	r31, 0x00C1
    1354:	86 81       	ldd	r24, Z+6	; 0x06
    1356:	97 81       	ldd	r25, Z+7	; 0x07
    1358:	9a 83       	std	Y+2, r25	; 0x02
    135a:	89 83       	std	Y+1, r24	; 0x01
			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	9a 81       	ldd	r25, Y+2	; 0x02
    1360:	0c 96       	adiw	r24, 0x0c	; 12
    1362:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <uxListRemove>
		}
		portENABLE_INTERRUPTS();
    1366:	78 94       	sei

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	9a 81       	ldd	r25, Y+2	; 0x02
    136c:	02 96       	adiw	r24, 0x02	; 2
    136e:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <uxListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
    1372:	e9 81       	ldd	r30, Y+1	; 0x01
    1374:	fa 81       	ldd	r31, Y+2	; 0x02
    1376:	96 89       	ldd	r25, Z+22	; 0x16
    1378:	80 91 8c 00 	lds	r24, 0x008C
    137c:	89 17       	cp	r24, r25
    137e:	28 f4       	brcc	.+10     	; 0x138a <prvCheckPendingReadyList+0x4c>
    1380:	e9 81       	ldd	r30, Y+1	; 0x01
    1382:	fa 81       	ldd	r31, Y+2	; 0x02
    1384:	86 89       	ldd	r24, Z+22	; 0x16
    1386:	80 93 8c 00 	sts	0x008C, r24
    138a:	e9 81       	ldd	r30, Y+1	; 0x01
    138c:	fa 81       	ldd	r31, Y+2	; 0x02
    138e:	86 89       	ldd	r24, Z+22	; 0x16
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	c9 01       	movw	r24, r18
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	82 0f       	add	r24, r18
    13a4:	93 1f       	adc	r25, r19
    13a6:	ac 01       	movw	r20, r24
    13a8:	4d 56       	subi	r20, 0x6D	; 109
    13aa:	5f 4f       	sbci	r21, 0xFF	; 255
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	9a 81       	ldd	r25, Y+2	; 0x02
    13b0:	9c 01       	movw	r18, r24
    13b2:	2e 5f       	subi	r18, 0xFE	; 254
    13b4:	3f 4f       	sbci	r19, 0xFF	; 255
    13b6:	ca 01       	movw	r24, r20
    13b8:	b9 01       	movw	r22, r18
    13ba:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    13be:	80 91 bb 00 	lds	r24, 0x00BB
    13c2:	88 23       	and	r24, r24
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <prvCheckPendingReadyList+0x8a>
    13c6:	c1 cf       	rjmp	.-126    	; 0x134a <prvCheckPendingReadyList+0xc>
		portENABLE_INTERRUPTS();

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
	}
}
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	08 95       	ret

000013d2 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	00 d0       	rcall	.+0      	; 0x13d8 <prvCheckDelayedList+0x6>
    13d8:	00 d0       	rcall	.+0      	; 0x13da <prvCheckDelayedList+0x8>
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    13de:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <xTaskGetTickCount>
    13e2:	20 91 8f 00 	lds	r18, 0x008F
    13e6:	30 91 90 00 	lds	r19, 0x0090
    13ea:	82 1b       	sub	r24, r18
    13ec:	93 0b       	sbc	r25, r19
    13ee:	90 93 92 00 	sts	0x0092, r25
    13f2:	80 93 91 00 	sts	0x0091, r24
    13f6:	85 c0       	rjmp	.+266    	; 0x1502 <prvCheckDelayedList+0x130>
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
    13f8:	80 91 8d 00 	lds	r24, 0x008D
    13fc:	90 91 8e 00 	lds	r25, 0x008E
    1400:	01 96       	adiw	r24, 0x01	; 1
    1402:	90 93 8e 00 	sts	0x008E, r25
    1406:	80 93 8d 00 	sts	0x008D, r24
		xPassedTicks--;
    140a:	80 91 91 00 	lds	r24, 0x0091
    140e:	90 91 92 00 	lds	r25, 0x0092
    1412:	01 97       	sbiw	r24, 0x01	; 1
    1414:	90 93 92 00 	sts	0x0092, r25
    1418:	80 93 91 00 	sts	0x0091, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    141c:	80 91 8d 00 	lds	r24, 0x008D
    1420:	90 91 8e 00 	lds	r25, 0x008E
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	09 f0       	breq	.+2      	; 0x142a <prvCheckDelayedList+0x58>
    1428:	64 c0       	rjmp	.+200    	; 0x14f2 <prvCheckDelayedList+0x120>
		{
			List_t * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    142a:	80 91 b7 00 	lds	r24, 0x00B7
    142e:	90 91 b8 00 	lds	r25, 0x00B8
    1432:	9a 83       	std	Y+2, r25	; 0x02
    1434:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    1436:	80 91 b9 00 	lds	r24, 0x00B9
    143a:	90 91 ba 00 	lds	r25, 0x00BA
    143e:	90 93 b8 00 	sts	0x00B8, r25
    1442:	80 93 b7 00 	sts	0x00B7, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	9a 81       	ldd	r25, Y+2	; 0x02
    144a:	90 93 ba 00 	sts	0x00BA, r25
    144e:	80 93 b9 00 	sts	0x00B9, r24
    1452:	4f c0       	rjmp	.+158    	; 0x14f2 <prvCheckDelayedList+0x120>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    1454:	e0 91 b7 00 	lds	r30, 0x00B7
    1458:	f0 91 b8 00 	lds	r31, 0x00B8
    145c:	05 80       	ldd	r0, Z+5	; 0x05
    145e:	f6 81       	ldd	r31, Z+6	; 0x06
    1460:	e0 2d       	mov	r30, r0
    1462:	86 81       	ldd	r24, Z+6	; 0x06
    1464:	97 81       	ldd	r25, Z+7	; 0x07
    1466:	9c 83       	std	Y+4, r25	; 0x04
    1468:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
    146a:	eb 81       	ldd	r30, Y+3	; 0x03
    146c:	fc 81       	ldd	r31, Y+4	; 0x04
    146e:	22 81       	ldd	r18, Z+2	; 0x02
    1470:	33 81       	ldd	r19, Z+3	; 0x03
    1472:	80 91 8d 00 	lds	r24, 0x008D
    1476:	90 91 8e 00 	lds	r25, 0x008E
    147a:	82 17       	cp	r24, r18
    147c:	93 07       	cpc	r25, r19
    147e:	08 f4       	brcc	.+2      	; 0x1482 <prvCheckDelayedList+0xb0>
    1480:	40 c0       	rjmp	.+128    	; 0x1502 <prvCheckDelayedList+0x130>
			{
				/* Timeout not yet expired. */
				break;
			}

			portDISABLE_INTERRUPTS();
    1482:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				( void ) uxListRemove( &( pxCRCB->xGenericListItem ) );
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	9c 81       	ldd	r25, Y+4	; 0x04
    1488:	02 96       	adiw	r24, 0x02	; 2
    148a:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <uxListRemove>

				/* Is the co-routine waiting on an event also? */
				if( pxCRCB->xEventListItem.pxContainer )
    148e:	eb 81       	ldd	r30, Y+3	; 0x03
    1490:	fc 81       	ldd	r31, Y+4	; 0x04
    1492:	84 89       	ldd	r24, Z+20	; 0x14
    1494:	95 89       	ldd	r25, Z+21	; 0x15
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	29 f0       	breq	.+10     	; 0x14a4 <prvCheckDelayedList+0xd2>
				{
					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	9c 81       	ldd	r25, Y+4	; 0x04
    149e:	0c 96       	adiw	r24, 0x0c	; 12
    14a0:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <uxListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    14a4:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );
    14a6:	eb 81       	ldd	r30, Y+3	; 0x03
    14a8:	fc 81       	ldd	r31, Y+4	; 0x04
    14aa:	96 89       	ldd	r25, Z+22	; 0x16
    14ac:	80 91 8c 00 	lds	r24, 0x008C
    14b0:	89 17       	cp	r24, r25
    14b2:	28 f4       	brcc	.+10     	; 0x14be <prvCheckDelayedList+0xec>
    14b4:	eb 81       	ldd	r30, Y+3	; 0x03
    14b6:	fc 81       	ldd	r31, Y+4	; 0x04
    14b8:	86 89       	ldd	r24, Z+22	; 0x16
    14ba:	80 93 8c 00 	sts	0x008C, r24
    14be:	eb 81       	ldd	r30, Y+3	; 0x03
    14c0:	fc 81       	ldd	r31, Y+4	; 0x04
    14c2:	86 89       	ldd	r24, Z+22	; 0x16
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	c9 01       	movw	r24, r18
    14ca:	88 0f       	add	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	82 0f       	add	r24, r18
    14d8:	93 1f       	adc	r25, r19
    14da:	ac 01       	movw	r20, r24
    14dc:	4d 56       	subi	r20, 0x6D	; 109
    14de:	5f 4f       	sbci	r21, 0xFF	; 255
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	9c 81       	ldd	r25, Y+4	; 0x04
    14e4:	9c 01       	movw	r18, r24
    14e6:	2e 5f       	subi	r18, 0xFE	; 254
    14e8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ea:	ca 01       	movw	r24, r20
    14ec:	b9 01       	movw	r22, r18
    14ee:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    14f2:	e0 91 b7 00 	lds	r30, 0x00B7
    14f6:	f0 91 b8 00 	lds	r31, 0x00B8
    14fa:	80 81       	ld	r24, Z
    14fc:	88 23       	and	r24, r24
    14fe:	09 f0       	breq	.+2      	; 0x1502 <prvCheckDelayedList+0x130>
    1500:	a9 cf       	rjmp	.-174    	; 0x1454 <prvCheckDelayedList+0x82>
static void prvCheckDelayedList( void )
{
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    1502:	80 91 91 00 	lds	r24, 0x0091
    1506:	90 91 92 00 	lds	r25, 0x0092
    150a:	00 97       	sbiw	r24, 0x00	; 0
    150c:	09 f0       	breq	.+2      	; 0x1510 <prvCheckDelayedList+0x13e>
    150e:	74 cf       	rjmp	.-280    	; 0x13f8 <prvCheckDelayedList+0x26>

			prvAddCoRoutineToReadyQueue( pxCRCB );
		}
	}

	xLastTickCount = xCoRoutineTickCount;
    1510:	80 91 8d 00 	lds	r24, 0x008D
    1514:	90 91 8e 00 	lds	r25, 0x008E
    1518:	90 93 90 00 	sts	0x0090, r25
    151c:	80 93 8f 00 	sts	0x008F, r24
}
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	cf 91       	pop	r28
    152a:	df 91       	pop	r29
    152c:	08 95       	ret

0000152e <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	00 d0       	rcall	.+0      	; 0x1534 <vCoRoutineSchedule+0x6>
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    1538:	0e 94 9f 09 	call	0x133e	; 0x133e <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    153c:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <prvCheckDelayedList>
    1540:	0a c0       	rjmp	.+20     	; 0x1556 <vCoRoutineSchedule+0x28>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    1542:	80 91 8c 00 	lds	r24, 0x008C
    1546:	88 23       	and	r24, r24
    1548:	09 f4       	brne	.+2      	; 0x154c <vCoRoutineSchedule+0x1e>
    154a:	66 c0       	rjmp	.+204    	; 0x1618 <vCoRoutineSchedule+0xea>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
    154c:	80 91 8c 00 	lds	r24, 0x008C
    1550:	81 50       	subi	r24, 0x01	; 1
    1552:	80 93 8c 00 	sts	0x008C, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    1556:	80 91 8c 00 	lds	r24, 0x008C
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	c9 01       	movw	r24, r18
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	82 0f       	add	r24, r18
    156e:	93 1f       	adc	r25, r19
    1570:	fc 01       	movw	r30, r24
    1572:	ed 56       	subi	r30, 0x6D	; 109
    1574:	ff 4f       	sbci	r31, 0xFF	; 255
    1576:	80 81       	ld	r24, Z
    1578:	88 23       	and	r24, r24
    157a:	19 f3       	breq	.-58     	; 0x1542 <vCoRoutineSchedule+0x14>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    157c:	80 91 8c 00 	lds	r24, 0x008C
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	c9 01       	movw	r24, r18
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	82 0f       	add	r24, r18
    1594:	93 1f       	adc	r25, r19
    1596:	8d 56       	subi	r24, 0x6D	; 109
    1598:	9f 4f       	sbci	r25, 0xFF	; 255
    159a:	9a 83       	std	Y+2, r25	; 0x02
    159c:	89 83       	std	Y+1, r24	; 0x01
    159e:	e9 81       	ldd	r30, Y+1	; 0x01
    15a0:	fa 81       	ldd	r31, Y+2	; 0x02
    15a2:	01 80       	ldd	r0, Z+1	; 0x01
    15a4:	f2 81       	ldd	r31, Z+2	; 0x02
    15a6:	e0 2d       	mov	r30, r0
    15a8:	82 81       	ldd	r24, Z+2	; 0x02
    15aa:	93 81       	ldd	r25, Z+3	; 0x03
    15ac:	e9 81       	ldd	r30, Y+1	; 0x01
    15ae:	fa 81       	ldd	r31, Y+2	; 0x02
    15b0:	92 83       	std	Z+2, r25	; 0x02
    15b2:	81 83       	std	Z+1, r24	; 0x01
    15b4:	e9 81       	ldd	r30, Y+1	; 0x01
    15b6:	fa 81       	ldd	r31, Y+2	; 0x02
    15b8:	21 81       	ldd	r18, Z+1	; 0x01
    15ba:	32 81       	ldd	r19, Z+2	; 0x02
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	9a 81       	ldd	r25, Y+2	; 0x02
    15c0:	03 96       	adiw	r24, 0x03	; 3
    15c2:	28 17       	cp	r18, r24
    15c4:	39 07       	cpc	r19, r25
    15c6:	59 f4       	brne	.+22     	; 0x15de <vCoRoutineSchedule+0xb0>
    15c8:	e9 81       	ldd	r30, Y+1	; 0x01
    15ca:	fa 81       	ldd	r31, Y+2	; 0x02
    15cc:	01 80       	ldd	r0, Z+1	; 0x01
    15ce:	f2 81       	ldd	r31, Z+2	; 0x02
    15d0:	e0 2d       	mov	r30, r0
    15d2:	82 81       	ldd	r24, Z+2	; 0x02
    15d4:	93 81       	ldd	r25, Z+3	; 0x03
    15d6:	e9 81       	ldd	r30, Y+1	; 0x01
    15d8:	fa 81       	ldd	r31, Y+2	; 0x02
    15da:	92 83       	std	Z+2, r25	; 0x02
    15dc:	81 83       	std	Z+1, r24	; 0x01
    15de:	e9 81       	ldd	r30, Y+1	; 0x01
    15e0:	fa 81       	ldd	r31, Y+2	; 0x02
    15e2:	01 80       	ldd	r0, Z+1	; 0x01
    15e4:	f2 81       	ldd	r31, Z+2	; 0x02
    15e6:	e0 2d       	mov	r30, r0
    15e8:	86 81       	ldd	r24, Z+6	; 0x06
    15ea:	97 81       	ldd	r25, Z+7	; 0x07
    15ec:	90 93 8b 00 	sts	0x008B, r25
    15f0:	80 93 8a 00 	sts	0x008A, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    15f4:	e0 91 8a 00 	lds	r30, 0x008A
    15f8:	f0 91 8b 00 	lds	r31, 0x008B
    15fc:	40 81       	ld	r20, Z
    15fe:	51 81       	ldd	r21, Z+1	; 0x01
    1600:	80 91 8a 00 	lds	r24, 0x008A
    1604:	90 91 8b 00 	lds	r25, 0x008B
    1608:	e0 91 8a 00 	lds	r30, 0x008A
    160c:	f0 91 8b 00 	lds	r31, 0x008B
    1610:	27 89       	ldd	r18, Z+23	; 0x17
    1612:	62 2f       	mov	r22, r18
    1614:	fa 01       	movw	r30, r20
    1616:	09 95       	icall

	return;
}
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	08 95       	ret

00001622 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    1622:	df 93       	push	r29
    1624:	cf 93       	push	r28
    1626:	0f 92       	push	r0
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
UBaseType_t uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    162c:	19 82       	std	Y+1, r1	; 0x01
    162e:	13 c0       	rjmp	.+38     	; 0x1656 <prvInitialiseCoRoutineLists+0x34>
	{
		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	c9 01       	movw	r24, r18
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	82 0f       	add	r24, r18
    1646:	93 1f       	adc	r25, r19
    1648:	8d 56       	subi	r24, 0x6D	; 109
    164a:	9f 4f       	sbci	r25, 0xFF	; 255
    164c:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	8f 5f       	subi	r24, 0xFF	; 255
    1654:	89 83       	std	Y+1, r24	; 0x01
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	82 30       	cpi	r24, 0x02	; 2
    165a:	50 f3       	brcs	.-44     	; 0x1630 <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
    165c:	85 ea       	ldi	r24, 0xA5	; 165
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <vListInitialise>
	vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
    1664:	8e ea       	ldi	r24, 0xAE	; 174
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <vListInitialise>
	vListInitialise( ( List_t * ) &xPendingReadyCoRoutineList );
    166c:	8b eb       	ldi	r24, 0xBB	; 187
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    1674:	85 ea       	ldi	r24, 0xA5	; 165
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	90 93 b8 00 	sts	0x00B8, r25
    167c:	80 93 b7 00 	sts	0x00B7, r24
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    1680:	8e ea       	ldi	r24, 0xAE	; 174
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	90 93 ba 00 	sts	0x00BA, r25
    1688:	80 93 b9 00 	sts	0x00B9, r24
}
    168c:	0f 90       	pop	r0
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	08 95       	ret

00001694 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

BaseType_t xCoRoutineRemoveFromEventList( const List_t *pxEventList )
{
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	00 d0       	rcall	.+0      	; 0x169a <xCoRoutineRemoveFromEventList+0x6>
    169a:	00 d0       	rcall	.+0      	; 0x169c <xCoRoutineRemoveFromEventList+0x8>
    169c:	0f 92       	push	r0
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	9d 83       	std	Y+5, r25	; 0x05
    16a4:	8c 83       	std	Y+4, r24	; 0x04
BaseType_t xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    16a6:	ec 81       	ldd	r30, Y+4	; 0x04
    16a8:	fd 81       	ldd	r31, Y+5	; 0x05
    16aa:	05 80       	ldd	r0, Z+5	; 0x05
    16ac:	f6 81       	ldd	r31, Z+6	; 0x06
    16ae:	e0 2d       	mov	r30, r0
    16b0:	86 81       	ldd	r24, Z+6	; 0x06
    16b2:	97 81       	ldd	r25, Z+7	; 0x07
    16b4:	9b 83       	std	Y+3, r25	; 0x03
    16b6:	8a 83       	std	Y+2, r24	; 0x02
	( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	9b 81       	ldd	r25, Y+3	; 0x03
    16bc:	0c 96       	adiw	r24, 0x0c	; 12
    16be:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <uxListRemove>
	vListInsertEnd( ( List_t * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    16c2:	8a 81       	ldd	r24, Y+2	; 0x02
    16c4:	9b 81       	ldd	r25, Y+3	; 0x03
    16c6:	9c 01       	movw	r18, r24
    16c8:	24 5f       	subi	r18, 0xF4	; 244
    16ca:	3f 4f       	sbci	r19, 0xFF	; 255
    16cc:	8b eb       	ldi	r24, 0xBB	; 187
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	b9 01       	movw	r22, r18
    16d2:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    16d6:	ea 81       	ldd	r30, Y+2	; 0x02
    16d8:	fb 81       	ldd	r31, Y+3	; 0x03
    16da:	96 89       	ldd	r25, Z+22	; 0x16
    16dc:	e0 91 8a 00 	lds	r30, 0x008A
    16e0:	f0 91 8b 00 	lds	r31, 0x008B
    16e4:	86 89       	ldd	r24, Z+22	; 0x16
    16e6:	98 17       	cp	r25, r24
    16e8:	18 f0       	brcs	.+6      	; 0x16f0 <xCoRoutineRemoveFromEventList+0x5c>
	{
		xReturn = pdTRUE;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	89 83       	std	Y+1, r24	; 0x01
    16ee:	01 c0       	rjmp	.+2      	; 0x16f2 <xCoRoutineRemoveFromEventList+0x5e>
	}
	else
	{
		xReturn = pdFALSE;
    16f0:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	cf 91       	pop	r28
    1700:	df 91       	pop	r29
    1702:	08 95       	ret

00001704 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
    1704:	df 93       	push	r29
    1706:	cf 93       	push	r28
    1708:	00 d0       	rcall	.+0      	; 0x170a <xEventGroupCreate+0x6>
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
    170e:	8b e0       	ldi	r24, 0x0B	; 11
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	0e 94 a3 05 	call	0xb46	; 0xb46 <pvPortMalloc>
    1716:	9a 83       	std	Y+2, r25	; 0x02
    1718:	89 83       	std	Y+1, r24	; 0x01

		if( pxEventBits != NULL )
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	9a 81       	ldd	r25, Y+2	; 0x02
    171e:	00 97       	sbiw	r24, 0x00	; 0
    1720:	49 f0       	breq	.+18     	; 0x1734 <xEventGroupCreate+0x30>
		{
			pxEventBits->uxEventBits = 0;
    1722:	e9 81       	ldd	r30, Y+1	; 0x01
    1724:	fa 81       	ldd	r31, Y+2	; 0x02
    1726:	11 82       	std	Z+1, r1	; 0x01
    1728:	10 82       	st	Z, r1
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
    172a:	89 81       	ldd	r24, Y+1	; 0x01
    172c:	9a 81       	ldd	r25, Y+2	; 0x02
    172e:	02 96       	adiw	r24, 0x02	; 2
    1730:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	cf 91       	pop	r28
    173e:	df 91       	pop	r29
    1740:	08 95       	ret

00001742 <xEventGroupSync>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
    1742:	df 93       	push	r29
    1744:	cf 93       	push	r28
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
    174a:	60 97       	sbiw	r28, 0x10	; 16
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	f8 94       	cli
    1750:	de bf       	out	0x3e, r29	; 62
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	cd bf       	out	0x3d, r28	; 61
    1756:	9a 87       	std	Y+10, r25	; 0x0a
    1758:	89 87       	std	Y+9, r24	; 0x09
    175a:	7c 87       	std	Y+12, r23	; 0x0c
    175c:	6b 87       	std	Y+11, r22	; 0x0b
    175e:	5e 87       	std	Y+14, r21	; 0x0e
    1760:	4d 87       	std	Y+13, r20	; 0x0d
    1762:	38 8b       	std	Y+16, r19	; 0x10
    1764:	2f 87       	std	Y+15, r18	; 0x0f
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = xEventGroup;
    1766:	89 85       	ldd	r24, Y+9	; 0x09
    1768:	9a 85       	ldd	r25, Y+10	; 0x0a
    176a:	9c 83       	std	Y+4, r25	; 0x04
    176c:	8b 83       	std	Y+3, r24	; 0x03
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
    176e:	19 82       	std	Y+1, r1	; 0x01
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
    1770:	0e 94 b2 1b 	call	0x3764	; 0x3764 <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
    1774:	eb 81       	ldd	r30, Y+3	; 0x03
    1776:	fc 81       	ldd	r31, Y+4	; 0x04
    1778:	80 81       	ld	r24, Z
    177a:	91 81       	ldd	r25, Z+1	; 0x01
    177c:	98 87       	std	Y+8, r25	; 0x08
    177e:	8f 83       	std	Y+7, r24	; 0x07

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
    1780:	89 85       	ldd	r24, Y+9	; 0x09
    1782:	9a 85       	ldd	r25, Y+10	; 0x0a
    1784:	2b 85       	ldd	r18, Y+11	; 0x0b
    1786:	3c 85       	ldd	r19, Y+12	; 0x0c
    1788:	b9 01       	movw	r22, r18
    178a:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
    178e:	2f 81       	ldd	r18, Y+7	; 0x07
    1790:	38 85       	ldd	r19, Y+8	; 0x08
    1792:	8b 85       	ldd	r24, Y+11	; 0x0b
    1794:	9c 85       	ldd	r25, Y+12	; 0x0c
    1796:	28 2b       	or	r18, r24
    1798:	39 2b       	or	r19, r25
    179a:	8d 85       	ldd	r24, Y+13	; 0x0d
    179c:	9e 85       	ldd	r25, Y+14	; 0x0e
    179e:	28 23       	and	r18, r24
    17a0:	39 23       	and	r19, r25
    17a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a6:	28 17       	cp	r18, r24
    17a8:	39 07       	cpc	r19, r25
    17aa:	c9 f4       	brne	.+50     	; 0x17de <xEventGroupSync+0x9c>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
    17ac:	2f 81       	ldd	r18, Y+7	; 0x07
    17ae:	38 85       	ldd	r19, Y+8	; 0x08
    17b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    17b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    17b4:	82 2b       	or	r24, r18
    17b6:	93 2b       	or	r25, r19
    17b8:	9e 83       	std	Y+6, r25	; 0x06
    17ba:	8d 83       	std	Y+5, r24	; 0x05

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    17bc:	eb 81       	ldd	r30, Y+3	; 0x03
    17be:	fc 81       	ldd	r31, Y+4	; 0x04
    17c0:	20 81       	ld	r18, Z
    17c2:	31 81       	ldd	r19, Z+1	; 0x01
    17c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17c8:	80 95       	com	r24
    17ca:	90 95       	com	r25
    17cc:	82 23       	and	r24, r18
    17ce:	93 23       	and	r25, r19
    17d0:	eb 81       	ldd	r30, Y+3	; 0x03
    17d2:	fc 81       	ldd	r31, Y+4	; 0x04
    17d4:	91 83       	std	Z+1, r25	; 0x01
    17d6:	80 83       	st	Z, r24

			xTicksToWait = 0;
    17d8:	18 8a       	std	Y+16, r1	; 0x10
    17da:	1f 86       	std	Y+15, r1	; 0x0f
    17dc:	1e c0       	rjmp	.+60     	; 0x181a <xEventGroupSync+0xd8>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
    17de:	8f 85       	ldd	r24, Y+15	; 0x0f
    17e0:	98 89       	ldd	r25, Y+16	; 0x10
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	91 f0       	breq	.+36     	; 0x180a <xEventGroupSync+0xc8>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ea:	bc 01       	movw	r22, r24
    17ec:	6e 5f       	subi	r22, 0xFE	; 254
    17ee:	7f 4f       	sbci	r23, 0xFF	; 255
    17f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f4:	9c 01       	movw	r18, r24
    17f6:	35 60       	ori	r19, 0x05	; 5
    17f8:	4f 85       	ldd	r20, Y+15	; 0x0f
    17fa:	58 89       	ldd	r21, Y+16	; 0x10
    17fc:	cb 01       	movw	r24, r22
    17fe:	b9 01       	movw	r22, r18
    1800:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
    1804:	1e 82       	std	Y+6, r1	; 0x06
    1806:	1d 82       	std	Y+5, r1	; 0x05
    1808:	08 c0       	rjmp	.+16     	; 0x181a <xEventGroupSync+0xd8>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
    180a:	eb 81       	ldd	r30, Y+3	; 0x03
    180c:	fc 81       	ldd	r31, Y+4	; 0x04
    180e:	80 81       	ld	r24, Z
    1810:	91 81       	ldd	r25, Z+1	; 0x01
    1812:	9e 83       	std	Y+6, r25	; 0x06
    1814:	8d 83       	std	Y+5, r24	; 0x05
				xTimeoutOccurred = pdTRUE;
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
    181a:	0e 94 be 1b 	call	0x377c	; 0x377c <xTaskResumeAll>
    181e:	8a 83       	std	Y+2, r24	; 0x02

	if( xTicksToWait != ( TickType_t ) 0 )
    1820:	8f 85       	ldd	r24, Y+15	; 0x0f
    1822:	98 89       	ldd	r25, Y+16	; 0x10
    1824:	00 97       	sbiw	r24, 0x00	; 0
    1826:	09 f4       	brne	.+2      	; 0x182a <xEventGroupSync+0xe8>
    1828:	3a c0       	rjmp	.+116    	; 0x189e <xEventGroupSync+0x15c>
	{
		if( xAlreadyYielded == pdFALSE )
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	88 23       	and	r24, r24
    182e:	11 f4       	brne	.+4      	; 0x1834 <xEventGroupSync+0xf2>
		{
			portYIELD_WITHIN_API();
    1830:	0e 94 95 07 	call	0xf2a	; 0xf2a <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
    1834:	0e 94 ab 20 	call	0x4156	; 0x4156 <uxTaskResetEventItemValue>
    1838:	9e 83       	std	Y+6, r25	; 0x06
    183a:	8d 83       	std	Y+5, r24	; 0x05

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    183c:	8d 81       	ldd	r24, Y+5	; 0x05
    183e:	9e 81       	ldd	r25, Y+6	; 0x06
    1840:	80 70       	andi	r24, 0x00	; 0
    1842:	92 70       	andi	r25, 0x02	; 2
    1844:	00 97       	sbiw	r24, 0x00	; 0
    1846:	31 f5       	brne	.+76     	; 0x1894 <xEventGroupSync+0x152>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	f8 94       	cli
    184c:	0f 92       	push	r0
			{
				uxReturn = pxEventBits->uxEventBits;
    184e:	eb 81       	ldd	r30, Y+3	; 0x03
    1850:	fc 81       	ldd	r31, Y+4	; 0x04
    1852:	80 81       	ld	r24, Z
    1854:	91 81       	ldd	r25, Z+1	; 0x01
    1856:	9e 83       	std	Y+6, r25	; 0x06
    1858:	8d 83       	std	Y+5, r24	; 0x05

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
    185a:	2d 81       	ldd	r18, Y+5	; 0x05
    185c:	3e 81       	ldd	r19, Y+6	; 0x06
    185e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1860:	9e 85       	ldd	r25, Y+14	; 0x0e
    1862:	28 23       	and	r18, r24
    1864:	39 23       	and	r19, r25
    1866:	8d 85       	ldd	r24, Y+13	; 0x0d
    1868:	9e 85       	ldd	r25, Y+14	; 0x0e
    186a:	28 17       	cp	r18, r24
    186c:	39 07       	cpc	r19, r25
    186e:	71 f4       	brne	.+28     	; 0x188c <xEventGroupSync+0x14a>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    1870:	eb 81       	ldd	r30, Y+3	; 0x03
    1872:	fc 81       	ldd	r31, Y+4	; 0x04
    1874:	20 81       	ld	r18, Z
    1876:	31 81       	ldd	r19, Z+1	; 0x01
    1878:	8d 85       	ldd	r24, Y+13	; 0x0d
    187a:	9e 85       	ldd	r25, Y+14	; 0x0e
    187c:	80 95       	com	r24
    187e:	90 95       	com	r25
    1880:	82 23       	and	r24, r18
    1882:	93 23       	and	r25, r19
    1884:	eb 81       	ldd	r30, Y+3	; 0x03
    1886:	fc 81       	ldd	r31, Y+4	; 0x04
    1888:	91 83       	std	Z+1, r25	; 0x01
    188a:	80 83       	st	Z, r24
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    188c:	0f 90       	pop	r0
    188e:	0f be       	out	0x3f, r0	; 63

			xTimeoutOccurred = pdTRUE;
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	89 83       	std	Y+1, r24	; 0x01
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    1894:	8d 81       	ldd	r24, Y+5	; 0x05
    1896:	9e 81       	ldd	r25, Y+6	; 0x06
    1898:	90 70       	andi	r25, 0x00	; 0
    189a:	9e 83       	std	Y+6, r25	; 0x06
    189c:	8d 83       	std	Y+5, r24	; 0x05
	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
    189e:	8d 81       	ldd	r24, Y+5	; 0x05
    18a0:	9e 81       	ldd	r25, Y+6	; 0x06
}
    18a2:	60 96       	adiw	r28, 0x10	; 16
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	f8 94       	cli
    18a8:	de bf       	out	0x3e, r29	; 62
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	cd bf       	out	0x3d, r28	; 61
    18ae:	cf 91       	pop	r28
    18b0:	df 91       	pop	r29
    18b2:	08 95       	ret

000018b4 <xEventGroupWaitBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
    18b4:	0f 93       	push	r16
    18b6:	1f 93       	push	r17
    18b8:	df 93       	push	r29
    18ba:	cf 93       	push	r28
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	63 97       	sbiw	r28, 0x13	; 19
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	f8 94       	cli
    18c6:	de bf       	out	0x3e, r29	; 62
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	cd bf       	out	0x3d, r28	; 61
    18cc:	9d 87       	std	Y+13, r25	; 0x0d
    18ce:	8c 87       	std	Y+12, r24	; 0x0c
    18d0:	7f 87       	std	Y+15, r23	; 0x0f
    18d2:	6e 87       	std	Y+14, r22	; 0x0e
    18d4:	48 8b       	std	Y+16, r20	; 0x10
    18d6:	29 8b       	std	Y+17, r18	; 0x11
    18d8:	1b 8b       	std	Y+19, r17	; 0x13
    18da:	0a 8b       	std	Y+18, r16	; 0x12
EventGroup_t *pxEventBits = xEventGroup;
    18dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    18de:	9d 85       	ldd	r25, Y+13	; 0x0d
    18e0:	9b 87       	std	Y+11, r25	; 0x0b
    18e2:	8a 87       	std	Y+10, r24	; 0x0a
EventBits_t uxReturn, uxControlBits = 0;
    18e4:	1f 82       	std	Y+7, r1	; 0x07
    18e6:	1e 82       	std	Y+6, r1	; 0x06
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
    18e8:	1b 82       	std	Y+3, r1	; 0x03
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
    18ea:	0e 94 b2 1b 	call	0x3764	; 0x3764 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
    18ee:	ea 85       	ldd	r30, Y+10	; 0x0a
    18f0:	fb 85       	ldd	r31, Y+11	; 0x0b
    18f2:	80 81       	ld	r24, Z
    18f4:	91 81       	ldd	r25, Z+1	; 0x01
    18f6:	9a 83       	std	Y+2, r25	; 0x02
    18f8:	89 83       	std	Y+1, r24	; 0x01

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	9a 81       	ldd	r25, Y+2	; 0x02
    18fe:	2e 85       	ldd	r18, Y+14	; 0x0e
    1900:	3f 85       	ldd	r19, Y+15	; 0x0f
    1902:	b9 01       	movw	r22, r18
    1904:	49 89       	ldd	r20, Y+17	; 0x11
    1906:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <prvTestWaitCondition>
    190a:	8d 83       	std	Y+5, r24	; 0x05

		if( xWaitConditionMet != pdFALSE )
    190c:	8d 81       	ldd	r24, Y+5	; 0x05
    190e:	88 23       	and	r24, r24
    1910:	c1 f0       	breq	.+48     	; 0x1942 <xEventGroupWaitBits+0x8e>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	9a 81       	ldd	r25, Y+2	; 0x02
    1916:	99 87       	std	Y+9, r25	; 0x09
    1918:	88 87       	std	Y+8, r24	; 0x08
			xTicksToWait = ( TickType_t ) 0;
    191a:	1b 8a       	std	Y+19, r1	; 0x13
    191c:	1a 8a       	std	Y+18, r1	; 0x12

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
    191e:	88 89       	ldd	r24, Y+16	; 0x10
    1920:	88 23       	and	r24, r24
    1922:	e9 f1       	breq	.+122    	; 0x199e <xEventGroupWaitBits+0xea>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    1924:	ea 85       	ldd	r30, Y+10	; 0x0a
    1926:	fb 85       	ldd	r31, Y+11	; 0x0b
    1928:	20 81       	ld	r18, Z
    192a:	31 81       	ldd	r19, Z+1	; 0x01
    192c:	8e 85       	ldd	r24, Y+14	; 0x0e
    192e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1930:	80 95       	com	r24
    1932:	90 95       	com	r25
    1934:	82 23       	and	r24, r18
    1936:	93 23       	and	r25, r19
    1938:	ea 85       	ldd	r30, Y+10	; 0x0a
    193a:	fb 85       	ldd	r31, Y+11	; 0x0b
    193c:	91 83       	std	Z+1, r25	; 0x01
    193e:	80 83       	st	Z, r24
    1940:	2e c0       	rjmp	.+92     	; 0x199e <xEventGroupWaitBits+0xea>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
    1942:	8a 89       	ldd	r24, Y+18	; 0x12
    1944:	9b 89       	ldd	r25, Y+19	; 0x13
    1946:	00 97       	sbiw	r24, 0x00	; 0
    1948:	39 f4       	brne	.+14     	; 0x1958 <xEventGroupWaitBits+0xa4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
    194a:	89 81       	ldd	r24, Y+1	; 0x01
    194c:	9a 81       	ldd	r25, Y+2	; 0x02
    194e:	99 87       	std	Y+9, r25	; 0x09
    1950:	88 87       	std	Y+8, r24	; 0x08
			xTimeoutOccurred = pdTRUE;
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	8b 83       	std	Y+3, r24	; 0x03
    1956:	23 c0       	rjmp	.+70     	; 0x199e <xEventGroupWaitBits+0xea>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
    1958:	88 89       	ldd	r24, Y+16	; 0x10
    195a:	88 23       	and	r24, r24
    195c:	29 f0       	breq	.+10     	; 0x1968 <xEventGroupWaitBits+0xb4>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
    195e:	8e 81       	ldd	r24, Y+6	; 0x06
    1960:	9f 81       	ldd	r25, Y+7	; 0x07
    1962:	91 60       	ori	r25, 0x01	; 1
    1964:	9f 83       	std	Y+7, r25	; 0x07
    1966:	8e 83       	std	Y+6, r24	; 0x06
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
    1968:	89 89       	ldd	r24, Y+17	; 0x11
    196a:	88 23       	and	r24, r24
    196c:	29 f0       	breq	.+10     	; 0x1978 <xEventGroupWaitBits+0xc4>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
    196e:	8e 81       	ldd	r24, Y+6	; 0x06
    1970:	9f 81       	ldd	r25, Y+7	; 0x07
    1972:	94 60       	ori	r25, 0x04	; 4
    1974:	9f 83       	std	Y+7, r25	; 0x07
    1976:	8e 83       	std	Y+6, r24	; 0x06
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
    1978:	8a 85       	ldd	r24, Y+10	; 0x0a
    197a:	9b 85       	ldd	r25, Y+11	; 0x0b
    197c:	bc 01       	movw	r22, r24
    197e:	6e 5f       	subi	r22, 0xFE	; 254
    1980:	7f 4f       	sbci	r23, 0xFF	; 255
    1982:	2e 85       	ldd	r18, Y+14	; 0x0e
    1984:	3f 85       	ldd	r19, Y+15	; 0x0f
    1986:	8e 81       	ldd	r24, Y+6	; 0x06
    1988:	9f 81       	ldd	r25, Y+7	; 0x07
    198a:	28 2b       	or	r18, r24
    198c:	39 2b       	or	r19, r25
    198e:	4a 89       	ldd	r20, Y+18	; 0x12
    1990:	5b 89       	ldd	r21, Y+19	; 0x13
    1992:	cb 01       	movw	r24, r22
    1994:	b9 01       	movw	r22, r18
    1996:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
    199a:	19 86       	std	Y+9, r1	; 0x09
    199c:	18 86       	std	Y+8, r1	; 0x08

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
    199e:	0e 94 be 1b 	call	0x377c	; 0x377c <xTaskResumeAll>
    19a2:	8c 83       	std	Y+4, r24	; 0x04

	if( xTicksToWait != ( TickType_t ) 0 )
    19a4:	8a 89       	ldd	r24, Y+18	; 0x12
    19a6:	9b 89       	ldd	r25, Y+19	; 0x13
    19a8:	00 97       	sbiw	r24, 0x00	; 0
    19aa:	09 f4       	brne	.+2      	; 0x19ae <xEventGroupWaitBits+0xfa>
    19ac:	3c c0       	rjmp	.+120    	; 0x1a26 <xEventGroupWaitBits+0x172>
	{
		if( xAlreadyYielded == pdFALSE )
    19ae:	8c 81       	ldd	r24, Y+4	; 0x04
    19b0:	88 23       	and	r24, r24
    19b2:	11 f4       	brne	.+4      	; 0x19b8 <xEventGroupWaitBits+0x104>
		{
			portYIELD_WITHIN_API();
    19b4:	0e 94 95 07 	call	0xf2a	; 0xf2a <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
    19b8:	0e 94 ab 20 	call	0x4156	; 0x4156 <uxTaskResetEventItemValue>
    19bc:	99 87       	std	Y+9, r25	; 0x09
    19be:	88 87       	std	Y+8, r24	; 0x08

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    19c0:	88 85       	ldd	r24, Y+8	; 0x08
    19c2:	99 85       	ldd	r25, Y+9	; 0x09
    19c4:	80 70       	andi	r24, 0x00	; 0
    19c6:	92 70       	andi	r25, 0x02	; 2
    19c8:	00 97       	sbiw	r24, 0x00	; 0
    19ca:	41 f5       	brne	.+80     	; 0x1a1c <xEventGroupWaitBits+0x168>
		{
			taskENTER_CRITICAL();
    19cc:	0f b6       	in	r0, 0x3f	; 63
    19ce:	f8 94       	cli
    19d0:	0f 92       	push	r0
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
    19d2:	ea 85       	ldd	r30, Y+10	; 0x0a
    19d4:	fb 85       	ldd	r31, Y+11	; 0x0b
    19d6:	80 81       	ld	r24, Z
    19d8:	91 81       	ldd	r25, Z+1	; 0x01
    19da:	99 87       	std	Y+9, r25	; 0x09
    19dc:	88 87       	std	Y+8, r24	; 0x08

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
    19de:	88 85       	ldd	r24, Y+8	; 0x08
    19e0:	99 85       	ldd	r25, Y+9	; 0x09
    19e2:	2e 85       	ldd	r18, Y+14	; 0x0e
    19e4:	3f 85       	ldd	r19, Y+15	; 0x0f
    19e6:	b9 01       	movw	r22, r18
    19e8:	49 89       	ldd	r20, Y+17	; 0x11
    19ea:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <prvTestWaitCondition>
    19ee:	88 23       	and	r24, r24
    19f0:	89 f0       	breq	.+34     	; 0x1a14 <xEventGroupWaitBits+0x160>
				{
					if( xClearOnExit != pdFALSE )
    19f2:	88 89       	ldd	r24, Y+16	; 0x10
    19f4:	88 23       	and	r24, r24
    19f6:	71 f0       	breq	.+28     	; 0x1a14 <xEventGroupWaitBits+0x160>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    19f8:	ea 85       	ldd	r30, Y+10	; 0x0a
    19fa:	fb 85       	ldd	r31, Y+11	; 0x0b
    19fc:	20 81       	ld	r18, Z
    19fe:	31 81       	ldd	r19, Z+1	; 0x01
    1a00:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a02:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a04:	80 95       	com	r24
    1a06:	90 95       	com	r25
    1a08:	82 23       	and	r24, r18
    1a0a:	93 23       	and	r25, r19
    1a0c:	ea 85       	ldd	r30, Y+10	; 0x0a
    1a0e:	fb 85       	ldd	r31, Y+11	; 0x0b
    1a10:	91 83       	std	Z+1, r25	; 0x01
    1a12:	80 83       	st	Z, r24
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	8b 83       	std	Y+3, r24	; 0x03
			}
			taskEXIT_CRITICAL();
    1a18:	0f 90       	pop	r0
    1a1a:	0f be       	out	0x3f, r0	; 63
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    1a1c:	88 85       	ldd	r24, Y+8	; 0x08
    1a1e:	99 85       	ldd	r25, Y+9	; 0x09
    1a20:	90 70       	andi	r25, 0x00	; 0
    1a22:	99 87       	std	Y+9, r25	; 0x09
    1a24:	88 87       	std	Y+8, r24	; 0x08
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
    1a26:	88 85       	ldd	r24, Y+8	; 0x08
    1a28:	99 85       	ldd	r25, Y+9	; 0x09
}
    1a2a:	63 96       	adiw	r28, 0x13	; 19
    1a2c:	0f b6       	in	r0, 0x3f	; 63
    1a2e:	f8 94       	cli
    1a30:	de bf       	out	0x3e, r29	; 62
    1a32:	0f be       	out	0x3f, r0	; 63
    1a34:	cd bf       	out	0x3d, r28	; 61
    1a36:	cf 91       	pop	r28
    1a38:	df 91       	pop	r29
    1a3a:	1f 91       	pop	r17
    1a3c:	0f 91       	pop	r16
    1a3e:	08 95       	ret

00001a40 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
    1a48:	28 97       	sbiw	r28, 0x08	; 8
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	f8 94       	cli
    1a4e:	de bf       	out	0x3e, r29	; 62
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	cd bf       	out	0x3d, r28	; 61
    1a54:	9e 83       	std	Y+6, r25	; 0x06
    1a56:	8d 83       	std	Y+5, r24	; 0x05
    1a58:	78 87       	std	Y+8, r23	; 0x08
    1a5a:	6f 83       	std	Y+7, r22	; 0x07
EventGroup_t *pxEventBits = xEventGroup;
    1a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a60:	9c 83       	std	Y+4, r25	; 0x04
    1a62:	8b 83       	std	Y+3, r24	; 0x03
	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	taskENTER_CRITICAL();
    1a64:	0f b6       	in	r0, 0x3f	; 63
    1a66:	f8 94       	cli
    1a68:	0f 92       	push	r0
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
    1a6a:	eb 81       	ldd	r30, Y+3	; 0x03
    1a6c:	fc 81       	ldd	r31, Y+4	; 0x04
    1a6e:	80 81       	ld	r24, Z
    1a70:	91 81       	ldd	r25, Z+1	; 0x01
    1a72:	9a 83       	std	Y+2, r25	; 0x02
    1a74:	89 83       	std	Y+1, r24	; 0x01

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    1a76:	eb 81       	ldd	r30, Y+3	; 0x03
    1a78:	fc 81       	ldd	r31, Y+4	; 0x04
    1a7a:	20 81       	ld	r18, Z
    1a7c:	31 81       	ldd	r19, Z+1	; 0x01
    1a7e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a80:	98 85       	ldd	r25, Y+8	; 0x08
    1a82:	80 95       	com	r24
    1a84:	90 95       	com	r25
    1a86:	82 23       	and	r24, r18
    1a88:	93 23       	and	r25, r19
    1a8a:	eb 81       	ldd	r30, Y+3	; 0x03
    1a8c:	fc 81       	ldd	r31, Y+4	; 0x04
    1a8e:	91 83       	std	Z+1, r25	; 0x01
    1a90:	80 83       	st	Z, r24
	}
	taskEXIT_CRITICAL();
    1a92:	0f 90       	pop	r0
    1a94:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1a9a:	28 96       	adiw	r28, 0x08	; 8
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	f8 94       	cli
    1aa0:	de bf       	out	0x3e, r29	; 62
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	cd bf       	out	0x3d, r28	; 61
    1aa6:	cf 91       	pop	r28
    1aa8:	df 91       	pop	r29
    1aaa:	08 95       	ret

00001aac <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    1ab4:	27 97       	sbiw	r28, 0x07	; 7
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	f8 94       	cli
    1aba:	de bf       	out	0x3e, r29	; 62
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	cd bf       	out	0x3d, r28	; 61
    1ac0:	9f 83       	std	Y+7, r25	; 0x07
    1ac2:	8e 83       	std	Y+6, r24	; 0x06
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
    1ac4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ac8:	9c 83       	std	Y+4, r25	; 0x04
    1aca:	8b 83       	std	Y+3, r24	; 0x03
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1acc:	1d 82       	std	Y+5, r1	; 0x05
	{
		uxReturn = pxEventBits->uxEventBits;
    1ace:	eb 81       	ldd	r30, Y+3	; 0x03
    1ad0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ad2:	80 81       	ld	r24, Z
    1ad4:	91 81       	ldd	r25, Z+1	; 0x01
    1ad6:	9a 83       	std	Y+2, r25	; 0x02
    1ad8:	89 83       	std	Y+1, r24	; 0x01
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
    1ada:	89 81       	ldd	r24, Y+1	; 0x01
    1adc:	9a 81       	ldd	r25, Y+2	; 0x02
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
    1ade:	27 96       	adiw	r28, 0x07	; 7
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
    1af8:	65 97       	sbiw	r28, 0x15	; 21
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	f8 94       	cli
    1afe:	de bf       	out	0x3e, r29	; 62
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	cd bf       	out	0x3d, r28	; 61
    1b04:	9b 8b       	std	Y+19, r25	; 0x13
    1b06:	8a 8b       	std	Y+18, r24	; 0x12
    1b08:	7d 8b       	std	Y+21, r23	; 0x15
    1b0a:	6c 8b       	std	Y+20, r22	; 0x14
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    1b0c:	19 86       	std	Y+9, r1	; 0x09
    1b0e:	18 86       	std	Y+8, r1	; 0x08
EventGroup_t *pxEventBits = xEventGroup;
    1b10:	8a 89       	ldd	r24, Y+18	; 0x12
    1b12:	9b 89       	ldd	r25, Y+19	; 0x13
    1b14:	9b 83       	std	Y+3, r25	; 0x03
    1b16:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xMatchFound = pdFALSE;
    1b18:	19 82       	std	Y+1, r1	; 0x01
	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b1e:	02 96       	adiw	r24, 0x02	; 2
    1b20:	9b 87       	std	Y+11, r25	; 0x0b
    1b22:	8a 87       	std	Y+10, r24	; 0x0a
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1b24:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b26:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b28:	03 96       	adiw	r24, 0x03	; 3
    1b2a:	9d 87       	std	Y+13, r25	; 0x0d
    1b2c:	8c 87       	std	Y+12, r24	; 0x0c
	vTaskSuspendAll();
    1b2e:	0e 94 b2 1b 	call	0x3764	; 0x3764 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
    1b32:	ea 85       	ldd	r30, Y+10	; 0x0a
    1b34:	fb 85       	ldd	r31, Y+11	; 0x0b
    1b36:	85 81       	ldd	r24, Z+5	; 0x05
    1b38:	96 81       	ldd	r25, Z+6	; 0x06
    1b3a:	99 8b       	std	Y+17, r25	; 0x11
    1b3c:	88 8b       	std	Y+16, r24	; 0x10

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
    1b3e:	ea 81       	ldd	r30, Y+2	; 0x02
    1b40:	fb 81       	ldd	r31, Y+3	; 0x03
    1b42:	20 81       	ld	r18, Z
    1b44:	31 81       	ldd	r19, Z+1	; 0x01
    1b46:	8c 89       	ldd	r24, Y+20	; 0x14
    1b48:	9d 89       	ldd	r25, Y+21	; 0x15
    1b4a:	82 2b       	or	r24, r18
    1b4c:	93 2b       	or	r25, r19
    1b4e:	ea 81       	ldd	r30, Y+2	; 0x02
    1b50:	fb 81       	ldd	r31, Y+3	; 0x03
    1b52:	91 83       	std	Z+1, r25	; 0x01
    1b54:	80 83       	st	Z, r24
    1b56:	59 c0       	rjmp	.+178    	; 0x1c0a <xEventGroupSetBits+0x11a>

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
		{
			pxNext = listGET_NEXT( pxListItem );
    1b58:	e8 89       	ldd	r30, Y+16	; 0x10
    1b5a:	f9 89       	ldd	r31, Y+17	; 0x11
    1b5c:	82 81       	ldd	r24, Z+2	; 0x02
    1b5e:	93 81       	ldd	r25, Z+3	; 0x03
    1b60:	9f 87       	std	Y+15, r25	; 0x0f
    1b62:	8e 87       	std	Y+14, r24	; 0x0e
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    1b64:	e8 89       	ldd	r30, Y+16	; 0x10
    1b66:	f9 89       	ldd	r31, Y+17	; 0x11
    1b68:	80 81       	ld	r24, Z
    1b6a:	91 81       	ldd	r25, Z+1	; 0x01
    1b6c:	9f 83       	std	Y+7, r25	; 0x07
    1b6e:	8e 83       	std	Y+6, r24	; 0x06
			xMatchFound = pdFALSE;
    1b70:	19 82       	std	Y+1, r1	; 0x01

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
    1b72:	8e 81       	ldd	r24, Y+6	; 0x06
    1b74:	9f 81       	ldd	r25, Y+7	; 0x07
    1b76:	80 70       	andi	r24, 0x00	; 0
    1b78:	9d 83       	std	Y+5, r25	; 0x05
    1b7a:	8c 83       	std	Y+4, r24	; 0x04
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    1b7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b7e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b80:	90 70       	andi	r25, 0x00	; 0
    1b82:	9f 83       	std	Y+7, r25	; 0x07
    1b84:	8e 83       	std	Y+6, r24	; 0x06

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    1b86:	8c 81       	ldd	r24, Y+4	; 0x04
    1b88:	9d 81       	ldd	r25, Y+5	; 0x05
    1b8a:	80 70       	andi	r24, 0x00	; 0
    1b8c:	94 70       	andi	r25, 0x04	; 4
    1b8e:	00 97       	sbiw	r24, 0x00	; 0
    1b90:	69 f4       	brne	.+26     	; 0x1bac <xEventGroupSetBits+0xbc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
    1b92:	ea 81       	ldd	r30, Y+2	; 0x02
    1b94:	fb 81       	ldd	r31, Y+3	; 0x03
    1b96:	20 81       	ld	r18, Z
    1b98:	31 81       	ldd	r19, Z+1	; 0x01
    1b9a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b9c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b9e:	82 23       	and	r24, r18
    1ba0:	93 23       	and	r25, r19
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	91 f0       	breq	.+36     	; 0x1bca <xEventGroupSetBits+0xda>
				{
					xMatchFound = pdTRUE;
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	89 83       	std	Y+1, r24	; 0x01
    1baa:	0f c0       	rjmp	.+30     	; 0x1bca <xEventGroupSetBits+0xda>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
    1bac:	ea 81       	ldd	r30, Y+2	; 0x02
    1bae:	fb 81       	ldd	r31, Y+3	; 0x03
    1bb0:	20 81       	ld	r18, Z
    1bb2:	31 81       	ldd	r19, Z+1	; 0x01
    1bb4:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb6:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb8:	28 23       	and	r18, r24
    1bba:	39 23       	and	r19, r25
    1bbc:	8e 81       	ldd	r24, Y+6	; 0x06
    1bbe:	9f 81       	ldd	r25, Y+7	; 0x07
    1bc0:	28 17       	cp	r18, r24
    1bc2:	39 07       	cpc	r19, r25
    1bc4:	11 f4       	brne	.+4      	; 0x1bca <xEventGroupSetBits+0xda>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	89 83       	std	Y+1, r24	; 0x01
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	88 23       	and	r24, r24
    1bce:	c9 f0       	breq	.+50     	; 0x1c02 <xEventGroupSetBits+0x112>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    1bd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd2:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd4:	80 70       	andi	r24, 0x00	; 0
    1bd6:	91 70       	andi	r25, 0x01	; 1
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	41 f0       	breq	.+16     	; 0x1bec <xEventGroupSetBits+0xfc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
    1bdc:	88 85       	ldd	r24, Y+8	; 0x08
    1bde:	99 85       	ldd	r25, Y+9	; 0x09
    1be0:	2e 81       	ldd	r18, Y+6	; 0x06
    1be2:	3f 81       	ldd	r19, Y+7	; 0x07
    1be4:	82 2b       	or	r24, r18
    1be6:	93 2b       	or	r25, r19
    1be8:	99 87       	std	Y+9, r25	; 0x09
    1bea:	88 87       	std	Y+8, r24	; 0x08
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    1bec:	ea 81       	ldd	r30, Y+2	; 0x02
    1bee:	fb 81       	ldd	r31, Y+3	; 0x03
    1bf0:	80 81       	ld	r24, Z
    1bf2:	91 81       	ldd	r25, Z+1	; 0x01
    1bf4:	9c 01       	movw	r18, r24
    1bf6:	32 60       	ori	r19, 0x02	; 2
    1bf8:	88 89       	ldd	r24, Y+16	; 0x10
    1bfa:	99 89       	ldd	r25, Y+17	; 0x11
    1bfc:	b9 01       	movw	r22, r18
    1bfe:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
    1c02:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c04:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c06:	99 8b       	std	Y+17, r25	; 0x11
    1c08:	88 8b       	std	Y+16, r24	; 0x10

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
    1c0a:	28 89       	ldd	r18, Y+16	; 0x10
    1c0c:	39 89       	ldd	r19, Y+17	; 0x11
    1c0e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c10:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c12:	28 17       	cp	r18, r24
    1c14:	39 07       	cpc	r19, r25
    1c16:	09 f0       	breq	.+2      	; 0x1c1a <xEventGroupSetBits+0x12a>
    1c18:	9f cf       	rjmp	.-194    	; 0x1b58 <xEventGroupSetBits+0x68>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    1c1a:	ea 81       	ldd	r30, Y+2	; 0x02
    1c1c:	fb 81       	ldd	r31, Y+3	; 0x03
    1c1e:	20 81       	ld	r18, Z
    1c20:	31 81       	ldd	r19, Z+1	; 0x01
    1c22:	88 85       	ldd	r24, Y+8	; 0x08
    1c24:	99 85       	ldd	r25, Y+9	; 0x09
    1c26:	80 95       	com	r24
    1c28:	90 95       	com	r25
    1c2a:	82 23       	and	r24, r18
    1c2c:	93 23       	and	r25, r19
    1c2e:	ea 81       	ldd	r30, Y+2	; 0x02
    1c30:	fb 81       	ldd	r31, Y+3	; 0x03
    1c32:	91 83       	std	Z+1, r25	; 0x01
    1c34:	80 83       	st	Z, r24
	}
	( void ) xTaskResumeAll();
    1c36:	0e 94 be 1b 	call	0x377c	; 0x377c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
    1c3a:	ea 81       	ldd	r30, Y+2	; 0x02
    1c3c:	fb 81       	ldd	r31, Y+3	; 0x03
    1c3e:	80 81       	ld	r24, Z
    1c40:	91 81       	ldd	r25, Z+1	; 0x01
}
    1c42:	65 96       	adiw	r28, 0x15	; 21
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	f8 94       	cli
    1c48:	de bf       	out	0x3e, r29	; 62
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	cd bf       	out	0x3d, r28	; 61
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	08 95       	ret

00001c54 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	00 d0       	rcall	.+0      	; 0x1c5a <vEventGroupDelete+0x6>
    1c5a:	00 d0       	rcall	.+0      	; 0x1c5c <vEventGroupDelete+0x8>
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <vEventGroupDelete+0xa>
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	9e 83       	std	Y+6, r25	; 0x06
    1c64:	8d 83       	std	Y+5, r24	; 0x05
EventGroup_t *pxEventBits = xEventGroup;
    1c66:	8d 81       	ldd	r24, Y+5	; 0x05
    1c68:	9e 81       	ldd	r25, Y+6	; 0x06
    1c6a:	9c 83       	std	Y+4, r25	; 0x04
    1c6c:	8b 83       	std	Y+3, r24	; 0x03
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	9c 81       	ldd	r25, Y+4	; 0x04
    1c72:	02 96       	adiw	r24, 0x02	; 2
    1c74:	9a 83       	std	Y+2, r25	; 0x02
    1c76:	89 83       	std	Y+1, r24	; 0x01

	vTaskSuspendAll();
    1c78:	0e 94 b2 1b 	call	0x3764	; 0x3764 <vTaskSuspendAll>
    1c7c:	08 c0       	rjmp	.+16     	; 0x1c8e <vEventGroupDelete+0x3a>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
    1c7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c80:	fa 81       	ldd	r31, Y+2	; 0x02
    1c82:	85 81       	ldd	r24, Z+5	; 0x05
    1c84:	96 81       	ldd	r25, Z+6	; 0x06
    1c86:	60 e0       	ldi	r22, 0x00	; 0
    1c88:	72 e0       	ldi	r23, 0x02	; 2
    1c8a:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <vTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
    1c8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c90:	fa 81       	ldd	r31, Y+2	; 0x02
    1c92:	80 81       	ld	r24, Z
    1c94:	88 23       	and	r24, r24
    1c96:	99 f7       	brne	.-26     	; 0x1c7e <vEventGroupDelete+0x2a>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
    1c98:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9c:	0e 94 be 05 	call	0xb7c	; 0xb7c <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
    1ca0:	0e 94 be 1b 	call	0x377c	; 0x377c <xTaskResumeAll>
}
    1ca4:	26 96       	adiw	r28, 0x06	; 6
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	f8 94       	cli
    1caa:	de bf       	out	0x3e, r29	; 62
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	cd bf       	out	0x3d, r28	; 61
    1cb0:	cf 91       	pop	r28
    1cb2:	df 91       	pop	r29
    1cb4:	08 95       	ret

00001cb6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
    1cb6:	df 93       	push	r29
    1cb8:	cf 93       	push	r28
    1cba:	00 d0       	rcall	.+0      	; 0x1cbc <vEventGroupSetBitsCallback+0x6>
    1cbc:	00 d0       	rcall	.+0      	; 0x1cbe <vEventGroupSetBitsCallback+0x8>
    1cbe:	00 d0       	rcall	.+0      	; 0x1cc0 <vEventGroupSetBitsCallback+0xa>
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	9a 83       	std	Y+2, r25	; 0x02
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	4b 83       	std	Y+3, r20	; 0x03
    1cca:	5c 83       	std	Y+4, r21	; 0x04
    1ccc:	6d 83       	std	Y+5, r22	; 0x05
    1cce:	7e 83       	std	Y+6, r23	; 0x06
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
    1cd0:	89 81       	ldd	r24, Y+1	; 0x01
    1cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd4:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd6:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd8:	b9 01       	movw	r22, r18
    1cda:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <xEventGroupSetBits>
}
    1cde:	26 96       	adiw	r28, 0x06	; 6
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	f8 94       	cli
    1ce4:	de bf       	out	0x3e, r29	; 62
    1ce6:	0f be       	out	0x3f, r0	; 63
    1ce8:	cd bf       	out	0x3d, r28	; 61
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	08 95       	ret

00001cf0 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	00 d0       	rcall	.+0      	; 0x1cf6 <vEventGroupClearBitsCallback+0x6>
    1cf6:	00 d0       	rcall	.+0      	; 0x1cf8 <vEventGroupClearBitsCallback+0x8>
    1cf8:	00 d0       	rcall	.+0      	; 0x1cfa <vEventGroupClearBitsCallback+0xa>
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
    1cfe:	9a 83       	std	Y+2, r25	; 0x02
    1d00:	89 83       	std	Y+1, r24	; 0x01
    1d02:	4b 83       	std	Y+3, r20	; 0x03
    1d04:	5c 83       	std	Y+4, r21	; 0x04
    1d06:	6d 83       	std	Y+5, r22	; 0x05
    1d08:	7e 83       	std	Y+6, r23	; 0x06
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
    1d0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d10:	3c 81       	ldd	r19, Y+4	; 0x04
    1d12:	b9 01       	movw	r22, r18
    1d14:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <xEventGroupClearBits>
}
    1d18:	26 96       	adiw	r28, 0x06	; 6
    1d1a:	0f b6       	in	r0, 0x3f	; 63
    1d1c:	f8 94       	cli
    1d1e:	de bf       	out	0x3e, r29	; 62
    1d20:	0f be       	out	0x3f, r0	; 63
    1d22:	cd bf       	out	0x3d, r28	; 61
    1d24:	cf 91       	pop	r28
    1d26:	df 91       	pop	r29
    1d28:	08 95       	ret

00001d2a <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
    1d2a:	df 93       	push	r29
    1d2c:	cf 93       	push	r28
    1d2e:	00 d0       	rcall	.+0      	; 0x1d30 <prvTestWaitCondition+0x6>
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <prvTestWaitCondition+0x8>
    1d32:	00 d0       	rcall	.+0      	; 0x1d34 <prvTestWaitCondition+0xa>
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	9b 83       	std	Y+3, r25	; 0x03
    1d3a:	8a 83       	std	Y+2, r24	; 0x02
    1d3c:	7d 83       	std	Y+5, r23	; 0x05
    1d3e:	6c 83       	std	Y+4, r22	; 0x04
    1d40:	4e 83       	std	Y+6, r20	; 0x06
BaseType_t xWaitConditionMet = pdFALSE;
    1d42:	19 82       	std	Y+1, r1	; 0x01

	if( xWaitForAllBits == pdFALSE )
    1d44:	8e 81       	ldd	r24, Y+6	; 0x06
    1d46:	88 23       	and	r24, r24
    1d48:	59 f4       	brne	.+22     	; 0x1d60 <prvTestWaitCondition+0x36>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d4e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d50:	3d 81       	ldd	r19, Y+5	; 0x05
    1d52:	82 23       	and	r24, r18
    1d54:	93 23       	and	r25, r19
    1d56:	00 97       	sbiw	r24, 0x00	; 0
    1d58:	81 f0       	breq	.+32     	; 0x1d7a <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	89 83       	std	Y+1, r24	; 0x01
    1d5e:	0d c0       	rjmp	.+26     	; 0x1d7a <prvTestWaitCondition+0x50>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    1d60:	2a 81       	ldd	r18, Y+2	; 0x02
    1d62:	3b 81       	ldd	r19, Y+3	; 0x03
    1d64:	8c 81       	ldd	r24, Y+4	; 0x04
    1d66:	9d 81       	ldd	r25, Y+5	; 0x05
    1d68:	28 23       	and	r18, r24
    1d6a:	39 23       	and	r19, r25
    1d6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d70:	28 17       	cp	r18, r24
    1d72:	39 07       	cpc	r19, r25
    1d74:	11 f4       	brne	.+4      	; 0x1d7a <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d7c:	26 96       	adiw	r28, 0x06	; 6
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	f8 94       	cli
    1d82:	de bf       	out	0x3e, r29	; 62
    1d84:	0f be       	out	0x3f, r0	; 63
    1d86:	cd bf       	out	0x3d, r28	; 61
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	08 95       	ret

00001d8e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1d8e:	df 93       	push	r29
    1d90:	cf 93       	push	r28
    1d92:	00 d0       	rcall	.+0      	; 0x1d94 <vListInitialise+0x6>
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    1d98:	9a 83       	std	Y+2, r25	; 0x02
    1d9a:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1da0:	03 96       	adiw	r24, 0x03	; 3
    1da2:	e9 81       	ldd	r30, Y+1	; 0x01
    1da4:	fa 81       	ldd	r31, Y+2	; 0x02
    1da6:	92 83       	std	Z+2, r25	; 0x02
    1da8:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1daa:	e9 81       	ldd	r30, Y+1	; 0x01
    1dac:	fa 81       	ldd	r31, Y+2	; 0x02
    1dae:	8f ef       	ldi	r24, 0xFF	; 255
    1db0:	9f ef       	ldi	r25, 0xFF	; 255
    1db2:	94 83       	std	Z+4, r25	; 0x04
    1db4:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dba:	03 96       	adiw	r24, 0x03	; 3
    1dbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1dbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1dc0:	96 83       	std	Z+6, r25	; 0x06
    1dc2:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc8:	03 96       	adiw	r24, 0x03	; 3
    1dca:	e9 81       	ldd	r30, Y+1	; 0x01
    1dcc:	fa 81       	ldd	r31, Y+2	; 0x02
    1dce:	90 87       	std	Z+8, r25	; 0x08
    1dd0:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1dd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd6:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	00 d0       	rcall	.+0      	; 0x1de8 <vListInitialiseItem+0x6>
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	9a 83       	std	Y+2, r25	; 0x02
    1dee:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
    1df0:	e9 81       	ldd	r30, Y+1	; 0x01
    1df2:	fa 81       	ldd	r31, Y+2	; 0x02
    1df4:	11 86       	std	Z+9, r1	; 0x09
    1df6:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
    1dfc:	cf 91       	pop	r28
    1dfe:	df 91       	pop	r29
    1e00:	08 95       	ret

00001e02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1e02:	df 93       	push	r29
    1e04:	cf 93       	push	r28
    1e06:	00 d0       	rcall	.+0      	; 0x1e08 <vListInsertEnd+0x6>
    1e08:	00 d0       	rcall	.+0      	; 0x1e0a <vListInsertEnd+0x8>
    1e0a:	00 d0       	rcall	.+0      	; 0x1e0c <vListInsertEnd+0xa>
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
    1e10:	9c 83       	std	Y+4, r25	; 0x04
    1e12:	8b 83       	std	Y+3, r24	; 0x03
    1e14:	7e 83       	std	Y+6, r23	; 0x06
    1e16:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
    1e18:	eb 81       	ldd	r30, Y+3	; 0x03
    1e1a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e1c:	81 81       	ldd	r24, Z+1	; 0x01
    1e1e:	92 81       	ldd	r25, Z+2	; 0x02
    1e20:	9a 83       	std	Y+2, r25	; 0x02
    1e22:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1e24:	ed 81       	ldd	r30, Y+5	; 0x05
    1e26:	fe 81       	ldd	r31, Y+6	; 0x06
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2c:	93 83       	std	Z+3, r25	; 0x03
    1e2e:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1e30:	e9 81       	ldd	r30, Y+1	; 0x01
    1e32:	fa 81       	ldd	r31, Y+2	; 0x02
    1e34:	84 81       	ldd	r24, Z+4	; 0x04
    1e36:	95 81       	ldd	r25, Z+5	; 0x05
    1e38:	ed 81       	ldd	r30, Y+5	; 0x05
    1e3a:	fe 81       	ldd	r31, Y+6	; 0x06
    1e3c:	95 83       	std	Z+5, r25	; 0x05
    1e3e:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1e40:	e9 81       	ldd	r30, Y+1	; 0x01
    1e42:	fa 81       	ldd	r31, Y+2	; 0x02
    1e44:	04 80       	ldd	r0, Z+4	; 0x04
    1e46:	f5 81       	ldd	r31, Z+5	; 0x05
    1e48:	e0 2d       	mov	r30, r0
    1e4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4e:	93 83       	std	Z+3, r25	; 0x03
    1e50:	82 83       	std	Z+2, r24	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
    1e52:	e9 81       	ldd	r30, Y+1	; 0x01
    1e54:	fa 81       	ldd	r31, Y+2	; 0x02
    1e56:	8d 81       	ldd	r24, Y+5	; 0x05
    1e58:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5a:	95 83       	std	Z+5, r25	; 0x05
    1e5c:	84 83       	std	Z+4, r24	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
    1e5e:	ed 81       	ldd	r30, Y+5	; 0x05
    1e60:	fe 81       	ldd	r31, Y+6	; 0x06
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	9c 81       	ldd	r25, Y+4	; 0x04
    1e66:	91 87       	std	Z+9, r25	; 0x09
    1e68:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    1e6a:	eb 81       	ldd	r30, Y+3	; 0x03
    1e6c:	fc 81       	ldd	r31, Y+4	; 0x04
    1e6e:	80 81       	ld	r24, Z
    1e70:	8f 5f       	subi	r24, 0xFF	; 255
    1e72:	eb 81       	ldd	r30, Y+3	; 0x03
    1e74:	fc 81       	ldd	r31, Y+4	; 0x04
    1e76:	80 83       	st	Z, r24
}
    1e78:	26 96       	adiw	r28, 0x06	; 6
    1e7a:	0f b6       	in	r0, 0x3f	; 63
    1e7c:	f8 94       	cli
    1e7e:	de bf       	out	0x3e, r29	; 62
    1e80:	0f be       	out	0x3f, r0	; 63
    1e82:	cd bf       	out	0x3d, r28	; 61
    1e84:	cf 91       	pop	r28
    1e86:	df 91       	pop	r29
    1e88:	08 95       	ret

00001e8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1e8a:	df 93       	push	r29
    1e8c:	cf 93       	push	r28
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
    1e92:	28 97       	sbiw	r28, 0x08	; 8
    1e94:	0f b6       	in	r0, 0x3f	; 63
    1e96:	f8 94       	cli
    1e98:	de bf       	out	0x3e, r29	; 62
    1e9a:	0f be       	out	0x3f, r0	; 63
    1e9c:	cd bf       	out	0x3d, r28	; 61
    1e9e:	9e 83       	std	Y+6, r25	; 0x06
    1ea0:	8d 83       	std	Y+5, r24	; 0x05
    1ea2:	78 87       	std	Y+8, r23	; 0x08
    1ea4:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1ea6:	ef 81       	ldd	r30, Y+7	; 0x07
    1ea8:	f8 85       	ldd	r31, Y+8	; 0x08
    1eaa:	80 81       	ld	r24, Z
    1eac:	91 81       	ldd	r25, Z+1	; 0x01
    1eae:	9a 83       	std	Y+2, r25	; 0x02
    1eb0:	89 83       	std	Y+1, r24	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1eb2:	89 81       	ldd	r24, Y+1	; 0x01
    1eb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb6:	2f ef       	ldi	r18, 0xFF	; 255
    1eb8:	8f 3f       	cpi	r24, 0xFF	; 255
    1eba:	92 07       	cpc	r25, r18
    1ebc:	39 f4       	brne	.+14     	; 0x1ecc <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1ebe:	ed 81       	ldd	r30, Y+5	; 0x05
    1ec0:	fe 81       	ldd	r31, Y+6	; 0x06
    1ec2:	87 81       	ldd	r24, Z+7	; 0x07
    1ec4:	90 85       	ldd	r25, Z+8	; 0x08
    1ec6:	9c 83       	std	Y+4, r25	; 0x04
    1ec8:	8b 83       	std	Y+3, r24	; 0x03
    1eca:	18 c0       	rjmp	.+48     	; 0x1efc <vListInsert+0x72>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ece:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed0:	03 96       	adiw	r24, 0x03	; 3
    1ed2:	9c 83       	std	Y+4, r25	; 0x04
    1ed4:	8b 83       	std	Y+3, r24	; 0x03
    1ed6:	06 c0       	rjmp	.+12     	; 0x1ee4 <vListInsert+0x5a>
    1ed8:	eb 81       	ldd	r30, Y+3	; 0x03
    1eda:	fc 81       	ldd	r31, Y+4	; 0x04
    1edc:	82 81       	ldd	r24, Z+2	; 0x02
    1ede:	93 81       	ldd	r25, Z+3	; 0x03
    1ee0:	9c 83       	std	Y+4, r25	; 0x04
    1ee2:	8b 83       	std	Y+3, r24	; 0x03
    1ee4:	eb 81       	ldd	r30, Y+3	; 0x03
    1ee6:	fc 81       	ldd	r31, Y+4	; 0x04
    1ee8:	02 80       	ldd	r0, Z+2	; 0x02
    1eea:	f3 81       	ldd	r31, Z+3	; 0x03
    1eec:	e0 2d       	mov	r30, r0
    1eee:	20 81       	ld	r18, Z
    1ef0:	31 81       	ldd	r19, Z+1	; 0x01
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef6:	82 17       	cp	r24, r18
    1ef8:	93 07       	cpc	r25, r19
    1efa:	70 f7       	brcc	.-36     	; 0x1ed8 <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1efc:	eb 81       	ldd	r30, Y+3	; 0x03
    1efe:	fc 81       	ldd	r31, Y+4	; 0x04
    1f00:	82 81       	ldd	r24, Z+2	; 0x02
    1f02:	93 81       	ldd	r25, Z+3	; 0x03
    1f04:	ef 81       	ldd	r30, Y+7	; 0x07
    1f06:	f8 85       	ldd	r31, Y+8	; 0x08
    1f08:	93 83       	std	Z+3, r25	; 0x03
    1f0a:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1f0c:	ef 81       	ldd	r30, Y+7	; 0x07
    1f0e:	f8 85       	ldd	r31, Y+8	; 0x08
    1f10:	02 80       	ldd	r0, Z+2	; 0x02
    1f12:	f3 81       	ldd	r31, Z+3	; 0x03
    1f14:	e0 2d       	mov	r30, r0
    1f16:	8f 81       	ldd	r24, Y+7	; 0x07
    1f18:	98 85       	ldd	r25, Y+8	; 0x08
    1f1a:	95 83       	std	Z+5, r25	; 0x05
    1f1c:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    1f1e:	ef 81       	ldd	r30, Y+7	; 0x07
    1f20:	f8 85       	ldd	r31, Y+8	; 0x08
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	9c 81       	ldd	r25, Y+4	; 0x04
    1f26:	95 83       	std	Z+5, r25	; 0x05
    1f28:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = pxNewListItem;
    1f2a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f2c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f2e:	8f 81       	ldd	r24, Y+7	; 0x07
    1f30:	98 85       	ldd	r25, Y+8	; 0x08
    1f32:	93 83       	std	Z+3, r25	; 0x03
    1f34:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
    1f36:	ef 81       	ldd	r30, Y+7	; 0x07
    1f38:	f8 85       	ldd	r31, Y+8	; 0x08
    1f3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3e:	91 87       	std	Z+9, r25	; 0x09
    1f40:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    1f42:	ed 81       	ldd	r30, Y+5	; 0x05
    1f44:	fe 81       	ldd	r31, Y+6	; 0x06
    1f46:	80 81       	ld	r24, Z
    1f48:	8f 5f       	subi	r24, 0xFF	; 255
    1f4a:	ed 81       	ldd	r30, Y+5	; 0x05
    1f4c:	fe 81       	ldd	r31, Y+6	; 0x06
    1f4e:	80 83       	st	Z, r24
}
    1f50:	28 96       	adiw	r28, 0x08	; 8
    1f52:	0f b6       	in	r0, 0x3f	; 63
    1f54:	f8 94       	cli
    1f56:	de bf       	out	0x3e, r29	; 62
    1f58:	0f be       	out	0x3f, r0	; 63
    1f5a:	cd bf       	out	0x3d, r28	; 61
    1f5c:	cf 91       	pop	r28
    1f5e:	df 91       	pop	r29
    1f60:	08 95       	ret

00001f62 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1f62:	df 93       	push	r29
    1f64:	cf 93       	push	r28
    1f66:	00 d0       	rcall	.+0      	; 0x1f68 <uxListRemove+0x6>
    1f68:	00 d0       	rcall	.+0      	; 0x1f6a <uxListRemove+0x8>
    1f6a:	cd b7       	in	r28, 0x3d	; 61
    1f6c:	de b7       	in	r29, 0x3e	; 62
    1f6e:	9c 83       	std	Y+4, r25	; 0x04
    1f70:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    1f72:	eb 81       	ldd	r30, Y+3	; 0x03
    1f74:	fc 81       	ldd	r31, Y+4	; 0x04
    1f76:	80 85       	ldd	r24, Z+8	; 0x08
    1f78:	91 85       	ldd	r25, Z+9	; 0x09
    1f7a:	9a 83       	std	Y+2, r25	; 0x02
    1f7c:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1f7e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f80:	fc 81       	ldd	r31, Y+4	; 0x04
    1f82:	a2 81       	ldd	r26, Z+2	; 0x02
    1f84:	b3 81       	ldd	r27, Z+3	; 0x03
    1f86:	eb 81       	ldd	r30, Y+3	; 0x03
    1f88:	fc 81       	ldd	r31, Y+4	; 0x04
    1f8a:	84 81       	ldd	r24, Z+4	; 0x04
    1f8c:	95 81       	ldd	r25, Z+5	; 0x05
    1f8e:	15 96       	adiw	r26, 0x05	; 5
    1f90:	9c 93       	st	X, r25
    1f92:	8e 93       	st	-X, r24
    1f94:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1f96:	eb 81       	ldd	r30, Y+3	; 0x03
    1f98:	fc 81       	ldd	r31, Y+4	; 0x04
    1f9a:	a4 81       	ldd	r26, Z+4	; 0x04
    1f9c:	b5 81       	ldd	r27, Z+5	; 0x05
    1f9e:	eb 81       	ldd	r30, Y+3	; 0x03
    1fa0:	fc 81       	ldd	r31, Y+4	; 0x04
    1fa2:	82 81       	ldd	r24, Z+2	; 0x02
    1fa4:	93 81       	ldd	r25, Z+3	; 0x03
    1fa6:	13 96       	adiw	r26, 0x03	; 3
    1fa8:	9c 93       	st	X, r25
    1faa:	8e 93       	st	-X, r24
    1fac:	12 97       	sbiw	r26, 0x02	; 2

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1fae:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb0:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb2:	21 81       	ldd	r18, Z+1	; 0x01
    1fb4:	32 81       	ldd	r19, Z+2	; 0x02
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fba:	28 17       	cp	r18, r24
    1fbc:	39 07       	cpc	r19, r25
    1fbe:	41 f4       	brne	.+16     	; 0x1fd0 <uxListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1fc0:	eb 81       	ldd	r30, Y+3	; 0x03
    1fc2:	fc 81       	ldd	r31, Y+4	; 0x04
    1fc4:	84 81       	ldd	r24, Z+4	; 0x04
    1fc6:	95 81       	ldd	r25, Z+5	; 0x05
    1fc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1fca:	fa 81       	ldd	r31, Y+2	; 0x02
    1fcc:	92 83       	std	Z+2, r25	; 0x02
    1fce:	81 83       	std	Z+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
    1fd0:	eb 81       	ldd	r30, Y+3	; 0x03
    1fd2:	fc 81       	ldd	r31, Y+4	; 0x04
    1fd4:	11 86       	std	Z+9, r1	; 0x09
    1fd6:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    1fd8:	e9 81       	ldd	r30, Y+1	; 0x01
    1fda:	fa 81       	ldd	r31, Y+2	; 0x02
    1fdc:	80 81       	ld	r24, Z
    1fde:	81 50       	subi	r24, 0x01	; 1
    1fe0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fe2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fe4:	80 83       	st	Z, r24

	return pxList->uxNumberOfItems;
    1fe6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fe8:	fa 81       	ldd	r31, Y+2	; 0x02
    1fea:	80 81       	ld	r24, Z
}
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	cf 91       	pop	r28
    1ff6:	df 91       	pop	r29
    1ff8:	08 95       	ret

00001ffa <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    1ffa:	df 93       	push	r29
    1ffc:	cf 93       	push	r28
    1ffe:	00 d0       	rcall	.+0      	; 0x2000 <xQueueGenericReset+0x6>
    2000:	00 d0       	rcall	.+0      	; 0x2002 <xQueueGenericReset+0x8>
    2002:	0f 92       	push	r0
    2004:	cd b7       	in	r28, 0x3d	; 61
    2006:	de b7       	in	r29, 0x3e	; 62
    2008:	9c 83       	std	Y+4, r25	; 0x04
    200a:	8b 83       	std	Y+3, r24	; 0x03
    200c:	6d 83       	std	Y+5, r22	; 0x05
Queue_t * const pxQueue = xQueue;
    200e:	8b 81       	ldd	r24, Y+3	; 0x03
    2010:	9c 81       	ldd	r25, Y+4	; 0x04
    2012:	9a 83       	std	Y+2, r25	; 0x02
    2014:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    2016:	0f b6       	in	r0, 0x3f	; 63
    2018:	f8 94       	cli
    201a:	0f 92       	push	r0
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    201c:	e9 81       	ldd	r30, Y+1	; 0x01
    201e:	fa 81       	ldd	r31, Y+2	; 0x02
    2020:	40 81       	ld	r20, Z
    2022:	51 81       	ldd	r21, Z+1	; 0x01
    2024:	e9 81       	ldd	r30, Y+1	; 0x01
    2026:	fa 81       	ldd	r31, Y+2	; 0x02
    2028:	83 8d       	ldd	r24, Z+27	; 0x1b
    202a:	28 2f       	mov	r18, r24
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	e9 81       	ldd	r30, Y+1	; 0x01
    2030:	fa 81       	ldd	r31, Y+2	; 0x02
    2032:	84 8d       	ldd	r24, Z+28	; 0x1c
    2034:	88 2f       	mov	r24, r24
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	bc 01       	movw	r22, r24
    203a:	26 9f       	mul	r18, r22
    203c:	c0 01       	movw	r24, r0
    203e:	27 9f       	mul	r18, r23
    2040:	90 0d       	add	r25, r0
    2042:	36 9f       	mul	r19, r22
    2044:	90 0d       	add	r25, r0
    2046:	11 24       	eor	r1, r1
    2048:	84 0f       	add	r24, r20
    204a:	95 1f       	adc	r25, r21
    204c:	e9 81       	ldd	r30, Y+1	; 0x01
    204e:	fa 81       	ldd	r31, Y+2	; 0x02
    2050:	95 83       	std	Z+5, r25	; 0x05
    2052:	84 83       	std	Z+4, r24	; 0x04
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    2054:	e9 81       	ldd	r30, Y+1	; 0x01
    2056:	fa 81       	ldd	r31, Y+2	; 0x02
    2058:	12 8e       	std	Z+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    205a:	e9 81       	ldd	r30, Y+1	; 0x01
    205c:	fa 81       	ldd	r31, Y+2	; 0x02
    205e:	80 81       	ld	r24, Z
    2060:	91 81       	ldd	r25, Z+1	; 0x01
    2062:	e9 81       	ldd	r30, Y+1	; 0x01
    2064:	fa 81       	ldd	r31, Y+2	; 0x02
    2066:	93 83       	std	Z+3, r25	; 0x03
    2068:	82 83       	std	Z+2, r24	; 0x02
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    206a:	e9 81       	ldd	r30, Y+1	; 0x01
    206c:	fa 81       	ldd	r31, Y+2	; 0x02
    206e:	40 81       	ld	r20, Z
    2070:	51 81       	ldd	r21, Z+1	; 0x01
    2072:	e9 81       	ldd	r30, Y+1	; 0x01
    2074:	fa 81       	ldd	r31, Y+2	; 0x02
    2076:	83 8d       	ldd	r24, Z+27	; 0x1b
    2078:	88 2f       	mov	r24, r24
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	9c 01       	movw	r18, r24
    207e:	21 50       	subi	r18, 0x01	; 1
    2080:	30 40       	sbci	r19, 0x00	; 0
    2082:	e9 81       	ldd	r30, Y+1	; 0x01
    2084:	fa 81       	ldd	r31, Y+2	; 0x02
    2086:	84 8d       	ldd	r24, Z+28	; 0x1c
    2088:	88 2f       	mov	r24, r24
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	bc 01       	movw	r22, r24
    208e:	26 9f       	mul	r18, r22
    2090:	c0 01       	movw	r24, r0
    2092:	27 9f       	mul	r18, r23
    2094:	90 0d       	add	r25, r0
    2096:	36 9f       	mul	r19, r22
    2098:	90 0d       	add	r25, r0
    209a:	11 24       	eor	r1, r1
    209c:	84 0f       	add	r24, r20
    209e:	95 1f       	adc	r25, r21
    20a0:	e9 81       	ldd	r30, Y+1	; 0x01
    20a2:	fa 81       	ldd	r31, Y+2	; 0x02
    20a4:	97 83       	std	Z+7, r25	; 0x07
    20a6:	86 83       	std	Z+6, r24	; 0x06
		pxQueue->cRxLock = queueUNLOCKED;
    20a8:	e9 81       	ldd	r30, Y+1	; 0x01
    20aa:	fa 81       	ldd	r31, Y+2	; 0x02
    20ac:	8f ef       	ldi	r24, 0xFF	; 255
    20ae:	85 8f       	std	Z+29, r24	; 0x1d
		pxQueue->cTxLock = queueUNLOCKED;
    20b0:	e9 81       	ldd	r30, Y+1	; 0x01
    20b2:	fa 81       	ldd	r31, Y+2	; 0x02
    20b4:	8f ef       	ldi	r24, 0xFF	; 255
    20b6:	86 8f       	std	Z+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
    20b8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ba:	88 23       	and	r24, r24
    20bc:	79 f4       	brne	.+30     	; 0x20dc <xQueueGenericReset+0xe2>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    20be:	e9 81       	ldd	r30, Y+1	; 0x01
    20c0:	fa 81       	ldd	r31, Y+2	; 0x02
    20c2:	80 85       	ldd	r24, Z+8	; 0x08
    20c4:	88 23       	and	r24, r24
    20c6:	a1 f0       	breq	.+40     	; 0x20f0 <xQueueGenericReset+0xf6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	9a 81       	ldd	r25, Y+2	; 0x02
    20cc:	08 96       	adiw	r24, 0x08	; 8
    20ce:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <xTaskRemoveFromEventList>
    20d2:	88 23       	and	r24, r24
    20d4:	69 f0       	breq	.+26     	; 0x20f0 <xQueueGenericReset+0xf6>
				{
					queueYIELD_IF_USING_PREEMPTION();
    20d6:	0e 94 95 07 	call	0xf2a	; 0xf2a <vPortYield>
    20da:	0a c0       	rjmp	.+20     	; 0x20f0 <xQueueGenericReset+0xf6>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    20dc:	89 81       	ldd	r24, Y+1	; 0x01
    20de:	9a 81       	ldd	r25, Y+2	; 0x02
    20e0:	08 96       	adiw	r24, 0x08	; 8
    20e2:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ea:	41 96       	adiw	r24, 0x11	; 17
    20ec:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    20f0:	0f 90       	pop	r0
    20f2:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    20f4:	81 e0       	ldi	r24, 0x01	; 1
}
    20f6:	0f 90       	pop	r0
    20f8:	0f 90       	pop	r0
    20fa:	0f 90       	pop	r0
    20fc:	0f 90       	pop	r0
    20fe:	0f 90       	pop	r0
    2100:	cf 91       	pop	r28
    2102:	df 91       	pop	r29
    2104:	08 95       	ret

00002106 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    2106:	0f 93       	push	r16
    2108:	1f 93       	push	r17
    210a:	df 93       	push	r29
    210c:	cf 93       	push	r28
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
    2112:	29 97       	sbiw	r28, 0x09	; 9
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
    211e:	8f 83       	std	Y+7, r24	; 0x07
    2120:	68 87       	std	Y+8, r22	; 0x08
    2122:	49 87       	std	Y+9, r20	; 0x09
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2124:	8f 81       	ldd	r24, Y+7	; 0x07
    2126:	28 2f       	mov	r18, r24
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	88 85       	ldd	r24, Y+8	; 0x08
    212c:	88 2f       	mov	r24, r24
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	ac 01       	movw	r20, r24
    2132:	24 9f       	mul	r18, r20
    2134:	c0 01       	movw	r24, r0
    2136:	25 9f       	mul	r18, r21
    2138:	90 0d       	add	r25, r0
    213a:	34 9f       	mul	r19, r20
    213c:	90 0d       	add	r25, r0
    213e:	11 24       	eor	r1, r1
    2140:	9c 83       	std	Y+4, r25	; 0x04
    2142:	8b 83       	std	Y+3, r24	; 0x03
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	9c 81       	ldd	r25, Y+4	; 0x04
    2148:	4f 96       	adiw	r24, 0x1f	; 31
    214a:	0e 94 a3 05 	call	0xb46	; 0xb46 <pvPortMalloc>
    214e:	9e 83       	std	Y+6, r25	; 0x06
    2150:	8d 83       	std	Y+5, r24	; 0x05

		if( pxNewQueue != NULL )
    2152:	8d 81       	ldd	r24, Y+5	; 0x05
    2154:	9e 81       	ldd	r25, Y+6	; 0x06
    2156:	00 97       	sbiw	r24, 0x00	; 0
    2158:	a1 f0       	breq	.+40     	; 0x2182 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
    215a:	8d 81       	ldd	r24, Y+5	; 0x05
    215c:	9e 81       	ldd	r25, Y+6	; 0x06
    215e:	9a 83       	std	Y+2, r25	; 0x02
    2160:	89 83       	std	Y+1, r24	; 0x01
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	9a 81       	ldd	r25, Y+2	; 0x02
    2166:	4f 96       	adiw	r24, 0x1f	; 31
    2168:	9a 83       	std	Y+2, r25	; 0x02
    216a:	89 83       	std	Y+1, r24	; 0x01
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    216c:	29 81       	ldd	r18, Y+1	; 0x01
    216e:	3a 81       	ldd	r19, Y+2	; 0x02
    2170:	ed 81       	ldd	r30, Y+5	; 0x05
    2172:	fe 81       	ldd	r31, Y+6	; 0x06
    2174:	8f 81       	ldd	r24, Y+7	; 0x07
    2176:	68 85       	ldd	r22, Y+8	; 0x08
    2178:	a9 01       	movw	r20, r18
    217a:	29 85       	ldd	r18, Y+9	; 0x09
    217c:	8f 01       	movw	r16, r30
    217e:	0e 94 ce 10 	call	0x219c	; 0x219c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
    2182:	8d 81       	ldd	r24, Y+5	; 0x05
    2184:	9e 81       	ldd	r25, Y+6	; 0x06
	}
    2186:	29 96       	adiw	r28, 0x09	; 9
    2188:	0f b6       	in	r0, 0x3f	; 63
    218a:	f8 94       	cli
    218c:	de bf       	out	0x3e, r29	; 62
    218e:	0f be       	out	0x3f, r0	; 63
    2190:	cd bf       	out	0x3d, r28	; 61
    2192:	cf 91       	pop	r28
    2194:	df 91       	pop	r29
    2196:	1f 91       	pop	r17
    2198:	0f 91       	pop	r16
    219a:	08 95       	ret

0000219c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    219c:	0f 93       	push	r16
    219e:	1f 93       	push	r17
    21a0:	df 93       	push	r29
    21a2:	cf 93       	push	r28
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
    21a8:	27 97       	sbiw	r28, 0x07	; 7
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	f8 94       	cli
    21ae:	de bf       	out	0x3e, r29	; 62
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	cd bf       	out	0x3d, r28	; 61
    21b4:	89 83       	std	Y+1, r24	; 0x01
    21b6:	6a 83       	std	Y+2, r22	; 0x02
    21b8:	5c 83       	std	Y+4, r21	; 0x04
    21ba:	4b 83       	std	Y+3, r20	; 0x03
    21bc:	2d 83       	std	Y+5, r18	; 0x05
    21be:	1f 83       	std	Y+7, r17	; 0x07
    21c0:	0e 83       	std	Y+6, r16	; 0x06
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	88 23       	and	r24, r24
    21c6:	39 f4       	brne	.+14     	; 0x21d6 <prvInitialiseNewQueue+0x3a>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    21c8:	8e 81       	ldd	r24, Y+6	; 0x06
    21ca:	9f 81       	ldd	r25, Y+7	; 0x07
    21cc:	ee 81       	ldd	r30, Y+6	; 0x06
    21ce:	ff 81       	ldd	r31, Y+7	; 0x07
    21d0:	91 83       	std	Z+1, r25	; 0x01
    21d2:	80 83       	st	Z, r24
    21d4:	06 c0       	rjmp	.+12     	; 0x21e2 <prvInitialiseNewQueue+0x46>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    21d6:	8b 81       	ldd	r24, Y+3	; 0x03
    21d8:	9c 81       	ldd	r25, Y+4	; 0x04
    21da:	ee 81       	ldd	r30, Y+6	; 0x06
    21dc:	ff 81       	ldd	r31, Y+7	; 0x07
    21de:	91 83       	std	Z+1, r25	; 0x01
    21e0:	80 83       	st	Z, r24
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    21e2:	ee 81       	ldd	r30, Y+6	; 0x06
    21e4:	ff 81       	ldd	r31, Y+7	; 0x07
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
    21e8:	83 8f       	std	Z+27, r24	; 0x1b
	pxNewQueue->uxItemSize = uxItemSize;
    21ea:	ee 81       	ldd	r30, Y+6	; 0x06
    21ec:	ff 81       	ldd	r31, Y+7	; 0x07
    21ee:	8a 81       	ldd	r24, Y+2	; 0x02
    21f0:	84 8f       	std	Z+28, r24	; 0x1c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    21f2:	8e 81       	ldd	r24, Y+6	; 0x06
    21f4:	9f 81       	ldd	r25, Y+7	; 0x07
    21f6:	61 e0       	ldi	r22, 0x01	; 1
    21f8:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    21fc:	27 96       	adiw	r28, 0x07	; 7
    21fe:	0f b6       	in	r0, 0x3f	; 63
    2200:	f8 94       	cli
    2202:	de bf       	out	0x3e, r29	; 62
    2204:	0f be       	out	0x3f, r0	; 63
    2206:	cd bf       	out	0x3d, r28	; 61
    2208:	cf 91       	pop	r28
    220a:	df 91       	pop	r29
    220c:	1f 91       	pop	r17
    220e:	0f 91       	pop	r16
    2210:	08 95       	ret

00002212 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	2f 97       	sbiw	r28, 0x0f	; 15
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	99 87       	std	Y+9, r25	; 0x09
    2228:	88 87       	std	Y+8, r24	; 0x08
    222a:	7b 87       	std	Y+11, r23	; 0x0b
    222c:	6a 87       	std	Y+10, r22	; 0x0a
    222e:	5d 87       	std	Y+13, r21	; 0x0d
    2230:	4c 87       	std	Y+12, r20	; 0x0c
    2232:	2e 87       	std	Y+14, r18	; 0x0e
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    2234:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
    2236:	88 85       	ldd	r24, Y+8	; 0x08
    2238:	99 85       	ldd	r25, Y+9	; 0x09
    223a:	9a 83       	std	Y+2, r25	; 0x02
    223c:	89 83       	std	Y+1, r24	; 0x01
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    223e:	0f b6       	in	r0, 0x3f	; 63
    2240:	f8 94       	cli
    2242:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    2244:	e9 81       	ldd	r30, Y+1	; 0x01
    2246:	fa 81       	ldd	r31, Y+2	; 0x02
    2248:	92 8d       	ldd	r25, Z+26	; 0x1a
    224a:	e9 81       	ldd	r30, Y+1	; 0x01
    224c:	fa 81       	ldd	r31, Y+2	; 0x02
    224e:	83 8d       	ldd	r24, Z+27	; 0x1b
    2250:	98 17       	cp	r25, r24
    2252:	18 f0       	brcs	.+6      	; 0x225a <xQueueGenericSend+0x48>
    2254:	8e 85       	ldd	r24, Y+14	; 0x0e
    2256:	82 30       	cpi	r24, 0x02	; 2
    2258:	11 f5       	brne	.+68     	; 0x229e <xQueueGenericSend+0x8c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    225a:	89 81       	ldd	r24, Y+1	; 0x01
    225c:	9a 81       	ldd	r25, Y+2	; 0x02
    225e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2260:	3b 85       	ldd	r19, Y+11	; 0x0b
    2262:	b9 01       	movw	r22, r18
    2264:	4e 85       	ldd	r20, Y+14	; 0x0e
    2266:	0e 94 5f 15 	call	0x2abe	; 0x2abe <prvCopyDataToQueue>
    226a:	8b 83       	std	Y+3, r24	; 0x03

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    226c:	e9 81       	ldd	r30, Y+1	; 0x01
    226e:	fa 81       	ldd	r31, Y+2	; 0x02
    2270:	81 89       	ldd	r24, Z+17	; 0x11
    2272:	88 23       	and	r24, r24
    2274:	51 f0       	breq	.+20     	; 0x228a <xQueueGenericSend+0x78>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2276:	89 81       	ldd	r24, Y+1	; 0x01
    2278:	9a 81       	ldd	r25, Y+2	; 0x02
    227a:	41 96       	adiw	r24, 0x11	; 17
    227c:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <xTaskRemoveFromEventList>
    2280:	88 23       	and	r24, r24
    2282:	41 f0       	breq	.+16     	; 0x2294 <xQueueGenericSend+0x82>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    2284:	0e 94 95 07 	call	0xf2a	; 0xf2a <vPortYield>
    2288:	05 c0       	rjmp	.+10     	; 0x2294 <xQueueGenericSend+0x82>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    228a:	8b 81       	ldd	r24, Y+3	; 0x03
    228c:	88 23       	and	r24, r24
    228e:	11 f0       	breq	.+4      	; 0x2294 <xQueueGenericSend+0x82>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    2290:	0e 94 95 07 	call	0xf2a	; 0xf2a <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    2294:	0f 90       	pop	r0
    2296:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	8f 87       	std	Y+15, r24	; 0x0f
    229c:	5c c0       	rjmp	.+184    	; 0x2356 <xQueueGenericSend+0x144>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    229e:	8c 85       	ldd	r24, Y+12	; 0x0c
    22a0:	9d 85       	ldd	r25, Y+13	; 0x0d
    22a2:	00 97       	sbiw	r24, 0x00	; 0
    22a4:	21 f4       	brne	.+8      	; 0x22ae <xQueueGenericSend+0x9c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    22a6:	0f 90       	pop	r0
    22a8:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    22aa:	1f 86       	std	Y+15, r1	; 0x0f
    22ac:	54 c0       	rjmp	.+168    	; 0x2356 <xQueueGenericSend+0x144>
				}
				else if( xEntryTimeSet == pdFALSE )
    22ae:	8c 81       	ldd	r24, Y+4	; 0x04
    22b0:	88 23       	and	r24, r24
    22b2:	31 f4       	brne	.+12     	; 0x22c0 <xQueueGenericSend+0xae>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    22b4:	ce 01       	movw	r24, r28
    22b6:	05 96       	adiw	r24, 0x05	; 5
    22b8:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    22c0:	0f 90       	pop	r0
    22c2:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    22c4:	0e 94 b2 1b 	call	0x3764	; 0x3764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    22c8:	0f b6       	in	r0, 0x3f	; 63
    22ca:	f8 94       	cli
    22cc:	0f 92       	push	r0
    22ce:	e9 81       	ldd	r30, Y+1	; 0x01
    22d0:	fa 81       	ldd	r31, Y+2	; 0x02
    22d2:	85 8d       	ldd	r24, Z+29	; 0x1d
    22d4:	8f 3f       	cpi	r24, 0xFF	; 255
    22d6:	19 f4       	brne	.+6      	; 0x22de <xQueueGenericSend+0xcc>
    22d8:	e9 81       	ldd	r30, Y+1	; 0x01
    22da:	fa 81       	ldd	r31, Y+2	; 0x02
    22dc:	15 8e       	std	Z+29, r1	; 0x1d
    22de:	e9 81       	ldd	r30, Y+1	; 0x01
    22e0:	fa 81       	ldd	r31, Y+2	; 0x02
    22e2:	86 8d       	ldd	r24, Z+30	; 0x1e
    22e4:	8f 3f       	cpi	r24, 0xFF	; 255
    22e6:	19 f4       	brne	.+6      	; 0x22ee <xQueueGenericSend+0xdc>
    22e8:	e9 81       	ldd	r30, Y+1	; 0x01
    22ea:	fa 81       	ldd	r31, Y+2	; 0x02
    22ec:	16 8e       	std	Z+30, r1	; 0x1e
    22ee:	0f 90       	pop	r0
    22f0:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    22f2:	ce 01       	movw	r24, r28
    22f4:	05 96       	adiw	r24, 0x05	; 5
    22f6:	9e 01       	movw	r18, r28
    22f8:	24 5f       	subi	r18, 0xF4	; 244
    22fa:	3f 4f       	sbci	r19, 0xFF	; 255
    22fc:	b9 01       	movw	r22, r18
    22fe:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <xTaskCheckForTimeOut>
    2302:	88 23       	and	r24, r24
    2304:	09 f5       	brne	.+66     	; 0x2348 <xQueueGenericSend+0x136>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    2306:	89 81       	ldd	r24, Y+1	; 0x01
    2308:	9a 81       	ldd	r25, Y+2	; 0x02
    230a:	0e 94 db 16 	call	0x2db6	; 0x2db6 <prvIsQueueFull>
    230e:	88 23       	and	r24, r24
    2310:	a1 f0       	breq	.+40     	; 0x233a <xQueueGenericSend+0x128>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	9a 81       	ldd	r25, Y+2	; 0x02
    2316:	08 96       	adiw	r24, 0x08	; 8
    2318:	2c 85       	ldd	r18, Y+12	; 0x0c
    231a:	3d 85       	ldd	r19, Y+13	; 0x0d
    231c:	b9 01       	movw	r22, r18
    231e:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	9a 81       	ldd	r25, Y+2	; 0x02
    2326:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    232a:	0e 94 be 1b 	call	0x377c	; 0x377c <xTaskResumeAll>
    232e:	88 23       	and	r24, r24
    2330:	09 f0       	breq	.+2      	; 0x2334 <xQueueGenericSend+0x122>
    2332:	85 cf       	rjmp	.-246    	; 0x223e <xQueueGenericSend+0x2c>
				{
					portYIELD_WITHIN_API();
    2334:	0e 94 95 07 	call	0xf2a	; 0xf2a <vPortYield>
    2338:	82 cf       	rjmp	.-252    	; 0x223e <xQueueGenericSend+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	9a 81       	ldd	r25, Y+2	; 0x02
    233e:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2342:	0e 94 be 1b 	call	0x377c	; 0x377c <xTaskResumeAll>
    2346:	7b cf       	rjmp	.-266    	; 0x223e <xQueueGenericSend+0x2c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    2348:	89 81       	ldd	r24, Y+1	; 0x01
    234a:	9a 81       	ldd	r25, Y+2	; 0x02
    234c:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2350:	0e 94 be 1b 	call	0x377c	; 0x377c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    2354:	1f 86       	std	Y+15, r1	; 0x0f
    2356:	8f 85       	ldd	r24, Y+15	; 0x0f
		}
	} /*lint -restore */
}
    2358:	2f 96       	adiw	r28, 0x0f	; 15
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	f8 94       	cli
    235e:	de bf       	out	0x3e, r29	; 62
    2360:	0f be       	out	0x3f, r0	; 63
    2362:	cd bf       	out	0x3d, r28	; 61
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	08 95       	ret

0000236a <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    2372:	2d 97       	sbiw	r28, 0x0d	; 13
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	de bf       	out	0x3e, r29	; 62
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	cd bf       	out	0x3d, r28	; 61
    237e:	98 87       	std	Y+8, r25	; 0x08
    2380:	8f 83       	std	Y+7, r24	; 0x07
    2382:	7a 87       	std	Y+10, r23	; 0x0a
    2384:	69 87       	std	Y+9, r22	; 0x09
    2386:	5c 87       	std	Y+12, r21	; 0x0c
    2388:	4b 87       	std	Y+11, r20	; 0x0b
    238a:	2d 87       	std	Y+13, r18	; 0x0d
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
    238c:	8f 81       	ldd	r24, Y+7	; 0x07
    238e:	98 85       	ldd	r25, Y+8	; 0x08
    2390:	9c 83       	std	Y+4, r25	; 0x04
    2392:	8b 83       	std	Y+3, r24	; 0x03
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2394:	1d 82       	std	Y+5, r1	; 0x05
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    2396:	eb 81       	ldd	r30, Y+3	; 0x03
    2398:	fc 81       	ldd	r31, Y+4	; 0x04
    239a:	92 8d       	ldd	r25, Z+26	; 0x1a
    239c:	eb 81       	ldd	r30, Y+3	; 0x03
    239e:	fc 81       	ldd	r31, Y+4	; 0x04
    23a0:	83 8d       	ldd	r24, Z+27	; 0x1b
    23a2:	98 17       	cp	r25, r24
    23a4:	18 f0       	brcs	.+6      	; 0x23ac <xQueueGenericSendFromISR+0x42>
    23a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    23a8:	82 30       	cpi	r24, 0x02	; 2
    23aa:	81 f5       	brne	.+96     	; 0x240c <xQueueGenericSendFromISR+0xa2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    23ac:	eb 81       	ldd	r30, Y+3	; 0x03
    23ae:	fc 81       	ldd	r31, Y+4	; 0x04
    23b0:	86 8d       	ldd	r24, Z+30	; 0x1e
    23b2:	8a 83       	std	Y+2, r24	; 0x02
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
    23b4:	eb 81       	ldd	r30, Y+3	; 0x03
    23b6:	fc 81       	ldd	r31, Y+4	; 0x04
    23b8:	82 8d       	ldd	r24, Z+26	; 0x1a
    23ba:	89 83       	std	Y+1, r24	; 0x01
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	9c 81       	ldd	r25, Y+4	; 0x04
    23c0:	29 85       	ldd	r18, Y+9	; 0x09
    23c2:	3a 85       	ldd	r19, Y+10	; 0x0a
    23c4:	b9 01       	movw	r22, r18
    23c6:	4d 85       	ldd	r20, Y+13	; 0x0d
    23c8:	0e 94 5f 15 	call	0x2abe	; 0x2abe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    23cc:	8a 81       	ldd	r24, Y+2	; 0x02
    23ce:	8f 3f       	cpi	r24, 0xFF	; 255
    23d0:	a9 f4       	brne	.+42     	; 0x23fc <xQueueGenericSendFromISR+0x92>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    23d2:	eb 81       	ldd	r30, Y+3	; 0x03
    23d4:	fc 81       	ldd	r31, Y+4	; 0x04
    23d6:	81 89       	ldd	r24, Z+17	; 0x11
    23d8:	88 23       	and	r24, r24
    23da:	a9 f0       	breq	.+42     	; 0x2406 <xQueueGenericSendFromISR+0x9c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    23dc:	8b 81       	ldd	r24, Y+3	; 0x03
    23de:	9c 81       	ldd	r25, Y+4	; 0x04
    23e0:	41 96       	adiw	r24, 0x11	; 17
    23e2:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <xTaskRemoveFromEventList>
    23e6:	88 23       	and	r24, r24
    23e8:	71 f0       	breq	.+28     	; 0x2406 <xQueueGenericSendFromISR+0x9c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    23ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    23ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    23ee:	00 97       	sbiw	r24, 0x00	; 0
    23f0:	51 f0       	breq	.+20     	; 0x2406 <xQueueGenericSendFromISR+0x9c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    23f2:	eb 85       	ldd	r30, Y+11	; 0x0b
    23f4:	fc 85       	ldd	r31, Y+12	; 0x0c
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	80 83       	st	Z, r24
    23fa:	05 c0       	rjmp	.+10     	; 0x2406 <xQueueGenericSendFromISR+0x9c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    23fc:	8a 81       	ldd	r24, Y+2	; 0x02
    23fe:	8f 5f       	subi	r24, 0xFF	; 255
    2400:	eb 81       	ldd	r30, Y+3	; 0x03
    2402:	fc 81       	ldd	r31, Y+4	; 0x04
    2404:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	8e 83       	std	Y+6, r24	; 0x06
    240a:	01 c0       	rjmp	.+2      	; 0x240e <xQueueGenericSendFromISR+0xa4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    240c:	1e 82       	std	Y+6, r1	; 0x06
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    240e:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2410:	2d 96       	adiw	r28, 0x0d	; 13
    2412:	0f b6       	in	r0, 0x3f	; 63
    2414:	f8 94       	cli
    2416:	de bf       	out	0x3e, r29	; 62
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	cd bf       	out	0x3d, r28	; 61
    241c:	cf 91       	pop	r28
    241e:	df 91       	pop	r29
    2420:	08 95       	ret

00002422 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    2422:	df 93       	push	r29
    2424:	cf 93       	push	r28
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
    242a:	2a 97       	sbiw	r28, 0x0a	; 10
    242c:	0f b6       	in	r0, 0x3f	; 63
    242e:	f8 94       	cli
    2430:	de bf       	out	0x3e, r29	; 62
    2432:	0f be       	out	0x3f, r0	; 63
    2434:	cd bf       	out	0x3d, r28	; 61
    2436:	98 87       	std	Y+8, r25	; 0x08
    2438:	8f 83       	std	Y+7, r24	; 0x07
    243a:	7a 87       	std	Y+10, r23	; 0x0a
    243c:	69 87       	std	Y+9, r22	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
    243e:	8f 81       	ldd	r24, Y+7	; 0x07
    2440:	98 85       	ldd	r25, Y+8	; 0x08
    2442:	9c 83       	std	Y+4, r25	; 0x04
    2444:	8b 83       	std	Y+3, r24	; 0x03
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2446:	1d 82       	std	Y+5, r1	; 0x05
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2448:	eb 81       	ldd	r30, Y+3	; 0x03
    244a:	fc 81       	ldd	r31, Y+4	; 0x04
    244c:	82 8d       	ldd	r24, Z+26	; 0x1a
    244e:	8a 83       	std	Y+2, r24	; 0x02

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    2450:	eb 81       	ldd	r30, Y+3	; 0x03
    2452:	fc 81       	ldd	r31, Y+4	; 0x04
    2454:	93 8d       	ldd	r25, Z+27	; 0x1b
    2456:	8a 81       	ldd	r24, Y+2	; 0x02
    2458:	89 17       	cp	r24, r25
    245a:	48 f5       	brcc	.+82     	; 0x24ae <xQueueGiveFromISR+0x8c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    245c:	eb 81       	ldd	r30, Y+3	; 0x03
    245e:	fc 81       	ldd	r31, Y+4	; 0x04
    2460:	86 8d       	ldd	r24, Z+30	; 0x1e
    2462:	89 83       	std	Y+1, r24	; 0x01
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    2464:	8a 81       	ldd	r24, Y+2	; 0x02
    2466:	8f 5f       	subi	r24, 0xFF	; 255
    2468:	eb 81       	ldd	r30, Y+3	; 0x03
    246a:	fc 81       	ldd	r31, Y+4	; 0x04
    246c:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    246e:	89 81       	ldd	r24, Y+1	; 0x01
    2470:	8f 3f       	cpi	r24, 0xFF	; 255
    2472:	a9 f4       	brne	.+42     	; 0x249e <xQueueGiveFromISR+0x7c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2474:	eb 81       	ldd	r30, Y+3	; 0x03
    2476:	fc 81       	ldd	r31, Y+4	; 0x04
    2478:	81 89       	ldd	r24, Z+17	; 0x11
    247a:	88 23       	and	r24, r24
    247c:	a9 f0       	breq	.+42     	; 0x24a8 <xQueueGiveFromISR+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    247e:	8b 81       	ldd	r24, Y+3	; 0x03
    2480:	9c 81       	ldd	r25, Y+4	; 0x04
    2482:	41 96       	adiw	r24, 0x11	; 17
    2484:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <xTaskRemoveFromEventList>
    2488:	88 23       	and	r24, r24
    248a:	71 f0       	breq	.+28     	; 0x24a8 <xQueueGiveFromISR+0x86>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    248c:	89 85       	ldd	r24, Y+9	; 0x09
    248e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2490:	00 97       	sbiw	r24, 0x00	; 0
    2492:	51 f0       	breq	.+20     	; 0x24a8 <xQueueGiveFromISR+0x86>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    2494:	e9 85       	ldd	r30, Y+9	; 0x09
    2496:	fa 85       	ldd	r31, Y+10	; 0x0a
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	80 83       	st	Z, r24
    249c:	05 c0       	rjmp	.+10     	; 0x24a8 <xQueueGiveFromISR+0x86>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    249e:	89 81       	ldd	r24, Y+1	; 0x01
    24a0:	8f 5f       	subi	r24, 0xFF	; 255
    24a2:	eb 81       	ldd	r30, Y+3	; 0x03
    24a4:	fc 81       	ldd	r31, Y+4	; 0x04
    24a6:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	8e 83       	std	Y+6, r24	; 0x06
    24ac:	01 c0       	rjmp	.+2      	; 0x24b0 <xQueueGiveFromISR+0x8e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    24ae:	1e 82       	std	Y+6, r1	; 0x06
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    24b0:	8e 81       	ldd	r24, Y+6	; 0x06
}
    24b2:	2a 96       	adiw	r28, 0x0a	; 10
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	f8 94       	cli
    24b8:	de bf       	out	0x3e, r29	; 62
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	cd bf       	out	0x3d, r28	; 61
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	08 95       	ret

000024c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    24c4:	df 93       	push	r29
    24c6:	cf 93       	push	r28
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
    24cc:	2e 97       	sbiw	r28, 0x0e	; 14
    24ce:	0f b6       	in	r0, 0x3f	; 63
    24d0:	f8 94       	cli
    24d2:	de bf       	out	0x3e, r29	; 62
    24d4:	0f be       	out	0x3f, r0	; 63
    24d6:	cd bf       	out	0x3d, r28	; 61
    24d8:	99 87       	std	Y+9, r25	; 0x09
    24da:	88 87       	std	Y+8, r24	; 0x08
    24dc:	7b 87       	std	Y+11, r23	; 0x0b
    24de:	6a 87       	std	Y+10, r22	; 0x0a
    24e0:	5d 87       	std	Y+13, r21	; 0x0d
    24e2:	4c 87       	std	Y+12, r20	; 0x0c
BaseType_t xEntryTimeSet = pdFALSE;
    24e4:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
    24e6:	88 85       	ldd	r24, Y+8	; 0x08
    24e8:	99 85       	ldd	r25, Y+9	; 0x09
    24ea:	9b 83       	std	Y+3, r25	; 0x03
    24ec:	8a 83       	std	Y+2, r24	; 0x02
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    24ee:	0f b6       	in	r0, 0x3f	; 63
    24f0:	f8 94       	cli
    24f2:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    24f4:	ea 81       	ldd	r30, Y+2	; 0x02
    24f6:	fb 81       	ldd	r31, Y+3	; 0x03
    24f8:	82 8d       	ldd	r24, Z+26	; 0x1a
    24fa:	89 83       	std	Y+1, r24	; 0x01

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	88 23       	and	r24, r24
    2500:	f9 f0       	breq	.+62     	; 0x2540 <xQueueReceive+0x7c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2502:	8a 81       	ldd	r24, Y+2	; 0x02
    2504:	9b 81       	ldd	r25, Y+3	; 0x03
    2506:	2a 85       	ldd	r18, Y+10	; 0x0a
    2508:	3b 85       	ldd	r19, Y+11	; 0x0b
    250a:	b9 01       	movw	r22, r18
    250c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	81 50       	subi	r24, 0x01	; 1
    2514:	ea 81       	ldd	r30, Y+2	; 0x02
    2516:	fb 81       	ldd	r31, Y+3	; 0x03
    2518:	82 8f       	std	Z+26, r24	; 0x1a

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    251a:	ea 81       	ldd	r30, Y+2	; 0x02
    251c:	fb 81       	ldd	r31, Y+3	; 0x03
    251e:	80 85       	ldd	r24, Z+8	; 0x08
    2520:	88 23       	and	r24, r24
    2522:	49 f0       	breq	.+18     	; 0x2536 <xQueueReceive+0x72>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2524:	8a 81       	ldd	r24, Y+2	; 0x02
    2526:	9b 81       	ldd	r25, Y+3	; 0x03
    2528:	08 96       	adiw	r24, 0x08	; 8
    252a:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <xTaskRemoveFromEventList>
    252e:	88 23       	and	r24, r24
    2530:	11 f0       	breq	.+4      	; 0x2536 <xQueueReceive+0x72>
					{
						queueYIELD_IF_USING_PREEMPTION();
    2532:	0e 94 95 07 	call	0xf2a	; 0xf2a <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    2536:	0f 90       	pop	r0
    2538:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	8e 87       	std	Y+14, r24	; 0x0e
    253e:	63 c0       	rjmp	.+198    	; 0x2606 <xQueueReceive+0x142>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    2540:	8c 85       	ldd	r24, Y+12	; 0x0c
    2542:	9d 85       	ldd	r25, Y+13	; 0x0d
    2544:	00 97       	sbiw	r24, 0x00	; 0
    2546:	21 f4       	brne	.+8      	; 0x2550 <xQueueReceive+0x8c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2548:	0f 90       	pop	r0
    254a:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    254c:	1e 86       	std	Y+14, r1	; 0x0e
    254e:	5b c0       	rjmp	.+182    	; 0x2606 <xQueueReceive+0x142>
				}
				else if( xEntryTimeSet == pdFALSE )
    2550:	8c 81       	ldd	r24, Y+4	; 0x04
    2552:	88 23       	and	r24, r24
    2554:	31 f4       	brne	.+12     	; 0x2562 <xQueueReceive+0x9e>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    2556:	ce 01       	movw	r24, r28
    2558:	05 96       	adiw	r24, 0x05	; 5
    255a:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    2562:	0f 90       	pop	r0
    2564:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2566:	0e 94 b2 1b 	call	0x3764	; 0x3764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    256a:	0f b6       	in	r0, 0x3f	; 63
    256c:	f8 94       	cli
    256e:	0f 92       	push	r0
    2570:	ea 81       	ldd	r30, Y+2	; 0x02
    2572:	fb 81       	ldd	r31, Y+3	; 0x03
    2574:	85 8d       	ldd	r24, Z+29	; 0x1d
    2576:	8f 3f       	cpi	r24, 0xFF	; 255
    2578:	19 f4       	brne	.+6      	; 0x2580 <xQueueReceive+0xbc>
    257a:	ea 81       	ldd	r30, Y+2	; 0x02
    257c:	fb 81       	ldd	r31, Y+3	; 0x03
    257e:	15 8e       	std	Z+29, r1	; 0x1d
    2580:	ea 81       	ldd	r30, Y+2	; 0x02
    2582:	fb 81       	ldd	r31, Y+3	; 0x03
    2584:	86 8d       	ldd	r24, Z+30	; 0x1e
    2586:	8f 3f       	cpi	r24, 0xFF	; 255
    2588:	19 f4       	brne	.+6      	; 0x2590 <xQueueReceive+0xcc>
    258a:	ea 81       	ldd	r30, Y+2	; 0x02
    258c:	fb 81       	ldd	r31, Y+3	; 0x03
    258e:	16 8e       	std	Z+30, r1	; 0x1e
    2590:	0f 90       	pop	r0
    2592:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2594:	ce 01       	movw	r24, r28
    2596:	05 96       	adiw	r24, 0x05	; 5
    2598:	9e 01       	movw	r18, r28
    259a:	24 5f       	subi	r18, 0xF4	; 244
    259c:	3f 4f       	sbci	r19, 0xFF	; 255
    259e:	b9 01       	movw	r22, r18
    25a0:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <xTaskCheckForTimeOut>
    25a4:	88 23       	and	r24, r24
    25a6:	09 f5       	brne	.+66     	; 0x25ea <xQueueReceive+0x126>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    25a8:	8a 81       	ldd	r24, Y+2	; 0x02
    25aa:	9b 81       	ldd	r25, Y+3	; 0x03
    25ac:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <prvIsQueueEmpty>
    25b0:	88 23       	and	r24, r24
    25b2:	a1 f0       	breq	.+40     	; 0x25dc <xQueueReceive+0x118>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    25b4:	8a 81       	ldd	r24, Y+2	; 0x02
    25b6:	9b 81       	ldd	r25, Y+3	; 0x03
    25b8:	41 96       	adiw	r24, 0x11	; 17
    25ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    25bc:	3d 85       	ldd	r19, Y+13	; 0x0d
    25be:	b9 01       	movw	r22, r18
    25c0:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    25c4:	8a 81       	ldd	r24, Y+2	; 0x02
    25c6:	9b 81       	ldd	r25, Y+3	; 0x03
    25c8:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    25cc:	0e 94 be 1b 	call	0x377c	; 0x377c <xTaskResumeAll>
    25d0:	88 23       	and	r24, r24
    25d2:	09 f0       	breq	.+2      	; 0x25d6 <xQueueReceive+0x112>
    25d4:	8c cf       	rjmp	.-232    	; 0x24ee <xQueueReceive+0x2a>
				{
					portYIELD_WITHIN_API();
    25d6:	0e 94 95 07 	call	0xf2a	; 0xf2a <vPortYield>
    25da:	89 cf       	rjmp	.-238    	; 0x24ee <xQueueReceive+0x2a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    25dc:	8a 81       	ldd	r24, Y+2	; 0x02
    25de:	9b 81       	ldd	r25, Y+3	; 0x03
    25e0:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    25e4:	0e 94 be 1b 	call	0x377c	; 0x377c <xTaskResumeAll>
    25e8:	82 cf       	rjmp	.-252    	; 0x24ee <xQueueReceive+0x2a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	9b 81       	ldd	r25, Y+3	; 0x03
    25ee:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    25f2:	0e 94 be 1b 	call	0x377c	; 0x377c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    25f6:	8a 81       	ldd	r24, Y+2	; 0x02
    25f8:	9b 81       	ldd	r25, Y+3	; 0x03
    25fa:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <prvIsQueueEmpty>
    25fe:	88 23       	and	r24, r24
    2600:	09 f4       	brne	.+2      	; 0x2604 <xQueueReceive+0x140>
    2602:	75 cf       	rjmp	.-278    	; 0x24ee <xQueueReceive+0x2a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    2604:	1e 86       	std	Y+14, r1	; 0x0e
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
    2606:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    2608:	2e 96       	adiw	r28, 0x0e	; 14
    260a:	0f b6       	in	r0, 0x3f	; 63
    260c:	f8 94       	cli
    260e:	de bf       	out	0x3e, r29	; 62
    2610:	0f be       	out	0x3f, r0	; 63
    2612:	cd bf       	out	0x3d, r28	; 61
    2614:	cf 91       	pop	r28
    2616:	df 91       	pop	r29
    2618:	08 95       	ret

0000261a <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
    261a:	df 93       	push	r29
    261c:	cf 93       	push	r28
    261e:	cd b7       	in	r28, 0x3d	; 61
    2620:	de b7       	in	r29, 0x3e	; 62
    2622:	2c 97       	sbiw	r28, 0x0c	; 12
    2624:	0f b6       	in	r0, 0x3f	; 63
    2626:	f8 94       	cli
    2628:	de bf       	out	0x3e, r29	; 62
    262a:	0f be       	out	0x3f, r0	; 63
    262c:	cd bf       	out	0x3d, r28	; 61
    262e:	99 87       	std	Y+9, r25	; 0x09
    2630:	88 87       	std	Y+8, r24	; 0x08
    2632:	7b 87       	std	Y+11, r23	; 0x0b
    2634:	6a 87       	std	Y+10, r22	; 0x0a
BaseType_t xEntryTimeSet = pdFALSE;
    2636:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
    2638:	88 85       	ldd	r24, Y+8	; 0x08
    263a:	99 85       	ldd	r25, Y+9	; 0x09
    263c:	9b 83       	std	Y+3, r25	; 0x03
    263e:	8a 83       	std	Y+2, r24	; 0x02
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2640:	0f b6       	in	r0, 0x3f	; 63
    2642:	f8 94       	cli
    2644:	0f 92       	push	r0
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    2646:	ea 81       	ldd	r30, Y+2	; 0x02
    2648:	fb 81       	ldd	r31, Y+3	; 0x03
    264a:	82 8d       	ldd	r24, Z+26	; 0x1a
    264c:	89 83       	std	Y+1, r24	; 0x01

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    264e:	89 81       	ldd	r24, Y+1	; 0x01
    2650:	88 23       	and	r24, r24
    2652:	c1 f0       	breq	.+48     	; 0x2684 <xQueueSemaphoreTake+0x6a>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	81 50       	subi	r24, 0x01	; 1
    2658:	ea 81       	ldd	r30, Y+2	; 0x02
    265a:	fb 81       	ldd	r31, Y+3	; 0x03
    265c:	82 8f       	std	Z+26, r24	; 0x1a
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    265e:	ea 81       	ldd	r30, Y+2	; 0x02
    2660:	fb 81       	ldd	r31, Y+3	; 0x03
    2662:	80 85       	ldd	r24, Z+8	; 0x08
    2664:	88 23       	and	r24, r24
    2666:	49 f0       	breq	.+18     	; 0x267a <xQueueSemaphoreTake+0x60>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2668:	8a 81       	ldd	r24, Y+2	; 0x02
    266a:	9b 81       	ldd	r25, Y+3	; 0x03
    266c:	08 96       	adiw	r24, 0x08	; 8
    266e:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <xTaskRemoveFromEventList>
    2672:	88 23       	and	r24, r24
    2674:	11 f0       	breq	.+4      	; 0x267a <xQueueSemaphoreTake+0x60>
					{
						queueYIELD_IF_USING_PREEMPTION();
    2676:	0e 94 95 07 	call	0xf2a	; 0xf2a <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    267a:	0f 90       	pop	r0
    267c:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	8c 87       	std	Y+12, r24	; 0x0c
    2682:	63 c0       	rjmp	.+198    	; 0x274a <xQueueSemaphoreTake+0x130>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    2684:	8a 85       	ldd	r24, Y+10	; 0x0a
    2686:	9b 85       	ldd	r25, Y+11	; 0x0b
    2688:	00 97       	sbiw	r24, 0x00	; 0
    268a:	21 f4       	brne	.+8      	; 0x2694 <xQueueSemaphoreTake+0x7a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
    268c:	0f 90       	pop	r0
    268e:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    2690:	1c 86       	std	Y+12, r1	; 0x0c
    2692:	5b c0       	rjmp	.+182    	; 0x274a <xQueueSemaphoreTake+0x130>
				}
				else if( xEntryTimeSet == pdFALSE )
    2694:	8c 81       	ldd	r24, Y+4	; 0x04
    2696:	88 23       	and	r24, r24
    2698:	31 f4       	brne	.+12     	; 0x26a6 <xQueueSemaphoreTake+0x8c>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    269a:	ce 01       	movw	r24, r28
    269c:	05 96       	adiw	r24, 0x05	; 5
    269e:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    26a6:	0f 90       	pop	r0
    26a8:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
    26aa:	0e 94 b2 1b 	call	0x3764	; 0x3764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    26ae:	0f b6       	in	r0, 0x3f	; 63
    26b0:	f8 94       	cli
    26b2:	0f 92       	push	r0
    26b4:	ea 81       	ldd	r30, Y+2	; 0x02
    26b6:	fb 81       	ldd	r31, Y+3	; 0x03
    26b8:	85 8d       	ldd	r24, Z+29	; 0x1d
    26ba:	8f 3f       	cpi	r24, 0xFF	; 255
    26bc:	19 f4       	brne	.+6      	; 0x26c4 <xQueueSemaphoreTake+0xaa>
    26be:	ea 81       	ldd	r30, Y+2	; 0x02
    26c0:	fb 81       	ldd	r31, Y+3	; 0x03
    26c2:	15 8e       	std	Z+29, r1	; 0x1d
    26c4:	ea 81       	ldd	r30, Y+2	; 0x02
    26c6:	fb 81       	ldd	r31, Y+3	; 0x03
    26c8:	86 8d       	ldd	r24, Z+30	; 0x1e
    26ca:	8f 3f       	cpi	r24, 0xFF	; 255
    26cc:	19 f4       	brne	.+6      	; 0x26d4 <xQueueSemaphoreTake+0xba>
    26ce:	ea 81       	ldd	r30, Y+2	; 0x02
    26d0:	fb 81       	ldd	r31, Y+3	; 0x03
    26d2:	16 8e       	std	Z+30, r1	; 0x1e
    26d4:	0f 90       	pop	r0
    26d6:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    26d8:	ce 01       	movw	r24, r28
    26da:	05 96       	adiw	r24, 0x05	; 5
    26dc:	9e 01       	movw	r18, r28
    26de:	26 5f       	subi	r18, 0xF6	; 246
    26e0:	3f 4f       	sbci	r19, 0xFF	; 255
    26e2:	b9 01       	movw	r22, r18
    26e4:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <xTaskCheckForTimeOut>
    26e8:	88 23       	and	r24, r24
    26ea:	09 f5       	brne	.+66     	; 0x272e <xQueueSemaphoreTake+0x114>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    26ec:	8a 81       	ldd	r24, Y+2	; 0x02
    26ee:	9b 81       	ldd	r25, Y+3	; 0x03
    26f0:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <prvIsQueueEmpty>
    26f4:	88 23       	and	r24, r24
    26f6:	a1 f0       	breq	.+40     	; 0x2720 <xQueueSemaphoreTake+0x106>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    26f8:	8a 81       	ldd	r24, Y+2	; 0x02
    26fa:	9b 81       	ldd	r25, Y+3	; 0x03
    26fc:	41 96       	adiw	r24, 0x11	; 17
    26fe:	2a 85       	ldd	r18, Y+10	; 0x0a
    2700:	3b 85       	ldd	r19, Y+11	; 0x0b
    2702:	b9 01       	movw	r22, r18
    2704:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2708:	8a 81       	ldd	r24, Y+2	; 0x02
    270a:	9b 81       	ldd	r25, Y+3	; 0x03
    270c:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    2710:	0e 94 be 1b 	call	0x377c	; 0x377c <xTaskResumeAll>
    2714:	88 23       	and	r24, r24
    2716:	09 f0       	breq	.+2      	; 0x271a <xQueueSemaphoreTake+0x100>
    2718:	93 cf       	rjmp	.-218    	; 0x2640 <xQueueSemaphoreTake+0x26>
				{
					portYIELD_WITHIN_API();
    271a:	0e 94 95 07 	call	0xf2a	; 0xf2a <vPortYield>
    271e:	90 cf       	rjmp	.-224    	; 0x2640 <xQueueSemaphoreTake+0x26>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
    2720:	8a 81       	ldd	r24, Y+2	; 0x02
    2722:	9b 81       	ldd	r25, Y+3	; 0x03
    2724:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2728:	0e 94 be 1b 	call	0x377c	; 0x377c <xTaskResumeAll>
    272c:	89 cf       	rjmp	.-238    	; 0x2640 <xQueueSemaphoreTake+0x26>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
    272e:	8a 81       	ldd	r24, Y+2	; 0x02
    2730:	9b 81       	ldd	r25, Y+3	; 0x03
    2732:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2736:	0e 94 be 1b 	call	0x377c	; 0x377c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    273a:	8a 81       	ldd	r24, Y+2	; 0x02
    273c:	9b 81       	ldd	r25, Y+3	; 0x03
    273e:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <prvIsQueueEmpty>
    2742:	88 23       	and	r24, r24
    2744:	09 f4       	brne	.+2      	; 0x2748 <xQueueSemaphoreTake+0x12e>
    2746:	7c cf       	rjmp	.-264    	; 0x2640 <xQueueSemaphoreTake+0x26>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    2748:	1c 86       	std	Y+12, r1	; 0x0c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
    274a:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    274c:	2c 96       	adiw	r28, 0x0c	; 12
    274e:	0f b6       	in	r0, 0x3f	; 63
    2750:	f8 94       	cli
    2752:	de bf       	out	0x3e, r29	; 62
    2754:	0f be       	out	0x3f, r0	; 63
    2756:	cd bf       	out	0x3d, r28	; 61
    2758:	cf 91       	pop	r28
    275a:	df 91       	pop	r29
    275c:	08 95       	ret

0000275e <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    275e:	df 93       	push	r29
    2760:	cf 93       	push	r28
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62
    2766:	60 97       	sbiw	r28, 0x10	; 16
    2768:	0f b6       	in	r0, 0x3f	; 63
    276a:	f8 94       	cli
    276c:	de bf       	out	0x3e, r29	; 62
    276e:	0f be       	out	0x3f, r0	; 63
    2770:	cd bf       	out	0x3d, r28	; 61
    2772:	9b 87       	std	Y+11, r25	; 0x0b
    2774:	8a 87       	std	Y+10, r24	; 0x0a
    2776:	7d 87       	std	Y+13, r23	; 0x0d
    2778:	6c 87       	std	Y+12, r22	; 0x0c
    277a:	5f 87       	std	Y+15, r21	; 0x0f
    277c:	4e 87       	std	Y+14, r20	; 0x0e
BaseType_t xEntryTimeSet = pdFALSE;
    277e:	1e 82       	std	Y+6, r1	; 0x06
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
    2780:	8a 85       	ldd	r24, Y+10	; 0x0a
    2782:	9b 85       	ldd	r25, Y+11	; 0x0b
    2784:	9b 83       	std	Y+3, r25	; 0x03
    2786:	8a 83       	std	Y+2, r24	; 0x02
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2788:	0f b6       	in	r0, 0x3f	; 63
    278a:	f8 94       	cli
    278c:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    278e:	ea 81       	ldd	r30, Y+2	; 0x02
    2790:	fb 81       	ldd	r31, Y+3	; 0x03
    2792:	82 8d       	ldd	r24, Z+26	; 0x1a
    2794:	89 83       	std	Y+1, r24	; 0x01

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    2796:	89 81       	ldd	r24, Y+1	; 0x01
    2798:	88 23       	and	r24, r24
    279a:	31 f1       	breq	.+76     	; 0x27e8 <xQueuePeek+0x8a>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
    279c:	ea 81       	ldd	r30, Y+2	; 0x02
    279e:	fb 81       	ldd	r31, Y+3	; 0x03
    27a0:	86 81       	ldd	r24, Z+6	; 0x06
    27a2:	97 81       	ldd	r25, Z+7	; 0x07
    27a4:	9d 83       	std	Y+5, r25	; 0x05
    27a6:	8c 83       	std	Y+4, r24	; 0x04

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    27a8:	8a 81       	ldd	r24, Y+2	; 0x02
    27aa:	9b 81       	ldd	r25, Y+3	; 0x03
    27ac:	2c 85       	ldd	r18, Y+12	; 0x0c
    27ae:	3d 85       	ldd	r19, Y+13	; 0x0d
    27b0:	b9 01       	movw	r22, r18
    27b2:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
    27b6:	ea 81       	ldd	r30, Y+2	; 0x02
    27b8:	fb 81       	ldd	r31, Y+3	; 0x03
    27ba:	8c 81       	ldd	r24, Y+4	; 0x04
    27bc:	9d 81       	ldd	r25, Y+5	; 0x05
    27be:	97 83       	std	Z+7, r25	; 0x07
    27c0:	86 83       	std	Z+6, r24	; 0x06

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    27c2:	ea 81       	ldd	r30, Y+2	; 0x02
    27c4:	fb 81       	ldd	r31, Y+3	; 0x03
    27c6:	81 89       	ldd	r24, Z+17	; 0x11
    27c8:	88 23       	and	r24, r24
    27ca:	49 f0       	breq	.+18     	; 0x27de <xQueuePeek+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    27cc:	8a 81       	ldd	r24, Y+2	; 0x02
    27ce:	9b 81       	ldd	r25, Y+3	; 0x03
    27d0:	41 96       	adiw	r24, 0x11	; 17
    27d2:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <xTaskRemoveFromEventList>
    27d6:	88 23       	and	r24, r24
    27d8:	11 f0       	breq	.+4      	; 0x27de <xQueuePeek+0x80>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
    27da:	0e 94 95 07 	call	0xf2a	; 0xf2a <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    27de:	0f 90       	pop	r0
    27e0:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	88 8b       	std	Y+16, r24	; 0x10
    27e6:	63 c0       	rjmp	.+198    	; 0x28ae <xQueuePeek+0x150>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    27e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    27ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    27ec:	00 97       	sbiw	r24, 0x00	; 0
    27ee:	21 f4       	brne	.+8      	; 0x27f8 <xQueuePeek+0x9a>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    27f0:	0f 90       	pop	r0
    27f2:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    27f4:	18 8a       	std	Y+16, r1	; 0x10
    27f6:	5b c0       	rjmp	.+182    	; 0x28ae <xQueuePeek+0x150>
				}
				else if( xEntryTimeSet == pdFALSE )
    27f8:	8e 81       	ldd	r24, Y+6	; 0x06
    27fa:	88 23       	and	r24, r24
    27fc:	31 f4       	brne	.+12     	; 0x280a <xQueuePeek+0xac>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    27fe:	ce 01       	movw	r24, r28
    2800:	07 96       	adiw	r24, 0x07	; 7
    2802:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	8e 83       	std	Y+6, r24	; 0x06
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    280a:	0f 90       	pop	r0
    280c:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    280e:	0e 94 b2 1b 	call	0x3764	; 0x3764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2812:	0f b6       	in	r0, 0x3f	; 63
    2814:	f8 94       	cli
    2816:	0f 92       	push	r0
    2818:	ea 81       	ldd	r30, Y+2	; 0x02
    281a:	fb 81       	ldd	r31, Y+3	; 0x03
    281c:	85 8d       	ldd	r24, Z+29	; 0x1d
    281e:	8f 3f       	cpi	r24, 0xFF	; 255
    2820:	19 f4       	brne	.+6      	; 0x2828 <xQueuePeek+0xca>
    2822:	ea 81       	ldd	r30, Y+2	; 0x02
    2824:	fb 81       	ldd	r31, Y+3	; 0x03
    2826:	15 8e       	std	Z+29, r1	; 0x1d
    2828:	ea 81       	ldd	r30, Y+2	; 0x02
    282a:	fb 81       	ldd	r31, Y+3	; 0x03
    282c:	86 8d       	ldd	r24, Z+30	; 0x1e
    282e:	8f 3f       	cpi	r24, 0xFF	; 255
    2830:	19 f4       	brne	.+6      	; 0x2838 <xQueuePeek+0xda>
    2832:	ea 81       	ldd	r30, Y+2	; 0x02
    2834:	fb 81       	ldd	r31, Y+3	; 0x03
    2836:	16 8e       	std	Z+30, r1	; 0x1e
    2838:	0f 90       	pop	r0
    283a:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    283c:	ce 01       	movw	r24, r28
    283e:	07 96       	adiw	r24, 0x07	; 7
    2840:	9e 01       	movw	r18, r28
    2842:	22 5f       	subi	r18, 0xF2	; 242
    2844:	3f 4f       	sbci	r19, 0xFF	; 255
    2846:	b9 01       	movw	r22, r18
    2848:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <xTaskCheckForTimeOut>
    284c:	88 23       	and	r24, r24
    284e:	09 f5       	brne	.+66     	; 0x2892 <xQueuePeek+0x134>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2850:	8a 81       	ldd	r24, Y+2	; 0x02
    2852:	9b 81       	ldd	r25, Y+3	; 0x03
    2854:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <prvIsQueueEmpty>
    2858:	88 23       	and	r24, r24
    285a:	a1 f0       	breq	.+40     	; 0x2884 <xQueuePeek+0x126>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    285c:	8a 81       	ldd	r24, Y+2	; 0x02
    285e:	9b 81       	ldd	r25, Y+3	; 0x03
    2860:	41 96       	adiw	r24, 0x11	; 17
    2862:	2e 85       	ldd	r18, Y+14	; 0x0e
    2864:	3f 85       	ldd	r19, Y+15	; 0x0f
    2866:	b9 01       	movw	r22, r18
    2868:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    286c:	8a 81       	ldd	r24, Y+2	; 0x02
    286e:	9b 81       	ldd	r25, Y+3	; 0x03
    2870:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    2874:	0e 94 be 1b 	call	0x377c	; 0x377c <xTaskResumeAll>
    2878:	88 23       	and	r24, r24
    287a:	09 f0       	breq	.+2      	; 0x287e <xQueuePeek+0x120>
    287c:	85 cf       	rjmp	.-246    	; 0x2788 <xQueuePeek+0x2a>
				{
					portYIELD_WITHIN_API();
    287e:	0e 94 95 07 	call	0xf2a	; 0xf2a <vPortYield>
    2882:	82 cf       	rjmp	.-252    	; 0x2788 <xQueuePeek+0x2a>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
    2884:	8a 81       	ldd	r24, Y+2	; 0x02
    2886:	9b 81       	ldd	r25, Y+3	; 0x03
    2888:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    288c:	0e 94 be 1b 	call	0x377c	; 0x377c <xTaskResumeAll>
    2890:	7b cf       	rjmp	.-266    	; 0x2788 <xQueuePeek+0x2a>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
    2892:	8a 81       	ldd	r24, Y+2	; 0x02
    2894:	9b 81       	ldd	r25, Y+3	; 0x03
    2896:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    289a:	0e 94 be 1b 	call	0x377c	; 0x377c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    289e:	8a 81       	ldd	r24, Y+2	; 0x02
    28a0:	9b 81       	ldd	r25, Y+3	; 0x03
    28a2:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <prvIsQueueEmpty>
    28a6:	88 23       	and	r24, r24
    28a8:	09 f4       	brne	.+2      	; 0x28ac <xQueuePeek+0x14e>
    28aa:	6e cf       	rjmp	.-292    	; 0x2788 <xQueuePeek+0x2a>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    28ac:	18 8a       	std	Y+16, r1	; 0x10
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
    28ae:	88 89       	ldd	r24, Y+16	; 0x10
}
    28b0:	60 96       	adiw	r28, 0x10	; 16
    28b2:	0f b6       	in	r0, 0x3f	; 63
    28b4:	f8 94       	cli
    28b6:	de bf       	out	0x3e, r29	; 62
    28b8:	0f be       	out	0x3f, r0	; 63
    28ba:	cd bf       	out	0x3d, r28	; 61
    28bc:	cf 91       	pop	r28
    28be:	df 91       	pop	r29
    28c0:	08 95       	ret

000028c2 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    28c2:	df 93       	push	r29
    28c4:	cf 93       	push	r28
    28c6:	cd b7       	in	r28, 0x3d	; 61
    28c8:	de b7       	in	r29, 0x3e	; 62
    28ca:	2c 97       	sbiw	r28, 0x0c	; 12
    28cc:	0f b6       	in	r0, 0x3f	; 63
    28ce:	f8 94       	cli
    28d0:	de bf       	out	0x3e, r29	; 62
    28d2:	0f be       	out	0x3f, r0	; 63
    28d4:	cd bf       	out	0x3d, r28	; 61
    28d6:	98 87       	std	Y+8, r25	; 0x08
    28d8:	8f 83       	std	Y+7, r24	; 0x07
    28da:	7a 87       	std	Y+10, r23	; 0x0a
    28dc:	69 87       	std	Y+9, r22	; 0x09
    28de:	5c 87       	std	Y+12, r21	; 0x0c
    28e0:	4b 87       	std	Y+11, r20	; 0x0b
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
    28e2:	8f 81       	ldd	r24, Y+7	; 0x07
    28e4:	98 85       	ldd	r25, Y+8	; 0x08
    28e6:	9c 83       	std	Y+4, r25	; 0x04
    28e8:	8b 83       	std	Y+3, r24	; 0x03
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    28ea:	1d 82       	std	Y+5, r1	; 0x05
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    28ec:	eb 81       	ldd	r30, Y+3	; 0x03
    28ee:	fc 81       	ldd	r31, Y+4	; 0x04
    28f0:	82 8d       	ldd	r24, Z+26	; 0x1a
    28f2:	8a 83       	std	Y+2, r24	; 0x02

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    28f4:	8a 81       	ldd	r24, Y+2	; 0x02
    28f6:	88 23       	and	r24, r24
    28f8:	81 f1       	breq	.+96     	; 0x295a <xQueueReceiveFromISR+0x98>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
    28fa:	eb 81       	ldd	r30, Y+3	; 0x03
    28fc:	fc 81       	ldd	r31, Y+4	; 0x04
    28fe:	85 8d       	ldd	r24, Z+29	; 0x1d
    2900:	89 83       	std	Y+1, r24	; 0x01

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    2902:	8b 81       	ldd	r24, Y+3	; 0x03
    2904:	9c 81       	ldd	r25, Y+4	; 0x04
    2906:	29 85       	ldd	r18, Y+9	; 0x09
    2908:	3a 85       	ldd	r19, Y+10	; 0x0a
    290a:	b9 01       	movw	r22, r18
    290c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    2910:	8a 81       	ldd	r24, Y+2	; 0x02
    2912:	81 50       	subi	r24, 0x01	; 1
    2914:	eb 81       	ldd	r30, Y+3	; 0x03
    2916:	fc 81       	ldd	r31, Y+4	; 0x04
    2918:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
    291a:	89 81       	ldd	r24, Y+1	; 0x01
    291c:	8f 3f       	cpi	r24, 0xFF	; 255
    291e:	a9 f4       	brne	.+42     	; 0x294a <xQueueReceiveFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2920:	eb 81       	ldd	r30, Y+3	; 0x03
    2922:	fc 81       	ldd	r31, Y+4	; 0x04
    2924:	80 85       	ldd	r24, Z+8	; 0x08
    2926:	88 23       	and	r24, r24
    2928:	a9 f0       	breq	.+42     	; 0x2954 <xQueueReceiveFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    292a:	8b 81       	ldd	r24, Y+3	; 0x03
    292c:	9c 81       	ldd	r25, Y+4	; 0x04
    292e:	08 96       	adiw	r24, 0x08	; 8
    2930:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <xTaskRemoveFromEventList>
    2934:	88 23       	and	r24, r24
    2936:	71 f0       	breq	.+28     	; 0x2954 <xQueueReceiveFromISR+0x92>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    2938:	8b 85       	ldd	r24, Y+11	; 0x0b
    293a:	9c 85       	ldd	r25, Y+12	; 0x0c
    293c:	00 97       	sbiw	r24, 0x00	; 0
    293e:	51 f0       	breq	.+20     	; 0x2954 <xQueueReceiveFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    2940:	eb 85       	ldd	r30, Y+11	; 0x0b
    2942:	fc 85       	ldd	r31, Y+12	; 0x0c
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	80 83       	st	Z, r24
    2948:	05 c0       	rjmp	.+10     	; 0x2954 <xQueueReceiveFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
    294a:	89 81       	ldd	r24, Y+1	; 0x01
    294c:	8f 5f       	subi	r24, 0xFF	; 255
    294e:	eb 81       	ldd	r30, Y+3	; 0x03
    2950:	fc 81       	ldd	r31, Y+4	; 0x04
    2952:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	8e 83       	std	Y+6, r24	; 0x06
    2958:	01 c0       	rjmp	.+2      	; 0x295c <xQueueReceiveFromISR+0x9a>
		}
		else
		{
			xReturn = pdFAIL;
    295a:	1e 82       	std	Y+6, r1	; 0x06
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    295c:	8e 81       	ldd	r24, Y+6	; 0x06
}
    295e:	2c 96       	adiw	r28, 0x0c	; 12
    2960:	0f b6       	in	r0, 0x3f	; 63
    2962:	f8 94       	cli
    2964:	de bf       	out	0x3e, r29	; 62
    2966:	0f be       	out	0x3f, r0	; 63
    2968:	cd bf       	out	0x3d, r28	; 61
    296a:	cf 91       	pop	r28
    296c:	df 91       	pop	r29
    296e:	08 95       	ret

00002970 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    2970:	df 93       	push	r29
    2972:	cf 93       	push	r28
    2974:	cd b7       	in	r28, 0x3d	; 61
    2976:	de b7       	in	r29, 0x3e	; 62
    2978:	2a 97       	sbiw	r28, 0x0a	; 10
    297a:	0f b6       	in	r0, 0x3f	; 63
    297c:	f8 94       	cli
    297e:	de bf       	out	0x3e, r29	; 62
    2980:	0f be       	out	0x3f, r0	; 63
    2982:	cd bf       	out	0x3d, r28	; 61
    2984:	98 87       	std	Y+8, r25	; 0x08
    2986:	8f 83       	std	Y+7, r24	; 0x07
    2988:	7a 87       	std	Y+10, r23	; 0x0a
    298a:	69 87       	std	Y+9, r22	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
    298c:	8f 81       	ldd	r24, Y+7	; 0x07
    298e:	98 85       	ldd	r25, Y+8	; 0x08
    2990:	9a 83       	std	Y+2, r25	; 0x02
    2992:	89 83       	std	Y+1, r24	; 0x01
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2994:	1d 82       	std	Y+5, r1	; 0x05
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2996:	e9 81       	ldd	r30, Y+1	; 0x01
    2998:	fa 81       	ldd	r31, Y+2	; 0x02
    299a:	82 8d       	ldd	r24, Z+26	; 0x1a
    299c:	88 23       	and	r24, r24
    299e:	b1 f0       	breq	.+44     	; 0x29cc <xQueuePeekFromISR+0x5c>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
    29a0:	e9 81       	ldd	r30, Y+1	; 0x01
    29a2:	fa 81       	ldd	r31, Y+2	; 0x02
    29a4:	86 81       	ldd	r24, Z+6	; 0x06
    29a6:	97 81       	ldd	r25, Z+7	; 0x07
    29a8:	9c 83       	std	Y+4, r25	; 0x04
    29aa:	8b 83       	std	Y+3, r24	; 0x03
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    29ac:	89 81       	ldd	r24, Y+1	; 0x01
    29ae:	9a 81       	ldd	r25, Y+2	; 0x02
    29b0:	29 85       	ldd	r18, Y+9	; 0x09
    29b2:	3a 85       	ldd	r19, Y+10	; 0x0a
    29b4:	b9 01       	movw	r22, r18
    29b6:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <prvCopyDataFromQueue>
			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
    29ba:	e9 81       	ldd	r30, Y+1	; 0x01
    29bc:	fa 81       	ldd	r31, Y+2	; 0x02
    29be:	8b 81       	ldd	r24, Y+3	; 0x03
    29c0:	9c 81       	ldd	r25, Y+4	; 0x04
    29c2:	97 83       	std	Z+7, r25	; 0x07
    29c4:	86 83       	std	Z+6, r24	; 0x06

			xReturn = pdPASS;
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	8e 83       	std	Y+6, r24	; 0x06
    29ca:	01 c0       	rjmp	.+2      	; 0x29ce <xQueuePeekFromISR+0x5e>
		}
		else
		{
			xReturn = pdFAIL;
    29cc:	1e 82       	std	Y+6, r1	; 0x06
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    29ce:	8e 81       	ldd	r24, Y+6	; 0x06
}
    29d0:	2a 96       	adiw	r28, 0x0a	; 10
    29d2:	0f b6       	in	r0, 0x3f	; 63
    29d4:	f8 94       	cli
    29d6:	de bf       	out	0x3e, r29	; 62
    29d8:	0f be       	out	0x3f, r0	; 63
    29da:	cd bf       	out	0x3d, r28	; 61
    29dc:	cf 91       	pop	r28
    29de:	df 91       	pop	r29
    29e0:	08 95       	ret

000029e2 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
    29e2:	df 93       	push	r29
    29e4:	cf 93       	push	r28
    29e6:	00 d0       	rcall	.+0      	; 0x29e8 <uxQueueMessagesWaiting+0x6>
    29e8:	0f 92       	push	r0
    29ea:	cd b7       	in	r28, 0x3d	; 61
    29ec:	de b7       	in	r29, 0x3e	; 62
    29ee:	9b 83       	std	Y+3, r25	; 0x03
    29f0:	8a 83       	std	Y+2, r24	; 0x02
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    29f2:	0f b6       	in	r0, 0x3f	; 63
    29f4:	f8 94       	cli
    29f6:	0f 92       	push	r0
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    29f8:	ea 81       	ldd	r30, Y+2	; 0x02
    29fa:	fb 81       	ldd	r31, Y+3	; 0x03
    29fc:	82 8d       	ldd	r24, Z+26	; 0x1a
    29fe:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    2a00:	0f 90       	pop	r0
    2a02:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    2a04:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2a06:	0f 90       	pop	r0
    2a08:	0f 90       	pop	r0
    2a0a:	0f 90       	pop	r0
    2a0c:	cf 91       	pop	r28
    2a0e:	df 91       	pop	r29
    2a10:	08 95       	ret

00002a12 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    2a12:	df 93       	push	r29
    2a14:	cf 93       	push	r28
    2a16:	00 d0       	rcall	.+0      	; 0x2a18 <uxQueueSpacesAvailable+0x6>
    2a18:	00 d0       	rcall	.+0      	; 0x2a1a <uxQueueSpacesAvailable+0x8>
    2a1a:	0f 92       	push	r0
    2a1c:	cd b7       	in	r28, 0x3d	; 61
    2a1e:	de b7       	in	r29, 0x3e	; 62
    2a20:	9d 83       	std	Y+5, r25	; 0x05
    2a22:	8c 83       	std	Y+4, r24	; 0x04
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
    2a24:	8c 81       	ldd	r24, Y+4	; 0x04
    2a26:	9d 81       	ldd	r25, Y+5	; 0x05
    2a28:	9a 83       	std	Y+2, r25	; 0x02
    2a2a:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    2a2c:	0f b6       	in	r0, 0x3f	; 63
    2a2e:	f8 94       	cli
    2a30:	0f 92       	push	r0
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    2a32:	e9 81       	ldd	r30, Y+1	; 0x01
    2a34:	fa 81       	ldd	r31, Y+2	; 0x02
    2a36:	93 8d       	ldd	r25, Z+27	; 0x1b
    2a38:	e9 81       	ldd	r30, Y+1	; 0x01
    2a3a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a3c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a3e:	29 2f       	mov	r18, r25
    2a40:	28 1b       	sub	r18, r24
    2a42:	82 2f       	mov	r24, r18
    2a44:	8b 83       	std	Y+3, r24	; 0x03
	}
	taskEXIT_CRITICAL();
    2a46:	0f 90       	pop	r0
    2a48:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    2a4a:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2a4c:	0f 90       	pop	r0
    2a4e:	0f 90       	pop	r0
    2a50:	0f 90       	pop	r0
    2a52:	0f 90       	pop	r0
    2a54:	0f 90       	pop	r0
    2a56:	cf 91       	pop	r28
    2a58:	df 91       	pop	r29
    2a5a:	08 95       	ret

00002a5c <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
    2a5c:	df 93       	push	r29
    2a5e:	cf 93       	push	r28
    2a60:	00 d0       	rcall	.+0      	; 0x2a62 <uxQueueMessagesWaitingFromISR+0x6>
    2a62:	00 d0       	rcall	.+0      	; 0x2a64 <uxQueueMessagesWaitingFromISR+0x8>
    2a64:	0f 92       	push	r0
    2a66:	cd b7       	in	r28, 0x3d	; 61
    2a68:	de b7       	in	r29, 0x3e	; 62
    2a6a:	9d 83       	std	Y+5, r25	; 0x05
    2a6c:	8c 83       	std	Y+4, r24	; 0x04
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
    2a6e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a70:	9d 81       	ldd	r25, Y+5	; 0x05
    2a72:	9a 83       	std	Y+2, r25	; 0x02
    2a74:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );
	uxReturn = pxQueue->uxMessagesWaiting;
    2a76:	e9 81       	ldd	r30, Y+1	; 0x01
    2a78:	fa 81       	ldd	r31, Y+2	; 0x02
    2a7a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a7c:	8b 83       	std	Y+3, r24	; 0x03

	return uxReturn;
    2a7e:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2a80:	0f 90       	pop	r0
    2a82:	0f 90       	pop	r0
    2a84:	0f 90       	pop	r0
    2a86:	0f 90       	pop	r0
    2a88:	0f 90       	pop	r0
    2a8a:	cf 91       	pop	r28
    2a8c:	df 91       	pop	r29
    2a8e:	08 95       	ret

00002a90 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
    2a90:	df 93       	push	r29
    2a92:	cf 93       	push	r28
    2a94:	00 d0       	rcall	.+0      	; 0x2a96 <vQueueDelete+0x6>
    2a96:	00 d0       	rcall	.+0      	; 0x2a98 <vQueueDelete+0x8>
    2a98:	cd b7       	in	r28, 0x3d	; 61
    2a9a:	de b7       	in	r29, 0x3e	; 62
    2a9c:	9c 83       	std	Y+4, r25	; 0x04
    2a9e:	8b 83       	std	Y+3, r24	; 0x03
Queue_t * const pxQueue = xQueue;
    2aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa2:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa4:	9a 83       	std	Y+2, r25	; 0x02
    2aa6:	89 83       	std	Y+1, r24	; 0x01

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
    2aa8:	89 81       	ldd	r24, Y+1	; 0x01
    2aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    2aac:	0e 94 be 05 	call	0xb7c	; 0xb7c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
    2ab0:	0f 90       	pop	r0
    2ab2:	0f 90       	pop	r0
    2ab4:	0f 90       	pop	r0
    2ab6:	0f 90       	pop	r0
    2ab8:	cf 91       	pop	r28
    2aba:	df 91       	pop	r29
    2abc:	08 95       	ret

00002abe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    2abe:	df 93       	push	r29
    2ac0:	cf 93       	push	r28
    2ac2:	cd b7       	in	r28, 0x3d	; 61
    2ac4:	de b7       	in	r29, 0x3e	; 62
    2ac6:	27 97       	sbiw	r28, 0x07	; 7
    2ac8:	0f b6       	in	r0, 0x3f	; 63
    2aca:	f8 94       	cli
    2acc:	de bf       	out	0x3e, r29	; 62
    2ace:	0f be       	out	0x3f, r0	; 63
    2ad0:	cd bf       	out	0x3d, r28	; 61
    2ad2:	9c 83       	std	Y+4, r25	; 0x04
    2ad4:	8b 83       	std	Y+3, r24	; 0x03
    2ad6:	7e 83       	std	Y+6, r23	; 0x06
    2ad8:	6d 83       	std	Y+5, r22	; 0x05
    2ada:	4f 83       	std	Y+7, r20	; 0x07
BaseType_t xReturn = pdFALSE;
    2adc:	1a 82       	std	Y+2, r1	; 0x02
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2ade:	eb 81       	ldd	r30, Y+3	; 0x03
    2ae0:	fc 81       	ldd	r31, Y+4	; 0x04
    2ae2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ae4:	89 83       	std	Y+1, r24	; 0x01

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    2ae6:	eb 81       	ldd	r30, Y+3	; 0x03
    2ae8:	fc 81       	ldd	r31, Y+4	; 0x04
    2aea:	84 8d       	ldd	r24, Z+28	; 0x1c
    2aec:	88 23       	and	r24, r24
    2aee:	09 f4       	brne	.+2      	; 0x2af2 <prvCopyDataToQueue+0x34>
    2af0:	7d c0       	rjmp	.+250    	; 0x2bec <prvCopyDataToQueue+0x12e>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    2af2:	8f 81       	ldd	r24, Y+7	; 0x07
    2af4:	88 23       	and	r24, r24
    2af6:	99 f5       	brne	.+102    	; 0x2b5e <prvCopyDataToQueue+0xa0>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    2af8:	eb 81       	ldd	r30, Y+3	; 0x03
    2afa:	fc 81       	ldd	r31, Y+4	; 0x04
    2afc:	62 81       	ldd	r22, Z+2	; 0x02
    2afe:	73 81       	ldd	r23, Z+3	; 0x03
    2b00:	eb 81       	ldd	r30, Y+3	; 0x03
    2b02:	fc 81       	ldd	r31, Y+4	; 0x04
    2b04:	84 8d       	ldd	r24, Z+28	; 0x1c
    2b06:	48 2f       	mov	r20, r24
    2b08:	50 e0       	ldi	r21, 0x00	; 0
    2b0a:	2d 81       	ldd	r18, Y+5	; 0x05
    2b0c:	3e 81       	ldd	r19, Y+6	; 0x06
    2b0e:	cb 01       	movw	r24, r22
    2b10:	b9 01       	movw	r22, r18
    2b12:	0e 94 0c 2b 	call	0x5618	; 0x5618 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    2b16:	eb 81       	ldd	r30, Y+3	; 0x03
    2b18:	fc 81       	ldd	r31, Y+4	; 0x04
    2b1a:	22 81       	ldd	r18, Z+2	; 0x02
    2b1c:	33 81       	ldd	r19, Z+3	; 0x03
    2b1e:	eb 81       	ldd	r30, Y+3	; 0x03
    2b20:	fc 81       	ldd	r31, Y+4	; 0x04
    2b22:	84 8d       	ldd	r24, Z+28	; 0x1c
    2b24:	88 2f       	mov	r24, r24
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	82 0f       	add	r24, r18
    2b2a:	93 1f       	adc	r25, r19
    2b2c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b2e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b30:	93 83       	std	Z+3, r25	; 0x03
    2b32:	82 83       	std	Z+2, r24	; 0x02
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    2b34:	eb 81       	ldd	r30, Y+3	; 0x03
    2b36:	fc 81       	ldd	r31, Y+4	; 0x04
    2b38:	22 81       	ldd	r18, Z+2	; 0x02
    2b3a:	33 81       	ldd	r19, Z+3	; 0x03
    2b3c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b3e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b40:	84 81       	ldd	r24, Z+4	; 0x04
    2b42:	95 81       	ldd	r25, Z+5	; 0x05
    2b44:	28 17       	cp	r18, r24
    2b46:	39 07       	cpc	r19, r25
    2b48:	08 f4       	brcc	.+2      	; 0x2b4c <prvCopyDataToQueue+0x8e>
    2b4a:	50 c0       	rjmp	.+160    	; 0x2bec <prvCopyDataToQueue+0x12e>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    2b4c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b4e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b50:	80 81       	ld	r24, Z
    2b52:	91 81       	ldd	r25, Z+1	; 0x01
    2b54:	eb 81       	ldd	r30, Y+3	; 0x03
    2b56:	fc 81       	ldd	r31, Y+4	; 0x04
    2b58:	93 83       	std	Z+3, r25	; 0x03
    2b5a:	82 83       	std	Z+2, r24	; 0x02
    2b5c:	47 c0       	rjmp	.+142    	; 0x2bec <prvCopyDataToQueue+0x12e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
    2b5e:	eb 81       	ldd	r30, Y+3	; 0x03
    2b60:	fc 81       	ldd	r31, Y+4	; 0x04
    2b62:	66 81       	ldd	r22, Z+6	; 0x06
    2b64:	77 81       	ldd	r23, Z+7	; 0x07
    2b66:	eb 81       	ldd	r30, Y+3	; 0x03
    2b68:	fc 81       	ldd	r31, Y+4	; 0x04
    2b6a:	84 8d       	ldd	r24, Z+28	; 0x1c
    2b6c:	48 2f       	mov	r20, r24
    2b6e:	50 e0       	ldi	r21, 0x00	; 0
    2b70:	2d 81       	ldd	r18, Y+5	; 0x05
    2b72:	3e 81       	ldd	r19, Y+6	; 0x06
    2b74:	cb 01       	movw	r24, r22
    2b76:	b9 01       	movw	r22, r18
    2b78:	0e 94 0c 2b 	call	0x5618	; 0x5618 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
    2b7c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b7e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b80:	26 81       	ldd	r18, Z+6	; 0x06
    2b82:	37 81       	ldd	r19, Z+7	; 0x07
    2b84:	eb 81       	ldd	r30, Y+3	; 0x03
    2b86:	fc 81       	ldd	r31, Y+4	; 0x04
    2b88:	84 8d       	ldd	r24, Z+28	; 0x1c
    2b8a:	88 2f       	mov	r24, r24
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	90 95       	com	r25
    2b90:	81 95       	neg	r24
    2b92:	9f 4f       	sbci	r25, 0xFF	; 255
    2b94:	82 0f       	add	r24, r18
    2b96:	93 1f       	adc	r25, r19
    2b98:	eb 81       	ldd	r30, Y+3	; 0x03
    2b9a:	fc 81       	ldd	r31, Y+4	; 0x04
    2b9c:	97 83       	std	Z+7, r25	; 0x07
    2b9e:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    2ba0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ba2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ba4:	26 81       	ldd	r18, Z+6	; 0x06
    2ba6:	37 81       	ldd	r19, Z+7	; 0x07
    2ba8:	eb 81       	ldd	r30, Y+3	; 0x03
    2baa:	fc 81       	ldd	r31, Y+4	; 0x04
    2bac:	80 81       	ld	r24, Z
    2bae:	91 81       	ldd	r25, Z+1	; 0x01
    2bb0:	28 17       	cp	r18, r24
    2bb2:	39 07       	cpc	r19, r25
    2bb4:	90 f4       	brcc	.+36     	; 0x2bda <prvCopyDataToQueue+0x11c>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
    2bb6:	eb 81       	ldd	r30, Y+3	; 0x03
    2bb8:	fc 81       	ldd	r31, Y+4	; 0x04
    2bba:	24 81       	ldd	r18, Z+4	; 0x04
    2bbc:	35 81       	ldd	r19, Z+5	; 0x05
    2bbe:	eb 81       	ldd	r30, Y+3	; 0x03
    2bc0:	fc 81       	ldd	r31, Y+4	; 0x04
    2bc2:	84 8d       	ldd	r24, Z+28	; 0x1c
    2bc4:	88 2f       	mov	r24, r24
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	90 95       	com	r25
    2bca:	81 95       	neg	r24
    2bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    2bce:	82 0f       	add	r24, r18
    2bd0:	93 1f       	adc	r25, r19
    2bd2:	eb 81       	ldd	r30, Y+3	; 0x03
    2bd4:	fc 81       	ldd	r31, Y+4	; 0x04
    2bd6:	97 83       	std	Z+7, r25	; 0x07
    2bd8:	86 83       	std	Z+6, r24	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    2bda:	8f 81       	ldd	r24, Y+7	; 0x07
    2bdc:	82 30       	cpi	r24, 0x02	; 2
    2bde:	31 f4       	brne	.+12     	; 0x2bec <prvCopyDataToQueue+0x12e>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    2be0:	89 81       	ldd	r24, Y+1	; 0x01
    2be2:	88 23       	and	r24, r24
    2be4:	19 f0       	breq	.+6      	; 0x2bec <prvCopyDataToQueue+0x12e>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    2be6:	89 81       	ldd	r24, Y+1	; 0x01
    2be8:	81 50       	subi	r24, 0x01	; 1
    2bea:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    2bec:	89 81       	ldd	r24, Y+1	; 0x01
    2bee:	8f 5f       	subi	r24, 0xFF	; 255
    2bf0:	eb 81       	ldd	r30, Y+3	; 0x03
    2bf2:	fc 81       	ldd	r31, Y+4	; 0x04
    2bf4:	82 8f       	std	Z+26, r24	; 0x1a

	return xReturn;
    2bf6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2bf8:	27 96       	adiw	r28, 0x07	; 7
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	f8 94       	cli
    2bfe:	de bf       	out	0x3e, r29	; 62
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	cd bf       	out	0x3d, r28	; 61
    2c04:	cf 91       	pop	r28
    2c06:	df 91       	pop	r29
    2c08:	08 95       	ret

00002c0a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    2c0a:	df 93       	push	r29
    2c0c:	cf 93       	push	r28
    2c0e:	00 d0       	rcall	.+0      	; 0x2c10 <prvCopyDataFromQueue+0x6>
    2c10:	00 d0       	rcall	.+0      	; 0x2c12 <prvCopyDataFromQueue+0x8>
    2c12:	cd b7       	in	r28, 0x3d	; 61
    2c14:	de b7       	in	r29, 0x3e	; 62
    2c16:	9a 83       	std	Y+2, r25	; 0x02
    2c18:	89 83       	std	Y+1, r24	; 0x01
    2c1a:	7c 83       	std	Y+4, r23	; 0x04
    2c1c:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    2c1e:	e9 81       	ldd	r30, Y+1	; 0x01
    2c20:	fa 81       	ldd	r31, Y+2	; 0x02
    2c22:	84 8d       	ldd	r24, Z+28	; 0x1c
    2c24:	88 23       	and	r24, r24
    2c26:	89 f1       	breq	.+98     	; 0x2c8a <prvCopyDataFromQueue+0x80>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    2c28:	e9 81       	ldd	r30, Y+1	; 0x01
    2c2a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c2c:	26 81       	ldd	r18, Z+6	; 0x06
    2c2e:	37 81       	ldd	r19, Z+7	; 0x07
    2c30:	e9 81       	ldd	r30, Y+1	; 0x01
    2c32:	fa 81       	ldd	r31, Y+2	; 0x02
    2c34:	84 8d       	ldd	r24, Z+28	; 0x1c
    2c36:	88 2f       	mov	r24, r24
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	82 0f       	add	r24, r18
    2c3c:	93 1f       	adc	r25, r19
    2c3e:	e9 81       	ldd	r30, Y+1	; 0x01
    2c40:	fa 81       	ldd	r31, Y+2	; 0x02
    2c42:	97 83       	std	Z+7, r25	; 0x07
    2c44:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    2c46:	e9 81       	ldd	r30, Y+1	; 0x01
    2c48:	fa 81       	ldd	r31, Y+2	; 0x02
    2c4a:	26 81       	ldd	r18, Z+6	; 0x06
    2c4c:	37 81       	ldd	r19, Z+7	; 0x07
    2c4e:	e9 81       	ldd	r30, Y+1	; 0x01
    2c50:	fa 81       	ldd	r31, Y+2	; 0x02
    2c52:	84 81       	ldd	r24, Z+4	; 0x04
    2c54:	95 81       	ldd	r25, Z+5	; 0x05
    2c56:	28 17       	cp	r18, r24
    2c58:	39 07       	cpc	r19, r25
    2c5a:	40 f0       	brcs	.+16     	; 0x2c6c <prvCopyDataFromQueue+0x62>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    2c5c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c5e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c60:	80 81       	ld	r24, Z
    2c62:	91 81       	ldd	r25, Z+1	; 0x01
    2c64:	e9 81       	ldd	r30, Y+1	; 0x01
    2c66:	fa 81       	ldd	r31, Y+2	; 0x02
    2c68:	97 83       	std	Z+7, r25	; 0x07
    2c6a:	86 83       	std	Z+6, r24	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    2c6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c6e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c70:	46 81       	ldd	r20, Z+6	; 0x06
    2c72:	57 81       	ldd	r21, Z+7	; 0x07
    2c74:	e9 81       	ldd	r30, Y+1	; 0x01
    2c76:	fa 81       	ldd	r31, Y+2	; 0x02
    2c78:	84 8d       	ldd	r24, Z+28	; 0x1c
    2c7a:	28 2f       	mov	r18, r24
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c80:	9c 81       	ldd	r25, Y+4	; 0x04
    2c82:	ba 01       	movw	r22, r20
    2c84:	a9 01       	movw	r20, r18
    2c86:	0e 94 0c 2b 	call	0x5618	; 0x5618 <memcpy>
	}
}
    2c8a:	0f 90       	pop	r0
    2c8c:	0f 90       	pop	r0
    2c8e:	0f 90       	pop	r0
    2c90:	0f 90       	pop	r0
    2c92:	cf 91       	pop	r28
    2c94:	df 91       	pop	r29
    2c96:	08 95       	ret

00002c98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    2c98:	df 93       	push	r29
    2c9a:	cf 93       	push	r28
    2c9c:	00 d0       	rcall	.+0      	; 0x2c9e <prvUnlockQueue+0x6>
    2c9e:	00 d0       	rcall	.+0      	; 0x2ca0 <prvUnlockQueue+0x8>
    2ca0:	cd b7       	in	r28, 0x3d	; 61
    2ca2:	de b7       	in	r29, 0x3e	; 62
    2ca4:	9c 83       	std	Y+4, r25	; 0x04
    2ca6:	8b 83       	std	Y+3, r24	; 0x03

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    2ca8:	0f b6       	in	r0, 0x3f	; 63
    2caa:	f8 94       	cli
    2cac:	0f 92       	push	r0
	{
		int8_t cTxLock = pxQueue->cTxLock;
    2cae:	eb 81       	ldd	r30, Y+3	; 0x03
    2cb0:	fc 81       	ldd	r31, Y+4	; 0x04
    2cb2:	86 8d       	ldd	r24, Z+30	; 0x1e
    2cb4:	8a 83       	std	Y+2, r24	; 0x02
    2cb6:	11 c0       	rjmp	.+34     	; 0x2cda <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2cb8:	eb 81       	ldd	r30, Y+3	; 0x03
    2cba:	fc 81       	ldd	r31, Y+4	; 0x04
    2cbc:	81 89       	ldd	r24, Z+17	; 0x11
    2cbe:	88 23       	and	r24, r24
    2cc0:	79 f0       	breq	.+30     	; 0x2ce0 <prvUnlockQueue+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc6:	41 96       	adiw	r24, 0x11	; 17
    2cc8:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <xTaskRemoveFromEventList>
    2ccc:	88 23       	and	r24, r24
    2cce:	11 f0       	breq	.+4      	; 0x2cd4 <prvUnlockQueue+0x3c>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    2cd0:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    2cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd6:	81 50       	subi	r24, 0x01	; 1
    2cd8:	8a 83       	std	Y+2, r24	; 0x02
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    2cda:	8a 81       	ldd	r24, Y+2	; 0x02
    2cdc:	18 16       	cp	r1, r24
    2cde:	64 f3       	brlt	.-40     	; 0x2cb8 <prvUnlockQueue+0x20>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
    2ce0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ce2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ce4:	8f ef       	ldi	r24, 0xFF	; 255
    2ce6:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    2ce8:	0f 90       	pop	r0
    2cea:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    2cec:	0f b6       	in	r0, 0x3f	; 63
    2cee:	f8 94       	cli
    2cf0:	0f 92       	push	r0
	{
		int8_t cRxLock = pxQueue->cRxLock;
    2cf2:	eb 81       	ldd	r30, Y+3	; 0x03
    2cf4:	fc 81       	ldd	r31, Y+4	; 0x04
    2cf6:	85 8d       	ldd	r24, Z+29	; 0x1d
    2cf8:	89 83       	std	Y+1, r24	; 0x01
    2cfa:	11 c0       	rjmp	.+34     	; 0x2d1e <prvUnlockQueue+0x86>

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2cfc:	eb 81       	ldd	r30, Y+3	; 0x03
    2cfe:	fc 81       	ldd	r31, Y+4	; 0x04
    2d00:	80 85       	ldd	r24, Z+8	; 0x08
    2d02:	88 23       	and	r24, r24
    2d04:	79 f0       	breq	.+30     	; 0x2d24 <prvUnlockQueue+0x8c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2d06:	8b 81       	ldd	r24, Y+3	; 0x03
    2d08:	9c 81       	ldd	r25, Y+4	; 0x04
    2d0a:	08 96       	adiw	r24, 0x08	; 8
    2d0c:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <xTaskRemoveFromEventList>
    2d10:	88 23       	and	r24, r24
    2d12:	11 f0       	breq	.+4      	; 0x2d18 <prvUnlockQueue+0x80>
				{
					vTaskMissedYield();
    2d14:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    2d18:	89 81       	ldd	r24, Y+1	; 0x01
    2d1a:	81 50       	subi	r24, 0x01	; 1
    2d1c:	89 83       	std	Y+1, r24	; 0x01
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
    2d1e:	89 81       	ldd	r24, Y+1	; 0x01
    2d20:	18 16       	cp	r1, r24
    2d22:	64 f3       	brlt	.-40     	; 0x2cfc <prvUnlockQueue+0x64>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    2d24:	eb 81       	ldd	r30, Y+3	; 0x03
    2d26:	fc 81       	ldd	r31, Y+4	; 0x04
    2d28:	8f ef       	ldi	r24, 0xFF	; 255
    2d2a:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    2d2c:	0f 90       	pop	r0
    2d2e:	0f be       	out	0x3f, r0	; 63
}
    2d30:	0f 90       	pop	r0
    2d32:	0f 90       	pop	r0
    2d34:	0f 90       	pop	r0
    2d36:	0f 90       	pop	r0
    2d38:	cf 91       	pop	r28
    2d3a:	df 91       	pop	r29
    2d3c:	08 95       	ret

00002d3e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    2d3e:	df 93       	push	r29
    2d40:	cf 93       	push	r28
    2d42:	00 d0       	rcall	.+0      	; 0x2d44 <prvIsQueueEmpty+0x6>
    2d44:	0f 92       	push	r0
    2d46:	cd b7       	in	r28, 0x3d	; 61
    2d48:	de b7       	in	r29, 0x3e	; 62
    2d4a:	9b 83       	std	Y+3, r25	; 0x03
    2d4c:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2d4e:	0f b6       	in	r0, 0x3f	; 63
    2d50:	f8 94       	cli
    2d52:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    2d54:	ea 81       	ldd	r30, Y+2	; 0x02
    2d56:	fb 81       	ldd	r31, Y+3	; 0x03
    2d58:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d5a:	88 23       	and	r24, r24
    2d5c:	19 f4       	brne	.+6      	; 0x2d64 <prvIsQueueEmpty+0x26>
		{
			xReturn = pdTRUE;
    2d5e:	81 e0       	ldi	r24, 0x01	; 1
    2d60:	89 83       	std	Y+1, r24	; 0x01
    2d62:	01 c0       	rjmp	.+2      	; 0x2d66 <prvIsQueueEmpty+0x28>
		}
		else
		{
			xReturn = pdFALSE;
    2d64:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    2d66:	0f 90       	pop	r0
    2d68:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    2d6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d6c:	0f 90       	pop	r0
    2d6e:	0f 90       	pop	r0
    2d70:	0f 90       	pop	r0
    2d72:	cf 91       	pop	r28
    2d74:	df 91       	pop	r29
    2d76:	08 95       	ret

00002d78 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
    2d78:	df 93       	push	r29
    2d7a:	cf 93       	push	r28
    2d7c:	00 d0       	rcall	.+0      	; 0x2d7e <xQueueIsQueueEmptyFromISR+0x6>
    2d7e:	00 d0       	rcall	.+0      	; 0x2d80 <xQueueIsQueueEmptyFromISR+0x8>
    2d80:	0f 92       	push	r0
    2d82:	cd b7       	in	r28, 0x3d	; 61
    2d84:	de b7       	in	r29, 0x3e	; 62
    2d86:	9d 83       	std	Y+5, r25	; 0x05
    2d88:	8c 83       	std	Y+4, r24	; 0x04
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
    2d8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d8c:	9d 81       	ldd	r25, Y+5	; 0x05
    2d8e:	9a 83       	std	Y+2, r25	; 0x02
    2d90:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    2d92:	e9 81       	ldd	r30, Y+1	; 0x01
    2d94:	fa 81       	ldd	r31, Y+2	; 0x02
    2d96:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d98:	88 23       	and	r24, r24
    2d9a:	19 f4       	brne	.+6      	; 0x2da2 <xQueueIsQueueEmptyFromISR+0x2a>
	{
		xReturn = pdTRUE;
    2d9c:	81 e0       	ldi	r24, 0x01	; 1
    2d9e:	8b 83       	std	Y+3, r24	; 0x03
    2da0:	01 c0       	rjmp	.+2      	; 0x2da4 <xQueueIsQueueEmptyFromISR+0x2c>
	}
	else
	{
		xReturn = pdFALSE;
    2da2:	1b 82       	std	Y+3, r1	; 0x03
	}

	return xReturn;
    2da4:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    2da6:	0f 90       	pop	r0
    2da8:	0f 90       	pop	r0
    2daa:	0f 90       	pop	r0
    2dac:	0f 90       	pop	r0
    2dae:	0f 90       	pop	r0
    2db0:	cf 91       	pop	r28
    2db2:	df 91       	pop	r29
    2db4:	08 95       	ret

00002db6 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    2db6:	df 93       	push	r29
    2db8:	cf 93       	push	r28
    2dba:	00 d0       	rcall	.+0      	; 0x2dbc <prvIsQueueFull+0x6>
    2dbc:	0f 92       	push	r0
    2dbe:	cd b7       	in	r28, 0x3d	; 61
    2dc0:	de b7       	in	r29, 0x3e	; 62
    2dc2:	9b 83       	std	Y+3, r25	; 0x03
    2dc4:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2dc6:	0f b6       	in	r0, 0x3f	; 63
    2dc8:	f8 94       	cli
    2dca:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    2dcc:	ea 81       	ldd	r30, Y+2	; 0x02
    2dce:	fb 81       	ldd	r31, Y+3	; 0x03
    2dd0:	92 8d       	ldd	r25, Z+26	; 0x1a
    2dd2:	ea 81       	ldd	r30, Y+2	; 0x02
    2dd4:	fb 81       	ldd	r31, Y+3	; 0x03
    2dd6:	83 8d       	ldd	r24, Z+27	; 0x1b
    2dd8:	98 17       	cp	r25, r24
    2dda:	19 f4       	brne	.+6      	; 0x2de2 <prvIsQueueFull+0x2c>
		{
			xReturn = pdTRUE;
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	89 83       	std	Y+1, r24	; 0x01
    2de0:	01 c0       	rjmp	.+2      	; 0x2de4 <prvIsQueueFull+0x2e>
		}
		else
		{
			xReturn = pdFALSE;
    2de2:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    2de4:	0f 90       	pop	r0
    2de6:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    2de8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dea:	0f 90       	pop	r0
    2dec:	0f 90       	pop	r0
    2dee:	0f 90       	pop	r0
    2df0:	cf 91       	pop	r28
    2df2:	df 91       	pop	r29
    2df4:	08 95       	ret

00002df6 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    2df6:	df 93       	push	r29
    2df8:	cf 93       	push	r28
    2dfa:	00 d0       	rcall	.+0      	; 0x2dfc <xQueueIsQueueFullFromISR+0x6>
    2dfc:	00 d0       	rcall	.+0      	; 0x2dfe <xQueueIsQueueFullFromISR+0x8>
    2dfe:	0f 92       	push	r0
    2e00:	cd b7       	in	r28, 0x3d	; 61
    2e02:	de b7       	in	r29, 0x3e	; 62
    2e04:	9d 83       	std	Y+5, r25	; 0x05
    2e06:	8c 83       	std	Y+4, r24	; 0x04
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
    2e08:	8c 81       	ldd	r24, Y+4	; 0x04
    2e0a:	9d 81       	ldd	r25, Y+5	; 0x05
    2e0c:	9a 83       	std	Y+2, r25	; 0x02
    2e0e:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    2e10:	e9 81       	ldd	r30, Y+1	; 0x01
    2e12:	fa 81       	ldd	r31, Y+2	; 0x02
    2e14:	92 8d       	ldd	r25, Z+26	; 0x1a
    2e16:	e9 81       	ldd	r30, Y+1	; 0x01
    2e18:	fa 81       	ldd	r31, Y+2	; 0x02
    2e1a:	83 8d       	ldd	r24, Z+27	; 0x1b
    2e1c:	98 17       	cp	r25, r24
    2e1e:	19 f4       	brne	.+6      	; 0x2e26 <xQueueIsQueueFullFromISR+0x30>
	{
		xReturn = pdTRUE;
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	8b 83       	std	Y+3, r24	; 0x03
    2e24:	01 c0       	rjmp	.+2      	; 0x2e28 <xQueueIsQueueFullFromISR+0x32>
	}
	else
	{
		xReturn = pdFALSE;
    2e26:	1b 82       	std	Y+3, r1	; 0x03
	}

	return xReturn;
    2e28:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    2e2a:	0f 90       	pop	r0
    2e2c:	0f 90       	pop	r0
    2e2e:	0f 90       	pop	r0
    2e30:	0f 90       	pop	r0
    2e32:	0f 90       	pop	r0
    2e34:	cf 91       	pop	r28
    2e36:	df 91       	pop	r29
    2e38:	08 95       	ret

00002e3a <xQueueCRSend>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait )
	{
    2e3a:	df 93       	push	r29
    2e3c:	cf 93       	push	r28
    2e3e:	cd b7       	in	r28, 0x3d	; 61
    2e40:	de b7       	in	r29, 0x3e	; 62
    2e42:	2a 97       	sbiw	r28, 0x0a	; 10
    2e44:	0f b6       	in	r0, 0x3f	; 63
    2e46:	f8 94       	cli
    2e48:	de bf       	out	0x3e, r29	; 62
    2e4a:	0f be       	out	0x3f, r0	; 63
    2e4c:	cd bf       	out	0x3d, r28	; 61
    2e4e:	9d 83       	std	Y+5, r25	; 0x05
    2e50:	8c 83       	std	Y+4, r24	; 0x04
    2e52:	7f 83       	std	Y+7, r23	; 0x07
    2e54:	6e 83       	std	Y+6, r22	; 0x06
    2e56:	59 87       	std	Y+9, r21	; 0x09
    2e58:	48 87       	std	Y+8, r20	; 0x08
	BaseType_t xReturn;
	Queue_t * const pxQueue = xQueue;
    2e5a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e5c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e5e:	9a 83       	std	Y+2, r25	; 0x02
    2e60:	89 83       	std	Y+1, r24	; 0x01

		/* If the queue is already full we may have to block.  A critical section
		is required to prevent an interrupt removing something from the queue
		between the check to see if the queue is full and blocking on the queue. */
		portDISABLE_INTERRUPTS();
    2e62:	f8 94       	cli
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    2e64:	89 81       	ldd	r24, Y+1	; 0x01
    2e66:	9a 81       	ldd	r25, Y+2	; 0x02
    2e68:	0e 94 db 16 	call	0x2db6	; 0x2db6 <prvIsQueueFull>
    2e6c:	88 23       	and	r24, r24
    2e6e:	a9 f0       	breq	.+42     	; 0x2e9a <xQueueCRSend+0x60>
			{
				/* The queue is full - do we want to block or just leave without
				posting? */
				if( xTicksToWait > ( TickType_t ) 0 )
    2e70:	88 85       	ldd	r24, Y+8	; 0x08
    2e72:	99 85       	ldd	r25, Y+9	; 0x09
    2e74:	00 97       	sbiw	r24, 0x00	; 0
    2e76:	71 f0       	breq	.+28     	; 0x2e94 <xQueueCRSend+0x5a>
				{
					/* As this is called from a coroutine we cannot block directly, but
					return indicating that we need to block. */
					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
    2e78:	89 81       	ldd	r24, Y+1	; 0x01
    2e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e7c:	9c 01       	movw	r18, r24
    2e7e:	28 5f       	subi	r18, 0xF8	; 248
    2e80:	3f 4f       	sbci	r19, 0xFF	; 255
    2e82:	88 85       	ldd	r24, Y+8	; 0x08
    2e84:	99 85       	ldd	r25, Y+9	; 0x09
    2e86:	b9 01       	movw	r22, r18
    2e88:	0e 94 3e 09 	call	0x127c	; 0x127c <vCoRoutineAddToDelayedList>
					portENABLE_INTERRUPTS();
    2e8c:	78 94       	sei
					return errQUEUE_BLOCKED;
    2e8e:	8c ef       	ldi	r24, 0xFC	; 252
    2e90:	8a 87       	std	Y+10, r24	; 0x0a
    2e92:	2a c0       	rjmp	.+84     	; 0x2ee8 <xQueueCRSend+0xae>
				}
				else
				{
					portENABLE_INTERRUPTS();
    2e94:	78 94       	sei
					return errQUEUE_FULL;
    2e96:	1a 86       	std	Y+10, r1	; 0x0a
    2e98:	27 c0       	rjmp	.+78     	; 0x2ee8 <xQueueCRSend+0xae>
				}
			}
		}
		portENABLE_INTERRUPTS();
    2e9a:	78 94       	sei

		portDISABLE_INTERRUPTS();
    2e9c:	f8 94       	cli
		{
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2e9e:	e9 81       	ldd	r30, Y+1	; 0x01
    2ea0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ea2:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ea4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ea6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ea8:	83 8d       	ldd	r24, Z+27	; 0x1b
    2eaa:	98 17       	cp	r25, r24
    2eac:	c8 f4       	brcc	.+50     	; 0x2ee0 <xQueueCRSend+0xa6>
			{
				/* There is room in the queue, copy the data into the queue. */
				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
    2eae:	89 81       	ldd	r24, Y+1	; 0x01
    2eb0:	9a 81       	ldd	r25, Y+2	; 0x02
    2eb2:	2e 81       	ldd	r18, Y+6	; 0x06
    2eb4:	3f 81       	ldd	r19, Y+7	; 0x07
    2eb6:	b9 01       	movw	r22, r18
    2eb8:	40 e0       	ldi	r20, 0x00	; 0
    2eba:	0e 94 5f 15 	call	0x2abe	; 0x2abe <prvCopyDataToQueue>
				xReturn = pdPASS;
    2ebe:	81 e0       	ldi	r24, 0x01	; 1
    2ec0:	8b 83       	std	Y+3, r24	; 0x03

				/* Were any co-routines waiting for data to become available? */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2ec2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ec4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ec6:	81 89       	ldd	r24, Z+17	; 0x11
    2ec8:	88 23       	and	r24, r24
    2eca:	59 f0       	breq	.+22     	; 0x2ee2 <xQueueCRSend+0xa8>
				{
					/* In this instance the co-routine could be placed directly
					into the ready list as we are within a critical section.
					Instead the same pending ready list mechanism is used as if
					the event were caused from within an interrupt. */
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2ecc:	89 81       	ldd	r24, Y+1	; 0x01
    2ece:	9a 81       	ldd	r25, Y+2	; 0x02
    2ed0:	41 96       	adiw	r24, 0x11	; 17
    2ed2:	0e 94 4a 0b 	call	0x1694	; 0x1694 <xCoRoutineRemoveFromEventList>
    2ed6:	88 23       	and	r24, r24
    2ed8:	21 f0       	breq	.+8      	; 0x2ee2 <xQueueCRSend+0xa8>
					{
						/* The co-routine waiting has a higher priority so record
						that a yield might be appropriate. */
						xReturn = errQUEUE_YIELD;
    2eda:	8b ef       	ldi	r24, 0xFB	; 251
    2edc:	8b 83       	std	Y+3, r24	; 0x03
    2ede:	01 c0       	rjmp	.+2      	; 0x2ee2 <xQueueCRSend+0xa8>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				xReturn = errQUEUE_FULL;
    2ee0:	1b 82       	std	Y+3, r1	; 0x03
			}
		}
		portENABLE_INTERRUPTS();
    2ee2:	78 94       	sei

		return xReturn;
    2ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee6:	8a 87       	std	Y+10, r24	; 0x0a
    2ee8:	8a 85       	ldd	r24, Y+10	; 0x0a
	}
    2eea:	2a 96       	adiw	r28, 0x0a	; 10
    2eec:	0f b6       	in	r0, 0x3f	; 63
    2eee:	f8 94       	cli
    2ef0:	de bf       	out	0x3e, r29	; 62
    2ef2:	0f be       	out	0x3f, r0	; 63
    2ef4:	cd bf       	out	0x3d, r28	; 61
    2ef6:	cf 91       	pop	r28
    2ef8:	df 91       	pop	r29
    2efa:	08 95       	ret

00002efc <xQueueCRReceive>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
	{
    2efc:	df 93       	push	r29
    2efe:	cf 93       	push	r28
    2f00:	cd b7       	in	r28, 0x3d	; 61
    2f02:	de b7       	in	r29, 0x3e	; 62
    2f04:	2a 97       	sbiw	r28, 0x0a	; 10
    2f06:	0f b6       	in	r0, 0x3f	; 63
    2f08:	f8 94       	cli
    2f0a:	de bf       	out	0x3e, r29	; 62
    2f0c:	0f be       	out	0x3f, r0	; 63
    2f0e:	cd bf       	out	0x3d, r28	; 61
    2f10:	9d 83       	std	Y+5, r25	; 0x05
    2f12:	8c 83       	std	Y+4, r24	; 0x04
    2f14:	7f 83       	std	Y+7, r23	; 0x07
    2f16:	6e 83       	std	Y+6, r22	; 0x06
    2f18:	59 87       	std	Y+9, r21	; 0x09
    2f1a:	48 87       	std	Y+8, r20	; 0x08
	BaseType_t xReturn;
	Queue_t * const pxQueue = xQueue;
    2f1c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f1e:	9d 81       	ldd	r25, Y+5	; 0x05
    2f20:	9a 83       	std	Y+2, r25	; 0x02
    2f22:	89 83       	std	Y+1, r24	; 0x01

		/* If the queue is already empty we may have to block.  A critical section
		is required to prevent an interrupt adding something to the queue
		between the check to see if the queue is empty and blocking on the queue. */
		portDISABLE_INTERRUPTS();
    2f24:	f8 94       	cli
		{
			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    2f26:	e9 81       	ldd	r30, Y+1	; 0x01
    2f28:	fa 81       	ldd	r31, Y+2	; 0x02
    2f2a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f2c:	88 23       	and	r24, r24
    2f2e:	a9 f4       	brne	.+42     	; 0x2f5a <xQueueCRReceive+0x5e>
			{
				/* There are no messages in the queue, do we want to block or just
				leave with nothing? */
				if( xTicksToWait > ( TickType_t ) 0 )
    2f30:	88 85       	ldd	r24, Y+8	; 0x08
    2f32:	99 85       	ldd	r25, Y+9	; 0x09
    2f34:	00 97       	sbiw	r24, 0x00	; 0
    2f36:	71 f0       	breq	.+28     	; 0x2f54 <xQueueCRReceive+0x58>
				{
					/* As this is a co-routine we cannot block directly, but return
					indicating that we need to block. */
					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
    2f38:	89 81       	ldd	r24, Y+1	; 0x01
    2f3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f3c:	9c 01       	movw	r18, r24
    2f3e:	2f 5e       	subi	r18, 0xEF	; 239
    2f40:	3f 4f       	sbci	r19, 0xFF	; 255
    2f42:	88 85       	ldd	r24, Y+8	; 0x08
    2f44:	99 85       	ldd	r25, Y+9	; 0x09
    2f46:	b9 01       	movw	r22, r18
    2f48:	0e 94 3e 09 	call	0x127c	; 0x127c <vCoRoutineAddToDelayedList>
					portENABLE_INTERRUPTS();
    2f4c:	78 94       	sei
					return errQUEUE_BLOCKED;
    2f4e:	8c ef       	ldi	r24, 0xFC	; 252
    2f50:	8a 87       	std	Y+10, r24	; 0x0a
    2f52:	58 c0       	rjmp	.+176    	; 0x3004 <xQueueCRReceive+0x108>
				}
				else
				{
					portENABLE_INTERRUPTS();
    2f54:	78 94       	sei
					return errQUEUE_FULL;
    2f56:	1a 86       	std	Y+10, r1	; 0x0a
    2f58:	55 c0       	rjmp	.+170    	; 0x3004 <xQueueCRReceive+0x108>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portENABLE_INTERRUPTS();
    2f5a:	78 94       	sei

		portDISABLE_INTERRUPTS();
    2f5c:	f8 94       	cli
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2f5e:	e9 81       	ldd	r30, Y+1	; 0x01
    2f60:	fa 81       	ldd	r31, Y+2	; 0x02
    2f62:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f64:	88 23       	and	r24, r24
    2f66:	09 f4       	brne	.+2      	; 0x2f6a <xQueueCRReceive+0x6e>
    2f68:	49 c0       	rjmp	.+146    	; 0x2ffc <xQueueCRReceive+0x100>
			{
				/* Data is available from the queue. */
				pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
    2f6a:	e9 81       	ldd	r30, Y+1	; 0x01
    2f6c:	fa 81       	ldd	r31, Y+2	; 0x02
    2f6e:	26 81       	ldd	r18, Z+6	; 0x06
    2f70:	37 81       	ldd	r19, Z+7	; 0x07
    2f72:	e9 81       	ldd	r30, Y+1	; 0x01
    2f74:	fa 81       	ldd	r31, Y+2	; 0x02
    2f76:	84 8d       	ldd	r24, Z+28	; 0x1c
    2f78:	88 2f       	mov	r24, r24
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	82 0f       	add	r24, r18
    2f7e:	93 1f       	adc	r25, r19
    2f80:	e9 81       	ldd	r30, Y+1	; 0x01
    2f82:	fa 81       	ldd	r31, Y+2	; 0x02
    2f84:	97 83       	std	Z+7, r25	; 0x07
    2f86:	86 83       	std	Z+6, r24	; 0x06
				if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
    2f88:	e9 81       	ldd	r30, Y+1	; 0x01
    2f8a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f8c:	26 81       	ldd	r18, Z+6	; 0x06
    2f8e:	37 81       	ldd	r19, Z+7	; 0x07
    2f90:	e9 81       	ldd	r30, Y+1	; 0x01
    2f92:	fa 81       	ldd	r31, Y+2	; 0x02
    2f94:	84 81       	ldd	r24, Z+4	; 0x04
    2f96:	95 81       	ldd	r25, Z+5	; 0x05
    2f98:	28 17       	cp	r18, r24
    2f9a:	39 07       	cpc	r19, r25
    2f9c:	40 f0       	brcs	.+16     	; 0x2fae <xQueueCRReceive+0xb2>
				{
					pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    2f9e:	e9 81       	ldd	r30, Y+1	; 0x01
    2fa0:	fa 81       	ldd	r31, Y+2	; 0x02
    2fa2:	80 81       	ld	r24, Z
    2fa4:	91 81       	ldd	r25, Z+1	; 0x01
    2fa6:	e9 81       	ldd	r30, Y+1	; 0x01
    2fa8:	fa 81       	ldd	r31, Y+2	; 0x02
    2faa:	97 83       	std	Z+7, r25	; 0x07
    2fac:	86 83       	std	Z+6, r24	; 0x06
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				--( pxQueue->uxMessagesWaiting );
    2fae:	e9 81       	ldd	r30, Y+1	; 0x01
    2fb0:	fa 81       	ldd	r31, Y+2	; 0x02
    2fb2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fb4:	81 50       	subi	r24, 0x01	; 1
    2fb6:	e9 81       	ldd	r30, Y+1	; 0x01
    2fb8:	fa 81       	ldd	r31, Y+2	; 0x02
    2fba:	82 8f       	std	Z+26, r24	; 0x1a
				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    2fbc:	e9 81       	ldd	r30, Y+1	; 0x01
    2fbe:	fa 81       	ldd	r31, Y+2	; 0x02
    2fc0:	46 81       	ldd	r20, Z+6	; 0x06
    2fc2:	57 81       	ldd	r21, Z+7	; 0x07
    2fc4:	e9 81       	ldd	r30, Y+1	; 0x01
    2fc6:	fa 81       	ldd	r31, Y+2	; 0x02
    2fc8:	84 8d       	ldd	r24, Z+28	; 0x1c
    2fca:	28 2f       	mov	r18, r24
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	8e 81       	ldd	r24, Y+6	; 0x06
    2fd0:	9f 81       	ldd	r25, Y+7	; 0x07
    2fd2:	ba 01       	movw	r22, r20
    2fd4:	a9 01       	movw	r20, r18
    2fd6:	0e 94 0c 2b 	call	0x5618	; 0x5618 <memcpy>

				xReturn = pdPASS;
    2fda:	81 e0       	ldi	r24, 0x01	; 1
    2fdc:	8b 83       	std	Y+3, r24	; 0x03

				/* Were any co-routines waiting for space to become available? */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2fde:	e9 81       	ldd	r30, Y+1	; 0x01
    2fe0:	fa 81       	ldd	r31, Y+2	; 0x02
    2fe2:	80 85       	ldd	r24, Z+8	; 0x08
    2fe4:	88 23       	and	r24, r24
    2fe6:	59 f0       	breq	.+22     	; 0x2ffe <xQueueCRReceive+0x102>
				{
					/* In this instance the co-routine could be placed directly
					into the ready list as we are within a critical section.
					Instead the same pending ready list mechanism is used as if
					the event were caused from within an interrupt. */
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2fe8:	89 81       	ldd	r24, Y+1	; 0x01
    2fea:	9a 81       	ldd	r25, Y+2	; 0x02
    2fec:	08 96       	adiw	r24, 0x08	; 8
    2fee:	0e 94 4a 0b 	call	0x1694	; 0x1694 <xCoRoutineRemoveFromEventList>
    2ff2:	88 23       	and	r24, r24
    2ff4:	21 f0       	breq	.+8      	; 0x2ffe <xQueueCRReceive+0x102>
					{
						xReturn = errQUEUE_YIELD;
    2ff6:	8b ef       	ldi	r24, 0xFB	; 251
    2ff8:	8b 83       	std	Y+3, r24	; 0x03
    2ffa:	01 c0       	rjmp	.+2      	; 0x2ffe <xQueueCRReceive+0x102>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				xReturn = pdFAIL;
    2ffc:	1b 82       	std	Y+3, r1	; 0x03
			}
		}
		portENABLE_INTERRUPTS();
    2ffe:	78 94       	sei

		return xReturn;
    3000:	8b 81       	ldd	r24, Y+3	; 0x03
    3002:	8a 87       	std	Y+10, r24	; 0x0a
    3004:	8a 85       	ldd	r24, Y+10	; 0x0a
	}
    3006:	2a 96       	adiw	r28, 0x0a	; 10
    3008:	0f b6       	in	r0, 0x3f	; 63
    300a:	f8 94       	cli
    300c:	de bf       	out	0x3e, r29	; 62
    300e:	0f be       	out	0x3f, r0	; 63
    3010:	cd bf       	out	0x3d, r28	; 61
    3012:	cf 91       	pop	r28
    3014:	df 91       	pop	r29
    3016:	08 95       	ret

00003018 <xQueueCRSendFromISR>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRoutinePreviouslyWoken )
	{
    3018:	df 93       	push	r29
    301a:	cf 93       	push	r28
    301c:	cd b7       	in	r28, 0x3d	; 61
    301e:	de b7       	in	r29, 0x3e	; 62
    3020:	28 97       	sbiw	r28, 0x08	; 8
    3022:	0f b6       	in	r0, 0x3f	; 63
    3024:	f8 94       	cli
    3026:	de bf       	out	0x3e, r29	; 62
    3028:	0f be       	out	0x3f, r0	; 63
    302a:	cd bf       	out	0x3d, r28	; 61
    302c:	9c 83       	std	Y+4, r25	; 0x04
    302e:	8b 83       	std	Y+3, r24	; 0x03
    3030:	7e 83       	std	Y+6, r23	; 0x06
    3032:	6d 83       	std	Y+5, r22	; 0x05
    3034:	4f 83       	std	Y+7, r20	; 0x07
	Queue_t * const pxQueue = xQueue;
    3036:	8b 81       	ldd	r24, Y+3	; 0x03
    3038:	9c 81       	ldd	r25, Y+4	; 0x04
    303a:	9a 83       	std	Y+2, r25	; 0x02
    303c:	89 83       	std	Y+1, r24	; 0x01

		/* Cannot block within an ISR so if there is no space on the queue then
		exit without doing anything. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    303e:	e9 81       	ldd	r30, Y+1	; 0x01
    3040:	fa 81       	ldd	r31, Y+2	; 0x02
    3042:	92 8d       	ldd	r25, Z+26	; 0x1a
    3044:	e9 81       	ldd	r30, Y+1	; 0x01
    3046:	fa 81       	ldd	r31, Y+2	; 0x02
    3048:	83 8d       	ldd	r24, Z+27	; 0x1b
    304a:	98 17       	cp	r25, r24
    304c:	d0 f4       	brcc	.+52     	; 0x3082 <xQueueCRSendFromISR+0x6a>
		{
			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
    304e:	89 81       	ldd	r24, Y+1	; 0x01
    3050:	9a 81       	ldd	r25, Y+2	; 0x02
    3052:	2d 81       	ldd	r18, Y+5	; 0x05
    3054:	3e 81       	ldd	r19, Y+6	; 0x06
    3056:	b9 01       	movw	r22, r18
    3058:	40 e0       	ldi	r20, 0x00	; 0
    305a:	0e 94 5f 15 	call	0x2abe	; 0x2abe <prvCopyDataToQueue>

			/* We only want to wake one co-routine per ISR, so check that a
			co-routine has not already been woken. */
			if( xCoRoutinePreviouslyWoken == pdFALSE )
    305e:	8f 81       	ldd	r24, Y+7	; 0x07
    3060:	88 23       	and	r24, r24
    3062:	79 f4       	brne	.+30     	; 0x3082 <xQueueCRSendFromISR+0x6a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3064:	e9 81       	ldd	r30, Y+1	; 0x01
    3066:	fa 81       	ldd	r31, Y+2	; 0x02
    3068:	81 89       	ldd	r24, Z+17	; 0x11
    306a:	88 23       	and	r24, r24
    306c:	51 f0       	breq	.+20     	; 0x3082 <xQueueCRSendFromISR+0x6a>
				{
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    306e:	89 81       	ldd	r24, Y+1	; 0x01
    3070:	9a 81       	ldd	r25, Y+2	; 0x02
    3072:	41 96       	adiw	r24, 0x11	; 17
    3074:	0e 94 4a 0b 	call	0x1694	; 0x1694 <xCoRoutineRemoveFromEventList>
    3078:	88 23       	and	r24, r24
    307a:	19 f0       	breq	.+6      	; 0x3082 <xQueueCRSendFromISR+0x6a>
					{
						return pdTRUE;
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	88 87       	std	Y+8, r24	; 0x08
    3080:	02 c0       	rjmp	.+4      	; 0x3086 <xQueueCRSendFromISR+0x6e>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xCoRoutinePreviouslyWoken;
    3082:	8f 81       	ldd	r24, Y+7	; 0x07
    3084:	88 87       	std	Y+8, r24	; 0x08
    3086:	88 85       	ldd	r24, Y+8	; 0x08
	}
    3088:	28 96       	adiw	r28, 0x08	; 8
    308a:	0f b6       	in	r0, 0x3f	; 63
    308c:	f8 94       	cli
    308e:	de bf       	out	0x3e, r29	; 62
    3090:	0f be       	out	0x3f, r0	; 63
    3092:	cd bf       	out	0x3d, r28	; 61
    3094:	cf 91       	pop	r28
    3096:	df 91       	pop	r29
    3098:	08 95       	ret

0000309a <xQueueCRReceiveFromISR>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWoken )
	{
    309a:	df 93       	push	r29
    309c:	cf 93       	push	r28
    309e:	cd b7       	in	r28, 0x3d	; 61
    30a0:	de b7       	in	r29, 0x3e	; 62
    30a2:	29 97       	sbiw	r28, 0x09	; 9
    30a4:	0f b6       	in	r0, 0x3f	; 63
    30a6:	f8 94       	cli
    30a8:	de bf       	out	0x3e, r29	; 62
    30aa:	0f be       	out	0x3f, r0	; 63
    30ac:	cd bf       	out	0x3d, r28	; 61
    30ae:	9d 83       	std	Y+5, r25	; 0x05
    30b0:	8c 83       	std	Y+4, r24	; 0x04
    30b2:	7f 83       	std	Y+7, r23	; 0x07
    30b4:	6e 83       	std	Y+6, r22	; 0x06
    30b6:	59 87       	std	Y+9, r21	; 0x09
    30b8:	48 87       	std	Y+8, r20	; 0x08
	BaseType_t xReturn;
	Queue_t * const pxQueue = xQueue;
    30ba:	8c 81       	ldd	r24, Y+4	; 0x04
    30bc:	9d 81       	ldd	r25, Y+5	; 0x05
    30be:	9a 83       	std	Y+2, r25	; 0x02
    30c0:	89 83       	std	Y+1, r24	; 0x01

		/* We cannot block from an ISR, so check there is data available. If
		not then just leave without doing anything. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    30c2:	e9 81       	ldd	r30, Y+1	; 0x01
    30c4:	fa 81       	ldd	r31, Y+2	; 0x02
    30c6:	82 8d       	ldd	r24, Z+26	; 0x1a
    30c8:	88 23       	and	r24, r24
    30ca:	09 f4       	brne	.+2      	; 0x30ce <xQueueCRReceiveFromISR+0x34>
    30cc:	50 c0       	rjmp	.+160    	; 0x316e <xQueueCRReceiveFromISR+0xd4>
		{
			/* Copy the data from the queue. */
			pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
    30ce:	e9 81       	ldd	r30, Y+1	; 0x01
    30d0:	fa 81       	ldd	r31, Y+2	; 0x02
    30d2:	26 81       	ldd	r18, Z+6	; 0x06
    30d4:	37 81       	ldd	r19, Z+7	; 0x07
    30d6:	e9 81       	ldd	r30, Y+1	; 0x01
    30d8:	fa 81       	ldd	r31, Y+2	; 0x02
    30da:	84 8d       	ldd	r24, Z+28	; 0x1c
    30dc:	88 2f       	mov	r24, r24
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	82 0f       	add	r24, r18
    30e2:	93 1f       	adc	r25, r19
    30e4:	e9 81       	ldd	r30, Y+1	; 0x01
    30e6:	fa 81       	ldd	r31, Y+2	; 0x02
    30e8:	97 83       	std	Z+7, r25	; 0x07
    30ea:	86 83       	std	Z+6, r24	; 0x06
			if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
    30ec:	e9 81       	ldd	r30, Y+1	; 0x01
    30ee:	fa 81       	ldd	r31, Y+2	; 0x02
    30f0:	26 81       	ldd	r18, Z+6	; 0x06
    30f2:	37 81       	ldd	r19, Z+7	; 0x07
    30f4:	e9 81       	ldd	r30, Y+1	; 0x01
    30f6:	fa 81       	ldd	r31, Y+2	; 0x02
    30f8:	84 81       	ldd	r24, Z+4	; 0x04
    30fa:	95 81       	ldd	r25, Z+5	; 0x05
    30fc:	28 17       	cp	r18, r24
    30fe:	39 07       	cpc	r19, r25
    3100:	40 f0       	brcs	.+16     	; 0x3112 <xQueueCRReceiveFromISR+0x78>
			{
				pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    3102:	e9 81       	ldd	r30, Y+1	; 0x01
    3104:	fa 81       	ldd	r31, Y+2	; 0x02
    3106:	80 81       	ld	r24, Z
    3108:	91 81       	ldd	r25, Z+1	; 0x01
    310a:	e9 81       	ldd	r30, Y+1	; 0x01
    310c:	fa 81       	ldd	r31, Y+2	; 0x02
    310e:	97 83       	std	Z+7, r25	; 0x07
    3110:	86 83       	std	Z+6, r24	; 0x06
			}
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
			--( pxQueue->uxMessagesWaiting );
    3112:	e9 81       	ldd	r30, Y+1	; 0x01
    3114:	fa 81       	ldd	r31, Y+2	; 0x02
    3116:	82 8d       	ldd	r24, Z+26	; 0x1a
    3118:	81 50       	subi	r24, 0x01	; 1
    311a:	e9 81       	ldd	r30, Y+1	; 0x01
    311c:	fa 81       	ldd	r31, Y+2	; 0x02
    311e:	82 8f       	std	Z+26, r24	; 0x1a
			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    3120:	e9 81       	ldd	r30, Y+1	; 0x01
    3122:	fa 81       	ldd	r31, Y+2	; 0x02
    3124:	46 81       	ldd	r20, Z+6	; 0x06
    3126:	57 81       	ldd	r21, Z+7	; 0x07
    3128:	e9 81       	ldd	r30, Y+1	; 0x01
    312a:	fa 81       	ldd	r31, Y+2	; 0x02
    312c:	84 8d       	ldd	r24, Z+28	; 0x1c
    312e:	28 2f       	mov	r18, r24
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	8e 81       	ldd	r24, Y+6	; 0x06
    3134:	9f 81       	ldd	r25, Y+7	; 0x07
    3136:	ba 01       	movw	r22, r20
    3138:	a9 01       	movw	r20, r18
    313a:	0e 94 0c 2b 	call	0x5618	; 0x5618 <memcpy>

			if( ( *pxCoRoutineWoken ) == pdFALSE )
    313e:	e8 85       	ldd	r30, Y+8	; 0x08
    3140:	f9 85       	ldd	r31, Y+9	; 0x09
    3142:	80 81       	ld	r24, Z
    3144:	88 23       	and	r24, r24
    3146:	81 f4       	brne	.+32     	; 0x3168 <xQueueCRReceiveFromISR+0xce>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3148:	e9 81       	ldd	r30, Y+1	; 0x01
    314a:	fa 81       	ldd	r31, Y+2	; 0x02
    314c:	80 85       	ldd	r24, Z+8	; 0x08
    314e:	88 23       	and	r24, r24
    3150:	59 f0       	breq	.+22     	; 0x3168 <xQueueCRReceiveFromISR+0xce>
				{
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3152:	89 81       	ldd	r24, Y+1	; 0x01
    3154:	9a 81       	ldd	r25, Y+2	; 0x02
    3156:	08 96       	adiw	r24, 0x08	; 8
    3158:	0e 94 4a 0b 	call	0x1694	; 0x1694 <xCoRoutineRemoveFromEventList>
    315c:	88 23       	and	r24, r24
    315e:	21 f0       	breq	.+8      	; 0x3168 <xQueueCRReceiveFromISR+0xce>
					{
						*pxCoRoutineWoken = pdTRUE;
    3160:	e8 85       	ldd	r30, Y+8	; 0x08
    3162:	f9 85       	ldd	r31, Y+9	; 0x09
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	80 83       	st	Z, r24
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
    3168:	81 e0       	ldi	r24, 0x01	; 1
    316a:	8b 83       	std	Y+3, r24	; 0x03
    316c:	01 c0       	rjmp	.+2      	; 0x3170 <xQueueCRReceiveFromISR+0xd6>
		}
		else
		{
			xReturn = pdFAIL;
    316e:	1b 82       	std	Y+3, r1	; 0x03
		}

		return xReturn;
    3170:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    3172:	29 96       	adiw	r28, 0x09	; 9
    3174:	0f b6       	in	r0, 0x3f	; 63
    3176:	f8 94       	cli
    3178:	de bf       	out	0x3e, r29	; 62
    317a:	0f be       	out	0x3f, r0	; 63
    317c:	cd bf       	out	0x3d, r28	; 61
    317e:	cf 91       	pop	r28
    3180:	df 91       	pop	r29
    3182:	08 95       	ret

00003184 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    3184:	8f 92       	push	r8
    3186:	9f 92       	push	r9
    3188:	af 92       	push	r10
    318a:	bf 92       	push	r11
    318c:	cf 92       	push	r12
    318e:	df 92       	push	r13
    3190:	ef 92       	push	r14
    3192:	ff 92       	push	r15
    3194:	0f 93       	push	r16
    3196:	1f 93       	push	r17
    3198:	df 93       	push	r29
    319a:	cf 93       	push	r28
    319c:	cd b7       	in	r28, 0x3d	; 61
    319e:	de b7       	in	r29, 0x3e	; 62
    31a0:	60 97       	sbiw	r28, 0x10	; 16
    31a2:	0f b6       	in	r0, 0x3f	; 63
    31a4:	f8 94       	cli
    31a6:	de bf       	out	0x3e, r29	; 62
    31a8:	0f be       	out	0x3f, r0	; 63
    31aa:	cd bf       	out	0x3d, r28	; 61
    31ac:	9f 83       	std	Y+7, r25	; 0x07
    31ae:	8e 83       	std	Y+6, r24	; 0x06
    31b0:	79 87       	std	Y+9, r23	; 0x09
    31b2:	68 87       	std	Y+8, r22	; 0x08
    31b4:	5b 87       	std	Y+11, r21	; 0x0b
    31b6:	4a 87       	std	Y+10, r20	; 0x0a
    31b8:	3d 87       	std	Y+13, r19	; 0x0d
    31ba:	2c 87       	std	Y+12, r18	; 0x0c
    31bc:	0e 87       	std	Y+14, r16	; 0x0e
    31be:	f8 8a       	std	Y+16, r15	; 0x10
    31c0:	ef 86       	std	Y+15, r14	; 0x0f
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
    31c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    31c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    31c6:	0e 94 a3 05 	call	0xb46	; 0xb46 <pvPortMalloc>
    31ca:	9a 83       	std	Y+2, r25	; 0x02
    31cc:	89 83       	std	Y+1, r24	; 0x01

			if( pxStack != NULL )
    31ce:	89 81       	ldd	r24, Y+1	; 0x01
    31d0:	9a 81       	ldd	r25, Y+2	; 0x02
    31d2:	00 97       	sbiw	r24, 0x00	; 0
    31d4:	b1 f0       	breq	.+44     	; 0x3202 <xTaskCreate+0x7e>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
    31d6:	86 e2       	ldi	r24, 0x26	; 38
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	0e 94 a3 05 	call	0xb46	; 0xb46 <pvPortMalloc>
    31de:	9d 83       	std	Y+5, r25	; 0x05
    31e0:	8c 83       	std	Y+4, r24	; 0x04

				if( pxNewTCB != NULL )
    31e2:	8c 81       	ldd	r24, Y+4	; 0x04
    31e4:	9d 81       	ldd	r25, Y+5	; 0x05
    31e6:	00 97       	sbiw	r24, 0x00	; 0
    31e8:	39 f0       	breq	.+14     	; 0x31f8 <xTaskCreate+0x74>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    31ea:	ec 81       	ldd	r30, Y+4	; 0x04
    31ec:	fd 81       	ldd	r31, Y+5	; 0x05
    31ee:	89 81       	ldd	r24, Y+1	; 0x01
    31f0:	9a 81       	ldd	r25, Y+2	; 0x02
    31f2:	90 8f       	std	Z+24, r25	; 0x18
    31f4:	87 8b       	std	Z+23, r24	; 0x17
    31f6:	07 c0       	rjmp	.+14     	; 0x3206 <xTaskCreate+0x82>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    31f8:	89 81       	ldd	r24, Y+1	; 0x01
    31fa:	9a 81       	ldd	r25, Y+2	; 0x02
    31fc:	0e 94 be 05 	call	0xb7c	; 0xb7c <vPortFree>
    3200:	02 c0       	rjmp	.+4      	; 0x3206 <xTaskCreate+0x82>
				}
			}
			else
			{
				pxNewTCB = NULL;
    3202:	1d 82       	std	Y+5, r1	; 0x05
    3204:	1c 82       	std	Y+4, r1	; 0x04
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    3206:	8c 81       	ldd	r24, Y+4	; 0x04
    3208:	9d 81       	ldd	r25, Y+5	; 0x05
    320a:	00 97       	sbiw	r24, 0x00	; 0
    320c:	e9 f0       	breq	.+58     	; 0x3248 <xTaskCreate+0xc4>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    320e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3210:	9b 85       	ldd	r25, Y+11	; 0x0b
    3212:	9c 01       	movw	r18, r24
    3214:	40 e0       	ldi	r20, 0x00	; 0
    3216:	50 e0       	ldi	r21, 0x00	; 0
    3218:	8e 81       	ldd	r24, Y+6	; 0x06
    321a:	9f 81       	ldd	r25, Y+7	; 0x07
    321c:	68 85       	ldd	r22, Y+8	; 0x08
    321e:	79 85       	ldd	r23, Y+9	; 0x09
    3220:	ec 85       	ldd	r30, Y+12	; 0x0c
    3222:	fd 85       	ldd	r31, Y+13	; 0x0d
    3224:	af 85       	ldd	r26, Y+15	; 0x0f
    3226:	b8 89       	ldd	r27, Y+16	; 0x10
    3228:	ac 80       	ldd	r10, Y+4	; 0x04
    322a:	bd 80       	ldd	r11, Y+5	; 0x05
    322c:	8f 01       	movw	r16, r30
    322e:	ee 84       	ldd	r14, Y+14	; 0x0e
    3230:	6d 01       	movw	r12, r26
    3232:	88 24       	eor	r8, r8
    3234:	99 24       	eor	r9, r9
    3236:	0e 94 3a 19 	call	0x3274	; 0x3274 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    323a:	8c 81       	ldd	r24, Y+4	; 0x04
    323c:	9d 81       	ldd	r25, Y+5	; 0x05
    323e:	0e 94 f6 19 	call	0x33ec	; 0x33ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
    3242:	81 e0       	ldi	r24, 0x01	; 1
    3244:	8b 83       	std	Y+3, r24	; 0x03
    3246:	02 c0       	rjmp	.+4      	; 0x324c <xTaskCreate+0xc8>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3248:	8f ef       	ldi	r24, 0xFF	; 255
    324a:	8b 83       	std	Y+3, r24	; 0x03
		}

		return xReturn;
    324c:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    324e:	60 96       	adiw	r28, 0x10	; 16
    3250:	0f b6       	in	r0, 0x3f	; 63
    3252:	f8 94       	cli
    3254:	de bf       	out	0x3e, r29	; 62
    3256:	0f be       	out	0x3f, r0	; 63
    3258:	cd bf       	out	0x3d, r28	; 61
    325a:	cf 91       	pop	r28
    325c:	df 91       	pop	r29
    325e:	1f 91       	pop	r17
    3260:	0f 91       	pop	r16
    3262:	ff 90       	pop	r15
    3264:	ef 90       	pop	r14
    3266:	df 90       	pop	r13
    3268:	cf 90       	pop	r12
    326a:	bf 90       	pop	r11
    326c:	af 90       	pop	r10
    326e:	9f 90       	pop	r9
    3270:	8f 90       	pop	r8
    3272:	08 95       	ret

00003274 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    3274:	8f 92       	push	r8
    3276:	9f 92       	push	r9
    3278:	af 92       	push	r10
    327a:	bf 92       	push	r11
    327c:	cf 92       	push	r12
    327e:	df 92       	push	r13
    3280:	ef 92       	push	r14
    3282:	0f 93       	push	r16
    3284:	1f 93       	push	r17
    3286:	df 93       	push	r29
    3288:	cf 93       	push	r28
    328a:	cd b7       	in	r28, 0x3d	; 61
    328c:	de b7       	in	r29, 0x3e	; 62
    328e:	64 97       	sbiw	r28, 0x14	; 20
    3290:	0f b6       	in	r0, 0x3f	; 63
    3292:	f8 94       	cli
    3294:	de bf       	out	0x3e, r29	; 62
    3296:	0f be       	out	0x3f, r0	; 63
    3298:	cd bf       	out	0x3d, r28	; 61
    329a:	9d 83       	std	Y+5, r25	; 0x05
    329c:	8c 83       	std	Y+4, r24	; 0x04
    329e:	7f 83       	std	Y+7, r23	; 0x07
    32a0:	6e 83       	std	Y+6, r22	; 0x06
    32a2:	28 87       	std	Y+8, r18	; 0x08
    32a4:	39 87       	std	Y+9, r19	; 0x09
    32a6:	4a 87       	std	Y+10, r20	; 0x0a
    32a8:	5b 87       	std	Y+11, r21	; 0x0b
    32aa:	1d 87       	std	Y+13, r17	; 0x0d
    32ac:	0c 87       	std	Y+12, r16	; 0x0c
    32ae:	ee 86       	std	Y+14, r14	; 0x0e
    32b0:	d8 8a       	std	Y+16, r13	; 0x10
    32b2:	cf 86       	std	Y+15, r12	; 0x0f
    32b4:	ba 8a       	std	Y+18, r11	; 0x12
    32b6:	a9 8a       	std	Y+17, r10	; 0x11
    32b8:	9c 8a       	std	Y+20, r9	; 0x14
    32ba:	8b 8a       	std	Y+19, r8	; 0x13
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
    32bc:	e9 89       	ldd	r30, Y+17	; 0x11
    32be:	fa 89       	ldd	r31, Y+18	; 0x12
    32c0:	27 89       	ldd	r18, Z+23	; 0x17
    32c2:	30 8d       	ldd	r19, Z+24	; 0x18
    32c4:	88 85       	ldd	r24, Y+8	; 0x08
    32c6:	99 85       	ldd	r25, Y+9	; 0x09
    32c8:	01 97       	sbiw	r24, 0x01	; 1
    32ca:	82 0f       	add	r24, r18
    32cc:	93 1f       	adc	r25, r19
    32ce:	9b 83       	std	Y+3, r25	; 0x03
    32d0:	8a 83       	std	Y+2, r24	; 0x02
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
    32d2:	8e 81       	ldd	r24, Y+6	; 0x06
    32d4:	9f 81       	ldd	r25, Y+7	; 0x07
    32d6:	00 97       	sbiw	r24, 0x00	; 0
    32d8:	51 f1       	breq	.+84     	; 0x332e <prvInitialiseNewTask+0xba>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    32da:	19 82       	std	Y+1, r1	; 0x01
    32dc:	21 c0       	rjmp	.+66     	; 0x3320 <prvInitialiseNewTask+0xac>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    32de:	89 81       	ldd	r24, Y+1	; 0x01
    32e0:	48 2f       	mov	r20, r24
    32e2:	50 e0       	ldi	r21, 0x00	; 0
    32e4:	89 81       	ldd	r24, Y+1	; 0x01
    32e6:	28 2f       	mov	r18, r24
    32e8:	30 e0       	ldi	r19, 0x00	; 0
    32ea:	8e 81       	ldd	r24, Y+6	; 0x06
    32ec:	9f 81       	ldd	r25, Y+7	; 0x07
    32ee:	fc 01       	movw	r30, r24
    32f0:	e2 0f       	add	r30, r18
    32f2:	f3 1f       	adc	r31, r19
    32f4:	20 81       	ld	r18, Z
    32f6:	89 89       	ldd	r24, Y+17	; 0x11
    32f8:	9a 89       	ldd	r25, Y+18	; 0x12
    32fa:	84 0f       	add	r24, r20
    32fc:	95 1f       	adc	r25, r21
    32fe:	fc 01       	movw	r30, r24
    3300:	79 96       	adiw	r30, 0x19	; 25
    3302:	20 83       	st	Z, r18

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
    3304:	89 81       	ldd	r24, Y+1	; 0x01
    3306:	28 2f       	mov	r18, r24
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	8e 81       	ldd	r24, Y+6	; 0x06
    330c:	9f 81       	ldd	r25, Y+7	; 0x07
    330e:	fc 01       	movw	r30, r24
    3310:	e2 0f       	add	r30, r18
    3312:	f3 1f       	adc	r31, r19
    3314:	80 81       	ld	r24, Z
    3316:	88 23       	and	r24, r24
    3318:	31 f0       	breq	.+12     	; 0x3326 <prvInitialiseNewTask+0xb2>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    331a:	89 81       	ldd	r24, Y+1	; 0x01
    331c:	8f 5f       	subi	r24, 0xFF	; 255
    331e:	89 83       	std	Y+1, r24	; 0x01
    3320:	89 81       	ldd	r24, Y+1	; 0x01
    3322:	88 30       	cpi	r24, 0x08	; 8
    3324:	e0 f2       	brcs	.-72     	; 0x32de <prvInitialiseNewTask+0x6a>
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    3326:	e9 89       	ldd	r30, Y+17	; 0x11
    3328:	fa 89       	ldd	r31, Y+18	; 0x12
    332a:	10 a2       	std	Z+32, r1	; 0x20
    332c:	03 c0       	rjmp	.+6      	; 0x3334 <prvInitialiseNewTask+0xc0>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
    332e:	e9 89       	ldd	r30, Y+17	; 0x11
    3330:	fa 89       	ldd	r31, Y+18	; 0x12
    3332:	11 8e       	std	Z+25, r1	; 0x19
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    3334:	8e 85       	ldd	r24, Y+14	; 0x0e
    3336:	84 30       	cpi	r24, 0x04	; 4
    3338:	10 f0       	brcs	.+4      	; 0x333e <prvInitialiseNewTask+0xca>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    333a:	83 e0       	ldi	r24, 0x03	; 3
    333c:	8e 87       	std	Y+14, r24	; 0x0e
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    333e:	e9 89       	ldd	r30, Y+17	; 0x11
    3340:	fa 89       	ldd	r31, Y+18	; 0x12
    3342:	8e 85       	ldd	r24, Y+14	; 0x0e
    3344:	86 8b       	std	Z+22, r24	; 0x16
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    3346:	89 89       	ldd	r24, Y+17	; 0x11
    3348:	9a 89       	ldd	r25, Y+18	; 0x12
    334a:	02 96       	adiw	r24, 0x02	; 2
    334c:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    3350:	89 89       	ldd	r24, Y+17	; 0x11
    3352:	9a 89       	ldd	r25, Y+18	; 0x12
    3354:	0c 96       	adiw	r24, 0x0c	; 12
    3356:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    335a:	e9 89       	ldd	r30, Y+17	; 0x11
    335c:	fa 89       	ldd	r31, Y+18	; 0x12
    335e:	89 89       	ldd	r24, Y+17	; 0x11
    3360:	9a 89       	ldd	r25, Y+18	; 0x12
    3362:	91 87       	std	Z+9, r25	; 0x09
    3364:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3366:	8e 85       	ldd	r24, Y+14	; 0x0e
    3368:	28 2f       	mov	r18, r24
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	84 e0       	ldi	r24, 0x04	; 4
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	82 1b       	sub	r24, r18
    3372:	93 0b       	sbc	r25, r19
    3374:	e9 89       	ldd	r30, Y+17	; 0x11
    3376:	fa 89       	ldd	r31, Y+18	; 0x12
    3378:	95 87       	std	Z+13, r25	; 0x0d
    337a:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    337c:	e9 89       	ldd	r30, Y+17	; 0x11
    337e:	fa 89       	ldd	r31, Y+18	; 0x12
    3380:	89 89       	ldd	r24, Y+17	; 0x11
    3382:	9a 89       	ldd	r25, Y+18	; 0x12
    3384:	93 8b       	std	Z+19, r25	; 0x13
    3386:	82 8b       	std	Z+18, r24	; 0x12
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    3388:	e9 89       	ldd	r30, Y+17	; 0x11
    338a:	fa 89       	ldd	r31, Y+18	; 0x12
    338c:	11 a2       	std	Z+33, r1	; 0x21
    338e:	12 a2       	std	Z+34, r1	; 0x22
    3390:	13 a2       	std	Z+35, r1	; 0x23
    3392:	14 a2       	std	Z+36, r1	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    3394:	e9 89       	ldd	r30, Y+17	; 0x11
    3396:	fa 89       	ldd	r31, Y+18	; 0x12
    3398:	15 a2       	std	Z+37, r1	; 0x25
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    339a:	8a 81       	ldd	r24, Y+2	; 0x02
    339c:	9b 81       	ldd	r25, Y+3	; 0x03
    339e:	2c 81       	ldd	r18, Y+4	; 0x04
    33a0:	3d 81       	ldd	r19, Y+5	; 0x05
    33a2:	4c 85       	ldd	r20, Y+12	; 0x0c
    33a4:	5d 85       	ldd	r21, Y+13	; 0x0d
    33a6:	b9 01       	movw	r22, r18
    33a8:	0e 94 d6 05 	call	0xbac	; 0xbac <pxPortInitialiseStack>
    33ac:	e9 89       	ldd	r30, Y+17	; 0x11
    33ae:	fa 89       	ldd	r31, Y+18	; 0x12
    33b0:	91 83       	std	Z+1, r25	; 0x01
    33b2:	80 83       	st	Z, r24
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
    33b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    33b6:	98 89       	ldd	r25, Y+16	; 0x10
    33b8:	00 97       	sbiw	r24, 0x00	; 0
    33ba:	31 f0       	breq	.+12     	; 0x33c8 <prvInitialiseNewTask+0x154>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    33bc:	ef 85       	ldd	r30, Y+15	; 0x0f
    33be:	f8 89       	ldd	r31, Y+16	; 0x10
    33c0:	89 89       	ldd	r24, Y+17	; 0x11
    33c2:	9a 89       	ldd	r25, Y+18	; 0x12
    33c4:	91 83       	std	Z+1, r25	; 0x01
    33c6:	80 83       	st	Z, r24
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    33c8:	64 96       	adiw	r28, 0x14	; 20
    33ca:	0f b6       	in	r0, 0x3f	; 63
    33cc:	f8 94       	cli
    33ce:	de bf       	out	0x3e, r29	; 62
    33d0:	0f be       	out	0x3f, r0	; 63
    33d2:	cd bf       	out	0x3d, r28	; 61
    33d4:	cf 91       	pop	r28
    33d6:	df 91       	pop	r29
    33d8:	1f 91       	pop	r17
    33da:	0f 91       	pop	r16
    33dc:	ef 90       	pop	r14
    33de:	df 90       	pop	r13
    33e0:	cf 90       	pop	r12
    33e2:	bf 90       	pop	r11
    33e4:	af 90       	pop	r10
    33e6:	9f 90       	pop	r9
    33e8:	8f 90       	pop	r8
    33ea:	08 95       	ret

000033ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    33ec:	df 93       	push	r29
    33ee:	cf 93       	push	r28
    33f0:	00 d0       	rcall	.+0      	; 0x33f2 <prvAddNewTaskToReadyList+0x6>
    33f2:	cd b7       	in	r28, 0x3d	; 61
    33f4:	de b7       	in	r29, 0x3e	; 62
    33f6:	9a 83       	std	Y+2, r25	; 0x02
    33f8:	89 83       	std	Y+1, r24	; 0x01
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    33fa:	0f b6       	in	r0, 0x3f	; 63
    33fc:	f8 94       	cli
    33fe:	0f 92       	push	r0
	{
		uxCurrentNumberOfTasks++;
    3400:	80 91 c7 00 	lds	r24, 0x00C7
    3404:	8f 5f       	subi	r24, 0xFF	; 255
    3406:	80 93 c7 00 	sts	0x00C7, r24
		if( pxCurrentTCB == NULL )
    340a:	80 91 c4 00 	lds	r24, 0x00C4
    340e:	90 91 c5 00 	lds	r25, 0x00C5
    3412:	00 97       	sbiw	r24, 0x00	; 0
    3414:	69 f4       	brne	.+26     	; 0x3430 <prvAddNewTaskToReadyList+0x44>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    3416:	89 81       	ldd	r24, Y+1	; 0x01
    3418:	9a 81       	ldd	r25, Y+2	; 0x02
    341a:	90 93 c5 00 	sts	0x00C5, r25
    341e:	80 93 c4 00 	sts	0x00C4, r24

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    3422:	80 91 c7 00 	lds	r24, 0x00C7
    3426:	81 30       	cpi	r24, 0x01	; 1
    3428:	b9 f4       	brne	.+46     	; 0x3458 <prvAddNewTaskToReadyList+0x6c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    342a:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <prvInitialiseTaskLists>
    342e:	14 c0       	rjmp	.+40     	; 0x3458 <prvAddNewTaskToReadyList+0x6c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    3430:	80 91 cb 00 	lds	r24, 0x00CB
    3434:	88 23       	and	r24, r24
    3436:	81 f4       	brne	.+32     	; 0x3458 <prvAddNewTaskToReadyList+0x6c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    3438:	e0 91 c4 00 	lds	r30, 0x00C4
    343c:	f0 91 c5 00 	lds	r31, 0x00C5
    3440:	96 89       	ldd	r25, Z+22	; 0x16
    3442:	e9 81       	ldd	r30, Y+1	; 0x01
    3444:	fa 81       	ldd	r31, Y+2	; 0x02
    3446:	86 89       	ldd	r24, Z+22	; 0x16
    3448:	89 17       	cp	r24, r25
    344a:	30 f0       	brcs	.+12     	; 0x3458 <prvAddNewTaskToReadyList+0x6c>
				{
					pxCurrentTCB = pxNewTCB;
    344c:	89 81       	ldd	r24, Y+1	; 0x01
    344e:	9a 81       	ldd	r25, Y+2	; 0x02
    3450:	90 93 c5 00 	sts	0x00C5, r25
    3454:	80 93 c4 00 	sts	0x00C4, r24
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    3458:	80 91 d0 00 	lds	r24, 0x00D0
    345c:	8f 5f       	subi	r24, 0xFF	; 255
    345e:	80 93 d0 00 	sts	0x00D0, r24
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    3462:	e9 81       	ldd	r30, Y+1	; 0x01
    3464:	fa 81       	ldd	r31, Y+2	; 0x02
    3466:	96 89       	ldd	r25, Z+22	; 0x16
    3468:	80 91 ca 00 	lds	r24, 0x00CA
    346c:	89 17       	cp	r24, r25
    346e:	28 f4       	brcc	.+10     	; 0x347a <prvAddNewTaskToReadyList+0x8e>
    3470:	e9 81       	ldd	r30, Y+1	; 0x01
    3472:	fa 81       	ldd	r31, Y+2	; 0x02
    3474:	86 89       	ldd	r24, Z+22	; 0x16
    3476:	80 93 ca 00 	sts	0x00CA, r24
    347a:	e9 81       	ldd	r30, Y+1	; 0x01
    347c:	fa 81       	ldd	r31, Y+2	; 0x02
    347e:	86 89       	ldd	r24, Z+22	; 0x16
    3480:	28 2f       	mov	r18, r24
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	c9 01       	movw	r24, r18
    3486:	88 0f       	add	r24, r24
    3488:	99 1f       	adc	r25, r25
    348a:	88 0f       	add	r24, r24
    348c:	99 1f       	adc	r25, r25
    348e:	88 0f       	add	r24, r24
    3490:	99 1f       	adc	r25, r25
    3492:	82 0f       	add	r24, r18
    3494:	93 1f       	adc	r25, r19
    3496:	ac 01       	movw	r20, r24
    3498:	4a 52       	subi	r20, 0x2A	; 42
    349a:	5f 4f       	sbci	r21, 0xFF	; 255
    349c:	89 81       	ldd	r24, Y+1	; 0x01
    349e:	9a 81       	ldd	r25, Y+2	; 0x02
    34a0:	9c 01       	movw	r18, r24
    34a2:	2e 5f       	subi	r18, 0xFE	; 254
    34a4:	3f 4f       	sbci	r19, 0xFF	; 255
    34a6:	ca 01       	movw	r24, r20
    34a8:	b9 01       	movw	r22, r18
    34aa:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    34ae:	0f 90       	pop	r0
    34b0:	0f be       	out	0x3f, r0	; 63

	if( xSchedulerRunning != pdFALSE )
    34b2:	80 91 cb 00 	lds	r24, 0x00CB
    34b6:	88 23       	and	r24, r24
    34b8:	61 f0       	breq	.+24     	; 0x34d2 <prvAddNewTaskToReadyList+0xe6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    34ba:	e0 91 c4 00 	lds	r30, 0x00C4
    34be:	f0 91 c5 00 	lds	r31, 0x00C5
    34c2:	96 89       	ldd	r25, Z+22	; 0x16
    34c4:	e9 81       	ldd	r30, Y+1	; 0x01
    34c6:	fa 81       	ldd	r31, Y+2	; 0x02
    34c8:	86 89       	ldd	r24, Z+22	; 0x16
    34ca:	98 17       	cp	r25, r24
    34cc:	10 f4       	brcc	.+4      	; 0x34d2 <prvAddNewTaskToReadyList+0xe6>
		{
			taskYIELD_IF_USING_PREEMPTION();
    34ce:	0e 94 95 07 	call	0xf2a	; 0xf2a <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    34d2:	0f 90       	pop	r0
    34d4:	0f 90       	pop	r0
    34d6:	cf 91       	pop	r28
    34d8:	df 91       	pop	r29
    34da:	08 95       	ret

000034dc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    34dc:	df 93       	push	r29
    34de:	cf 93       	push	r28
    34e0:	00 d0       	rcall	.+0      	; 0x34e2 <vTaskDelete+0x6>
    34e2:	00 d0       	rcall	.+0      	; 0x34e4 <vTaskDelete+0x8>
    34e4:	00 d0       	rcall	.+0      	; 0x34e6 <vTaskDelete+0xa>
    34e6:	cd b7       	in	r28, 0x3d	; 61
    34e8:	de b7       	in	r29, 0x3e	; 62
    34ea:	9c 83       	std	Y+4, r25	; 0x04
    34ec:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    34ee:	0f b6       	in	r0, 0x3f	; 63
    34f0:	f8 94       	cli
    34f2:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    34f4:	8b 81       	ldd	r24, Y+3	; 0x03
    34f6:	9c 81       	ldd	r25, Y+4	; 0x04
    34f8:	00 97       	sbiw	r24, 0x00	; 0
    34fa:	39 f4       	brne	.+14     	; 0x350a <vTaskDelete+0x2e>
    34fc:	80 91 c4 00 	lds	r24, 0x00C4
    3500:	90 91 c5 00 	lds	r25, 0x00C5
    3504:	9e 83       	std	Y+6, r25	; 0x06
    3506:	8d 83       	std	Y+5, r24	; 0x05
    3508:	04 c0       	rjmp	.+8      	; 0x3512 <vTaskDelete+0x36>
    350a:	8b 81       	ldd	r24, Y+3	; 0x03
    350c:	9c 81       	ldd	r25, Y+4	; 0x04
    350e:	9e 83       	std	Y+6, r25	; 0x06
    3510:	8d 83       	std	Y+5, r24	; 0x05
    3512:	8d 81       	ldd	r24, Y+5	; 0x05
    3514:	9e 81       	ldd	r25, Y+6	; 0x06
    3516:	9a 83       	std	Y+2, r25	; 0x02
    3518:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    351a:	89 81       	ldd	r24, Y+1	; 0x01
    351c:	9a 81       	ldd	r25, Y+2	; 0x02
    351e:	02 96       	adiw	r24, 0x02	; 2
    3520:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    3524:	e9 81       	ldd	r30, Y+1	; 0x01
    3526:	fa 81       	ldd	r31, Y+2	; 0x02
    3528:	84 89       	ldd	r24, Z+20	; 0x14
    352a:	95 89       	ldd	r25, Z+21	; 0x15
    352c:	00 97       	sbiw	r24, 0x00	; 0
    352e:	29 f0       	breq	.+10     	; 0x353a <vTaskDelete+0x5e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3530:	89 81       	ldd	r24, Y+1	; 0x01
    3532:	9a 81       	ldd	r25, Y+2	; 0x02
    3534:	0c 96       	adiw	r24, 0x0c	; 12
    3536:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
    353a:	80 91 d0 00 	lds	r24, 0x00D0
    353e:	8f 5f       	subi	r24, 0xFF	; 255
    3540:	80 93 d0 00 	sts	0x00D0, r24

			if( pxTCB == pxCurrentTCB )
    3544:	20 91 c4 00 	lds	r18, 0x00C4
    3548:	30 91 c5 00 	lds	r19, 0x00C5
    354c:	89 81       	ldd	r24, Y+1	; 0x01
    354e:	9a 81       	ldd	r25, Y+2	; 0x02
    3550:	82 17       	cp	r24, r18
    3552:	93 07       	cpc	r25, r19
    3554:	81 f4       	brne	.+32     	; 0x3576 <vTaskDelete+0x9a>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    3556:	89 81       	ldd	r24, Y+1	; 0x01
    3558:	9a 81       	ldd	r25, Y+2	; 0x02
    355a:	9c 01       	movw	r18, r24
    355c:	2e 5f       	subi	r18, 0xFE	; 254
    355e:	3f 4f       	sbci	r19, 0xFF	; 255
    3560:	89 e1       	ldi	r24, 0x19	; 25
    3562:	91 e0       	ldi	r25, 0x01	; 1
    3564:	b9 01       	movw	r22, r18
    3566:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
    356a:	80 91 c6 00 	lds	r24, 0x00C6
    356e:	8f 5f       	subi	r24, 0xFF	; 255
    3570:	80 93 c6 00 	sts	0x00C6, r24
    3574:	0b c0       	rjmp	.+22     	; 0x358c <vTaskDelete+0xb0>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
    3576:	80 91 c7 00 	lds	r24, 0x00C7
    357a:	81 50       	subi	r24, 0x01	; 1
    357c:	80 93 c7 00 	sts	0x00C7, r24
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
    3580:	89 81       	ldd	r24, Y+1	; 0x01
    3582:	9a 81       	ldd	r25, Y+2	; 0x02
    3584:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
    3588:	0e 94 80 20 	call	0x4100	; 0x4100 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
    358c:	0f 90       	pop	r0
    358e:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    3590:	80 91 cb 00 	lds	r24, 0x00CB
    3594:	88 23       	and	r24, r24
    3596:	59 f0       	breq	.+22     	; 0x35ae <vTaskDelete+0xd2>
		{
			if( pxTCB == pxCurrentTCB )
    3598:	20 91 c4 00 	lds	r18, 0x00C4
    359c:	30 91 c5 00 	lds	r19, 0x00C5
    35a0:	89 81       	ldd	r24, Y+1	; 0x01
    35a2:	9a 81       	ldd	r25, Y+2	; 0x02
    35a4:	82 17       	cp	r24, r18
    35a6:	93 07       	cpc	r25, r19
    35a8:	11 f4       	brne	.+4      	; 0x35ae <vTaskDelete+0xd2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    35aa:	0e 94 95 07 	call	0xf2a	; 0xf2a <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    35ae:	26 96       	adiw	r28, 0x06	; 6
    35b0:	0f b6       	in	r0, 0x3f	; 63
    35b2:	f8 94       	cli
    35b4:	de bf       	out	0x3e, r29	; 62
    35b6:	0f be       	out	0x3f, r0	; 63
    35b8:	cd bf       	out	0x3d, r28	; 61
    35ba:	cf 91       	pop	r28
    35bc:	df 91       	pop	r29
    35be:	08 95       	ret

000035c0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    35c0:	df 93       	push	r29
    35c2:	cf 93       	push	r28
    35c4:	cd b7       	in	r28, 0x3d	; 61
    35c6:	de b7       	in	r29, 0x3e	; 62
    35c8:	2a 97       	sbiw	r28, 0x0a	; 10
    35ca:	0f b6       	in	r0, 0x3f	; 63
    35cc:	f8 94       	cli
    35ce:	de bf       	out	0x3e, r29	; 62
    35d0:	0f be       	out	0x3f, r0	; 63
    35d2:	cd bf       	out	0x3d, r28	; 61
    35d4:	98 87       	std	Y+8, r25	; 0x08
    35d6:	8f 83       	std	Y+7, r24	; 0x07
    35d8:	7a 87       	std	Y+10, r23	; 0x0a
    35da:	69 87       	std	Y+9, r22	; 0x09
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    35dc:	1b 82       	std	Y+3, r1	; 0x03

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
    35de:	0e 94 b2 1b 	call	0x3764	; 0x3764 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    35e2:	80 91 c8 00 	lds	r24, 0x00C8
    35e6:	90 91 c9 00 	lds	r25, 0x00C9
    35ea:	9a 83       	std	Y+2, r25	; 0x02
    35ec:	89 83       	std	Y+1, r24	; 0x01

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    35ee:	ef 81       	ldd	r30, Y+7	; 0x07
    35f0:	f8 85       	ldd	r31, Y+8	; 0x08
    35f2:	20 81       	ld	r18, Z
    35f4:	31 81       	ldd	r19, Z+1	; 0x01
    35f6:	89 85       	ldd	r24, Y+9	; 0x09
    35f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35fa:	82 0f       	add	r24, r18
    35fc:	93 1f       	adc	r25, r19
    35fe:	9e 83       	std	Y+6, r25	; 0x06
    3600:	8d 83       	std	Y+5, r24	; 0x05

			if( xConstTickCount < *pxPreviousWakeTime )
    3602:	ef 81       	ldd	r30, Y+7	; 0x07
    3604:	f8 85       	ldd	r31, Y+8	; 0x08
    3606:	20 81       	ld	r18, Z
    3608:	31 81       	ldd	r19, Z+1	; 0x01
    360a:	89 81       	ldd	r24, Y+1	; 0x01
    360c:	9a 81       	ldd	r25, Y+2	; 0x02
    360e:	82 17       	cp	r24, r18
    3610:	93 07       	cpc	r25, r19
    3612:	98 f4       	brcc	.+38     	; 0x363a <vTaskDelayUntil+0x7a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    3614:	ef 81       	ldd	r30, Y+7	; 0x07
    3616:	f8 85       	ldd	r31, Y+8	; 0x08
    3618:	20 81       	ld	r18, Z
    361a:	31 81       	ldd	r19, Z+1	; 0x01
    361c:	8d 81       	ldd	r24, Y+5	; 0x05
    361e:	9e 81       	ldd	r25, Y+6	; 0x06
    3620:	82 17       	cp	r24, r18
    3622:	93 07       	cpc	r25, r19
    3624:	e0 f4       	brcc	.+56     	; 0x365e <vTaskDelayUntil+0x9e>
    3626:	2d 81       	ldd	r18, Y+5	; 0x05
    3628:	3e 81       	ldd	r19, Y+6	; 0x06
    362a:	89 81       	ldd	r24, Y+1	; 0x01
    362c:	9a 81       	ldd	r25, Y+2	; 0x02
    362e:	82 17       	cp	r24, r18
    3630:	93 07       	cpc	r25, r19
    3632:	a8 f4       	brcc	.+42     	; 0x365e <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    3634:	81 e0       	ldi	r24, 0x01	; 1
    3636:	8b 83       	std	Y+3, r24	; 0x03
    3638:	12 c0       	rjmp	.+36     	; 0x365e <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    363a:	ef 81       	ldd	r30, Y+7	; 0x07
    363c:	f8 85       	ldd	r31, Y+8	; 0x08
    363e:	20 81       	ld	r18, Z
    3640:	31 81       	ldd	r19, Z+1	; 0x01
    3642:	8d 81       	ldd	r24, Y+5	; 0x05
    3644:	9e 81       	ldd	r25, Y+6	; 0x06
    3646:	82 17       	cp	r24, r18
    3648:	93 07       	cpc	r25, r19
    364a:	38 f0       	brcs	.+14     	; 0x365a <vTaskDelayUntil+0x9a>
    364c:	2d 81       	ldd	r18, Y+5	; 0x05
    364e:	3e 81       	ldd	r19, Y+6	; 0x06
    3650:	89 81       	ldd	r24, Y+1	; 0x01
    3652:	9a 81       	ldd	r25, Y+2	; 0x02
    3654:	82 17       	cp	r24, r18
    3656:	93 07       	cpc	r25, r19
    3658:	10 f4       	brcc	.+4      	; 0x365e <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    365a:	81 e0       	ldi	r24, 0x01	; 1
    365c:	8b 83       	std	Y+3, r24	; 0x03
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    365e:	ef 81       	ldd	r30, Y+7	; 0x07
    3660:	f8 85       	ldd	r31, Y+8	; 0x08
    3662:	8d 81       	ldd	r24, Y+5	; 0x05
    3664:	9e 81       	ldd	r25, Y+6	; 0x06
    3666:	91 83       	std	Z+1, r25	; 0x01
    3668:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    366a:	8b 81       	ldd	r24, Y+3	; 0x03
    366c:	88 23       	and	r24, r24
    366e:	49 f0       	breq	.+18     	; 0x3682 <vTaskDelayUntil+0xc2>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    3670:	8d 81       	ldd	r24, Y+5	; 0x05
    3672:	9e 81       	ldd	r25, Y+6	; 0x06
    3674:	29 81       	ldd	r18, Y+1	; 0x01
    3676:	3a 81       	ldd	r19, Y+2	; 0x02
    3678:	82 1b       	sub	r24, r18
    367a:	93 0b       	sbc	r25, r19
    367c:	60 e0       	ldi	r22, 0x00	; 0
    367e:	0e 94 d5 24 	call	0x49aa	; 0x49aa <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    3682:	0e 94 be 1b 	call	0x377c	; 0x377c <xTaskResumeAll>
    3686:	8c 83       	std	Y+4, r24	; 0x04

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3688:	8c 81       	ldd	r24, Y+4	; 0x04
    368a:	88 23       	and	r24, r24
    368c:	11 f4       	brne	.+4      	; 0x3692 <vTaskDelayUntil+0xd2>
		{
			portYIELD_WITHIN_API();
    368e:	0e 94 95 07 	call	0xf2a	; 0xf2a <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3692:	2a 96       	adiw	r28, 0x0a	; 10
    3694:	0f b6       	in	r0, 0x3f	; 63
    3696:	f8 94       	cli
    3698:	de bf       	out	0x3e, r29	; 62
    369a:	0f be       	out	0x3f, r0	; 63
    369c:	cd bf       	out	0x3d, r28	; 61
    369e:	cf 91       	pop	r28
    36a0:	df 91       	pop	r29
    36a2:	08 95       	ret

000036a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    36a4:	df 93       	push	r29
    36a6:	cf 93       	push	r28
    36a8:	00 d0       	rcall	.+0      	; 0x36aa <vTaskDelay+0x6>
    36aa:	0f 92       	push	r0
    36ac:	cd b7       	in	r28, 0x3d	; 61
    36ae:	de b7       	in	r29, 0x3e	; 62
    36b0:	9b 83       	std	Y+3, r25	; 0x03
    36b2:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t xAlreadyYielded = pdFALSE;
    36b4:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    36b6:	8a 81       	ldd	r24, Y+2	; 0x02
    36b8:	9b 81       	ldd	r25, Y+3	; 0x03
    36ba:	00 97       	sbiw	r24, 0x00	; 0
    36bc:	51 f0       	breq	.+20     	; 0x36d2 <vTaskDelay+0x2e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    36be:	0e 94 b2 1b 	call	0x3764	; 0x3764 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    36c2:	8a 81       	ldd	r24, Y+2	; 0x02
    36c4:	9b 81       	ldd	r25, Y+3	; 0x03
    36c6:	60 e0       	ldi	r22, 0x00	; 0
    36c8:	0e 94 d5 24 	call	0x49aa	; 0x49aa <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    36cc:	0e 94 be 1b 	call	0x377c	; 0x377c <xTaskResumeAll>
    36d0:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    36d2:	89 81       	ldd	r24, Y+1	; 0x01
    36d4:	88 23       	and	r24, r24
    36d6:	11 f4       	brne	.+4      	; 0x36dc <vTaskDelay+0x38>
		{
			portYIELD_WITHIN_API();
    36d8:	0e 94 95 07 	call	0xf2a	; 0xf2a <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    36dc:	0f 90       	pop	r0
    36de:	0f 90       	pop	r0
    36e0:	0f 90       	pop	r0
    36e2:	cf 91       	pop	r28
    36e4:	df 91       	pop	r29
    36e6:	08 95       	ret

000036e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    36e8:	ef 92       	push	r14
    36ea:	ff 92       	push	r15
    36ec:	0f 93       	push	r16
    36ee:	df 93       	push	r29
    36f0:	cf 93       	push	r28
    36f2:	0f 92       	push	r0
    36f4:	cd b7       	in	r28, 0x3d	; 61
    36f6:	de b7       	in	r29, 0x3e	; 62
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    36f8:	8e ee       	ldi	r24, 0xEE	; 238
    36fa:	9f e1       	ldi	r25, 0x1F	; 31
    36fc:	20 e6       	ldi	r18, 0x60	; 96
    36fe:	30 e0       	ldi	r19, 0x00	; 0
    3700:	e3 ed       	ldi	r30, 0xD3	; 211
    3702:	f0 e0       	ldi	r31, 0x00	; 0
    3704:	b9 01       	movw	r22, r18
    3706:	45 e5       	ldi	r20, 0x55	; 85
    3708:	50 e0       	ldi	r21, 0x00	; 0
    370a:	20 e0       	ldi	r18, 0x00	; 0
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	00 e0       	ldi	r16, 0x00	; 0
    3710:	7f 01       	movw	r14, r30
    3712:	0e 94 c2 18 	call	0x3184	; 0x3184 <xTaskCreate>
    3716:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    3718:	89 81       	ldd	r24, Y+1	; 0x01
    371a:	81 30       	cpi	r24, 0x01	; 1
    371c:	81 f4       	brne	.+32     	; 0x373e <vTaskStartScheduler+0x56>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    371e:	f8 94       	cli
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    3720:	8f ef       	ldi	r24, 0xFF	; 255
    3722:	9f ef       	ldi	r25, 0xFF	; 255
    3724:	90 93 d2 00 	sts	0x00D2, r25
    3728:	80 93 d1 00 	sts	0x00D1, r24
		xSchedulerRunning = pdTRUE;
    372c:	81 e0       	ldi	r24, 0x01	; 1
    372e:	80 93 cb 00 	sts	0x00CB, r24
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
    3732:	10 92 c9 00 	sts	0x00C9, r1
    3736:	10 92 c8 00 	sts	0x00C8, r1

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    373a:	0e 94 59 07 	call	0xeb2	; 0xeb2 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    373e:	0f 90       	pop	r0
    3740:	cf 91       	pop	r28
    3742:	df 91       	pop	r29
    3744:	0f 91       	pop	r16
    3746:	ff 90       	pop	r15
    3748:	ef 90       	pop	r14
    374a:	08 95       	ret

0000374c <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    374c:	df 93       	push	r29
    374e:	cf 93       	push	r28
    3750:	cd b7       	in	r28, 0x3d	; 61
    3752:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    3754:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    3756:	10 92 cb 00 	sts	0x00CB, r1
	vPortEndScheduler();
    375a:	0e 94 8e 07 	call	0xf1c	; 0xf1c <vPortEndScheduler>
}
    375e:	cf 91       	pop	r28
    3760:	df 91       	pop	r29
    3762:	08 95       	ret

00003764 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    3764:	df 93       	push	r29
    3766:	cf 93       	push	r28
    3768:	cd b7       	in	r28, 0x3d	; 61
    376a:	de b7       	in	r29, 0x3e	; 62
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
    376c:	80 91 d5 00 	lds	r24, 0x00D5
    3770:	8f 5f       	subi	r24, 0xFF	; 255
    3772:	80 93 d5 00 	sts	0x00D5, r24

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
    3776:	cf 91       	pop	r28
    3778:	df 91       	pop	r29
    377a:	08 95       	ret

0000377c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    377c:	df 93       	push	r29
    377e:	cf 93       	push	r28
    3780:	00 d0       	rcall	.+0      	; 0x3782 <xTaskResumeAll+0x6>
    3782:	00 d0       	rcall	.+0      	; 0x3784 <xTaskResumeAll+0x8>
    3784:	0f 92       	push	r0
    3786:	cd b7       	in	r28, 0x3d	; 61
    3788:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB = NULL;
    378a:	1d 82       	std	Y+5, r1	; 0x05
    378c:	1c 82       	std	Y+4, r1	; 0x04
BaseType_t xAlreadyYielded = pdFALSE;
    378e:	1b 82       	std	Y+3, r1	; 0x03
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3790:	0f b6       	in	r0, 0x3f	; 63
    3792:	f8 94       	cli
    3794:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    3796:	80 91 d5 00 	lds	r24, 0x00D5
    379a:	81 50       	subi	r24, 0x01	; 1
    379c:	80 93 d5 00 	sts	0x00D5, r24

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    37a0:	80 91 d5 00 	lds	r24, 0x00D5
    37a4:	88 23       	and	r24, r24
    37a6:	09 f0       	breq	.+2      	; 0x37aa <xTaskResumeAll+0x2e>
    37a8:	7c c0       	rjmp	.+248    	; 0x38a2 <xTaskResumeAll+0x126>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    37aa:	80 91 c7 00 	lds	r24, 0x00C7
    37ae:	88 23       	and	r24, r24
    37b0:	09 f4       	brne	.+2      	; 0x37b4 <xTaskResumeAll+0x38>
    37b2:	77 c0       	rjmp	.+238    	; 0x38a2 <xTaskResumeAll+0x126>
    37b4:	45 c0       	rjmp	.+138    	; 0x3840 <xTaskResumeAll+0xc4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    37b6:	e0 91 15 01 	lds	r30, 0x0115
    37ba:	f0 91 16 01 	lds	r31, 0x0116
    37be:	86 81       	ldd	r24, Z+6	; 0x06
    37c0:	97 81       	ldd	r25, Z+7	; 0x07
    37c2:	9d 83       	std	Y+5, r25	; 0x05
    37c4:	8c 83       	std	Y+4, r24	; 0x04
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    37c6:	8c 81       	ldd	r24, Y+4	; 0x04
    37c8:	9d 81       	ldd	r25, Y+5	; 0x05
    37ca:	0c 96       	adiw	r24, 0x0c	; 12
    37cc:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    37d0:	8c 81       	ldd	r24, Y+4	; 0x04
    37d2:	9d 81       	ldd	r25, Y+5	; 0x05
    37d4:	02 96       	adiw	r24, 0x02	; 2
    37d6:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    37da:	ec 81       	ldd	r30, Y+4	; 0x04
    37dc:	fd 81       	ldd	r31, Y+5	; 0x05
    37de:	96 89       	ldd	r25, Z+22	; 0x16
    37e0:	80 91 ca 00 	lds	r24, 0x00CA
    37e4:	89 17       	cp	r24, r25
    37e6:	28 f4       	brcc	.+10     	; 0x37f2 <xTaskResumeAll+0x76>
    37e8:	ec 81       	ldd	r30, Y+4	; 0x04
    37ea:	fd 81       	ldd	r31, Y+5	; 0x05
    37ec:	86 89       	ldd	r24, Z+22	; 0x16
    37ee:	80 93 ca 00 	sts	0x00CA, r24
    37f2:	ec 81       	ldd	r30, Y+4	; 0x04
    37f4:	fd 81       	ldd	r31, Y+5	; 0x05
    37f6:	86 89       	ldd	r24, Z+22	; 0x16
    37f8:	28 2f       	mov	r18, r24
    37fa:	30 e0       	ldi	r19, 0x00	; 0
    37fc:	c9 01       	movw	r24, r18
    37fe:	88 0f       	add	r24, r24
    3800:	99 1f       	adc	r25, r25
    3802:	88 0f       	add	r24, r24
    3804:	99 1f       	adc	r25, r25
    3806:	88 0f       	add	r24, r24
    3808:	99 1f       	adc	r25, r25
    380a:	82 0f       	add	r24, r18
    380c:	93 1f       	adc	r25, r19
    380e:	ac 01       	movw	r20, r24
    3810:	4a 52       	subi	r20, 0x2A	; 42
    3812:	5f 4f       	sbci	r21, 0xFF	; 255
    3814:	8c 81       	ldd	r24, Y+4	; 0x04
    3816:	9d 81       	ldd	r25, Y+5	; 0x05
    3818:	9c 01       	movw	r18, r24
    381a:	2e 5f       	subi	r18, 0xFE	; 254
    381c:	3f 4f       	sbci	r19, 0xFF	; 255
    381e:	ca 01       	movw	r24, r20
    3820:	b9 01       	movw	r22, r18
    3822:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3826:	ec 81       	ldd	r30, Y+4	; 0x04
    3828:	fd 81       	ldd	r31, Y+5	; 0x05
    382a:	96 89       	ldd	r25, Z+22	; 0x16
    382c:	e0 91 c4 00 	lds	r30, 0x00C4
    3830:	f0 91 c5 00 	lds	r31, 0x00C5
    3834:	86 89       	ldd	r24, Z+22	; 0x16
    3836:	98 17       	cp	r25, r24
    3838:	18 f0       	brcs	.+6      	; 0x3840 <xTaskResumeAll+0xc4>
					{
						xYieldPending = pdTRUE;
    383a:	81 e0       	ldi	r24, 0x01	; 1
    383c:	80 93 ce 00 	sts	0x00CE, r24
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    3840:	80 91 10 01 	lds	r24, 0x0110
    3844:	88 23       	and	r24, r24
    3846:	09 f0       	breq	.+2      	; 0x384a <xTaskResumeAll+0xce>
    3848:	b6 cf       	rjmp	.-148    	; 0x37b6 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    384a:	8c 81       	ldd	r24, Y+4	; 0x04
    384c:	9d 81       	ldd	r25, Y+5	; 0x05
    384e:	00 97       	sbiw	r24, 0x00	; 0
    3850:	11 f0       	breq	.+4      	; 0x3856 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    3852:	0e 94 80 20 	call	0x4100	; 0x4100 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
    3856:	80 91 cc 00 	lds	r24, 0x00CC
    385a:	90 91 cd 00 	lds	r25, 0x00CD
    385e:	9a 83       	std	Y+2, r25	; 0x02
    3860:	89 83       	std	Y+1, r24	; 0x01

					if( xPendedCounts > ( TickType_t ) 0U )
    3862:	89 81       	ldd	r24, Y+1	; 0x01
    3864:	9a 81       	ldd	r25, Y+2	; 0x02
    3866:	00 97       	sbiw	r24, 0x00	; 0
    3868:	a1 f0       	breq	.+40     	; 0x3892 <xTaskResumeAll+0x116>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    386a:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <xTaskIncrementTick>
    386e:	88 23       	and	r24, r24
    3870:	19 f0       	breq	.+6      	; 0x3878 <xTaskResumeAll+0xfc>
							{
								xYieldPending = pdTRUE;
    3872:	81 e0       	ldi	r24, 0x01	; 1
    3874:	80 93 ce 00 	sts	0x00CE, r24
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
    3878:	89 81       	ldd	r24, Y+1	; 0x01
    387a:	9a 81       	ldd	r25, Y+2	; 0x02
    387c:	01 97       	sbiw	r24, 0x01	; 1
    387e:	9a 83       	std	Y+2, r25	; 0x02
    3880:	89 83       	std	Y+1, r24	; 0x01
						} while( xPendedCounts > ( TickType_t ) 0U );
    3882:	89 81       	ldd	r24, Y+1	; 0x01
    3884:	9a 81       	ldd	r25, Y+2	; 0x02
    3886:	00 97       	sbiw	r24, 0x00	; 0
    3888:	81 f7       	brne	.-32     	; 0x386a <xTaskResumeAll+0xee>

						xPendedTicks = 0;
    388a:	10 92 cd 00 	sts	0x00CD, r1
    388e:	10 92 cc 00 	sts	0x00CC, r1
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    3892:	80 91 ce 00 	lds	r24, 0x00CE
    3896:	88 23       	and	r24, r24
    3898:	21 f0       	breq	.+8      	; 0x38a2 <xTaskResumeAll+0x126>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    389a:	81 e0       	ldi	r24, 0x01	; 1
    389c:	8b 83       	std	Y+3, r24	; 0x03
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    389e:	0e 94 95 07 	call	0xf2a	; 0xf2a <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    38a2:	0f 90       	pop	r0
    38a4:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    38a6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    38a8:	0f 90       	pop	r0
    38aa:	0f 90       	pop	r0
    38ac:	0f 90       	pop	r0
    38ae:	0f 90       	pop	r0
    38b0:	0f 90       	pop	r0
    38b2:	cf 91       	pop	r28
    38b4:	df 91       	pop	r29
    38b6:	08 95       	ret

000038b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    38b8:	df 93       	push	r29
    38ba:	cf 93       	push	r28
    38bc:	00 d0       	rcall	.+0      	; 0x38be <xTaskGetTickCount+0x6>
    38be:	cd b7       	in	r28, 0x3d	; 61
    38c0:	de b7       	in	r29, 0x3e	; 62
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
    38c2:	0f b6       	in	r0, 0x3f	; 63
    38c4:	f8 94       	cli
    38c6:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    38c8:	80 91 c8 00 	lds	r24, 0x00C8
    38cc:	90 91 c9 00 	lds	r25, 0x00C9
    38d0:	9a 83       	std	Y+2, r25	; 0x02
    38d2:	89 83       	std	Y+1, r24	; 0x01
	}
	portTICK_TYPE_EXIT_CRITICAL();
    38d4:	0f 90       	pop	r0
    38d6:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    38d8:	89 81       	ldd	r24, Y+1	; 0x01
    38da:	9a 81       	ldd	r25, Y+2	; 0x02
}
    38dc:	0f 90       	pop	r0
    38de:	0f 90       	pop	r0
    38e0:	cf 91       	pop	r28
    38e2:	df 91       	pop	r29
    38e4:	08 95       	ret

000038e6 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    38e6:	df 93       	push	r29
    38e8:	cf 93       	push	r28
    38ea:	00 d0       	rcall	.+0      	; 0x38ec <xTaskGetTickCountFromISR+0x6>
    38ec:	0f 92       	push	r0
    38ee:	cd b7       	in	r28, 0x3d	; 61
    38f0:	de b7       	in	r29, 0x3e	; 62
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
    38f2:	19 82       	std	Y+1, r1	; 0x01
	{
		xReturn = xTickCount;
    38f4:	80 91 c8 00 	lds	r24, 0x00C8
    38f8:	90 91 c9 00 	lds	r25, 0x00C9
    38fc:	9b 83       	std	Y+3, r25	; 0x03
    38fe:	8a 83       	std	Y+2, r24	; 0x02
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    3900:	8a 81       	ldd	r24, Y+2	; 0x02
    3902:	9b 81       	ldd	r25, Y+3	; 0x03
}
    3904:	0f 90       	pop	r0
    3906:	0f 90       	pop	r0
    3908:	0f 90       	pop	r0
    390a:	cf 91       	pop	r28
    390c:	df 91       	pop	r29
    390e:	08 95       	ret

00003910 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
    3910:	df 93       	push	r29
    3912:	cf 93       	push	r28
    3914:	cd b7       	in	r28, 0x3d	; 61
    3916:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    3918:	80 91 c7 00 	lds	r24, 0x00C7
}
    391c:	cf 91       	pop	r28
    391e:	df 91       	pop	r29
    3920:	08 95       	ret

00003922 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    3922:	df 93       	push	r29
    3924:	cf 93       	push	r28
    3926:	00 d0       	rcall	.+0      	; 0x3928 <pcTaskGetName+0x6>
    3928:	00 d0       	rcall	.+0      	; 0x392a <pcTaskGetName+0x8>
    392a:	00 d0       	rcall	.+0      	; 0x392c <pcTaskGetName+0xa>
    392c:	cd b7       	in	r28, 0x3d	; 61
    392e:	de b7       	in	r29, 0x3e	; 62
    3930:	9c 83       	std	Y+4, r25	; 0x04
    3932:	8b 83       	std	Y+3, r24	; 0x03
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    3934:	8b 81       	ldd	r24, Y+3	; 0x03
    3936:	9c 81       	ldd	r25, Y+4	; 0x04
    3938:	00 97       	sbiw	r24, 0x00	; 0
    393a:	39 f4       	brne	.+14     	; 0x394a <pcTaskGetName+0x28>
    393c:	80 91 c4 00 	lds	r24, 0x00C4
    3940:	90 91 c5 00 	lds	r25, 0x00C5
    3944:	9e 83       	std	Y+6, r25	; 0x06
    3946:	8d 83       	std	Y+5, r24	; 0x05
    3948:	04 c0       	rjmp	.+8      	; 0x3952 <pcTaskGetName+0x30>
    394a:	8b 81       	ldd	r24, Y+3	; 0x03
    394c:	9c 81       	ldd	r25, Y+4	; 0x04
    394e:	9e 83       	std	Y+6, r25	; 0x06
    3950:	8d 83       	std	Y+5, r24	; 0x05
    3952:	8d 81       	ldd	r24, Y+5	; 0x05
    3954:	9e 81       	ldd	r25, Y+6	; 0x06
    3956:	9a 83       	std	Y+2, r25	; 0x02
    3958:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
    395a:	89 81       	ldd	r24, Y+1	; 0x01
    395c:	9a 81       	ldd	r25, Y+2	; 0x02
    395e:	49 96       	adiw	r24, 0x19	; 25
}
    3960:	26 96       	adiw	r28, 0x06	; 6
    3962:	0f b6       	in	r0, 0x3f	; 63
    3964:	f8 94       	cli
    3966:	de bf       	out	0x3e, r29	; 62
    3968:	0f be       	out	0x3f, r0	; 63
    396a:	cd bf       	out	0x3d, r28	; 61
    396c:	cf 91       	pop	r28
    396e:	df 91       	pop	r29
    3970:	08 95       	ret

00003972 <xTaskCatchUpTicks>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
{
    3972:	df 93       	push	r29
    3974:	cf 93       	push	r28
    3976:	00 d0       	rcall	.+0      	; 0x3978 <xTaskCatchUpTicks+0x6>
    3978:	0f 92       	push	r0
    397a:	cd b7       	in	r28, 0x3d	; 61
    397c:	de b7       	in	r29, 0x3e	; 62
    397e:	9b 83       	std	Y+3, r25	; 0x03
    3980:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xYieldRequired = pdFALSE;
    3982:	19 82       	std	Y+1, r1	; 0x01
	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
	configASSERT( uxSchedulerSuspended == 0 );

	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
	vTaskSuspendAll();
    3984:	0e 94 b2 1b 	call	0x3764	; 0x3764 <vTaskSuspendAll>
	xPendedTicks += xTicksToCatchUp;
    3988:	20 91 cc 00 	lds	r18, 0x00CC
    398c:	30 91 cd 00 	lds	r19, 0x00CD
    3990:	8a 81       	ldd	r24, Y+2	; 0x02
    3992:	9b 81       	ldd	r25, Y+3	; 0x03
    3994:	82 0f       	add	r24, r18
    3996:	93 1f       	adc	r25, r19
    3998:	90 93 cd 00 	sts	0x00CD, r25
    399c:	80 93 cc 00 	sts	0x00CC, r24
	xYieldRequired = xTaskResumeAll();
    39a0:	0e 94 be 1b 	call	0x377c	; 0x377c <xTaskResumeAll>
    39a4:	89 83       	std	Y+1, r24	; 0x01

	return xYieldRequired;
    39a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    39a8:	0f 90       	pop	r0
    39aa:	0f 90       	pop	r0
    39ac:	0f 90       	pop	r0
    39ae:	cf 91       	pop	r28
    39b0:	df 91       	pop	r29
    39b2:	08 95       	ret

000039b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    39b4:	df 93       	push	r29
    39b6:	cf 93       	push	r28
    39b8:	cd b7       	in	r28, 0x3d	; 61
    39ba:	de b7       	in	r29, 0x3e	; 62
    39bc:	29 97       	sbiw	r28, 0x09	; 9
    39be:	0f b6       	in	r0, 0x3f	; 63
    39c0:	f8 94       	cli
    39c2:	de bf       	out	0x3e, r29	; 62
    39c4:	0f be       	out	0x3f, r0	; 63
    39c6:	cd bf       	out	0x3d, r28	; 61
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    39c8:	1d 82       	std	Y+5, r1	; 0x05

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    39ca:	80 91 d5 00 	lds	r24, 0x00D5
    39ce:	88 23       	and	r24, r24
    39d0:	09 f0       	breq	.+2      	; 0x39d4 <xTaskIncrementTick+0x20>
    39d2:	c6 c0       	rjmp	.+396    	; 0x3b60 <xTaskIncrementTick+0x1ac>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    39d4:	80 91 c8 00 	lds	r24, 0x00C8
    39d8:	90 91 c9 00 	lds	r25, 0x00C9
    39dc:	01 96       	adiw	r24, 0x01	; 1
    39de:	9c 83       	std	Y+4, r25	; 0x04
    39e0:	8b 83       	std	Y+3, r24	; 0x03

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    39e2:	8b 81       	ldd	r24, Y+3	; 0x03
    39e4:	9c 81       	ldd	r25, Y+4	; 0x04
    39e6:	90 93 c9 00 	sts	0x00C9, r25
    39ea:	80 93 c8 00 	sts	0x00C8, r24

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    39ee:	8b 81       	ldd	r24, Y+3	; 0x03
    39f0:	9c 81       	ldd	r25, Y+4	; 0x04
    39f2:	00 97       	sbiw	r24, 0x00	; 0
    39f4:	d9 f4       	brne	.+54     	; 0x3a2c <xTaskIncrementTick+0x78>
		{
			taskSWITCH_DELAYED_LISTS();
    39f6:	80 91 0c 01 	lds	r24, 0x010C
    39fa:	90 91 0d 01 	lds	r25, 0x010D
    39fe:	9a 83       	std	Y+2, r25	; 0x02
    3a00:	89 83       	std	Y+1, r24	; 0x01
    3a02:	80 91 0e 01 	lds	r24, 0x010E
    3a06:	90 91 0f 01 	lds	r25, 0x010F
    3a0a:	90 93 0d 01 	sts	0x010D, r25
    3a0e:	80 93 0c 01 	sts	0x010C, r24
    3a12:	89 81       	ldd	r24, Y+1	; 0x01
    3a14:	9a 81       	ldd	r25, Y+2	; 0x02
    3a16:	90 93 0f 01 	sts	0x010F, r25
    3a1a:	80 93 0e 01 	sts	0x010E, r24
    3a1e:	80 91 cf 00 	lds	r24, 0x00CF
    3a22:	8f 5f       	subi	r24, 0xFF	; 255
    3a24:	80 93 cf 00 	sts	0x00CF, r24
    3a28:	0e 94 80 20 	call	0x4100	; 0x4100 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    3a2c:	20 91 d1 00 	lds	r18, 0x00D1
    3a30:	30 91 d2 00 	lds	r19, 0x00D2
    3a34:	8b 81       	ldd	r24, Y+3	; 0x03
    3a36:	9c 81       	ldd	r25, Y+4	; 0x04
    3a38:	82 17       	cp	r24, r18
    3a3a:	93 07       	cpc	r25, r19
    3a3c:	08 f4       	brcc	.+2      	; 0x3a40 <xTaskIncrementTick+0x8c>
    3a3e:	71 c0       	rjmp	.+226    	; 0x3b22 <xTaskIncrementTick+0x16e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3a40:	e0 91 0c 01 	lds	r30, 0x010C
    3a44:	f0 91 0d 01 	lds	r31, 0x010D
    3a48:	80 81       	ld	r24, Z
    3a4a:	88 23       	and	r24, r24
    3a4c:	39 f4       	brne	.+14     	; 0x3a5c <xTaskIncrementTick+0xa8>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3a4e:	8f ef       	ldi	r24, 0xFF	; 255
    3a50:	9f ef       	ldi	r25, 0xFF	; 255
    3a52:	90 93 d2 00 	sts	0x00D2, r25
    3a56:	80 93 d1 00 	sts	0x00D1, r24
    3a5a:	63 c0       	rjmp	.+198    	; 0x3b22 <xTaskIncrementTick+0x16e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3a5c:	e0 91 0c 01 	lds	r30, 0x010C
    3a60:	f0 91 0d 01 	lds	r31, 0x010D
    3a64:	05 80       	ldd	r0, Z+5	; 0x05
    3a66:	f6 81       	ldd	r31, Z+6	; 0x06
    3a68:	e0 2d       	mov	r30, r0
    3a6a:	86 81       	ldd	r24, Z+6	; 0x06
    3a6c:	97 81       	ldd	r25, Z+7	; 0x07
    3a6e:	99 87       	std	Y+9, r25	; 0x09
    3a70:	88 87       	std	Y+8, r24	; 0x08
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    3a72:	e8 85       	ldd	r30, Y+8	; 0x08
    3a74:	f9 85       	ldd	r31, Y+9	; 0x09
    3a76:	82 81       	ldd	r24, Z+2	; 0x02
    3a78:	93 81       	ldd	r25, Z+3	; 0x03
    3a7a:	9f 83       	std	Y+7, r25	; 0x07
    3a7c:	8e 83       	std	Y+6, r24	; 0x06

					if( xConstTickCount < xItemValue )
    3a7e:	2b 81       	ldd	r18, Y+3	; 0x03
    3a80:	3c 81       	ldd	r19, Y+4	; 0x04
    3a82:	8e 81       	ldd	r24, Y+6	; 0x06
    3a84:	9f 81       	ldd	r25, Y+7	; 0x07
    3a86:	28 17       	cp	r18, r24
    3a88:	39 07       	cpc	r19, r25
    3a8a:	38 f4       	brcc	.+14     	; 0x3a9a <xTaskIncrementTick+0xe6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    3a8c:	8e 81       	ldd	r24, Y+6	; 0x06
    3a8e:	9f 81       	ldd	r25, Y+7	; 0x07
    3a90:	90 93 d2 00 	sts	0x00D2, r25
    3a94:	80 93 d1 00 	sts	0x00D1, r24
    3a98:	44 c0       	rjmp	.+136    	; 0x3b22 <xTaskIncrementTick+0x16e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    3a9a:	88 85       	ldd	r24, Y+8	; 0x08
    3a9c:	99 85       	ldd	r25, Y+9	; 0x09
    3a9e:	02 96       	adiw	r24, 0x02	; 2
    3aa0:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    3aa4:	e8 85       	ldd	r30, Y+8	; 0x08
    3aa6:	f9 85       	ldd	r31, Y+9	; 0x09
    3aa8:	84 89       	ldd	r24, Z+20	; 0x14
    3aaa:	95 89       	ldd	r25, Z+21	; 0x15
    3aac:	00 97       	sbiw	r24, 0x00	; 0
    3aae:	29 f0       	breq	.+10     	; 0x3aba <xTaskIncrementTick+0x106>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3ab0:	88 85       	ldd	r24, Y+8	; 0x08
    3ab2:	99 85       	ldd	r25, Y+9	; 0x09
    3ab4:	0c 96       	adiw	r24, 0x0c	; 12
    3ab6:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    3aba:	e8 85       	ldd	r30, Y+8	; 0x08
    3abc:	f9 85       	ldd	r31, Y+9	; 0x09
    3abe:	96 89       	ldd	r25, Z+22	; 0x16
    3ac0:	80 91 ca 00 	lds	r24, 0x00CA
    3ac4:	89 17       	cp	r24, r25
    3ac6:	28 f4       	brcc	.+10     	; 0x3ad2 <xTaskIncrementTick+0x11e>
    3ac8:	e8 85       	ldd	r30, Y+8	; 0x08
    3aca:	f9 85       	ldd	r31, Y+9	; 0x09
    3acc:	86 89       	ldd	r24, Z+22	; 0x16
    3ace:	80 93 ca 00 	sts	0x00CA, r24
    3ad2:	e8 85       	ldd	r30, Y+8	; 0x08
    3ad4:	f9 85       	ldd	r31, Y+9	; 0x09
    3ad6:	86 89       	ldd	r24, Z+22	; 0x16
    3ad8:	28 2f       	mov	r18, r24
    3ada:	30 e0       	ldi	r19, 0x00	; 0
    3adc:	c9 01       	movw	r24, r18
    3ade:	88 0f       	add	r24, r24
    3ae0:	99 1f       	adc	r25, r25
    3ae2:	88 0f       	add	r24, r24
    3ae4:	99 1f       	adc	r25, r25
    3ae6:	88 0f       	add	r24, r24
    3ae8:	99 1f       	adc	r25, r25
    3aea:	82 0f       	add	r24, r18
    3aec:	93 1f       	adc	r25, r19
    3aee:	ac 01       	movw	r20, r24
    3af0:	4a 52       	subi	r20, 0x2A	; 42
    3af2:	5f 4f       	sbci	r21, 0xFF	; 255
    3af4:	88 85       	ldd	r24, Y+8	; 0x08
    3af6:	99 85       	ldd	r25, Y+9	; 0x09
    3af8:	9c 01       	movw	r18, r24
    3afa:	2e 5f       	subi	r18, 0xFE	; 254
    3afc:	3f 4f       	sbci	r19, 0xFF	; 255
    3afe:	ca 01       	movw	r24, r20
    3b00:	b9 01       	movw	r22, r18
    3b02:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3b06:	e8 85       	ldd	r30, Y+8	; 0x08
    3b08:	f9 85       	ldd	r31, Y+9	; 0x09
    3b0a:	96 89       	ldd	r25, Z+22	; 0x16
    3b0c:	e0 91 c4 00 	lds	r30, 0x00C4
    3b10:	f0 91 c5 00 	lds	r31, 0x00C5
    3b14:	86 89       	ldd	r24, Z+22	; 0x16
    3b16:	98 17       	cp	r25, r24
    3b18:	08 f4       	brcc	.+2      	; 0x3b1c <xTaskIncrementTick+0x168>
    3b1a:	92 cf       	rjmp	.-220    	; 0x3a40 <xTaskIncrementTick+0x8c>
						{
							xSwitchRequired = pdTRUE;
    3b1c:	81 e0       	ldi	r24, 0x01	; 1
    3b1e:	8d 83       	std	Y+5, r24	; 0x05
    3b20:	8f cf       	rjmp	.-226    	; 0x3a40 <xTaskIncrementTick+0x8c>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    3b22:	e0 91 c4 00 	lds	r30, 0x00C4
    3b26:	f0 91 c5 00 	lds	r31, 0x00C5
    3b2a:	86 89       	ldd	r24, Z+22	; 0x16
    3b2c:	28 2f       	mov	r18, r24
    3b2e:	30 e0       	ldi	r19, 0x00	; 0
    3b30:	c9 01       	movw	r24, r18
    3b32:	88 0f       	add	r24, r24
    3b34:	99 1f       	adc	r25, r25
    3b36:	88 0f       	add	r24, r24
    3b38:	99 1f       	adc	r25, r25
    3b3a:	88 0f       	add	r24, r24
    3b3c:	99 1f       	adc	r25, r25
    3b3e:	82 0f       	add	r24, r18
    3b40:	93 1f       	adc	r25, r19
    3b42:	fc 01       	movw	r30, r24
    3b44:	ea 52       	subi	r30, 0x2A	; 42
    3b46:	ff 4f       	sbci	r31, 0xFF	; 255
    3b48:	80 81       	ld	r24, Z
    3b4a:	82 30       	cpi	r24, 0x02	; 2
    3b4c:	10 f0       	brcs	.+4      	; 0x3b52 <xTaskIncrementTick+0x19e>
			{
				xSwitchRequired = pdTRUE;
    3b4e:	81 e0       	ldi	r24, 0x01	; 1
    3b50:	8d 83       	std	Y+5, r24	; 0x05
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
    3b52:	80 91 ce 00 	lds	r24, 0x00CE
    3b56:	88 23       	and	r24, r24
    3b58:	61 f0       	breq	.+24     	; 0x3b72 <xTaskIncrementTick+0x1be>
			{
				xSwitchRequired = pdTRUE;
    3b5a:	81 e0       	ldi	r24, 0x01	; 1
    3b5c:	8d 83       	std	Y+5, r24	; 0x05
    3b5e:	09 c0       	rjmp	.+18     	; 0x3b72 <xTaskIncrementTick+0x1be>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
    3b60:	80 91 cc 00 	lds	r24, 0x00CC
    3b64:	90 91 cd 00 	lds	r25, 0x00CD
    3b68:	01 96       	adiw	r24, 0x01	; 1
    3b6a:	90 93 cd 00 	sts	0x00CD, r25
    3b6e:	80 93 cc 00 	sts	0x00CC, r24
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
    3b72:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3b74:	29 96       	adiw	r28, 0x09	; 9
    3b76:	0f b6       	in	r0, 0x3f	; 63
    3b78:	f8 94       	cli
    3b7a:	de bf       	out	0x3e, r29	; 62
    3b7c:	0f be       	out	0x3f, r0	; 63
    3b7e:	cd bf       	out	0x3d, r28	; 61
    3b80:	cf 91       	pop	r28
    3b82:	df 91       	pop	r29
    3b84:	08 95       	ret

00003b86 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    3b86:	df 93       	push	r29
    3b88:	cf 93       	push	r28
    3b8a:	00 d0       	rcall	.+0      	; 0x3b8c <vTaskSwitchContext+0x6>
    3b8c:	0f 92       	push	r0
    3b8e:	cd b7       	in	r28, 0x3d	; 61
    3b90:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    3b92:	80 91 d5 00 	lds	r24, 0x00D5
    3b96:	88 23       	and	r24, r24
    3b98:	21 f0       	breq	.+8      	; 0x3ba2 <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    3b9a:	81 e0       	ldi	r24, 0x01	; 1
    3b9c:	80 93 ce 00 	sts	0x00CE, r24
    3ba0:	59 c0       	rjmp	.+178    	; 0x3c54 <vTaskSwitchContext+0xce>
	}
	else
	{
		xYieldPending = pdFALSE;
    3ba2:	10 92 ce 00 	sts	0x00CE, r1
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3ba6:	80 91 ca 00 	lds	r24, 0x00CA
    3baa:	8b 83       	std	Y+3, r24	; 0x03
    3bac:	03 c0       	rjmp	.+6      	; 0x3bb4 <vTaskSwitchContext+0x2e>
    3bae:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb0:	81 50       	subi	r24, 0x01	; 1
    3bb2:	8b 83       	std	Y+3, r24	; 0x03
    3bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb6:	28 2f       	mov	r18, r24
    3bb8:	30 e0       	ldi	r19, 0x00	; 0
    3bba:	c9 01       	movw	r24, r18
    3bbc:	88 0f       	add	r24, r24
    3bbe:	99 1f       	adc	r25, r25
    3bc0:	88 0f       	add	r24, r24
    3bc2:	99 1f       	adc	r25, r25
    3bc4:	88 0f       	add	r24, r24
    3bc6:	99 1f       	adc	r25, r25
    3bc8:	82 0f       	add	r24, r18
    3bca:	93 1f       	adc	r25, r19
    3bcc:	fc 01       	movw	r30, r24
    3bce:	ea 52       	subi	r30, 0x2A	; 42
    3bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd2:	80 81       	ld	r24, Z
    3bd4:	88 23       	and	r24, r24
    3bd6:	59 f3       	breq	.-42     	; 0x3bae <vTaskSwitchContext+0x28>
    3bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    3bda:	28 2f       	mov	r18, r24
    3bdc:	30 e0       	ldi	r19, 0x00	; 0
    3bde:	c9 01       	movw	r24, r18
    3be0:	88 0f       	add	r24, r24
    3be2:	99 1f       	adc	r25, r25
    3be4:	88 0f       	add	r24, r24
    3be6:	99 1f       	adc	r25, r25
    3be8:	88 0f       	add	r24, r24
    3bea:	99 1f       	adc	r25, r25
    3bec:	82 0f       	add	r24, r18
    3bee:	93 1f       	adc	r25, r19
    3bf0:	8a 52       	subi	r24, 0x2A	; 42
    3bf2:	9f 4f       	sbci	r25, 0xFF	; 255
    3bf4:	9a 83       	std	Y+2, r25	; 0x02
    3bf6:	89 83       	std	Y+1, r24	; 0x01
    3bf8:	e9 81       	ldd	r30, Y+1	; 0x01
    3bfa:	fa 81       	ldd	r31, Y+2	; 0x02
    3bfc:	01 80       	ldd	r0, Z+1	; 0x01
    3bfe:	f2 81       	ldd	r31, Z+2	; 0x02
    3c00:	e0 2d       	mov	r30, r0
    3c02:	82 81       	ldd	r24, Z+2	; 0x02
    3c04:	93 81       	ldd	r25, Z+3	; 0x03
    3c06:	e9 81       	ldd	r30, Y+1	; 0x01
    3c08:	fa 81       	ldd	r31, Y+2	; 0x02
    3c0a:	92 83       	std	Z+2, r25	; 0x02
    3c0c:	81 83       	std	Z+1, r24	; 0x01
    3c0e:	e9 81       	ldd	r30, Y+1	; 0x01
    3c10:	fa 81       	ldd	r31, Y+2	; 0x02
    3c12:	21 81       	ldd	r18, Z+1	; 0x01
    3c14:	32 81       	ldd	r19, Z+2	; 0x02
    3c16:	89 81       	ldd	r24, Y+1	; 0x01
    3c18:	9a 81       	ldd	r25, Y+2	; 0x02
    3c1a:	03 96       	adiw	r24, 0x03	; 3
    3c1c:	28 17       	cp	r18, r24
    3c1e:	39 07       	cpc	r19, r25
    3c20:	59 f4       	brne	.+22     	; 0x3c38 <vTaskSwitchContext+0xb2>
    3c22:	e9 81       	ldd	r30, Y+1	; 0x01
    3c24:	fa 81       	ldd	r31, Y+2	; 0x02
    3c26:	01 80       	ldd	r0, Z+1	; 0x01
    3c28:	f2 81       	ldd	r31, Z+2	; 0x02
    3c2a:	e0 2d       	mov	r30, r0
    3c2c:	82 81       	ldd	r24, Z+2	; 0x02
    3c2e:	93 81       	ldd	r25, Z+3	; 0x03
    3c30:	e9 81       	ldd	r30, Y+1	; 0x01
    3c32:	fa 81       	ldd	r31, Y+2	; 0x02
    3c34:	92 83       	std	Z+2, r25	; 0x02
    3c36:	81 83       	std	Z+1, r24	; 0x01
    3c38:	e9 81       	ldd	r30, Y+1	; 0x01
    3c3a:	fa 81       	ldd	r31, Y+2	; 0x02
    3c3c:	01 80       	ldd	r0, Z+1	; 0x01
    3c3e:	f2 81       	ldd	r31, Z+2	; 0x02
    3c40:	e0 2d       	mov	r30, r0
    3c42:	86 81       	ldd	r24, Z+6	; 0x06
    3c44:	97 81       	ldd	r25, Z+7	; 0x07
    3c46:	90 93 c5 00 	sts	0x00C5, r25
    3c4a:	80 93 c4 00 	sts	0x00C4, r24
    3c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c50:	80 93 ca 00 	sts	0x00CA, r24
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    3c54:	0f 90       	pop	r0
    3c56:	0f 90       	pop	r0
    3c58:	0f 90       	pop	r0
    3c5a:	cf 91       	pop	r28
    3c5c:	df 91       	pop	r29
    3c5e:	08 95       	ret

00003c60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    3c60:	df 93       	push	r29
    3c62:	cf 93       	push	r28
    3c64:	00 d0       	rcall	.+0      	; 0x3c66 <vTaskPlaceOnEventList+0x6>
    3c66:	00 d0       	rcall	.+0      	; 0x3c68 <vTaskPlaceOnEventList+0x8>
    3c68:	cd b7       	in	r28, 0x3d	; 61
    3c6a:	de b7       	in	r29, 0x3e	; 62
    3c6c:	9a 83       	std	Y+2, r25	; 0x02
    3c6e:	89 83       	std	Y+1, r24	; 0x01
    3c70:	7c 83       	std	Y+4, r23	; 0x04
    3c72:	6b 83       	std	Y+3, r22	; 0x03

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3c74:	80 91 c4 00 	lds	r24, 0x00C4
    3c78:	90 91 c5 00 	lds	r25, 0x00C5
    3c7c:	9c 01       	movw	r18, r24
    3c7e:	24 5f       	subi	r18, 0xF4	; 244
    3c80:	3f 4f       	sbci	r19, 0xFF	; 255
    3c82:	89 81       	ldd	r24, Y+1	; 0x01
    3c84:	9a 81       	ldd	r25, Y+2	; 0x02
    3c86:	b9 01       	movw	r22, r18
    3c88:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    3c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c90:	61 e0       	ldi	r22, 0x01	; 1
    3c92:	0e 94 d5 24 	call	0x49aa	; 0x49aa <prvAddCurrentTaskToDelayedList>
}
    3c96:	0f 90       	pop	r0
    3c98:	0f 90       	pop	r0
    3c9a:	0f 90       	pop	r0
    3c9c:	0f 90       	pop	r0
    3c9e:	cf 91       	pop	r28
    3ca0:	df 91       	pop	r29
    3ca2:	08 95       	ret

00003ca4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    3ca4:	df 93       	push	r29
    3ca6:	cf 93       	push	r28
    3ca8:	00 d0       	rcall	.+0      	; 0x3caa <vTaskPlaceOnUnorderedEventList+0x6>
    3caa:	00 d0       	rcall	.+0      	; 0x3cac <vTaskPlaceOnUnorderedEventList+0x8>
    3cac:	00 d0       	rcall	.+0      	; 0x3cae <vTaskPlaceOnUnorderedEventList+0xa>
    3cae:	cd b7       	in	r28, 0x3d	; 61
    3cb0:	de b7       	in	r29, 0x3e	; 62
    3cb2:	9a 83       	std	Y+2, r25	; 0x02
    3cb4:	89 83       	std	Y+1, r24	; 0x01
    3cb6:	7c 83       	std	Y+4, r23	; 0x04
    3cb8:	6b 83       	std	Y+3, r22	; 0x03
    3cba:	5e 83       	std	Y+6, r21	; 0x06
    3cbc:	4d 83       	std	Y+5, r20	; 0x05
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    3cbe:	e0 91 c4 00 	lds	r30, 0x00C4
    3cc2:	f0 91 c5 00 	lds	r31, 0x00C5
    3cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    3cca:	90 68       	ori	r25, 0x80	; 128
    3ccc:	95 87       	std	Z+13, r25	; 0x0d
    3cce:	84 87       	std	Z+12, r24	; 0x0c
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3cd0:	80 91 c4 00 	lds	r24, 0x00C4
    3cd4:	90 91 c5 00 	lds	r25, 0x00C5
    3cd8:	9c 01       	movw	r18, r24
    3cda:	24 5f       	subi	r18, 0xF4	; 244
    3cdc:	3f 4f       	sbci	r19, 0xFF	; 255
    3cde:	89 81       	ldd	r24, Y+1	; 0x01
    3ce0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ce2:	b9 01       	movw	r22, r18
    3ce4:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    3ce8:	8d 81       	ldd	r24, Y+5	; 0x05
    3cea:	9e 81       	ldd	r25, Y+6	; 0x06
    3cec:	61 e0       	ldi	r22, 0x01	; 1
    3cee:	0e 94 d5 24 	call	0x49aa	; 0x49aa <prvAddCurrentTaskToDelayedList>
}
    3cf2:	26 96       	adiw	r28, 0x06	; 6
    3cf4:	0f b6       	in	r0, 0x3f	; 63
    3cf6:	f8 94       	cli
    3cf8:	de bf       	out	0x3e, r29	; 62
    3cfa:	0f be       	out	0x3f, r0	; 63
    3cfc:	cd bf       	out	0x3d, r28	; 61
    3cfe:	cf 91       	pop	r28
    3d00:	df 91       	pop	r29
    3d02:	08 95       	ret

00003d04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    3d04:	df 93       	push	r29
    3d06:	cf 93       	push	r28
    3d08:	00 d0       	rcall	.+0      	; 0x3d0a <xTaskRemoveFromEventList+0x6>
    3d0a:	00 d0       	rcall	.+0      	; 0x3d0c <xTaskRemoveFromEventList+0x8>
    3d0c:	0f 92       	push	r0
    3d0e:	cd b7       	in	r28, 0x3d	; 61
    3d10:	de b7       	in	r29, 0x3e	; 62
    3d12:	9d 83       	std	Y+5, r25	; 0x05
    3d14:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3d16:	ec 81       	ldd	r30, Y+4	; 0x04
    3d18:	fd 81       	ldd	r31, Y+5	; 0x05
    3d1a:	05 80       	ldd	r0, Z+5	; 0x05
    3d1c:	f6 81       	ldd	r31, Z+6	; 0x06
    3d1e:	e0 2d       	mov	r30, r0
    3d20:	86 81       	ldd	r24, Z+6	; 0x06
    3d22:	97 81       	ldd	r25, Z+7	; 0x07
    3d24:	9b 83       	std	Y+3, r25	; 0x03
    3d26:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3d28:	8a 81       	ldd	r24, Y+2	; 0x02
    3d2a:	9b 81       	ldd	r25, Y+3	; 0x03
    3d2c:	0c 96       	adiw	r24, 0x0c	; 12
    3d2e:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3d32:	80 91 d5 00 	lds	r24, 0x00D5
    3d36:	88 23       	and	r24, r24
    3d38:	61 f5       	brne	.+88     	; 0x3d92 <xTaskRemoveFromEventList+0x8e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    3d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d3c:	9b 81       	ldd	r25, Y+3	; 0x03
    3d3e:	02 96       	adiw	r24, 0x02	; 2
    3d40:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    3d44:	ea 81       	ldd	r30, Y+2	; 0x02
    3d46:	fb 81       	ldd	r31, Y+3	; 0x03
    3d48:	96 89       	ldd	r25, Z+22	; 0x16
    3d4a:	80 91 ca 00 	lds	r24, 0x00CA
    3d4e:	89 17       	cp	r24, r25
    3d50:	28 f4       	brcc	.+10     	; 0x3d5c <xTaskRemoveFromEventList+0x58>
    3d52:	ea 81       	ldd	r30, Y+2	; 0x02
    3d54:	fb 81       	ldd	r31, Y+3	; 0x03
    3d56:	86 89       	ldd	r24, Z+22	; 0x16
    3d58:	80 93 ca 00 	sts	0x00CA, r24
    3d5c:	ea 81       	ldd	r30, Y+2	; 0x02
    3d5e:	fb 81       	ldd	r31, Y+3	; 0x03
    3d60:	86 89       	ldd	r24, Z+22	; 0x16
    3d62:	28 2f       	mov	r18, r24
    3d64:	30 e0       	ldi	r19, 0x00	; 0
    3d66:	c9 01       	movw	r24, r18
    3d68:	88 0f       	add	r24, r24
    3d6a:	99 1f       	adc	r25, r25
    3d6c:	88 0f       	add	r24, r24
    3d6e:	99 1f       	adc	r25, r25
    3d70:	88 0f       	add	r24, r24
    3d72:	99 1f       	adc	r25, r25
    3d74:	82 0f       	add	r24, r18
    3d76:	93 1f       	adc	r25, r19
    3d78:	ac 01       	movw	r20, r24
    3d7a:	4a 52       	subi	r20, 0x2A	; 42
    3d7c:	5f 4f       	sbci	r21, 0xFF	; 255
    3d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d80:	9b 81       	ldd	r25, Y+3	; 0x03
    3d82:	9c 01       	movw	r18, r24
    3d84:	2e 5f       	subi	r18, 0xFE	; 254
    3d86:	3f 4f       	sbci	r19, 0xFF	; 255
    3d88:	ca 01       	movw	r24, r20
    3d8a:	b9 01       	movw	r22, r18
    3d8c:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <vListInsertEnd>
    3d90:	0a c0       	rjmp	.+20     	; 0x3da6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3d92:	8a 81       	ldd	r24, Y+2	; 0x02
    3d94:	9b 81       	ldd	r25, Y+3	; 0x03
    3d96:	9c 01       	movw	r18, r24
    3d98:	24 5f       	subi	r18, 0xF4	; 244
    3d9a:	3f 4f       	sbci	r19, 0xFF	; 255
    3d9c:	80 e1       	ldi	r24, 0x10	; 16
    3d9e:	91 e0       	ldi	r25, 0x01	; 1
    3da0:	b9 01       	movw	r22, r18
    3da2:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3da6:	ea 81       	ldd	r30, Y+2	; 0x02
    3da8:	fb 81       	ldd	r31, Y+3	; 0x03
    3daa:	96 89       	ldd	r25, Z+22	; 0x16
    3dac:	e0 91 c4 00 	lds	r30, 0x00C4
    3db0:	f0 91 c5 00 	lds	r31, 0x00C5
    3db4:	86 89       	ldd	r24, Z+22	; 0x16
    3db6:	89 17       	cp	r24, r25
    3db8:	30 f4       	brcc	.+12     	; 0x3dc6 <xTaskRemoveFromEventList+0xc2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    3dba:	81 e0       	ldi	r24, 0x01	; 1
    3dbc:	89 83       	std	Y+1, r24	; 0x01

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    3dbe:	81 e0       	ldi	r24, 0x01	; 1
    3dc0:	80 93 ce 00 	sts	0x00CE, r24
    3dc4:	01 c0       	rjmp	.+2      	; 0x3dc8 <xTaskRemoveFromEventList+0xc4>
	}
	else
	{
		xReturn = pdFALSE;
    3dc6:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    3dc8:	89 81       	ldd	r24, Y+1	; 0x01
}
    3dca:	0f 90       	pop	r0
    3dcc:	0f 90       	pop	r0
    3dce:	0f 90       	pop	r0
    3dd0:	0f 90       	pop	r0
    3dd2:	0f 90       	pop	r0
    3dd4:	cf 91       	pop	r28
    3dd6:	df 91       	pop	r29
    3dd8:	08 95       	ret

00003dda <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    3dda:	df 93       	push	r29
    3ddc:	cf 93       	push	r28
    3dde:	00 d0       	rcall	.+0      	; 0x3de0 <vTaskRemoveFromUnorderedEventList+0x6>
    3de0:	00 d0       	rcall	.+0      	; 0x3de2 <vTaskRemoveFromUnorderedEventList+0x8>
    3de2:	00 d0       	rcall	.+0      	; 0x3de4 <vTaskRemoveFromUnorderedEventList+0xa>
    3de4:	cd b7       	in	r28, 0x3d	; 61
    3de6:	de b7       	in	r29, 0x3e	; 62
    3de8:	9c 83       	std	Y+4, r25	; 0x04
    3dea:	8b 83       	std	Y+3, r24	; 0x03
    3dec:	7e 83       	std	Y+6, r23	; 0x06
    3dee:	6d 83       	std	Y+5, r22	; 0x05
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    3df0:	8d 81       	ldd	r24, Y+5	; 0x05
    3df2:	9e 81       	ldd	r25, Y+6	; 0x06
    3df4:	90 68       	ori	r25, 0x80	; 128
    3df6:	eb 81       	ldd	r30, Y+3	; 0x03
    3df8:	fc 81       	ldd	r31, Y+4	; 0x04
    3dfa:	91 83       	std	Z+1, r25	; 0x01
    3dfc:	80 83       	st	Z, r24

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3dfe:	eb 81       	ldd	r30, Y+3	; 0x03
    3e00:	fc 81       	ldd	r31, Y+4	; 0x04
    3e02:	86 81       	ldd	r24, Z+6	; 0x06
    3e04:	97 81       	ldd	r25, Z+7	; 0x07
    3e06:	9a 83       	std	Y+2, r25	; 0x02
    3e08:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    3e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e0c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e0e:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    3e12:	89 81       	ldd	r24, Y+1	; 0x01
    3e14:	9a 81       	ldd	r25, Y+2	; 0x02
    3e16:	02 96       	adiw	r24, 0x02	; 2
    3e18:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    3e1c:	e9 81       	ldd	r30, Y+1	; 0x01
    3e1e:	fa 81       	ldd	r31, Y+2	; 0x02
    3e20:	96 89       	ldd	r25, Z+22	; 0x16
    3e22:	80 91 ca 00 	lds	r24, 0x00CA
    3e26:	89 17       	cp	r24, r25
    3e28:	28 f4       	brcc	.+10     	; 0x3e34 <vTaskRemoveFromUnorderedEventList+0x5a>
    3e2a:	e9 81       	ldd	r30, Y+1	; 0x01
    3e2c:	fa 81       	ldd	r31, Y+2	; 0x02
    3e2e:	86 89       	ldd	r24, Z+22	; 0x16
    3e30:	80 93 ca 00 	sts	0x00CA, r24
    3e34:	e9 81       	ldd	r30, Y+1	; 0x01
    3e36:	fa 81       	ldd	r31, Y+2	; 0x02
    3e38:	86 89       	ldd	r24, Z+22	; 0x16
    3e3a:	28 2f       	mov	r18, r24
    3e3c:	30 e0       	ldi	r19, 0x00	; 0
    3e3e:	c9 01       	movw	r24, r18
    3e40:	88 0f       	add	r24, r24
    3e42:	99 1f       	adc	r25, r25
    3e44:	88 0f       	add	r24, r24
    3e46:	99 1f       	adc	r25, r25
    3e48:	88 0f       	add	r24, r24
    3e4a:	99 1f       	adc	r25, r25
    3e4c:	82 0f       	add	r24, r18
    3e4e:	93 1f       	adc	r25, r19
    3e50:	ac 01       	movw	r20, r24
    3e52:	4a 52       	subi	r20, 0x2A	; 42
    3e54:	5f 4f       	sbci	r21, 0xFF	; 255
    3e56:	89 81       	ldd	r24, Y+1	; 0x01
    3e58:	9a 81       	ldd	r25, Y+2	; 0x02
    3e5a:	9c 01       	movw	r18, r24
    3e5c:	2e 5f       	subi	r18, 0xFE	; 254
    3e5e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e60:	ca 01       	movw	r24, r20
    3e62:	b9 01       	movw	r22, r18
    3e64:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3e68:	e9 81       	ldd	r30, Y+1	; 0x01
    3e6a:	fa 81       	ldd	r31, Y+2	; 0x02
    3e6c:	96 89       	ldd	r25, Z+22	; 0x16
    3e6e:	e0 91 c4 00 	lds	r30, 0x00C4
    3e72:	f0 91 c5 00 	lds	r31, 0x00C5
    3e76:	86 89       	ldd	r24, Z+22	; 0x16
    3e78:	89 17       	cp	r24, r25
    3e7a:	18 f4       	brcc	.+6      	; 0x3e82 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
    3e7c:	81 e0       	ldi	r24, 0x01	; 1
    3e7e:	80 93 ce 00 	sts	0x00CE, r24
	}
}
    3e82:	26 96       	adiw	r28, 0x06	; 6
    3e84:	0f b6       	in	r0, 0x3f	; 63
    3e86:	f8 94       	cli
    3e88:	de bf       	out	0x3e, r29	; 62
    3e8a:	0f be       	out	0x3f, r0	; 63
    3e8c:	cd bf       	out	0x3d, r28	; 61
    3e8e:	cf 91       	pop	r28
    3e90:	df 91       	pop	r29
    3e92:	08 95       	ret

00003e94 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    3e94:	df 93       	push	r29
    3e96:	cf 93       	push	r28
    3e98:	00 d0       	rcall	.+0      	; 0x3e9a <vTaskSetTimeOutState+0x6>
    3e9a:	cd b7       	in	r28, 0x3d	; 61
    3e9c:	de b7       	in	r29, 0x3e	; 62
    3e9e:	9a 83       	std	Y+2, r25	; 0x02
    3ea0:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	taskENTER_CRITICAL();
    3ea2:	0f b6       	in	r0, 0x3f	; 63
    3ea4:	f8 94       	cli
    3ea6:	0f 92       	push	r0
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
    3ea8:	80 91 cf 00 	lds	r24, 0x00CF
    3eac:	e9 81       	ldd	r30, Y+1	; 0x01
    3eae:	fa 81       	ldd	r31, Y+2	; 0x02
    3eb0:	80 83       	st	Z, r24
		pxTimeOut->xTimeOnEntering = xTickCount;
    3eb2:	80 91 c8 00 	lds	r24, 0x00C8
    3eb6:	90 91 c9 00 	lds	r25, 0x00C9
    3eba:	e9 81       	ldd	r30, Y+1	; 0x01
    3ebc:	fa 81       	ldd	r31, Y+2	; 0x02
    3ebe:	92 83       	std	Z+2, r25	; 0x02
    3ec0:	81 83       	std	Z+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    3ec2:	0f 90       	pop	r0
    3ec4:	0f be       	out	0x3f, r0	; 63
}
    3ec6:	0f 90       	pop	r0
    3ec8:	0f 90       	pop	r0
    3eca:	cf 91       	pop	r28
    3ecc:	df 91       	pop	r29
    3ece:	08 95       	ret

00003ed0 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    3ed0:	df 93       	push	r29
    3ed2:	cf 93       	push	r28
    3ed4:	00 d0       	rcall	.+0      	; 0x3ed6 <vTaskInternalSetTimeOutState+0x6>
    3ed6:	cd b7       	in	r28, 0x3d	; 61
    3ed8:	de b7       	in	r29, 0x3e	; 62
    3eda:	9a 83       	std	Y+2, r25	; 0x02
    3edc:	89 83       	std	Y+1, r24	; 0x01
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    3ede:	80 91 cf 00 	lds	r24, 0x00CF
    3ee2:	e9 81       	ldd	r30, Y+1	; 0x01
    3ee4:	fa 81       	ldd	r31, Y+2	; 0x02
    3ee6:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    3ee8:	80 91 c8 00 	lds	r24, 0x00C8
    3eec:	90 91 c9 00 	lds	r25, 0x00C9
    3ef0:	e9 81       	ldd	r30, Y+1	; 0x01
    3ef2:	fa 81       	ldd	r31, Y+2	; 0x02
    3ef4:	92 83       	std	Z+2, r25	; 0x02
    3ef6:	81 83       	std	Z+1, r24	; 0x01
}
    3ef8:	0f 90       	pop	r0
    3efa:	0f 90       	pop	r0
    3efc:	cf 91       	pop	r28
    3efe:	df 91       	pop	r29
    3f00:	08 95       	ret

00003f02 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    3f02:	df 93       	push	r29
    3f04:	cf 93       	push	r28
    3f06:	cd b7       	in	r28, 0x3d	; 61
    3f08:	de b7       	in	r29, 0x3e	; 62
    3f0a:	29 97       	sbiw	r28, 0x09	; 9
    3f0c:	0f b6       	in	r0, 0x3f	; 63
    3f0e:	f8 94       	cli
    3f10:	de bf       	out	0x3e, r29	; 62
    3f12:	0f be       	out	0x3f, r0	; 63
    3f14:	cd bf       	out	0x3d, r28	; 61
    3f16:	9f 83       	std	Y+7, r25	; 0x07
    3f18:	8e 83       	std	Y+6, r24	; 0x06
    3f1a:	79 87       	std	Y+9, r23	; 0x09
    3f1c:	68 87       	std	Y+8, r22	; 0x08
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    3f1e:	0f b6       	in	r0, 0x3f	; 63
    3f20:	f8 94       	cli
    3f22:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    3f24:	80 91 c8 00 	lds	r24, 0x00C8
    3f28:	90 91 c9 00 	lds	r25, 0x00C9
    3f2c:	9c 83       	std	Y+4, r25	; 0x04
    3f2e:	8b 83       	std	Y+3, r24	; 0x03
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    3f30:	ee 81       	ldd	r30, Y+6	; 0x06
    3f32:	ff 81       	ldd	r31, Y+7	; 0x07
    3f34:	21 81       	ldd	r18, Z+1	; 0x01
    3f36:	32 81       	ldd	r19, Z+2	; 0x02
    3f38:	8b 81       	ldd	r24, Y+3	; 0x03
    3f3a:	9c 81       	ldd	r25, Y+4	; 0x04
    3f3c:	82 1b       	sub	r24, r18
    3f3e:	93 0b       	sbc	r25, r19
    3f40:	9a 83       	std	Y+2, r25	; 0x02
    3f42:	89 83       	std	Y+1, r24	; 0x01
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    3f44:	ee 81       	ldd	r30, Y+6	; 0x06
    3f46:	ff 81       	ldd	r31, Y+7	; 0x07
    3f48:	90 81       	ld	r25, Z
    3f4a:	80 91 cf 00 	lds	r24, 0x00CF
    3f4e:	98 17       	cp	r25, r24
    3f50:	61 f0       	breq	.+24     	; 0x3f6a <xTaskCheckForTimeOut+0x68>
    3f52:	ee 81       	ldd	r30, Y+6	; 0x06
    3f54:	ff 81       	ldd	r31, Y+7	; 0x07
    3f56:	21 81       	ldd	r18, Z+1	; 0x01
    3f58:	32 81       	ldd	r19, Z+2	; 0x02
    3f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f5e:	82 17       	cp	r24, r18
    3f60:	93 07       	cpc	r25, r19
    3f62:	18 f0       	brcs	.+6      	; 0x3f6a <xTaskCheckForTimeOut+0x68>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    3f64:	81 e0       	ldi	r24, 0x01	; 1
    3f66:	8d 83       	std	Y+5, r24	; 0x05
    3f68:	23 c0       	rjmp	.+70     	; 0x3fb0 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    3f6a:	e8 85       	ldd	r30, Y+8	; 0x08
    3f6c:	f9 85       	ldd	r31, Y+9	; 0x09
    3f6e:	20 81       	ld	r18, Z
    3f70:	31 81       	ldd	r19, Z+1	; 0x01
    3f72:	89 81       	ldd	r24, Y+1	; 0x01
    3f74:	9a 81       	ldd	r25, Y+2	; 0x02
    3f76:	82 17       	cp	r24, r18
    3f78:	93 07       	cpc	r25, r19
    3f7a:	a0 f4       	brcc	.+40     	; 0x3fa4 <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    3f7c:	e8 85       	ldd	r30, Y+8	; 0x08
    3f7e:	f9 85       	ldd	r31, Y+9	; 0x09
    3f80:	20 81       	ld	r18, Z
    3f82:	31 81       	ldd	r19, Z+1	; 0x01
    3f84:	89 81       	ldd	r24, Y+1	; 0x01
    3f86:	9a 81       	ldd	r25, Y+2	; 0x02
    3f88:	a9 01       	movw	r20, r18
    3f8a:	48 1b       	sub	r20, r24
    3f8c:	59 0b       	sbc	r21, r25
    3f8e:	ca 01       	movw	r24, r20
    3f90:	e8 85       	ldd	r30, Y+8	; 0x08
    3f92:	f9 85       	ldd	r31, Y+9	; 0x09
    3f94:	91 83       	std	Z+1, r25	; 0x01
    3f96:	80 83       	st	Z, r24
			vTaskInternalSetTimeOutState( pxTimeOut );
    3f98:	8e 81       	ldd	r24, Y+6	; 0x06
    3f9a:	9f 81       	ldd	r25, Y+7	; 0x07
    3f9c:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
    3fa0:	1d 82       	std	Y+5, r1	; 0x05
    3fa2:	06 c0       	rjmp	.+12     	; 0x3fb0 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
    3fa4:	e8 85       	ldd	r30, Y+8	; 0x08
    3fa6:	f9 85       	ldd	r31, Y+9	; 0x09
    3fa8:	11 82       	std	Z+1, r1	; 0x01
    3faa:	10 82       	st	Z, r1
			xReturn = pdTRUE;
    3fac:	81 e0       	ldi	r24, 0x01	; 1
    3fae:	8d 83       	std	Y+5, r24	; 0x05
		}
	}
	taskEXIT_CRITICAL();
    3fb0:	0f 90       	pop	r0
    3fb2:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    3fb4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3fb6:	29 96       	adiw	r28, 0x09	; 9
    3fb8:	0f b6       	in	r0, 0x3f	; 63
    3fba:	f8 94       	cli
    3fbc:	de bf       	out	0x3e, r29	; 62
    3fbe:	0f be       	out	0x3f, r0	; 63
    3fc0:	cd bf       	out	0x3d, r28	; 61
    3fc2:	cf 91       	pop	r28
    3fc4:	df 91       	pop	r29
    3fc6:	08 95       	ret

00003fc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    3fc8:	df 93       	push	r29
    3fca:	cf 93       	push	r28
    3fcc:	cd b7       	in	r28, 0x3d	; 61
    3fce:	de b7       	in	r29, 0x3e	; 62
	xYieldPending = pdTRUE;
    3fd0:	81 e0       	ldi	r24, 0x01	; 1
    3fd2:	80 93 ce 00 	sts	0x00CE, r24
}
    3fd6:	cf 91       	pop	r28
    3fd8:	df 91       	pop	r29
    3fda:	08 95       	ret

00003fdc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    3fdc:	df 93       	push	r29
    3fde:	cf 93       	push	r28
    3fe0:	00 d0       	rcall	.+0      	; 0x3fe2 <prvIdleTask+0x6>
    3fe2:	cd b7       	in	r28, 0x3d	; 61
    3fe4:	de b7       	in	r29, 0x3e	; 62
    3fe6:	9a 83       	std	Y+2, r25	; 0x02
    3fe8:	89 83       	std	Y+1, r24	; 0x01

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    3fea:	0e 94 3b 20 	call	0x4076	; 0x4076 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    3fee:	80 91 d6 00 	lds	r24, 0x00D6
    3ff2:	82 30       	cpi	r24, 0x02	; 2
    3ff4:	d0 f3       	brcs	.-12     	; 0x3fea <prvIdleTask+0xe>
			{
				taskYIELD();
    3ff6:	0e 94 95 07 	call	0xf2a	; 0xf2a <vPortYield>
    3ffa:	f7 cf       	rjmp	.-18     	; 0x3fea <prvIdleTask+0xe>

00003ffc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    3ffc:	df 93       	push	r29
    3ffe:	cf 93       	push	r28
    4000:	0f 92       	push	r0
    4002:	cd b7       	in	r28, 0x3d	; 61
    4004:	de b7       	in	r29, 0x3e	; 62
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    4006:	19 82       	std	Y+1, r1	; 0x01
    4008:	13 c0       	rjmp	.+38     	; 0x4030 <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    400a:	89 81       	ldd	r24, Y+1	; 0x01
    400c:	28 2f       	mov	r18, r24
    400e:	30 e0       	ldi	r19, 0x00	; 0
    4010:	c9 01       	movw	r24, r18
    4012:	88 0f       	add	r24, r24
    4014:	99 1f       	adc	r25, r25
    4016:	88 0f       	add	r24, r24
    4018:	99 1f       	adc	r25, r25
    401a:	88 0f       	add	r24, r24
    401c:	99 1f       	adc	r25, r25
    401e:	82 0f       	add	r24, r18
    4020:	93 1f       	adc	r25, r19
    4022:	8a 52       	subi	r24, 0x2A	; 42
    4024:	9f 4f       	sbci	r25, 0xFF	; 255
    4026:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    402a:	89 81       	ldd	r24, Y+1	; 0x01
    402c:	8f 5f       	subi	r24, 0xFF	; 255
    402e:	89 83       	std	Y+1, r24	; 0x01
    4030:	89 81       	ldd	r24, Y+1	; 0x01
    4032:	84 30       	cpi	r24, 0x04	; 4
    4034:	50 f3       	brcs	.-44     	; 0x400a <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    4036:	8a ef       	ldi	r24, 0xFA	; 250
    4038:	90 e0       	ldi	r25, 0x00	; 0
    403a:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    403e:	83 e0       	ldi	r24, 0x03	; 3
    4040:	91 e0       	ldi	r25, 0x01	; 1
    4042:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <vListInitialise>
	vListInitialise( &xPendingReadyList );
    4046:	80 e1       	ldi	r24, 0x10	; 16
    4048:	91 e0       	ldi	r25, 0x01	; 1
    404a:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    404e:	89 e1       	ldi	r24, 0x19	; 25
    4050:	91 e0       	ldi	r25, 0x01	; 1
    4052:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    4056:	8a ef       	ldi	r24, 0xFA	; 250
    4058:	90 e0       	ldi	r25, 0x00	; 0
    405a:	90 93 0d 01 	sts	0x010D, r25
    405e:	80 93 0c 01 	sts	0x010C, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    4062:	83 e0       	ldi	r24, 0x03	; 3
    4064:	91 e0       	ldi	r25, 0x01	; 1
    4066:	90 93 0f 01 	sts	0x010F, r25
    406a:	80 93 0e 01 	sts	0x010E, r24
}
    406e:	0f 90       	pop	r0
    4070:	cf 91       	pop	r28
    4072:	df 91       	pop	r29
    4074:	08 95       	ret

00004076 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    4076:	df 93       	push	r29
    4078:	cf 93       	push	r28
    407a:	00 d0       	rcall	.+0      	; 0x407c <prvCheckTasksWaitingTermination+0x6>
    407c:	cd b7       	in	r28, 0x3d	; 61
    407e:	de b7       	in	r29, 0x3e	; 62
    4080:	20 c0       	rjmp	.+64     	; 0x40c2 <prvCheckTasksWaitingTermination+0x4c>

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			taskENTER_CRITICAL();
    4082:	0f b6       	in	r0, 0x3f	; 63
    4084:	f8 94       	cli
    4086:	0f 92       	push	r0
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    4088:	e0 91 1e 01 	lds	r30, 0x011E
    408c:	f0 91 1f 01 	lds	r31, 0x011F
    4090:	86 81       	ldd	r24, Z+6	; 0x06
    4092:	97 81       	ldd	r25, Z+7	; 0x07
    4094:	9a 83       	std	Y+2, r25	; 0x02
    4096:	89 83       	std	Y+1, r24	; 0x01
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    4098:	89 81       	ldd	r24, Y+1	; 0x01
    409a:	9a 81       	ldd	r25, Y+2	; 0x02
    409c:	02 96       	adiw	r24, 0x02	; 2
    409e:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <uxListRemove>
				--uxCurrentNumberOfTasks;
    40a2:	80 91 c7 00 	lds	r24, 0x00C7
    40a6:	81 50       	subi	r24, 0x01	; 1
    40a8:	80 93 c7 00 	sts	0x00C7, r24
				--uxDeletedTasksWaitingCleanUp;
    40ac:	80 91 c6 00 	lds	r24, 0x00C6
    40b0:	81 50       	subi	r24, 0x01	; 1
    40b2:	80 93 c6 00 	sts	0x00C6, r24
			}
			taskEXIT_CRITICAL();
    40b6:	0f 90       	pop	r0
    40b8:	0f be       	out	0x3f, r0	; 63

			prvDeleteTCB( pxTCB );
    40ba:	89 81       	ldd	r24, Y+1	; 0x01
    40bc:	9a 81       	ldd	r25, Y+2	; 0x02
    40be:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    40c2:	80 91 c6 00 	lds	r24, 0x00C6
    40c6:	88 23       	and	r24, r24
    40c8:	e1 f6       	brne	.-72     	; 0x4082 <prvCheckTasksWaitingTermination+0xc>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    40ca:	0f 90       	pop	r0
    40cc:	0f 90       	pop	r0
    40ce:	cf 91       	pop	r28
    40d0:	df 91       	pop	r29
    40d2:	08 95       	ret

000040d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    40d4:	df 93       	push	r29
    40d6:	cf 93       	push	r28
    40d8:	00 d0       	rcall	.+0      	; 0x40da <prvDeleteTCB+0x6>
    40da:	cd b7       	in	r28, 0x3d	; 61
    40dc:	de b7       	in	r29, 0x3e	; 62
    40de:	9a 83       	std	Y+2, r25	; 0x02
    40e0:	89 83       	std	Y+1, r24	; 0x01

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    40e2:	e9 81       	ldd	r30, Y+1	; 0x01
    40e4:	fa 81       	ldd	r31, Y+2	; 0x02
    40e6:	87 89       	ldd	r24, Z+23	; 0x17
    40e8:	90 8d       	ldd	r25, Z+24	; 0x18
    40ea:	0e 94 be 05 	call	0xb7c	; 0xb7c <vPortFree>
			vPortFree( pxTCB );
    40ee:	89 81       	ldd	r24, Y+1	; 0x01
    40f0:	9a 81       	ldd	r25, Y+2	; 0x02
    40f2:	0e 94 be 05 	call	0xb7c	; 0xb7c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    40f6:	0f 90       	pop	r0
    40f8:	0f 90       	pop	r0
    40fa:	cf 91       	pop	r28
    40fc:	df 91       	pop	r29
    40fe:	08 95       	ret

00004100 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    4100:	df 93       	push	r29
    4102:	cf 93       	push	r28
    4104:	00 d0       	rcall	.+0      	; 0x4106 <prvResetNextTaskUnblockTime+0x6>
    4106:	cd b7       	in	r28, 0x3d	; 61
    4108:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    410a:	e0 91 0c 01 	lds	r30, 0x010C
    410e:	f0 91 0d 01 	lds	r31, 0x010D
    4112:	80 81       	ld	r24, Z
    4114:	88 23       	and	r24, r24
    4116:	39 f4       	brne	.+14     	; 0x4126 <prvResetNextTaskUnblockTime+0x26>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    4118:	8f ef       	ldi	r24, 0xFF	; 255
    411a:	9f ef       	ldi	r25, 0xFF	; 255
    411c:	90 93 d2 00 	sts	0x00D2, r25
    4120:	80 93 d1 00 	sts	0x00D1, r24
    4124:	13 c0       	rjmp	.+38     	; 0x414c <prvResetNextTaskUnblockTime+0x4c>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    4126:	e0 91 0c 01 	lds	r30, 0x010C
    412a:	f0 91 0d 01 	lds	r31, 0x010D
    412e:	05 80       	ldd	r0, Z+5	; 0x05
    4130:	f6 81       	ldd	r31, Z+6	; 0x06
    4132:	e0 2d       	mov	r30, r0
    4134:	86 81       	ldd	r24, Z+6	; 0x06
    4136:	97 81       	ldd	r25, Z+7	; 0x07
    4138:	9a 83       	std	Y+2, r25	; 0x02
    413a:	89 83       	std	Y+1, r24	; 0x01
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    413c:	e9 81       	ldd	r30, Y+1	; 0x01
    413e:	fa 81       	ldd	r31, Y+2	; 0x02
    4140:	82 81       	ldd	r24, Z+2	; 0x02
    4142:	93 81       	ldd	r25, Z+3	; 0x03
    4144:	90 93 d2 00 	sts	0x00D2, r25
    4148:	80 93 d1 00 	sts	0x00D1, r24
	}
}
    414c:	0f 90       	pop	r0
    414e:	0f 90       	pop	r0
    4150:	cf 91       	pop	r28
    4152:	df 91       	pop	r29
    4154:	08 95       	ret

00004156 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    4156:	df 93       	push	r29
    4158:	cf 93       	push	r28
    415a:	00 d0       	rcall	.+0      	; 0x415c <uxTaskResetEventItemValue+0x6>
    415c:	cd b7       	in	r28, 0x3d	; 61
    415e:	de b7       	in	r29, 0x3e	; 62
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    4160:	e0 91 c4 00 	lds	r30, 0x00C4
    4164:	f0 91 c5 00 	lds	r31, 0x00C5
    4168:	84 85       	ldd	r24, Z+12	; 0x0c
    416a:	95 85       	ldd	r25, Z+13	; 0x0d
    416c:	9a 83       	std	Y+2, r25	; 0x02
    416e:	89 83       	std	Y+1, r24	; 0x01

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4170:	a0 91 c4 00 	lds	r26, 0x00C4
    4174:	b0 91 c5 00 	lds	r27, 0x00C5
    4178:	e0 91 c4 00 	lds	r30, 0x00C4
    417c:	f0 91 c5 00 	lds	r31, 0x00C5
    4180:	86 89       	ldd	r24, Z+22	; 0x16
    4182:	28 2f       	mov	r18, r24
    4184:	30 e0       	ldi	r19, 0x00	; 0
    4186:	84 e0       	ldi	r24, 0x04	; 4
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	82 1b       	sub	r24, r18
    418c:	93 0b       	sbc	r25, r19
    418e:	1d 96       	adiw	r26, 0x0d	; 13
    4190:	9c 93       	st	X, r25
    4192:	8e 93       	st	-X, r24
    4194:	1c 97       	sbiw	r26, 0x0c	; 12

	return uxReturn;
    4196:	89 81       	ldd	r24, Y+1	; 0x01
    4198:	9a 81       	ldd	r25, Y+2	; 0x02
}
    419a:	0f 90       	pop	r0
    419c:	0f 90       	pop	r0
    419e:	cf 91       	pop	r28
    41a0:	df 91       	pop	r29
    41a2:	08 95       	ret

000041a4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    41a4:	df 93       	push	r29
    41a6:	cf 93       	push	r28
    41a8:	cd b7       	in	r28, 0x3d	; 61
    41aa:	de b7       	in	r29, 0x3e	; 62
    41ac:	27 97       	sbiw	r28, 0x07	; 7
    41ae:	0f b6       	in	r0, 0x3f	; 63
    41b0:	f8 94       	cli
    41b2:	de bf       	out	0x3e, r29	; 62
    41b4:	0f be       	out	0x3f, r0	; 63
    41b6:	cd bf       	out	0x3d, r28	; 61
    41b8:	8d 83       	std	Y+5, r24	; 0x05
    41ba:	7f 83       	std	Y+7, r23	; 0x07
    41bc:	6e 83       	std	Y+6, r22	; 0x06
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    41be:	0f b6       	in	r0, 0x3f	; 63
    41c0:	f8 94       	cli
    41c2:	0f 92       	push	r0
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    41c4:	e0 91 c4 00 	lds	r30, 0x00C4
    41c8:	f0 91 c5 00 	lds	r31, 0x00C5
    41cc:	81 a1       	ldd	r24, Z+33	; 0x21
    41ce:	92 a1       	ldd	r25, Z+34	; 0x22
    41d0:	a3 a1       	ldd	r26, Z+35	; 0x23
    41d2:	b4 a1       	ldd	r27, Z+36	; 0x24
    41d4:	00 97       	sbiw	r24, 0x00	; 0
    41d6:	a1 05       	cpc	r26, r1
    41d8:	b1 05       	cpc	r27, r1
    41da:	89 f4       	brne	.+34     	; 0x41fe <ulTaskNotifyTake+0x5a>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    41dc:	e0 91 c4 00 	lds	r30, 0x00C4
    41e0:	f0 91 c5 00 	lds	r31, 0x00C5
    41e4:	81 e0       	ldi	r24, 0x01	; 1
    41e6:	85 a3       	std	Z+37, r24	; 0x25

				if( xTicksToWait > ( TickType_t ) 0 )
    41e8:	8e 81       	ldd	r24, Y+6	; 0x06
    41ea:	9f 81       	ldd	r25, Y+7	; 0x07
    41ec:	00 97       	sbiw	r24, 0x00	; 0
    41ee:	39 f0       	breq	.+14     	; 0x41fe <ulTaskNotifyTake+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    41f0:	8e 81       	ldd	r24, Y+6	; 0x06
    41f2:	9f 81       	ldd	r25, Y+7	; 0x07
    41f4:	61 e0       	ldi	r22, 0x01	; 1
    41f6:	0e 94 d5 24 	call	0x49aa	; 0x49aa <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    41fa:	0e 94 95 07 	call	0xf2a	; 0xf2a <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    41fe:	0f 90       	pop	r0
    4200:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    4202:	0f b6       	in	r0, 0x3f	; 63
    4204:	f8 94       	cli
    4206:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    4208:	e0 91 c4 00 	lds	r30, 0x00C4
    420c:	f0 91 c5 00 	lds	r31, 0x00C5
    4210:	81 a1       	ldd	r24, Z+33	; 0x21
    4212:	92 a1       	ldd	r25, Z+34	; 0x22
    4214:	a3 a1       	ldd	r26, Z+35	; 0x23
    4216:	b4 a1       	ldd	r27, Z+36	; 0x24
    4218:	89 83       	std	Y+1, r24	; 0x01
    421a:	9a 83       	std	Y+2, r25	; 0x02
    421c:	ab 83       	std	Y+3, r26	; 0x03
    421e:	bc 83       	std	Y+4, r27	; 0x04

			if( ulReturn != 0UL )
    4220:	89 81       	ldd	r24, Y+1	; 0x01
    4222:	9a 81       	ldd	r25, Y+2	; 0x02
    4224:	ab 81       	ldd	r26, Y+3	; 0x03
    4226:	bc 81       	ldd	r27, Y+4	; 0x04
    4228:	00 97       	sbiw	r24, 0x00	; 0
    422a:	a1 05       	cpc	r26, r1
    422c:	b1 05       	cpc	r27, r1
    422e:	d9 f0       	breq	.+54     	; 0x4266 <ulTaskNotifyTake+0xc2>
			{
				if( xClearCountOnExit != pdFALSE )
    4230:	8d 81       	ldd	r24, Y+5	; 0x05
    4232:	88 23       	and	r24, r24
    4234:	49 f0       	breq	.+18     	; 0x4248 <ulTaskNotifyTake+0xa4>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    4236:	e0 91 c4 00 	lds	r30, 0x00C4
    423a:	f0 91 c5 00 	lds	r31, 0x00C5
    423e:	11 a2       	std	Z+33, r1	; 0x21
    4240:	12 a2       	std	Z+34, r1	; 0x22
    4242:	13 a2       	std	Z+35, r1	; 0x23
    4244:	14 a2       	std	Z+36, r1	; 0x24
    4246:	0f c0       	rjmp	.+30     	; 0x4266 <ulTaskNotifyTake+0xc2>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
    4248:	e0 91 c4 00 	lds	r30, 0x00C4
    424c:	f0 91 c5 00 	lds	r31, 0x00C5
    4250:	89 81       	ldd	r24, Y+1	; 0x01
    4252:	9a 81       	ldd	r25, Y+2	; 0x02
    4254:	ab 81       	ldd	r26, Y+3	; 0x03
    4256:	bc 81       	ldd	r27, Y+4	; 0x04
    4258:	01 97       	sbiw	r24, 0x01	; 1
    425a:	a1 09       	sbc	r26, r1
    425c:	b1 09       	sbc	r27, r1
    425e:	81 a3       	std	Z+33, r24	; 0x21
    4260:	92 a3       	std	Z+34, r25	; 0x22
    4262:	a3 a3       	std	Z+35, r26	; 0x23
    4264:	b4 a3       	std	Z+36, r27	; 0x24
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    4266:	e0 91 c4 00 	lds	r30, 0x00C4
    426a:	f0 91 c5 00 	lds	r31, 0x00C5
    426e:	15 a2       	std	Z+37, r1	; 0x25
		}
		taskEXIT_CRITICAL();
    4270:	0f 90       	pop	r0
    4272:	0f be       	out	0x3f, r0	; 63

		return ulReturn;
    4274:	89 81       	ldd	r24, Y+1	; 0x01
    4276:	9a 81       	ldd	r25, Y+2	; 0x02
    4278:	ab 81       	ldd	r26, Y+3	; 0x03
    427a:	bc 81       	ldd	r27, Y+4	; 0x04
	}
    427c:	bc 01       	movw	r22, r24
    427e:	cd 01       	movw	r24, r26
    4280:	27 96       	adiw	r28, 0x07	; 7
    4282:	0f b6       	in	r0, 0x3f	; 63
    4284:	f8 94       	cli
    4286:	de bf       	out	0x3e, r29	; 62
    4288:	0f be       	out	0x3f, r0	; 63
    428a:	cd bf       	out	0x3d, r28	; 61
    428c:	cf 91       	pop	r28
    428e:	df 91       	pop	r29
    4290:	08 95       	ret

00004292 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    4292:	ef 92       	push	r14
    4294:	ff 92       	push	r15
    4296:	0f 93       	push	r16
    4298:	1f 93       	push	r17
    429a:	df 93       	push	r29
    429c:	cf 93       	push	r28
    429e:	cd b7       	in	r28, 0x3d	; 61
    42a0:	de b7       	in	r29, 0x3e	; 62
    42a2:	2d 97       	sbiw	r28, 0x0d	; 13
    42a4:	0f b6       	in	r0, 0x3f	; 63
    42a6:	f8 94       	cli
    42a8:	de bf       	out	0x3e, r29	; 62
    42aa:	0f be       	out	0x3f, r0	; 63
    42ac:	cd bf       	out	0x3d, r28	; 61
    42ae:	6a 83       	std	Y+2, r22	; 0x02
    42b0:	7b 83       	std	Y+3, r23	; 0x03
    42b2:	8c 83       	std	Y+4, r24	; 0x04
    42b4:	9d 83       	std	Y+5, r25	; 0x05
    42b6:	2e 83       	std	Y+6, r18	; 0x06
    42b8:	3f 83       	std	Y+7, r19	; 0x07
    42ba:	48 87       	std	Y+8, r20	; 0x08
    42bc:	59 87       	std	Y+9, r21	; 0x09
    42be:	1b 87       	std	Y+11, r17	; 0x0b
    42c0:	0a 87       	std	Y+10, r16	; 0x0a
    42c2:	fd 86       	std	Y+13, r15	; 0x0d
    42c4:	ec 86       	std	Y+12, r14	; 0x0c
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    42c6:	0f b6       	in	r0, 0x3f	; 63
    42c8:	f8 94       	cli
    42ca:	0f 92       	push	r0
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    42cc:	e0 91 c4 00 	lds	r30, 0x00C4
    42d0:	f0 91 c5 00 	lds	r31, 0x00C5
    42d4:	85 a1       	ldd	r24, Z+37	; 0x25
    42d6:	82 30       	cpi	r24, 0x02	; 2
    42d8:	49 f1       	breq	.+82     	; 0x432c <xTaskNotifyWait+0x9a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    42da:	e0 91 c4 00 	lds	r30, 0x00C4
    42de:	f0 91 c5 00 	lds	r31, 0x00C5
    42e2:	21 a1       	ldd	r18, Z+33	; 0x21
    42e4:	32 a1       	ldd	r19, Z+34	; 0x22
    42e6:	43 a1       	ldd	r20, Z+35	; 0x23
    42e8:	54 a1       	ldd	r21, Z+36	; 0x24
    42ea:	8a 81       	ldd	r24, Y+2	; 0x02
    42ec:	9b 81       	ldd	r25, Y+3	; 0x03
    42ee:	ac 81       	ldd	r26, Y+4	; 0x04
    42f0:	bd 81       	ldd	r27, Y+5	; 0x05
    42f2:	80 95       	com	r24
    42f4:	90 95       	com	r25
    42f6:	a0 95       	com	r26
    42f8:	b0 95       	com	r27
    42fa:	82 23       	and	r24, r18
    42fc:	93 23       	and	r25, r19
    42fe:	a4 23       	and	r26, r20
    4300:	b5 23       	and	r27, r21
    4302:	81 a3       	std	Z+33, r24	; 0x21
    4304:	92 a3       	std	Z+34, r25	; 0x22
    4306:	a3 a3       	std	Z+35, r26	; 0x23
    4308:	b4 a3       	std	Z+36, r27	; 0x24

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    430a:	e0 91 c4 00 	lds	r30, 0x00C4
    430e:	f0 91 c5 00 	lds	r31, 0x00C5
    4312:	81 e0       	ldi	r24, 0x01	; 1
    4314:	85 a3       	std	Z+37, r24	; 0x25

				if( xTicksToWait > ( TickType_t ) 0 )
    4316:	8c 85       	ldd	r24, Y+12	; 0x0c
    4318:	9d 85       	ldd	r25, Y+13	; 0x0d
    431a:	00 97       	sbiw	r24, 0x00	; 0
    431c:	39 f0       	breq	.+14     	; 0x432c <xTaskNotifyWait+0x9a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    431e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4320:	9d 85       	ldd	r25, Y+13	; 0x0d
    4322:	61 e0       	ldi	r22, 0x01	; 1
    4324:	0e 94 d5 24 	call	0x49aa	; 0x49aa <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    4328:	0e 94 95 07 	call	0xf2a	; 0xf2a <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    432c:	0f 90       	pop	r0
    432e:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    4330:	0f b6       	in	r0, 0x3f	; 63
    4332:	f8 94       	cli
    4334:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
    4336:	8a 85       	ldd	r24, Y+10	; 0x0a
    4338:	9b 85       	ldd	r25, Y+11	; 0x0b
    433a:	00 97       	sbiw	r24, 0x00	; 0
    433c:	71 f0       	breq	.+28     	; 0x435a <xTaskNotifyWait+0xc8>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    433e:	e0 91 c4 00 	lds	r30, 0x00C4
    4342:	f0 91 c5 00 	lds	r31, 0x00C5
    4346:	81 a1       	ldd	r24, Z+33	; 0x21
    4348:	92 a1       	ldd	r25, Z+34	; 0x22
    434a:	a3 a1       	ldd	r26, Z+35	; 0x23
    434c:	b4 a1       	ldd	r27, Z+36	; 0x24
    434e:	ea 85       	ldd	r30, Y+10	; 0x0a
    4350:	fb 85       	ldd	r31, Y+11	; 0x0b
    4352:	80 83       	st	Z, r24
    4354:	91 83       	std	Z+1, r25	; 0x01
    4356:	a2 83       	std	Z+2, r26	; 0x02
    4358:	b3 83       	std	Z+3, r27	; 0x03

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    435a:	e0 91 c4 00 	lds	r30, 0x00C4
    435e:	f0 91 c5 00 	lds	r31, 0x00C5
    4362:	85 a1       	ldd	r24, Z+37	; 0x25
    4364:	82 30       	cpi	r24, 0x02	; 2
    4366:	11 f0       	breq	.+4      	; 0x436c <xTaskNotifyWait+0xda>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    4368:	19 82       	std	Y+1, r1	; 0x01
    436a:	1a c0       	rjmp	.+52     	; 0x43a0 <xTaskNotifyWait+0x10e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    436c:	e0 91 c4 00 	lds	r30, 0x00C4
    4370:	f0 91 c5 00 	lds	r31, 0x00C5
    4374:	21 a1       	ldd	r18, Z+33	; 0x21
    4376:	32 a1       	ldd	r19, Z+34	; 0x22
    4378:	43 a1       	ldd	r20, Z+35	; 0x23
    437a:	54 a1       	ldd	r21, Z+36	; 0x24
    437c:	8e 81       	ldd	r24, Y+6	; 0x06
    437e:	9f 81       	ldd	r25, Y+7	; 0x07
    4380:	a8 85       	ldd	r26, Y+8	; 0x08
    4382:	b9 85       	ldd	r27, Y+9	; 0x09
    4384:	80 95       	com	r24
    4386:	90 95       	com	r25
    4388:	a0 95       	com	r26
    438a:	b0 95       	com	r27
    438c:	82 23       	and	r24, r18
    438e:	93 23       	and	r25, r19
    4390:	a4 23       	and	r26, r20
    4392:	b5 23       	and	r27, r21
    4394:	81 a3       	std	Z+33, r24	; 0x21
    4396:	92 a3       	std	Z+34, r25	; 0x22
    4398:	a3 a3       	std	Z+35, r26	; 0x23
    439a:	b4 a3       	std	Z+36, r27	; 0x24
				xReturn = pdTRUE;
    439c:	81 e0       	ldi	r24, 0x01	; 1
    439e:	89 83       	std	Y+1, r24	; 0x01
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    43a0:	e0 91 c4 00 	lds	r30, 0x00C4
    43a4:	f0 91 c5 00 	lds	r31, 0x00C5
    43a8:	15 a2       	std	Z+37, r1	; 0x25
		}
		taskEXIT_CRITICAL();
    43aa:	0f 90       	pop	r0
    43ac:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    43ae:	89 81       	ldd	r24, Y+1	; 0x01
	}
    43b0:	2d 96       	adiw	r28, 0x0d	; 13
    43b2:	0f b6       	in	r0, 0x3f	; 63
    43b4:	f8 94       	cli
    43b6:	de bf       	out	0x3e, r29	; 62
    43b8:	0f be       	out	0x3f, r0	; 63
    43ba:	cd bf       	out	0x3d, r28	; 61
    43bc:	cf 91       	pop	r28
    43be:	df 91       	pop	r29
    43c0:	1f 91       	pop	r17
    43c2:	0f 91       	pop	r16
    43c4:	ff 90       	pop	r15
    43c6:	ef 90       	pop	r14
    43c8:	08 95       	ret

000043ca <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
    43ca:	0f 93       	push	r16
    43cc:	1f 93       	push	r17
    43ce:	df 93       	push	r29
    43d0:	cf 93       	push	r28
    43d2:	cd b7       	in	r28, 0x3d	; 61
    43d4:	de b7       	in	r29, 0x3e	; 62
    43d6:	2f 97       	sbiw	r28, 0x0f	; 15
    43d8:	0f b6       	in	r0, 0x3f	; 63
    43da:	f8 94       	cli
    43dc:	de bf       	out	0x3e, r29	; 62
    43de:	0f be       	out	0x3f, r0	; 63
    43e0:	cd bf       	out	0x3d, r28	; 61
    43e2:	9e 83       	std	Y+6, r25	; 0x06
    43e4:	8d 83       	std	Y+5, r24	; 0x05
    43e6:	4f 83       	std	Y+7, r20	; 0x07
    43e8:	58 87       	std	Y+8, r21	; 0x08
    43ea:	69 87       	std	Y+9, r22	; 0x09
    43ec:	7a 87       	std	Y+10, r23	; 0x0a
    43ee:	2b 87       	std	Y+11, r18	; 0x0b
    43f0:	1d 87       	std	Y+13, r17	; 0x0d
    43f2:	0c 87       	std	Y+12, r16	; 0x0c
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
    43f4:	81 e0       	ldi	r24, 0x01	; 1
    43f6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = xTaskToNotify;
    43f8:	8d 81       	ldd	r24, Y+5	; 0x05
    43fa:	9e 81       	ldd	r25, Y+6	; 0x06
    43fc:	9c 83       	std	Y+4, r25	; 0x04
    43fe:	8b 83       	std	Y+3, r24	; 0x03

		taskENTER_CRITICAL();
    4400:	0f b6       	in	r0, 0x3f	; 63
    4402:	f8 94       	cli
    4404:	0f 92       	push	r0
		{
			if( pulPreviousNotificationValue != NULL )
    4406:	8c 85       	ldd	r24, Y+12	; 0x0c
    4408:	9d 85       	ldd	r25, Y+13	; 0x0d
    440a:	00 97       	sbiw	r24, 0x00	; 0
    440c:	61 f0       	breq	.+24     	; 0x4426 <xTaskGenericNotify+0x5c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    440e:	eb 81       	ldd	r30, Y+3	; 0x03
    4410:	fc 81       	ldd	r31, Y+4	; 0x04
    4412:	81 a1       	ldd	r24, Z+33	; 0x21
    4414:	92 a1       	ldd	r25, Z+34	; 0x22
    4416:	a3 a1       	ldd	r26, Z+35	; 0x23
    4418:	b4 a1       	ldd	r27, Z+36	; 0x24
    441a:	ec 85       	ldd	r30, Y+12	; 0x0c
    441c:	fd 85       	ldd	r31, Y+13	; 0x0d
    441e:	80 83       	st	Z, r24
    4420:	91 83       	std	Z+1, r25	; 0x01
    4422:	a2 83       	std	Z+2, r26	; 0x02
    4424:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    4426:	eb 81       	ldd	r30, Y+3	; 0x03
    4428:	fc 81       	ldd	r31, Y+4	; 0x04
    442a:	85 a1       	ldd	r24, Z+37	; 0x25
    442c:	89 83       	std	Y+1, r24	; 0x01

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    442e:	eb 81       	ldd	r30, Y+3	; 0x03
    4430:	fc 81       	ldd	r31, Y+4	; 0x04
    4432:	82 e0       	ldi	r24, 0x02	; 2
    4434:	85 a3       	std	Z+37, r24	; 0x25

			switch( eAction )
    4436:	8b 85       	ldd	r24, Y+11	; 0x0b
    4438:	28 2f       	mov	r18, r24
    443a:	30 e0       	ldi	r19, 0x00	; 0
    443c:	3f 87       	std	Y+15, r19	; 0x0f
    443e:	2e 87       	std	Y+14, r18	; 0x0e
    4440:	8e 85       	ldd	r24, Y+14	; 0x0e
    4442:	9f 85       	ldd	r25, Y+15	; 0x0f
    4444:	82 30       	cpi	r24, 0x02	; 2
    4446:	91 05       	cpc	r25, r1
    4448:	59 f1       	breq	.+86     	; 0x44a0 <xTaskGenericNotify+0xd6>
    444a:	2e 85       	ldd	r18, Y+14	; 0x0e
    444c:	3f 85       	ldd	r19, Y+15	; 0x0f
    444e:	23 30       	cpi	r18, 0x03	; 3
    4450:	31 05       	cpc	r19, r1
    4452:	34 f4       	brge	.+12     	; 0x4460 <xTaskGenericNotify+0x96>
    4454:	8e 85       	ldd	r24, Y+14	; 0x0e
    4456:	9f 85       	ldd	r25, Y+15	; 0x0f
    4458:	81 30       	cpi	r24, 0x01	; 1
    445a:	91 05       	cpc	r25, r1
    445c:	61 f0       	breq	.+24     	; 0x4476 <xTaskGenericNotify+0xac>
    445e:	4a c0       	rjmp	.+148    	; 0x44f4 <xTaskGenericNotify+0x12a>
    4460:	2e 85       	ldd	r18, Y+14	; 0x0e
    4462:	3f 85       	ldd	r19, Y+15	; 0x0f
    4464:	23 30       	cpi	r18, 0x03	; 3
    4466:	31 05       	cpc	r19, r1
    4468:	59 f1       	breq	.+86     	; 0x44c0 <xTaskGenericNotify+0xf6>
    446a:	8e 85       	ldd	r24, Y+14	; 0x0e
    446c:	9f 85       	ldd	r25, Y+15	; 0x0f
    446e:	84 30       	cpi	r24, 0x04	; 4
    4470:	91 05       	cpc	r25, r1
    4472:	89 f1       	breq	.+98     	; 0x44d6 <xTaskGenericNotify+0x10c>
    4474:	3f c0       	rjmp	.+126    	; 0x44f4 <xTaskGenericNotify+0x12a>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    4476:	eb 81       	ldd	r30, Y+3	; 0x03
    4478:	fc 81       	ldd	r31, Y+4	; 0x04
    447a:	21 a1       	ldd	r18, Z+33	; 0x21
    447c:	32 a1       	ldd	r19, Z+34	; 0x22
    447e:	43 a1       	ldd	r20, Z+35	; 0x23
    4480:	54 a1       	ldd	r21, Z+36	; 0x24
    4482:	8f 81       	ldd	r24, Y+7	; 0x07
    4484:	98 85       	ldd	r25, Y+8	; 0x08
    4486:	a9 85       	ldd	r26, Y+9	; 0x09
    4488:	ba 85       	ldd	r27, Y+10	; 0x0a
    448a:	82 2b       	or	r24, r18
    448c:	93 2b       	or	r25, r19
    448e:	a4 2b       	or	r26, r20
    4490:	b5 2b       	or	r27, r21
    4492:	eb 81       	ldd	r30, Y+3	; 0x03
    4494:	fc 81       	ldd	r31, Y+4	; 0x04
    4496:	81 a3       	std	Z+33, r24	; 0x21
    4498:	92 a3       	std	Z+34, r25	; 0x22
    449a:	a3 a3       	std	Z+35, r26	; 0x23
    449c:	b4 a3       	std	Z+36, r27	; 0x24
    449e:	2a c0       	rjmp	.+84     	; 0x44f4 <xTaskGenericNotify+0x12a>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    44a0:	eb 81       	ldd	r30, Y+3	; 0x03
    44a2:	fc 81       	ldd	r31, Y+4	; 0x04
    44a4:	81 a1       	ldd	r24, Z+33	; 0x21
    44a6:	92 a1       	ldd	r25, Z+34	; 0x22
    44a8:	a3 a1       	ldd	r26, Z+35	; 0x23
    44aa:	b4 a1       	ldd	r27, Z+36	; 0x24
    44ac:	01 96       	adiw	r24, 0x01	; 1
    44ae:	a1 1d       	adc	r26, r1
    44b0:	b1 1d       	adc	r27, r1
    44b2:	eb 81       	ldd	r30, Y+3	; 0x03
    44b4:	fc 81       	ldd	r31, Y+4	; 0x04
    44b6:	81 a3       	std	Z+33, r24	; 0x21
    44b8:	92 a3       	std	Z+34, r25	; 0x22
    44ba:	a3 a3       	std	Z+35, r26	; 0x23
    44bc:	b4 a3       	std	Z+36, r27	; 0x24
    44be:	1a c0       	rjmp	.+52     	; 0x44f4 <xTaskGenericNotify+0x12a>
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    44c0:	eb 81       	ldd	r30, Y+3	; 0x03
    44c2:	fc 81       	ldd	r31, Y+4	; 0x04
    44c4:	8f 81       	ldd	r24, Y+7	; 0x07
    44c6:	98 85       	ldd	r25, Y+8	; 0x08
    44c8:	a9 85       	ldd	r26, Y+9	; 0x09
    44ca:	ba 85       	ldd	r27, Y+10	; 0x0a
    44cc:	81 a3       	std	Z+33, r24	; 0x21
    44ce:	92 a3       	std	Z+34, r25	; 0x22
    44d0:	a3 a3       	std	Z+35, r26	; 0x23
    44d2:	b4 a3       	std	Z+36, r27	; 0x24
    44d4:	0f c0       	rjmp	.+30     	; 0x44f4 <xTaskGenericNotify+0x12a>
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    44d6:	89 81       	ldd	r24, Y+1	; 0x01
    44d8:	82 30       	cpi	r24, 0x02	; 2
    44da:	59 f0       	breq	.+22     	; 0x44f2 <xTaskGenericNotify+0x128>
					{
						pxTCB->ulNotifiedValue = ulValue;
    44dc:	eb 81       	ldd	r30, Y+3	; 0x03
    44de:	fc 81       	ldd	r31, Y+4	; 0x04
    44e0:	8f 81       	ldd	r24, Y+7	; 0x07
    44e2:	98 85       	ldd	r25, Y+8	; 0x08
    44e4:	a9 85       	ldd	r26, Y+9	; 0x09
    44e6:	ba 85       	ldd	r27, Y+10	; 0x0a
    44e8:	81 a3       	std	Z+33, r24	; 0x21
    44ea:	92 a3       	std	Z+34, r25	; 0x22
    44ec:	a3 a3       	std	Z+35, r26	; 0x23
    44ee:	b4 a3       	std	Z+36, r27	; 0x24
    44f0:	01 c0       	rjmp	.+2      	; 0x44f4 <xTaskGenericNotify+0x12a>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    44f2:	1a 82       	std	Y+2, r1	; 0x02

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    44f4:	89 81       	ldd	r24, Y+1	; 0x01
    44f6:	81 30       	cpi	r24, 0x01	; 1
    44f8:	b9 f5       	brne	.+110    	; 0x4568 <xTaskGenericNotify+0x19e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    44fa:	8b 81       	ldd	r24, Y+3	; 0x03
    44fc:	9c 81       	ldd	r25, Y+4	; 0x04
    44fe:	02 96       	adiw	r24, 0x02	; 2
    4500:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    4504:	eb 81       	ldd	r30, Y+3	; 0x03
    4506:	fc 81       	ldd	r31, Y+4	; 0x04
    4508:	96 89       	ldd	r25, Z+22	; 0x16
    450a:	80 91 ca 00 	lds	r24, 0x00CA
    450e:	89 17       	cp	r24, r25
    4510:	28 f4       	brcc	.+10     	; 0x451c <xTaskGenericNotify+0x152>
    4512:	eb 81       	ldd	r30, Y+3	; 0x03
    4514:	fc 81       	ldd	r31, Y+4	; 0x04
    4516:	86 89       	ldd	r24, Z+22	; 0x16
    4518:	80 93 ca 00 	sts	0x00CA, r24
    451c:	eb 81       	ldd	r30, Y+3	; 0x03
    451e:	fc 81       	ldd	r31, Y+4	; 0x04
    4520:	86 89       	ldd	r24, Z+22	; 0x16
    4522:	28 2f       	mov	r18, r24
    4524:	30 e0       	ldi	r19, 0x00	; 0
    4526:	c9 01       	movw	r24, r18
    4528:	88 0f       	add	r24, r24
    452a:	99 1f       	adc	r25, r25
    452c:	88 0f       	add	r24, r24
    452e:	99 1f       	adc	r25, r25
    4530:	88 0f       	add	r24, r24
    4532:	99 1f       	adc	r25, r25
    4534:	82 0f       	add	r24, r18
    4536:	93 1f       	adc	r25, r19
    4538:	ac 01       	movw	r20, r24
    453a:	4a 52       	subi	r20, 0x2A	; 42
    453c:	5f 4f       	sbci	r21, 0xFF	; 255
    453e:	8b 81       	ldd	r24, Y+3	; 0x03
    4540:	9c 81       	ldd	r25, Y+4	; 0x04
    4542:	9c 01       	movw	r18, r24
    4544:	2e 5f       	subi	r18, 0xFE	; 254
    4546:	3f 4f       	sbci	r19, 0xFF	; 255
    4548:	ca 01       	movw	r24, r20
    454a:	b9 01       	movw	r22, r18
    454c:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    4550:	eb 81       	ldd	r30, Y+3	; 0x03
    4552:	fc 81       	ldd	r31, Y+4	; 0x04
    4554:	96 89       	ldd	r25, Z+22	; 0x16
    4556:	e0 91 c4 00 	lds	r30, 0x00C4
    455a:	f0 91 c5 00 	lds	r31, 0x00C5
    455e:	86 89       	ldd	r24, Z+22	; 0x16
    4560:	89 17       	cp	r24, r25
    4562:	10 f4       	brcc	.+4      	; 0x4568 <xTaskGenericNotify+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
    4564:	0e 94 95 07 	call	0xf2a	; 0xf2a <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    4568:	0f 90       	pop	r0
    456a:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    456c:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    456e:	2f 96       	adiw	r28, 0x0f	; 15
    4570:	0f b6       	in	r0, 0x3f	; 63
    4572:	f8 94       	cli
    4574:	de bf       	out	0x3e, r29	; 62
    4576:	0f be       	out	0x3f, r0	; 63
    4578:	cd bf       	out	0x3d, r28	; 61
    457a:	cf 91       	pop	r28
    457c:	df 91       	pop	r29
    457e:	1f 91       	pop	r17
    4580:	0f 91       	pop	r16
    4582:	08 95       	ret

00004584 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
    4584:	ef 92       	push	r14
    4586:	ff 92       	push	r15
    4588:	0f 93       	push	r16
    458a:	1f 93       	push	r17
    458c:	df 93       	push	r29
    458e:	cf 93       	push	r28
    4590:	cd b7       	in	r28, 0x3d	; 61
    4592:	de b7       	in	r29, 0x3e	; 62
    4594:	62 97       	sbiw	r28, 0x12	; 18
    4596:	0f b6       	in	r0, 0x3f	; 63
    4598:	f8 94       	cli
    459a:	de bf       	out	0x3e, r29	; 62
    459c:	0f be       	out	0x3f, r0	; 63
    459e:	cd bf       	out	0x3d, r28	; 61
    45a0:	9f 83       	std	Y+7, r25	; 0x07
    45a2:	8e 83       	std	Y+6, r24	; 0x06
    45a4:	48 87       	std	Y+8, r20	; 0x08
    45a6:	59 87       	std	Y+9, r21	; 0x09
    45a8:	6a 87       	std	Y+10, r22	; 0x0a
    45aa:	7b 87       	std	Y+11, r23	; 0x0b
    45ac:	2c 87       	std	Y+12, r18	; 0x0c
    45ae:	1e 87       	std	Y+14, r17	; 0x0e
    45b0:	0d 87       	std	Y+13, r16	; 0x0d
    45b2:	f8 8a       	std	Y+16, r15	; 0x10
    45b4:	ef 86       	std	Y+15, r14	; 0x0f
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    45b6:	81 e0       	ldi	r24, 0x01	; 1
    45b8:	8a 83       	std	Y+2, r24	; 0x02
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
    45ba:	8e 81       	ldd	r24, Y+6	; 0x06
    45bc:	9f 81       	ldd	r25, Y+7	; 0x07
    45be:	9d 83       	std	Y+5, r25	; 0x05
    45c0:	8c 83       	std	Y+4, r24	; 0x04

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    45c2:	19 82       	std	Y+1, r1	; 0x01
		{
			if( pulPreviousNotificationValue != NULL )
    45c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    45c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    45c8:	00 97       	sbiw	r24, 0x00	; 0
    45ca:	61 f0       	breq	.+24     	; 0x45e4 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    45cc:	ec 81       	ldd	r30, Y+4	; 0x04
    45ce:	fd 81       	ldd	r31, Y+5	; 0x05
    45d0:	81 a1       	ldd	r24, Z+33	; 0x21
    45d2:	92 a1       	ldd	r25, Z+34	; 0x22
    45d4:	a3 a1       	ldd	r26, Z+35	; 0x23
    45d6:	b4 a1       	ldd	r27, Z+36	; 0x24
    45d8:	ed 85       	ldd	r30, Y+13	; 0x0d
    45da:	fe 85       	ldd	r31, Y+14	; 0x0e
    45dc:	80 83       	st	Z, r24
    45de:	91 83       	std	Z+1, r25	; 0x01
    45e0:	a2 83       	std	Z+2, r26	; 0x02
    45e2:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    45e4:	ec 81       	ldd	r30, Y+4	; 0x04
    45e6:	fd 81       	ldd	r31, Y+5	; 0x05
    45e8:	85 a1       	ldd	r24, Z+37	; 0x25
    45ea:	8b 83       	std	Y+3, r24	; 0x03
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    45ec:	ec 81       	ldd	r30, Y+4	; 0x04
    45ee:	fd 81       	ldd	r31, Y+5	; 0x05
    45f0:	82 e0       	ldi	r24, 0x02	; 2
    45f2:	85 a3       	std	Z+37, r24	; 0x25

			switch( eAction )
    45f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    45f6:	28 2f       	mov	r18, r24
    45f8:	30 e0       	ldi	r19, 0x00	; 0
    45fa:	3a 8b       	std	Y+18, r19	; 0x12
    45fc:	29 8b       	std	Y+17, r18	; 0x11
    45fe:	89 89       	ldd	r24, Y+17	; 0x11
    4600:	9a 89       	ldd	r25, Y+18	; 0x12
    4602:	82 30       	cpi	r24, 0x02	; 2
    4604:	91 05       	cpc	r25, r1
    4606:	59 f1       	breq	.+86     	; 0x465e <xTaskGenericNotifyFromISR+0xda>
    4608:	29 89       	ldd	r18, Y+17	; 0x11
    460a:	3a 89       	ldd	r19, Y+18	; 0x12
    460c:	23 30       	cpi	r18, 0x03	; 3
    460e:	31 05       	cpc	r19, r1
    4610:	34 f4       	brge	.+12     	; 0x461e <xTaskGenericNotifyFromISR+0x9a>
    4612:	89 89       	ldd	r24, Y+17	; 0x11
    4614:	9a 89       	ldd	r25, Y+18	; 0x12
    4616:	81 30       	cpi	r24, 0x01	; 1
    4618:	91 05       	cpc	r25, r1
    461a:	61 f0       	breq	.+24     	; 0x4634 <xTaskGenericNotifyFromISR+0xb0>
    461c:	4a c0       	rjmp	.+148    	; 0x46b2 <xTaskGenericNotifyFromISR+0x12e>
    461e:	29 89       	ldd	r18, Y+17	; 0x11
    4620:	3a 89       	ldd	r19, Y+18	; 0x12
    4622:	23 30       	cpi	r18, 0x03	; 3
    4624:	31 05       	cpc	r19, r1
    4626:	59 f1       	breq	.+86     	; 0x467e <xTaskGenericNotifyFromISR+0xfa>
    4628:	89 89       	ldd	r24, Y+17	; 0x11
    462a:	9a 89       	ldd	r25, Y+18	; 0x12
    462c:	84 30       	cpi	r24, 0x04	; 4
    462e:	91 05       	cpc	r25, r1
    4630:	89 f1       	breq	.+98     	; 0x4694 <xTaskGenericNotifyFromISR+0x110>
    4632:	3f c0       	rjmp	.+126    	; 0x46b2 <xTaskGenericNotifyFromISR+0x12e>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    4634:	ec 81       	ldd	r30, Y+4	; 0x04
    4636:	fd 81       	ldd	r31, Y+5	; 0x05
    4638:	21 a1       	ldd	r18, Z+33	; 0x21
    463a:	32 a1       	ldd	r19, Z+34	; 0x22
    463c:	43 a1       	ldd	r20, Z+35	; 0x23
    463e:	54 a1       	ldd	r21, Z+36	; 0x24
    4640:	88 85       	ldd	r24, Y+8	; 0x08
    4642:	99 85       	ldd	r25, Y+9	; 0x09
    4644:	aa 85       	ldd	r26, Y+10	; 0x0a
    4646:	bb 85       	ldd	r27, Y+11	; 0x0b
    4648:	82 2b       	or	r24, r18
    464a:	93 2b       	or	r25, r19
    464c:	a4 2b       	or	r26, r20
    464e:	b5 2b       	or	r27, r21
    4650:	ec 81       	ldd	r30, Y+4	; 0x04
    4652:	fd 81       	ldd	r31, Y+5	; 0x05
    4654:	81 a3       	std	Z+33, r24	; 0x21
    4656:	92 a3       	std	Z+34, r25	; 0x22
    4658:	a3 a3       	std	Z+35, r26	; 0x23
    465a:	b4 a3       	std	Z+36, r27	; 0x24
    465c:	2a c0       	rjmp	.+84     	; 0x46b2 <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    465e:	ec 81       	ldd	r30, Y+4	; 0x04
    4660:	fd 81       	ldd	r31, Y+5	; 0x05
    4662:	81 a1       	ldd	r24, Z+33	; 0x21
    4664:	92 a1       	ldd	r25, Z+34	; 0x22
    4666:	a3 a1       	ldd	r26, Z+35	; 0x23
    4668:	b4 a1       	ldd	r27, Z+36	; 0x24
    466a:	01 96       	adiw	r24, 0x01	; 1
    466c:	a1 1d       	adc	r26, r1
    466e:	b1 1d       	adc	r27, r1
    4670:	ec 81       	ldd	r30, Y+4	; 0x04
    4672:	fd 81       	ldd	r31, Y+5	; 0x05
    4674:	81 a3       	std	Z+33, r24	; 0x21
    4676:	92 a3       	std	Z+34, r25	; 0x22
    4678:	a3 a3       	std	Z+35, r26	; 0x23
    467a:	b4 a3       	std	Z+36, r27	; 0x24
    467c:	1a c0       	rjmp	.+52     	; 0x46b2 <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    467e:	ec 81       	ldd	r30, Y+4	; 0x04
    4680:	fd 81       	ldd	r31, Y+5	; 0x05
    4682:	88 85       	ldd	r24, Y+8	; 0x08
    4684:	99 85       	ldd	r25, Y+9	; 0x09
    4686:	aa 85       	ldd	r26, Y+10	; 0x0a
    4688:	bb 85       	ldd	r27, Y+11	; 0x0b
    468a:	81 a3       	std	Z+33, r24	; 0x21
    468c:	92 a3       	std	Z+34, r25	; 0x22
    468e:	a3 a3       	std	Z+35, r26	; 0x23
    4690:	b4 a3       	std	Z+36, r27	; 0x24
    4692:	0f c0       	rjmp	.+30     	; 0x46b2 <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    4694:	8b 81       	ldd	r24, Y+3	; 0x03
    4696:	82 30       	cpi	r24, 0x02	; 2
    4698:	59 f0       	breq	.+22     	; 0x46b0 <xTaskGenericNotifyFromISR+0x12c>
					{
						pxTCB->ulNotifiedValue = ulValue;
    469a:	ec 81       	ldd	r30, Y+4	; 0x04
    469c:	fd 81       	ldd	r31, Y+5	; 0x05
    469e:	88 85       	ldd	r24, Y+8	; 0x08
    46a0:	99 85       	ldd	r25, Y+9	; 0x09
    46a2:	aa 85       	ldd	r26, Y+10	; 0x0a
    46a4:	bb 85       	ldd	r27, Y+11	; 0x0b
    46a6:	81 a3       	std	Z+33, r24	; 0x21
    46a8:	92 a3       	std	Z+34, r25	; 0x22
    46aa:	a3 a3       	std	Z+35, r26	; 0x23
    46ac:	b4 a3       	std	Z+36, r27	; 0x24
    46ae:	01 c0       	rjmp	.+2      	; 0x46b2 <xTaskGenericNotifyFromISR+0x12e>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    46b0:	1a 82       	std	Y+2, r1	; 0x02

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    46b2:	8b 81       	ldd	r24, Y+3	; 0x03
    46b4:	81 30       	cpi	r24, 0x01	; 1
    46b6:	09 f0       	breq	.+2      	; 0x46ba <xTaskGenericNotifyFromISR+0x136>
    46b8:	4f c0       	rjmp	.+158    	; 0x4758 <xTaskGenericNotifyFromISR+0x1d4>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    46ba:	80 91 d5 00 	lds	r24, 0x00D5
    46be:	88 23       	and	r24, r24
    46c0:	61 f5       	brne	.+88     	; 0x471a <xTaskGenericNotifyFromISR+0x196>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    46c2:	8c 81       	ldd	r24, Y+4	; 0x04
    46c4:	9d 81       	ldd	r25, Y+5	; 0x05
    46c6:	02 96       	adiw	r24, 0x02	; 2
    46c8:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    46cc:	ec 81       	ldd	r30, Y+4	; 0x04
    46ce:	fd 81       	ldd	r31, Y+5	; 0x05
    46d0:	96 89       	ldd	r25, Z+22	; 0x16
    46d2:	80 91 ca 00 	lds	r24, 0x00CA
    46d6:	89 17       	cp	r24, r25
    46d8:	28 f4       	brcc	.+10     	; 0x46e4 <xTaskGenericNotifyFromISR+0x160>
    46da:	ec 81       	ldd	r30, Y+4	; 0x04
    46dc:	fd 81       	ldd	r31, Y+5	; 0x05
    46de:	86 89       	ldd	r24, Z+22	; 0x16
    46e0:	80 93 ca 00 	sts	0x00CA, r24
    46e4:	ec 81       	ldd	r30, Y+4	; 0x04
    46e6:	fd 81       	ldd	r31, Y+5	; 0x05
    46e8:	86 89       	ldd	r24, Z+22	; 0x16
    46ea:	28 2f       	mov	r18, r24
    46ec:	30 e0       	ldi	r19, 0x00	; 0
    46ee:	c9 01       	movw	r24, r18
    46f0:	88 0f       	add	r24, r24
    46f2:	99 1f       	adc	r25, r25
    46f4:	88 0f       	add	r24, r24
    46f6:	99 1f       	adc	r25, r25
    46f8:	88 0f       	add	r24, r24
    46fa:	99 1f       	adc	r25, r25
    46fc:	82 0f       	add	r24, r18
    46fe:	93 1f       	adc	r25, r19
    4700:	ac 01       	movw	r20, r24
    4702:	4a 52       	subi	r20, 0x2A	; 42
    4704:	5f 4f       	sbci	r21, 0xFF	; 255
    4706:	8c 81       	ldd	r24, Y+4	; 0x04
    4708:	9d 81       	ldd	r25, Y+5	; 0x05
    470a:	9c 01       	movw	r18, r24
    470c:	2e 5f       	subi	r18, 0xFE	; 254
    470e:	3f 4f       	sbci	r19, 0xFF	; 255
    4710:	ca 01       	movw	r24, r20
    4712:	b9 01       	movw	r22, r18
    4714:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <vListInsertEnd>
    4718:	0a c0       	rjmp	.+20     	; 0x472e <xTaskGenericNotifyFromISR+0x1aa>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    471a:	8c 81       	ldd	r24, Y+4	; 0x04
    471c:	9d 81       	ldd	r25, Y+5	; 0x05
    471e:	9c 01       	movw	r18, r24
    4720:	24 5f       	subi	r18, 0xF4	; 244
    4722:	3f 4f       	sbci	r19, 0xFF	; 255
    4724:	80 e1       	ldi	r24, 0x10	; 16
    4726:	91 e0       	ldi	r25, 0x01	; 1
    4728:	b9 01       	movw	r22, r18
    472a:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    472e:	ec 81       	ldd	r30, Y+4	; 0x04
    4730:	fd 81       	ldd	r31, Y+5	; 0x05
    4732:	96 89       	ldd	r25, Z+22	; 0x16
    4734:	e0 91 c4 00 	lds	r30, 0x00C4
    4738:	f0 91 c5 00 	lds	r31, 0x00C5
    473c:	86 89       	ldd	r24, Z+22	; 0x16
    473e:	89 17       	cp	r24, r25
    4740:	58 f4       	brcc	.+22     	; 0x4758 <xTaskGenericNotifyFromISR+0x1d4>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    4742:	8f 85       	ldd	r24, Y+15	; 0x0f
    4744:	98 89       	ldd	r25, Y+16	; 0x10
    4746:	00 97       	sbiw	r24, 0x00	; 0
    4748:	21 f0       	breq	.+8      	; 0x4752 <xTaskGenericNotifyFromISR+0x1ce>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    474a:	ef 85       	ldd	r30, Y+15	; 0x0f
    474c:	f8 89       	ldd	r31, Y+16	; 0x10
    474e:	81 e0       	ldi	r24, 0x01	; 1
    4750:	80 83       	st	Z, r24
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
    4752:	81 e0       	ldi	r24, 0x01	; 1
    4754:	80 93 ce 00 	sts	0x00CE, r24
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
    4758:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    475a:	62 96       	adiw	r28, 0x12	; 18
    475c:	0f b6       	in	r0, 0x3f	; 63
    475e:	f8 94       	cli
    4760:	de bf       	out	0x3e, r29	; 62
    4762:	0f be       	out	0x3f, r0	; 63
    4764:	cd bf       	out	0x3d, r28	; 61
    4766:	cf 91       	pop	r28
    4768:	df 91       	pop	r29
    476a:	1f 91       	pop	r17
    476c:	0f 91       	pop	r16
    476e:	ff 90       	pop	r15
    4770:	ef 90       	pop	r14
    4772:	08 95       	ret

00004774 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    4774:	df 93       	push	r29
    4776:	cf 93       	push	r28
    4778:	cd b7       	in	r28, 0x3d	; 61
    477a:	de b7       	in	r29, 0x3e	; 62
    477c:	28 97       	sbiw	r28, 0x08	; 8
    477e:	0f b6       	in	r0, 0x3f	; 63
    4780:	f8 94       	cli
    4782:	de bf       	out	0x3e, r29	; 62
    4784:	0f be       	out	0x3f, r0	; 63
    4786:	cd bf       	out	0x3d, r28	; 61
    4788:	9e 83       	std	Y+6, r25	; 0x06
    478a:	8d 83       	std	Y+5, r24	; 0x05
    478c:	78 87       	std	Y+8, r23	; 0x08
    478e:	6f 83       	std	Y+7, r22	; 0x07
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
    4790:	8d 81       	ldd	r24, Y+5	; 0x05
    4792:	9e 81       	ldd	r25, Y+6	; 0x06
    4794:	9c 83       	std	Y+4, r25	; 0x04
    4796:	8b 83       	std	Y+3, r24	; 0x03

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4798:	19 82       	std	Y+1, r1	; 0x01
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    479a:	eb 81       	ldd	r30, Y+3	; 0x03
    479c:	fc 81       	ldd	r31, Y+4	; 0x04
    479e:	85 a1       	ldd	r24, Z+37	; 0x25
    47a0:	8a 83       	std	Y+2, r24	; 0x02
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    47a2:	eb 81       	ldd	r30, Y+3	; 0x03
    47a4:	fc 81       	ldd	r31, Y+4	; 0x04
    47a6:	82 e0       	ldi	r24, 0x02	; 2
    47a8:	85 a3       	std	Z+37, r24	; 0x25

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    47aa:	eb 81       	ldd	r30, Y+3	; 0x03
    47ac:	fc 81       	ldd	r31, Y+4	; 0x04
    47ae:	81 a1       	ldd	r24, Z+33	; 0x21
    47b0:	92 a1       	ldd	r25, Z+34	; 0x22
    47b2:	a3 a1       	ldd	r26, Z+35	; 0x23
    47b4:	b4 a1       	ldd	r27, Z+36	; 0x24
    47b6:	01 96       	adiw	r24, 0x01	; 1
    47b8:	a1 1d       	adc	r26, r1
    47ba:	b1 1d       	adc	r27, r1
    47bc:	eb 81       	ldd	r30, Y+3	; 0x03
    47be:	fc 81       	ldd	r31, Y+4	; 0x04
    47c0:	81 a3       	std	Z+33, r24	; 0x21
    47c2:	92 a3       	std	Z+34, r25	; 0x22
    47c4:	a3 a3       	std	Z+35, r26	; 0x23
    47c6:	b4 a3       	std	Z+36, r27	; 0x24

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    47c8:	8a 81       	ldd	r24, Y+2	; 0x02
    47ca:	81 30       	cpi	r24, 0x01	; 1
    47cc:	09 f0       	breq	.+2      	; 0x47d0 <vTaskNotifyGiveFromISR+0x5c>
    47ce:	4f c0       	rjmp	.+158    	; 0x486e <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    47d0:	80 91 d5 00 	lds	r24, 0x00D5
    47d4:	88 23       	and	r24, r24
    47d6:	61 f5       	brne	.+88     	; 0x4830 <vTaskNotifyGiveFromISR+0xbc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    47d8:	8b 81       	ldd	r24, Y+3	; 0x03
    47da:	9c 81       	ldd	r25, Y+4	; 0x04
    47dc:	02 96       	adiw	r24, 0x02	; 2
    47de:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    47e2:	eb 81       	ldd	r30, Y+3	; 0x03
    47e4:	fc 81       	ldd	r31, Y+4	; 0x04
    47e6:	96 89       	ldd	r25, Z+22	; 0x16
    47e8:	80 91 ca 00 	lds	r24, 0x00CA
    47ec:	89 17       	cp	r24, r25
    47ee:	28 f4       	brcc	.+10     	; 0x47fa <vTaskNotifyGiveFromISR+0x86>
    47f0:	eb 81       	ldd	r30, Y+3	; 0x03
    47f2:	fc 81       	ldd	r31, Y+4	; 0x04
    47f4:	86 89       	ldd	r24, Z+22	; 0x16
    47f6:	80 93 ca 00 	sts	0x00CA, r24
    47fa:	eb 81       	ldd	r30, Y+3	; 0x03
    47fc:	fc 81       	ldd	r31, Y+4	; 0x04
    47fe:	86 89       	ldd	r24, Z+22	; 0x16
    4800:	28 2f       	mov	r18, r24
    4802:	30 e0       	ldi	r19, 0x00	; 0
    4804:	c9 01       	movw	r24, r18
    4806:	88 0f       	add	r24, r24
    4808:	99 1f       	adc	r25, r25
    480a:	88 0f       	add	r24, r24
    480c:	99 1f       	adc	r25, r25
    480e:	88 0f       	add	r24, r24
    4810:	99 1f       	adc	r25, r25
    4812:	82 0f       	add	r24, r18
    4814:	93 1f       	adc	r25, r19
    4816:	ac 01       	movw	r20, r24
    4818:	4a 52       	subi	r20, 0x2A	; 42
    481a:	5f 4f       	sbci	r21, 0xFF	; 255
    481c:	8b 81       	ldd	r24, Y+3	; 0x03
    481e:	9c 81       	ldd	r25, Y+4	; 0x04
    4820:	9c 01       	movw	r18, r24
    4822:	2e 5f       	subi	r18, 0xFE	; 254
    4824:	3f 4f       	sbci	r19, 0xFF	; 255
    4826:	ca 01       	movw	r24, r20
    4828:	b9 01       	movw	r22, r18
    482a:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <vListInsertEnd>
    482e:	0a c0       	rjmp	.+20     	; 0x4844 <vTaskNotifyGiveFromISR+0xd0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4830:	8b 81       	ldd	r24, Y+3	; 0x03
    4832:	9c 81       	ldd	r25, Y+4	; 0x04
    4834:	9c 01       	movw	r18, r24
    4836:	24 5f       	subi	r18, 0xF4	; 244
    4838:	3f 4f       	sbci	r19, 0xFF	; 255
    483a:	80 e1       	ldi	r24, 0x10	; 16
    483c:	91 e0       	ldi	r25, 0x01	; 1
    483e:	b9 01       	movw	r22, r18
    4840:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    4844:	eb 81       	ldd	r30, Y+3	; 0x03
    4846:	fc 81       	ldd	r31, Y+4	; 0x04
    4848:	96 89       	ldd	r25, Z+22	; 0x16
    484a:	e0 91 c4 00 	lds	r30, 0x00C4
    484e:	f0 91 c5 00 	lds	r31, 0x00C5
    4852:	86 89       	ldd	r24, Z+22	; 0x16
    4854:	89 17       	cp	r24, r25
    4856:	58 f4       	brcc	.+22     	; 0x486e <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    4858:	8f 81       	ldd	r24, Y+7	; 0x07
    485a:	98 85       	ldd	r25, Y+8	; 0x08
    485c:	00 97       	sbiw	r24, 0x00	; 0
    485e:	21 f0       	breq	.+8      	; 0x4868 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    4860:	ef 81       	ldd	r30, Y+7	; 0x07
    4862:	f8 85       	ldd	r31, Y+8	; 0x08
    4864:	81 e0       	ldi	r24, 0x01	; 1
    4866:	80 83       	st	Z, r24
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
    4868:	81 e0       	ldi	r24, 0x01	; 1
    486a:	80 93 ce 00 	sts	0x00CE, r24
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    486e:	28 96       	adiw	r28, 0x08	; 8
    4870:	0f b6       	in	r0, 0x3f	; 63
    4872:	f8 94       	cli
    4874:	de bf       	out	0x3e, r29	; 62
    4876:	0f be       	out	0x3f, r0	; 63
    4878:	cd bf       	out	0x3d, r28	; 61
    487a:	cf 91       	pop	r28
    487c:	df 91       	pop	r29
    487e:	08 95       	ret

00004880 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
    4880:	df 93       	push	r29
    4882:	cf 93       	push	r28
    4884:	cd b7       	in	r28, 0x3d	; 61
    4886:	de b7       	in	r29, 0x3e	; 62
    4888:	27 97       	sbiw	r28, 0x07	; 7
    488a:	0f b6       	in	r0, 0x3f	; 63
    488c:	f8 94       	cli
    488e:	de bf       	out	0x3e, r29	; 62
    4890:	0f be       	out	0x3f, r0	; 63
    4892:	cd bf       	out	0x3d, r28	; 61
    4894:	9d 83       	std	Y+5, r25	; 0x05
    4896:	8c 83       	std	Y+4, r24	; 0x04
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
    4898:	8c 81       	ldd	r24, Y+4	; 0x04
    489a:	9d 81       	ldd	r25, Y+5	; 0x05
    489c:	00 97       	sbiw	r24, 0x00	; 0
    489e:	39 f4       	brne	.+14     	; 0x48ae <xTaskNotifyStateClear+0x2e>
    48a0:	80 91 c4 00 	lds	r24, 0x00C4
    48a4:	90 91 c5 00 	lds	r25, 0x00C5
    48a8:	9f 83       	std	Y+7, r25	; 0x07
    48aa:	8e 83       	std	Y+6, r24	; 0x06
    48ac:	04 c0       	rjmp	.+8      	; 0x48b6 <xTaskNotifyStateClear+0x36>
    48ae:	8c 81       	ldd	r24, Y+4	; 0x04
    48b0:	9d 81       	ldd	r25, Y+5	; 0x05
    48b2:	9f 83       	std	Y+7, r25	; 0x07
    48b4:	8e 83       	std	Y+6, r24	; 0x06
    48b6:	8e 81       	ldd	r24, Y+6	; 0x06
    48b8:	9f 81       	ldd	r25, Y+7	; 0x07
    48ba:	9b 83       	std	Y+3, r25	; 0x03
    48bc:	8a 83       	std	Y+2, r24	; 0x02

		taskENTER_CRITICAL();
    48be:	0f b6       	in	r0, 0x3f	; 63
    48c0:	f8 94       	cli
    48c2:	0f 92       	push	r0
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    48c4:	ea 81       	ldd	r30, Y+2	; 0x02
    48c6:	fb 81       	ldd	r31, Y+3	; 0x03
    48c8:	85 a1       	ldd	r24, Z+37	; 0x25
    48ca:	82 30       	cpi	r24, 0x02	; 2
    48cc:	31 f4       	brne	.+12     	; 0x48da <xTaskNotifyStateClear+0x5a>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    48ce:	ea 81       	ldd	r30, Y+2	; 0x02
    48d0:	fb 81       	ldd	r31, Y+3	; 0x03
    48d2:	15 a2       	std	Z+37, r1	; 0x25
				xReturn = pdPASS;
    48d4:	81 e0       	ldi	r24, 0x01	; 1
    48d6:	89 83       	std	Y+1, r24	; 0x01
    48d8:	01 c0       	rjmp	.+2      	; 0x48dc <xTaskNotifyStateClear+0x5c>
			}
			else
			{
				xReturn = pdFAIL;
    48da:	19 82       	std	Y+1, r1	; 0x01
			}
		}
		taskEXIT_CRITICAL();
    48dc:	0f 90       	pop	r0
    48de:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    48e0:	89 81       	ldd	r24, Y+1	; 0x01
	}
    48e2:	27 96       	adiw	r28, 0x07	; 7
    48e4:	0f b6       	in	r0, 0x3f	; 63
    48e6:	f8 94       	cli
    48e8:	de bf       	out	0x3e, r29	; 62
    48ea:	0f be       	out	0x3f, r0	; 63
    48ec:	cd bf       	out	0x3d, r28	; 61
    48ee:	cf 91       	pop	r28
    48f0:	df 91       	pop	r29
    48f2:	08 95       	ret

000048f4 <ulTaskNotifyValueClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
	{
    48f4:	df 93       	push	r29
    48f6:	cf 93       	push	r28
    48f8:	cd b7       	in	r28, 0x3d	; 61
    48fa:	de b7       	in	r29, 0x3e	; 62
    48fc:	2e 97       	sbiw	r28, 0x0e	; 14
    48fe:	0f b6       	in	r0, 0x3f	; 63
    4900:	f8 94       	cli
    4902:	de bf       	out	0x3e, r29	; 62
    4904:	0f be       	out	0x3f, r0	; 63
    4906:	cd bf       	out	0x3d, r28	; 61
    4908:	98 87       	std	Y+8, r25	; 0x08
    490a:	8f 83       	std	Y+7, r24	; 0x07
    490c:	49 87       	std	Y+9, r20	; 0x09
    490e:	5a 87       	std	Y+10, r21	; 0x0a
    4910:	6b 87       	std	Y+11, r22	; 0x0b
    4912:	7c 87       	std	Y+12, r23	; 0x0c
	TCB_t *pxTCB;
	uint32_t ulReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
    4914:	8f 81       	ldd	r24, Y+7	; 0x07
    4916:	98 85       	ldd	r25, Y+8	; 0x08
    4918:	00 97       	sbiw	r24, 0x00	; 0
    491a:	39 f4       	brne	.+14     	; 0x492a <ulTaskNotifyValueClear+0x36>
    491c:	80 91 c4 00 	lds	r24, 0x00C4
    4920:	90 91 c5 00 	lds	r25, 0x00C5
    4924:	9e 87       	std	Y+14, r25	; 0x0e
    4926:	8d 87       	std	Y+13, r24	; 0x0d
    4928:	04 c0       	rjmp	.+8      	; 0x4932 <ulTaskNotifyValueClear+0x3e>
    492a:	8f 81       	ldd	r24, Y+7	; 0x07
    492c:	98 85       	ldd	r25, Y+8	; 0x08
    492e:	9e 87       	std	Y+14, r25	; 0x0e
    4930:	8d 87       	std	Y+13, r24	; 0x0d
    4932:	8d 85       	ldd	r24, Y+13	; 0x0d
    4934:	9e 85       	ldd	r25, Y+14	; 0x0e
    4936:	9e 83       	std	Y+6, r25	; 0x06
    4938:	8d 83       	std	Y+5, r24	; 0x05

		taskENTER_CRITICAL();
    493a:	0f b6       	in	r0, 0x3f	; 63
    493c:	f8 94       	cli
    493e:	0f 92       	push	r0
		{
			/* Return the notification as it was before the bits were cleared,
			then clear the bit mask. */
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    4940:	e0 91 c4 00 	lds	r30, 0x00C4
    4944:	f0 91 c5 00 	lds	r31, 0x00C5
    4948:	81 a1       	ldd	r24, Z+33	; 0x21
    494a:	92 a1       	ldd	r25, Z+34	; 0x22
    494c:	a3 a1       	ldd	r26, Z+35	; 0x23
    494e:	b4 a1       	ldd	r27, Z+36	; 0x24
    4950:	89 83       	std	Y+1, r24	; 0x01
    4952:	9a 83       	std	Y+2, r25	; 0x02
    4954:	ab 83       	std	Y+3, r26	; 0x03
    4956:	bc 83       	std	Y+4, r27	; 0x04
			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
    4958:	ed 81       	ldd	r30, Y+5	; 0x05
    495a:	fe 81       	ldd	r31, Y+6	; 0x06
    495c:	21 a1       	ldd	r18, Z+33	; 0x21
    495e:	32 a1       	ldd	r19, Z+34	; 0x22
    4960:	43 a1       	ldd	r20, Z+35	; 0x23
    4962:	54 a1       	ldd	r21, Z+36	; 0x24
    4964:	89 85       	ldd	r24, Y+9	; 0x09
    4966:	9a 85       	ldd	r25, Y+10	; 0x0a
    4968:	ab 85       	ldd	r26, Y+11	; 0x0b
    496a:	bc 85       	ldd	r27, Y+12	; 0x0c
    496c:	80 95       	com	r24
    496e:	90 95       	com	r25
    4970:	a0 95       	com	r26
    4972:	b0 95       	com	r27
    4974:	82 23       	and	r24, r18
    4976:	93 23       	and	r25, r19
    4978:	a4 23       	and	r26, r20
    497a:	b5 23       	and	r27, r21
    497c:	ed 81       	ldd	r30, Y+5	; 0x05
    497e:	fe 81       	ldd	r31, Y+6	; 0x06
    4980:	81 a3       	std	Z+33, r24	; 0x21
    4982:	92 a3       	std	Z+34, r25	; 0x22
    4984:	a3 a3       	std	Z+35, r26	; 0x23
    4986:	b4 a3       	std	Z+36, r27	; 0x24
		}
		taskEXIT_CRITICAL();
    4988:	0f 90       	pop	r0
    498a:	0f be       	out	0x3f, r0	; 63

		return ulReturn;
    498c:	89 81       	ldd	r24, Y+1	; 0x01
    498e:	9a 81       	ldd	r25, Y+2	; 0x02
    4990:	ab 81       	ldd	r26, Y+3	; 0x03
    4992:	bc 81       	ldd	r27, Y+4	; 0x04
	}
    4994:	bc 01       	movw	r22, r24
    4996:	cd 01       	movw	r24, r26
    4998:	2e 96       	adiw	r28, 0x0e	; 14
    499a:	0f b6       	in	r0, 0x3f	; 63
    499c:	f8 94       	cli
    499e:	de bf       	out	0x3e, r29	; 62
    49a0:	0f be       	out	0x3f, r0	; 63
    49a2:	cd bf       	out	0x3d, r28	; 61
    49a4:	cf 91       	pop	r28
    49a6:	df 91       	pop	r29
    49a8:	08 95       	ret

000049aa <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    49aa:	df 93       	push	r29
    49ac:	cf 93       	push	r28
    49ae:	cd b7       	in	r28, 0x3d	; 61
    49b0:	de b7       	in	r29, 0x3e	; 62
    49b2:	27 97       	sbiw	r28, 0x07	; 7
    49b4:	0f b6       	in	r0, 0x3f	; 63
    49b6:	f8 94       	cli
    49b8:	de bf       	out	0x3e, r29	; 62
    49ba:	0f be       	out	0x3f, r0	; 63
    49bc:	cd bf       	out	0x3d, r28	; 61
    49be:	9e 83       	std	Y+6, r25	; 0x06
    49c0:	8d 83       	std	Y+5, r24	; 0x05
    49c2:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    49c4:	80 91 c8 00 	lds	r24, 0x00C8
    49c8:	90 91 c9 00 	lds	r25, 0x00C9
    49cc:	9a 83       	std	Y+2, r25	; 0x02
    49ce:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    49d0:	80 91 c4 00 	lds	r24, 0x00C4
    49d4:	90 91 c5 00 	lds	r25, 0x00C5
    49d8:	02 96       	adiw	r24, 0x02	; 2
    49da:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
    49de:	29 81       	ldd	r18, Y+1	; 0x01
    49e0:	3a 81       	ldd	r19, Y+2	; 0x02
    49e2:	8d 81       	ldd	r24, Y+5	; 0x05
    49e4:	9e 81       	ldd	r25, Y+6	; 0x06
    49e6:	82 0f       	add	r24, r18
    49e8:	93 1f       	adc	r25, r19
    49ea:	9c 83       	std	Y+4, r25	; 0x04
    49ec:	8b 83       	std	Y+3, r24	; 0x03

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    49ee:	e0 91 c4 00 	lds	r30, 0x00C4
    49f2:	f0 91 c5 00 	lds	r31, 0x00C5
    49f6:	8b 81       	ldd	r24, Y+3	; 0x03
    49f8:	9c 81       	ldd	r25, Y+4	; 0x04
    49fa:	93 83       	std	Z+3, r25	; 0x03
    49fc:	82 83       	std	Z+2, r24	; 0x02

		if( xTimeToWake < xConstTickCount )
    49fe:	2b 81       	ldd	r18, Y+3	; 0x03
    4a00:	3c 81       	ldd	r19, Y+4	; 0x04
    4a02:	89 81       	ldd	r24, Y+1	; 0x01
    4a04:	9a 81       	ldd	r25, Y+2	; 0x02
    4a06:	28 17       	cp	r18, r24
    4a08:	39 07       	cpc	r19, r25
    4a0a:	70 f4       	brcc	.+28     	; 0x4a28 <prvAddCurrentTaskToDelayedList+0x7e>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    4a0c:	80 91 0e 01 	lds	r24, 0x010E
    4a10:	90 91 0f 01 	lds	r25, 0x010F
    4a14:	20 91 c4 00 	lds	r18, 0x00C4
    4a18:	30 91 c5 00 	lds	r19, 0x00C5
    4a1c:	2e 5f       	subi	r18, 0xFE	; 254
    4a1e:	3f 4f       	sbci	r19, 0xFF	; 255
    4a20:	b9 01       	movw	r22, r18
    4a22:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <vListInsert>
    4a26:	1e c0       	rjmp	.+60     	; 0x4a64 <prvAddCurrentTaskToDelayedList+0xba>
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    4a28:	40 91 0c 01 	lds	r20, 0x010C
    4a2c:	50 91 0d 01 	lds	r21, 0x010D
    4a30:	80 91 c4 00 	lds	r24, 0x00C4
    4a34:	90 91 c5 00 	lds	r25, 0x00C5
    4a38:	9c 01       	movw	r18, r24
    4a3a:	2e 5f       	subi	r18, 0xFE	; 254
    4a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a3e:	ca 01       	movw	r24, r20
    4a40:	b9 01       	movw	r22, r18
    4a42:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
    4a46:	20 91 d1 00 	lds	r18, 0x00D1
    4a4a:	30 91 d2 00 	lds	r19, 0x00D2
    4a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    4a50:	9c 81       	ldd	r25, Y+4	; 0x04
    4a52:	82 17       	cp	r24, r18
    4a54:	93 07       	cpc	r25, r19
    4a56:	30 f4       	brcc	.+12     	; 0x4a64 <prvAddCurrentTaskToDelayedList+0xba>
			{
				xNextTaskUnblockTime = xTimeToWake;
    4a58:	8b 81       	ldd	r24, Y+3	; 0x03
    4a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    4a5c:	90 93 d2 00 	sts	0x00D2, r25
    4a60:	80 93 d1 00 	sts	0x00D1, r24

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    4a64:	27 96       	adiw	r28, 0x07	; 7
    4a66:	0f b6       	in	r0, 0x3f	; 63
    4a68:	f8 94       	cli
    4a6a:	de bf       	out	0x3e, r29	; 62
    4a6c:	0f be       	out	0x3f, r0	; 63
    4a6e:	cd bf       	out	0x3d, r28	; 61
    4a70:	cf 91       	pop	r28
    4a72:	df 91       	pop	r29
    4a74:	08 95       	ret

00004a76 <DIO_SetPinValue>:
#include "DIO_reg.h"


/* IO Pins */
void DIO_SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy)
{
    4a76:	df 93       	push	r29
    4a78:	cf 93       	push	r28
    4a7a:	cd b7       	in	r28, 0x3d	; 61
    4a7c:	de b7       	in	r29, 0x3e	; 62
    4a7e:	27 97       	sbiw	r28, 0x07	; 7
    4a80:	0f b6       	in	r0, 0x3f	; 63
    4a82:	f8 94       	cli
    4a84:	de bf       	out	0x3e, r29	; 62
    4a86:	0f be       	out	0x3f, r0	; 63
    4a88:	cd bf       	out	0x3d, r28	; 61
    4a8a:	89 83       	std	Y+1, r24	; 0x01
    4a8c:	6a 83       	std	Y+2, r22	; 0x02
    4a8e:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD_DIO) && (u8PinIdCopy <= PIN7))
    4a90:	89 81       	ldd	r24, Y+1	; 0x01
    4a92:	84 30       	cpi	r24, 0x04	; 4
    4a94:	08 f0       	brcs	.+2      	; 0x4a98 <DIO_SetPinValue+0x22>
    4a96:	ee c0       	rjmp	.+476    	; 0x4c74 <DIO_SetPinValue+0x1fe>
    4a98:	8a 81       	ldd	r24, Y+2	; 0x02
    4a9a:	88 30       	cpi	r24, 0x08	; 8
    4a9c:	08 f0       	brcs	.+2      	; 0x4aa0 <DIO_SetPinValue+0x2a>
    4a9e:	ea c0       	rjmp	.+468    	; 0x4c74 <DIO_SetPinValue+0x1fe>
	{
		if (u8PinValCopy == HIGH)
    4aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    4aa2:	81 30       	cpi	r24, 0x01	; 1
    4aa4:	09 f0       	breq	.+2      	; 0x4aa8 <DIO_SetPinValue+0x32>
    4aa6:	6f c0       	rjmp	.+222    	; 0x4b86 <DIO_SetPinValue+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
    4aa8:	89 81       	ldd	r24, Y+1	; 0x01
    4aaa:	28 2f       	mov	r18, r24
    4aac:	30 e0       	ldi	r19, 0x00	; 0
    4aae:	3f 83       	std	Y+7, r19	; 0x07
    4ab0:	2e 83       	std	Y+6, r18	; 0x06
    4ab2:	8e 81       	ldd	r24, Y+6	; 0x06
    4ab4:	9f 81       	ldd	r25, Y+7	; 0x07
    4ab6:	81 30       	cpi	r24, 0x01	; 1
    4ab8:	91 05       	cpc	r25, r1
    4aba:	49 f1       	breq	.+82     	; 0x4b0e <DIO_SetPinValue+0x98>
    4abc:	2e 81       	ldd	r18, Y+6	; 0x06
    4abe:	3f 81       	ldd	r19, Y+7	; 0x07
    4ac0:	22 30       	cpi	r18, 0x02	; 2
    4ac2:	31 05       	cpc	r19, r1
    4ac4:	2c f4       	brge	.+10     	; 0x4ad0 <DIO_SetPinValue+0x5a>
    4ac6:	8e 81       	ldd	r24, Y+6	; 0x06
    4ac8:	9f 81       	ldd	r25, Y+7	; 0x07
    4aca:	00 97       	sbiw	r24, 0x00	; 0
    4acc:	61 f0       	breq	.+24     	; 0x4ae6 <DIO_SetPinValue+0x70>
    4ace:	d2 c0       	rjmp	.+420    	; 0x4c74 <DIO_SetPinValue+0x1fe>
    4ad0:	2e 81       	ldd	r18, Y+6	; 0x06
    4ad2:	3f 81       	ldd	r19, Y+7	; 0x07
    4ad4:	22 30       	cpi	r18, 0x02	; 2
    4ad6:	31 05       	cpc	r19, r1
    4ad8:	71 f1       	breq	.+92     	; 0x4b36 <DIO_SetPinValue+0xc0>
    4ada:	8e 81       	ldd	r24, Y+6	; 0x06
    4adc:	9f 81       	ldd	r25, Y+7	; 0x07
    4ade:	83 30       	cpi	r24, 0x03	; 3
    4ae0:	91 05       	cpc	r25, r1
    4ae2:	e9 f1       	breq	.+122    	; 0x4b5e <DIO_SetPinValue+0xe8>
    4ae4:	c7 c0       	rjmp	.+398    	; 0x4c74 <DIO_SetPinValue+0x1fe>
			{
				case PORTA_DIO: SET_BIT(PORTA_Register,u8PinIdCopy); break;
    4ae6:	ab e3       	ldi	r26, 0x3B	; 59
    4ae8:	b0 e0       	ldi	r27, 0x00	; 0
    4aea:	eb e3       	ldi	r30, 0x3B	; 59
    4aec:	f0 e0       	ldi	r31, 0x00	; 0
    4aee:	80 81       	ld	r24, Z
    4af0:	48 2f       	mov	r20, r24
    4af2:	8a 81       	ldd	r24, Y+2	; 0x02
    4af4:	28 2f       	mov	r18, r24
    4af6:	30 e0       	ldi	r19, 0x00	; 0
    4af8:	81 e0       	ldi	r24, 0x01	; 1
    4afa:	90 e0       	ldi	r25, 0x00	; 0
    4afc:	02 2e       	mov	r0, r18
    4afe:	02 c0       	rjmp	.+4      	; 0x4b04 <DIO_SetPinValue+0x8e>
    4b00:	88 0f       	add	r24, r24
    4b02:	99 1f       	adc	r25, r25
    4b04:	0a 94       	dec	r0
    4b06:	e2 f7       	brpl	.-8      	; 0x4b00 <DIO_SetPinValue+0x8a>
    4b08:	84 2b       	or	r24, r20
    4b0a:	8c 93       	st	X, r24
    4b0c:	b3 c0       	rjmp	.+358    	; 0x4c74 <DIO_SetPinValue+0x1fe>
				case PORTB_DIO: SET_BIT(PORTB_Register,u8PinIdCopy); break;
    4b0e:	a8 e3       	ldi	r26, 0x38	; 56
    4b10:	b0 e0       	ldi	r27, 0x00	; 0
    4b12:	e8 e3       	ldi	r30, 0x38	; 56
    4b14:	f0 e0       	ldi	r31, 0x00	; 0
    4b16:	80 81       	ld	r24, Z
    4b18:	48 2f       	mov	r20, r24
    4b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b1c:	28 2f       	mov	r18, r24
    4b1e:	30 e0       	ldi	r19, 0x00	; 0
    4b20:	81 e0       	ldi	r24, 0x01	; 1
    4b22:	90 e0       	ldi	r25, 0x00	; 0
    4b24:	02 2e       	mov	r0, r18
    4b26:	02 c0       	rjmp	.+4      	; 0x4b2c <DIO_SetPinValue+0xb6>
    4b28:	88 0f       	add	r24, r24
    4b2a:	99 1f       	adc	r25, r25
    4b2c:	0a 94       	dec	r0
    4b2e:	e2 f7       	brpl	.-8      	; 0x4b28 <DIO_SetPinValue+0xb2>
    4b30:	84 2b       	or	r24, r20
    4b32:	8c 93       	st	X, r24
    4b34:	9f c0       	rjmp	.+318    	; 0x4c74 <DIO_SetPinValue+0x1fe>
				case PORTC_DIO: SET_BIT(PORTC_Register,u8PinIdCopy); break;
    4b36:	a5 e3       	ldi	r26, 0x35	; 53
    4b38:	b0 e0       	ldi	r27, 0x00	; 0
    4b3a:	e5 e3       	ldi	r30, 0x35	; 53
    4b3c:	f0 e0       	ldi	r31, 0x00	; 0
    4b3e:	80 81       	ld	r24, Z
    4b40:	48 2f       	mov	r20, r24
    4b42:	8a 81       	ldd	r24, Y+2	; 0x02
    4b44:	28 2f       	mov	r18, r24
    4b46:	30 e0       	ldi	r19, 0x00	; 0
    4b48:	81 e0       	ldi	r24, 0x01	; 1
    4b4a:	90 e0       	ldi	r25, 0x00	; 0
    4b4c:	02 2e       	mov	r0, r18
    4b4e:	02 c0       	rjmp	.+4      	; 0x4b54 <DIO_SetPinValue+0xde>
    4b50:	88 0f       	add	r24, r24
    4b52:	99 1f       	adc	r25, r25
    4b54:	0a 94       	dec	r0
    4b56:	e2 f7       	brpl	.-8      	; 0x4b50 <DIO_SetPinValue+0xda>
    4b58:	84 2b       	or	r24, r20
    4b5a:	8c 93       	st	X, r24
    4b5c:	8b c0       	rjmp	.+278    	; 0x4c74 <DIO_SetPinValue+0x1fe>
				case PORTD_DIO: SET_BIT(PORTD_Register,u8PinIdCopy); break;
    4b5e:	a2 e3       	ldi	r26, 0x32	; 50
    4b60:	b0 e0       	ldi	r27, 0x00	; 0
    4b62:	e2 e3       	ldi	r30, 0x32	; 50
    4b64:	f0 e0       	ldi	r31, 0x00	; 0
    4b66:	80 81       	ld	r24, Z
    4b68:	48 2f       	mov	r20, r24
    4b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b6c:	28 2f       	mov	r18, r24
    4b6e:	30 e0       	ldi	r19, 0x00	; 0
    4b70:	81 e0       	ldi	r24, 0x01	; 1
    4b72:	90 e0       	ldi	r25, 0x00	; 0
    4b74:	02 2e       	mov	r0, r18
    4b76:	02 c0       	rjmp	.+4      	; 0x4b7c <DIO_SetPinValue+0x106>
    4b78:	88 0f       	add	r24, r24
    4b7a:	99 1f       	adc	r25, r25
    4b7c:	0a 94       	dec	r0
    4b7e:	e2 f7       	brpl	.-8      	; 0x4b78 <DIO_SetPinValue+0x102>
    4b80:	84 2b       	or	r24, r20
    4b82:	8c 93       	st	X, r24
    4b84:	77 c0       	rjmp	.+238    	; 0x4c74 <DIO_SetPinValue+0x1fe>
			}
		
		}
		
		else if (u8PinValCopy == LOW)
    4b86:	8b 81       	ldd	r24, Y+3	; 0x03
    4b88:	88 23       	and	r24, r24
    4b8a:	09 f0       	breq	.+2      	; 0x4b8e <DIO_SetPinValue+0x118>
    4b8c:	73 c0       	rjmp	.+230    	; 0x4c74 <DIO_SetPinValue+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
    4b8e:	89 81       	ldd	r24, Y+1	; 0x01
    4b90:	28 2f       	mov	r18, r24
    4b92:	30 e0       	ldi	r19, 0x00	; 0
    4b94:	3d 83       	std	Y+5, r19	; 0x05
    4b96:	2c 83       	std	Y+4, r18	; 0x04
    4b98:	8c 81       	ldd	r24, Y+4	; 0x04
    4b9a:	9d 81       	ldd	r25, Y+5	; 0x05
    4b9c:	81 30       	cpi	r24, 0x01	; 1
    4b9e:	91 05       	cpc	r25, r1
    4ba0:	59 f1       	breq	.+86     	; 0x4bf8 <DIO_SetPinValue+0x182>
    4ba2:	2c 81       	ldd	r18, Y+4	; 0x04
    4ba4:	3d 81       	ldd	r19, Y+5	; 0x05
    4ba6:	22 30       	cpi	r18, 0x02	; 2
    4ba8:	31 05       	cpc	r19, r1
    4baa:	2c f4       	brge	.+10     	; 0x4bb6 <DIO_SetPinValue+0x140>
    4bac:	8c 81       	ldd	r24, Y+4	; 0x04
    4bae:	9d 81       	ldd	r25, Y+5	; 0x05
    4bb0:	00 97       	sbiw	r24, 0x00	; 0
    4bb2:	69 f0       	breq	.+26     	; 0x4bce <DIO_SetPinValue+0x158>
    4bb4:	5f c0       	rjmp	.+190    	; 0x4c74 <DIO_SetPinValue+0x1fe>
    4bb6:	2c 81       	ldd	r18, Y+4	; 0x04
    4bb8:	3d 81       	ldd	r19, Y+5	; 0x05
    4bba:	22 30       	cpi	r18, 0x02	; 2
    4bbc:	31 05       	cpc	r19, r1
    4bbe:	89 f1       	breq	.+98     	; 0x4c22 <DIO_SetPinValue+0x1ac>
    4bc0:	8c 81       	ldd	r24, Y+4	; 0x04
    4bc2:	9d 81       	ldd	r25, Y+5	; 0x05
    4bc4:	83 30       	cpi	r24, 0x03	; 3
    4bc6:	91 05       	cpc	r25, r1
    4bc8:	09 f4       	brne	.+2      	; 0x4bcc <DIO_SetPinValue+0x156>
    4bca:	40 c0       	rjmp	.+128    	; 0x4c4c <DIO_SetPinValue+0x1d6>
    4bcc:	53 c0       	rjmp	.+166    	; 0x4c74 <DIO_SetPinValue+0x1fe>
			{
				case PORTA_DIO: CLR_BIT(PORTA_Register,u8PinIdCopy); break;
    4bce:	ab e3       	ldi	r26, 0x3B	; 59
    4bd0:	b0 e0       	ldi	r27, 0x00	; 0
    4bd2:	eb e3       	ldi	r30, 0x3B	; 59
    4bd4:	f0 e0       	ldi	r31, 0x00	; 0
    4bd6:	80 81       	ld	r24, Z
    4bd8:	48 2f       	mov	r20, r24
    4bda:	8a 81       	ldd	r24, Y+2	; 0x02
    4bdc:	28 2f       	mov	r18, r24
    4bde:	30 e0       	ldi	r19, 0x00	; 0
    4be0:	81 e0       	ldi	r24, 0x01	; 1
    4be2:	90 e0       	ldi	r25, 0x00	; 0
    4be4:	02 2e       	mov	r0, r18
    4be6:	02 c0       	rjmp	.+4      	; 0x4bec <DIO_SetPinValue+0x176>
    4be8:	88 0f       	add	r24, r24
    4bea:	99 1f       	adc	r25, r25
    4bec:	0a 94       	dec	r0
    4bee:	e2 f7       	brpl	.-8      	; 0x4be8 <DIO_SetPinValue+0x172>
    4bf0:	80 95       	com	r24
    4bf2:	84 23       	and	r24, r20
    4bf4:	8c 93       	st	X, r24
    4bf6:	3e c0       	rjmp	.+124    	; 0x4c74 <DIO_SetPinValue+0x1fe>
				case PORTB_DIO: CLR_BIT(PORTB_Register,u8PinIdCopy); break;
    4bf8:	a8 e3       	ldi	r26, 0x38	; 56
    4bfa:	b0 e0       	ldi	r27, 0x00	; 0
    4bfc:	e8 e3       	ldi	r30, 0x38	; 56
    4bfe:	f0 e0       	ldi	r31, 0x00	; 0
    4c00:	80 81       	ld	r24, Z
    4c02:	48 2f       	mov	r20, r24
    4c04:	8a 81       	ldd	r24, Y+2	; 0x02
    4c06:	28 2f       	mov	r18, r24
    4c08:	30 e0       	ldi	r19, 0x00	; 0
    4c0a:	81 e0       	ldi	r24, 0x01	; 1
    4c0c:	90 e0       	ldi	r25, 0x00	; 0
    4c0e:	02 2e       	mov	r0, r18
    4c10:	02 c0       	rjmp	.+4      	; 0x4c16 <DIO_SetPinValue+0x1a0>
    4c12:	88 0f       	add	r24, r24
    4c14:	99 1f       	adc	r25, r25
    4c16:	0a 94       	dec	r0
    4c18:	e2 f7       	brpl	.-8      	; 0x4c12 <DIO_SetPinValue+0x19c>
    4c1a:	80 95       	com	r24
    4c1c:	84 23       	and	r24, r20
    4c1e:	8c 93       	st	X, r24
    4c20:	29 c0       	rjmp	.+82     	; 0x4c74 <DIO_SetPinValue+0x1fe>
				case PORTC_DIO: CLR_BIT(PORTC_Register,u8PinIdCopy); break;
    4c22:	a5 e3       	ldi	r26, 0x35	; 53
    4c24:	b0 e0       	ldi	r27, 0x00	; 0
    4c26:	e5 e3       	ldi	r30, 0x35	; 53
    4c28:	f0 e0       	ldi	r31, 0x00	; 0
    4c2a:	80 81       	ld	r24, Z
    4c2c:	48 2f       	mov	r20, r24
    4c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c30:	28 2f       	mov	r18, r24
    4c32:	30 e0       	ldi	r19, 0x00	; 0
    4c34:	81 e0       	ldi	r24, 0x01	; 1
    4c36:	90 e0       	ldi	r25, 0x00	; 0
    4c38:	02 2e       	mov	r0, r18
    4c3a:	02 c0       	rjmp	.+4      	; 0x4c40 <DIO_SetPinValue+0x1ca>
    4c3c:	88 0f       	add	r24, r24
    4c3e:	99 1f       	adc	r25, r25
    4c40:	0a 94       	dec	r0
    4c42:	e2 f7       	brpl	.-8      	; 0x4c3c <DIO_SetPinValue+0x1c6>
    4c44:	80 95       	com	r24
    4c46:	84 23       	and	r24, r20
    4c48:	8c 93       	st	X, r24
    4c4a:	14 c0       	rjmp	.+40     	; 0x4c74 <DIO_SetPinValue+0x1fe>
				case PORTD_DIO: CLR_BIT(PORTD_Register,u8PinIdCopy); break;
    4c4c:	a2 e3       	ldi	r26, 0x32	; 50
    4c4e:	b0 e0       	ldi	r27, 0x00	; 0
    4c50:	e2 e3       	ldi	r30, 0x32	; 50
    4c52:	f0 e0       	ldi	r31, 0x00	; 0
    4c54:	80 81       	ld	r24, Z
    4c56:	48 2f       	mov	r20, r24
    4c58:	8a 81       	ldd	r24, Y+2	; 0x02
    4c5a:	28 2f       	mov	r18, r24
    4c5c:	30 e0       	ldi	r19, 0x00	; 0
    4c5e:	81 e0       	ldi	r24, 0x01	; 1
    4c60:	90 e0       	ldi	r25, 0x00	; 0
    4c62:	02 2e       	mov	r0, r18
    4c64:	02 c0       	rjmp	.+4      	; 0x4c6a <DIO_SetPinValue+0x1f4>
    4c66:	88 0f       	add	r24, r24
    4c68:	99 1f       	adc	r25, r25
    4c6a:	0a 94       	dec	r0
    4c6c:	e2 f7       	brpl	.-8      	; 0x4c66 <DIO_SetPinValue+0x1f0>
    4c6e:	80 95       	com	r24
    4c70:	84 23       	and	r24, r20
    4c72:	8c 93       	st	X, r24
	
	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
    4c74:	27 96       	adiw	r28, 0x07	; 7
    4c76:	0f b6       	in	r0, 0x3f	; 63
    4c78:	f8 94       	cli
    4c7a:	de bf       	out	0x3e, r29	; 62
    4c7c:	0f be       	out	0x3f, r0	; 63
    4c7e:	cd bf       	out	0x3d, r28	; 61
    4c80:	cf 91       	pop	r28
    4c82:	df 91       	pop	r29
    4c84:	08 95       	ret

00004c86 <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy)
{
    4c86:	df 93       	push	r29
    4c88:	cf 93       	push	r28
    4c8a:	00 d0       	rcall	.+0      	; 0x4c8c <DIO_GetPinValue+0x6>
    4c8c:	00 d0       	rcall	.+0      	; 0x4c8e <DIO_GetPinValue+0x8>
    4c8e:	0f 92       	push	r0
    4c90:	cd b7       	in	r28, 0x3d	; 61
    4c92:	de b7       	in	r29, 0x3e	; 62
    4c94:	8a 83       	std	Y+2, r24	; 0x02
    4c96:	6b 83       	std	Y+3, r22	; 0x03
	/* Define Local Variable to get the BIT Value */
	u8 u8ResultLocal;
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD_DIO) && (u8PinIdCopy <= PIN7))
    4c98:	8a 81       	ldd	r24, Y+2	; 0x02
    4c9a:	84 30       	cpi	r24, 0x04	; 4
    4c9c:	08 f0       	brcs	.+2      	; 0x4ca0 <DIO_GetPinValue+0x1a>
    4c9e:	6c c0       	rjmp	.+216    	; 0x4d78 <DIO_GetPinValue+0xf2>
    4ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    4ca2:	88 30       	cpi	r24, 0x08	; 8
    4ca4:	08 f0       	brcs	.+2      	; 0x4ca8 <DIO_GetPinValue+0x22>
    4ca6:	68 c0       	rjmp	.+208    	; 0x4d78 <DIO_GetPinValue+0xf2>
	{
		/* Check on the Required PORT Number */
		switch (u8PortIdCopy)
    4ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    4caa:	28 2f       	mov	r18, r24
    4cac:	30 e0       	ldi	r19, 0x00	; 0
    4cae:	3d 83       	std	Y+5, r19	; 0x05
    4cb0:	2c 83       	std	Y+4, r18	; 0x04
    4cb2:	4c 81       	ldd	r20, Y+4	; 0x04
    4cb4:	5d 81       	ldd	r21, Y+5	; 0x05
    4cb6:	41 30       	cpi	r20, 0x01	; 1
    4cb8:	51 05       	cpc	r21, r1
    4cba:	41 f1       	breq	.+80     	; 0x4d0c <DIO_GetPinValue+0x86>
    4cbc:	8c 81       	ldd	r24, Y+4	; 0x04
    4cbe:	9d 81       	ldd	r25, Y+5	; 0x05
    4cc0:	82 30       	cpi	r24, 0x02	; 2
    4cc2:	91 05       	cpc	r25, r1
    4cc4:	34 f4       	brge	.+12     	; 0x4cd2 <DIO_GetPinValue+0x4c>
    4cc6:	2c 81       	ldd	r18, Y+4	; 0x04
    4cc8:	3d 81       	ldd	r19, Y+5	; 0x05
    4cca:	21 15       	cp	r18, r1
    4ccc:	31 05       	cpc	r19, r1
    4cce:	61 f0       	breq	.+24     	; 0x4ce8 <DIO_GetPinValue+0x62>
    4cd0:	55 c0       	rjmp	.+170    	; 0x4d7c <DIO_GetPinValue+0xf6>
    4cd2:	4c 81       	ldd	r20, Y+4	; 0x04
    4cd4:	5d 81       	ldd	r21, Y+5	; 0x05
    4cd6:	42 30       	cpi	r20, 0x02	; 2
    4cd8:	51 05       	cpc	r21, r1
    4cda:	51 f1       	breq	.+84     	; 0x4d30 <DIO_GetPinValue+0xaa>
    4cdc:	8c 81       	ldd	r24, Y+4	; 0x04
    4cde:	9d 81       	ldd	r25, Y+5	; 0x05
    4ce0:	83 30       	cpi	r24, 0x03	; 3
    4ce2:	91 05       	cpc	r25, r1
    4ce4:	b9 f1       	breq	.+110    	; 0x4d54 <DIO_GetPinValue+0xce>
    4ce6:	4a c0       	rjmp	.+148    	; 0x4d7c <DIO_GetPinValue+0xf6>
		{
			case PORTA_DIO: u8ResultLocal= GET_BIT(PINA_Register,u8PinIdCopy); break;
    4ce8:	e9 e3       	ldi	r30, 0x39	; 57
    4cea:	f0 e0       	ldi	r31, 0x00	; 0
    4cec:	80 81       	ld	r24, Z
    4cee:	28 2f       	mov	r18, r24
    4cf0:	30 e0       	ldi	r19, 0x00	; 0
    4cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    4cf4:	88 2f       	mov	r24, r24
    4cf6:	90 e0       	ldi	r25, 0x00	; 0
    4cf8:	a9 01       	movw	r20, r18
    4cfa:	02 c0       	rjmp	.+4      	; 0x4d00 <DIO_GetPinValue+0x7a>
    4cfc:	55 95       	asr	r21
    4cfe:	47 95       	ror	r20
    4d00:	8a 95       	dec	r24
    4d02:	e2 f7       	brpl	.-8      	; 0x4cfc <DIO_GetPinValue+0x76>
    4d04:	ca 01       	movw	r24, r20
    4d06:	81 70       	andi	r24, 0x01	; 1
    4d08:	89 83       	std	Y+1, r24	; 0x01
    4d0a:	38 c0       	rjmp	.+112    	; 0x4d7c <DIO_GetPinValue+0xf6>
			case PORTB_DIO: u8ResultLocal= GET_BIT(PINB_Register,u8PinIdCopy); break;
    4d0c:	e6 e3       	ldi	r30, 0x36	; 54
    4d0e:	f0 e0       	ldi	r31, 0x00	; 0
    4d10:	80 81       	ld	r24, Z
    4d12:	28 2f       	mov	r18, r24
    4d14:	30 e0       	ldi	r19, 0x00	; 0
    4d16:	8b 81       	ldd	r24, Y+3	; 0x03
    4d18:	88 2f       	mov	r24, r24
    4d1a:	90 e0       	ldi	r25, 0x00	; 0
    4d1c:	a9 01       	movw	r20, r18
    4d1e:	02 c0       	rjmp	.+4      	; 0x4d24 <DIO_GetPinValue+0x9e>
    4d20:	55 95       	asr	r21
    4d22:	47 95       	ror	r20
    4d24:	8a 95       	dec	r24
    4d26:	e2 f7       	brpl	.-8      	; 0x4d20 <DIO_GetPinValue+0x9a>
    4d28:	ca 01       	movw	r24, r20
    4d2a:	81 70       	andi	r24, 0x01	; 1
    4d2c:	89 83       	std	Y+1, r24	; 0x01
    4d2e:	26 c0       	rjmp	.+76     	; 0x4d7c <DIO_GetPinValue+0xf6>
			case PORTC_DIO: u8ResultLocal= GET_BIT(PINC_Register,u8PinIdCopy); break;
    4d30:	e3 e3       	ldi	r30, 0x33	; 51
    4d32:	f0 e0       	ldi	r31, 0x00	; 0
    4d34:	80 81       	ld	r24, Z
    4d36:	28 2f       	mov	r18, r24
    4d38:	30 e0       	ldi	r19, 0x00	; 0
    4d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d3c:	88 2f       	mov	r24, r24
    4d3e:	90 e0       	ldi	r25, 0x00	; 0
    4d40:	a9 01       	movw	r20, r18
    4d42:	02 c0       	rjmp	.+4      	; 0x4d48 <DIO_GetPinValue+0xc2>
    4d44:	55 95       	asr	r21
    4d46:	47 95       	ror	r20
    4d48:	8a 95       	dec	r24
    4d4a:	e2 f7       	brpl	.-8      	; 0x4d44 <DIO_GetPinValue+0xbe>
    4d4c:	ca 01       	movw	r24, r20
    4d4e:	81 70       	andi	r24, 0x01	; 1
    4d50:	89 83       	std	Y+1, r24	; 0x01
    4d52:	14 c0       	rjmp	.+40     	; 0x4d7c <DIO_GetPinValue+0xf6>
			case PORTD_DIO: u8ResultLocal= GET_BIT(PIND_Register,u8PinIdCopy); break;
    4d54:	e0 e3       	ldi	r30, 0x30	; 48
    4d56:	f0 e0       	ldi	r31, 0x00	; 0
    4d58:	80 81       	ld	r24, Z
    4d5a:	28 2f       	mov	r18, r24
    4d5c:	30 e0       	ldi	r19, 0x00	; 0
    4d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    4d60:	88 2f       	mov	r24, r24
    4d62:	90 e0       	ldi	r25, 0x00	; 0
    4d64:	a9 01       	movw	r20, r18
    4d66:	02 c0       	rjmp	.+4      	; 0x4d6c <DIO_GetPinValue+0xe6>
    4d68:	55 95       	asr	r21
    4d6a:	47 95       	ror	r20
    4d6c:	8a 95       	dec	r24
    4d6e:	e2 f7       	brpl	.-8      	; 0x4d68 <DIO_GetPinValue+0xe2>
    4d70:	ca 01       	movw	r24, r20
    4d72:	81 70       	andi	r24, 0x01	; 1
    4d74:	89 83       	std	Y+1, r24	; 0x01
    4d76:	02 c0       	rjmp	.+4      	; 0x4d7c <DIO_GetPinValue+0xf6>
	}
	
	else
	{
		/* return 0xff in case of error in the Pin ID or PORT ID */
		u8ResultLocal = 0xFF;
    4d78:	8f ef       	ldi	r24, 0xFF	; 255
    4d7a:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return u8ResultLocal;
    4d7c:	89 81       	ldd	r24, Y+1	; 0x01
}
    4d7e:	0f 90       	pop	r0
    4d80:	0f 90       	pop	r0
    4d82:	0f 90       	pop	r0
    4d84:	0f 90       	pop	r0
    4d86:	0f 90       	pop	r0
    4d88:	cf 91       	pop	r28
    4d8a:	df 91       	pop	r29
    4d8c:	08 95       	ret

00004d8e <DIO_SetPinDirection>:

void DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
    4d8e:	df 93       	push	r29
    4d90:	cf 93       	push	r28
    4d92:	cd b7       	in	r28, 0x3d	; 61
    4d94:	de b7       	in	r29, 0x3e	; 62
    4d96:	27 97       	sbiw	r28, 0x07	; 7
    4d98:	0f b6       	in	r0, 0x3f	; 63
    4d9a:	f8 94       	cli
    4d9c:	de bf       	out	0x3e, r29	; 62
    4d9e:	0f be       	out	0x3f, r0	; 63
    4da0:	cd bf       	out	0x3d, r28	; 61
    4da2:	89 83       	std	Y+1, r24	; 0x01
    4da4:	6a 83       	std	Y+2, r22	; 0x02
    4da6:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD_DIO) && (u8PinIdCopy <= PIN7))
    4da8:	89 81       	ldd	r24, Y+1	; 0x01
    4daa:	84 30       	cpi	r24, 0x04	; 4
    4dac:	08 f0       	brcs	.+2      	; 0x4db0 <DIO_SetPinDirection+0x22>
    4dae:	ee c0       	rjmp	.+476    	; 0x4f8c <DIO_SetPinDirection+0x1fe>
    4db0:	8a 81       	ldd	r24, Y+2	; 0x02
    4db2:	88 30       	cpi	r24, 0x08	; 8
    4db4:	08 f0       	brcs	.+2      	; 0x4db8 <DIO_SetPinDirection+0x2a>
    4db6:	ea c0       	rjmp	.+468    	; 0x4f8c <DIO_SetPinDirection+0x1fe>
	{
		if ( u8PinDirCopy == OUTPUT )
    4db8:	8b 81       	ldd	r24, Y+3	; 0x03
    4dba:	81 30       	cpi	r24, 0x01	; 1
    4dbc:	09 f0       	breq	.+2      	; 0x4dc0 <DIO_SetPinDirection+0x32>
    4dbe:	6f c0       	rjmp	.+222    	; 0x4e9e <DIO_SetPinDirection+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
    4dc0:	89 81       	ldd	r24, Y+1	; 0x01
    4dc2:	28 2f       	mov	r18, r24
    4dc4:	30 e0       	ldi	r19, 0x00	; 0
    4dc6:	3f 83       	std	Y+7, r19	; 0x07
    4dc8:	2e 83       	std	Y+6, r18	; 0x06
    4dca:	8e 81       	ldd	r24, Y+6	; 0x06
    4dcc:	9f 81       	ldd	r25, Y+7	; 0x07
    4dce:	81 30       	cpi	r24, 0x01	; 1
    4dd0:	91 05       	cpc	r25, r1
    4dd2:	49 f1       	breq	.+82     	; 0x4e26 <DIO_SetPinDirection+0x98>
    4dd4:	2e 81       	ldd	r18, Y+6	; 0x06
    4dd6:	3f 81       	ldd	r19, Y+7	; 0x07
    4dd8:	22 30       	cpi	r18, 0x02	; 2
    4dda:	31 05       	cpc	r19, r1
    4ddc:	2c f4       	brge	.+10     	; 0x4de8 <DIO_SetPinDirection+0x5a>
    4dde:	8e 81       	ldd	r24, Y+6	; 0x06
    4de0:	9f 81       	ldd	r25, Y+7	; 0x07
    4de2:	00 97       	sbiw	r24, 0x00	; 0
    4de4:	61 f0       	breq	.+24     	; 0x4dfe <DIO_SetPinDirection+0x70>
    4de6:	d2 c0       	rjmp	.+420    	; 0x4f8c <DIO_SetPinDirection+0x1fe>
    4de8:	2e 81       	ldd	r18, Y+6	; 0x06
    4dea:	3f 81       	ldd	r19, Y+7	; 0x07
    4dec:	22 30       	cpi	r18, 0x02	; 2
    4dee:	31 05       	cpc	r19, r1
    4df0:	71 f1       	breq	.+92     	; 0x4e4e <DIO_SetPinDirection+0xc0>
    4df2:	8e 81       	ldd	r24, Y+6	; 0x06
    4df4:	9f 81       	ldd	r25, Y+7	; 0x07
    4df6:	83 30       	cpi	r24, 0x03	; 3
    4df8:	91 05       	cpc	r25, r1
    4dfa:	e9 f1       	breq	.+122    	; 0x4e76 <DIO_SetPinDirection+0xe8>
    4dfc:	c7 c0       	rjmp	.+398    	; 0x4f8c <DIO_SetPinDirection+0x1fe>
			{
				case PORTA_DIO: SET_BIT(DDRA_Register,u8PinIdCopy); break;
    4dfe:	aa e3       	ldi	r26, 0x3A	; 58
    4e00:	b0 e0       	ldi	r27, 0x00	; 0
    4e02:	ea e3       	ldi	r30, 0x3A	; 58
    4e04:	f0 e0       	ldi	r31, 0x00	; 0
    4e06:	80 81       	ld	r24, Z
    4e08:	48 2f       	mov	r20, r24
    4e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    4e0c:	28 2f       	mov	r18, r24
    4e0e:	30 e0       	ldi	r19, 0x00	; 0
    4e10:	81 e0       	ldi	r24, 0x01	; 1
    4e12:	90 e0       	ldi	r25, 0x00	; 0
    4e14:	02 2e       	mov	r0, r18
    4e16:	02 c0       	rjmp	.+4      	; 0x4e1c <DIO_SetPinDirection+0x8e>
    4e18:	88 0f       	add	r24, r24
    4e1a:	99 1f       	adc	r25, r25
    4e1c:	0a 94       	dec	r0
    4e1e:	e2 f7       	brpl	.-8      	; 0x4e18 <DIO_SetPinDirection+0x8a>
    4e20:	84 2b       	or	r24, r20
    4e22:	8c 93       	st	X, r24
    4e24:	b3 c0       	rjmp	.+358    	; 0x4f8c <DIO_SetPinDirection+0x1fe>
				case PORTB_DIO: SET_BIT(DDRB_Register,u8PinIdCopy); break;
    4e26:	a7 e3       	ldi	r26, 0x37	; 55
    4e28:	b0 e0       	ldi	r27, 0x00	; 0
    4e2a:	e7 e3       	ldi	r30, 0x37	; 55
    4e2c:	f0 e0       	ldi	r31, 0x00	; 0
    4e2e:	80 81       	ld	r24, Z
    4e30:	48 2f       	mov	r20, r24
    4e32:	8a 81       	ldd	r24, Y+2	; 0x02
    4e34:	28 2f       	mov	r18, r24
    4e36:	30 e0       	ldi	r19, 0x00	; 0
    4e38:	81 e0       	ldi	r24, 0x01	; 1
    4e3a:	90 e0       	ldi	r25, 0x00	; 0
    4e3c:	02 2e       	mov	r0, r18
    4e3e:	02 c0       	rjmp	.+4      	; 0x4e44 <DIO_SetPinDirection+0xb6>
    4e40:	88 0f       	add	r24, r24
    4e42:	99 1f       	adc	r25, r25
    4e44:	0a 94       	dec	r0
    4e46:	e2 f7       	brpl	.-8      	; 0x4e40 <DIO_SetPinDirection+0xb2>
    4e48:	84 2b       	or	r24, r20
    4e4a:	8c 93       	st	X, r24
    4e4c:	9f c0       	rjmp	.+318    	; 0x4f8c <DIO_SetPinDirection+0x1fe>
				case PORTC_DIO: SET_BIT(DDRC_Register,u8PinIdCopy); break;
    4e4e:	a4 e3       	ldi	r26, 0x34	; 52
    4e50:	b0 e0       	ldi	r27, 0x00	; 0
    4e52:	e4 e3       	ldi	r30, 0x34	; 52
    4e54:	f0 e0       	ldi	r31, 0x00	; 0
    4e56:	80 81       	ld	r24, Z
    4e58:	48 2f       	mov	r20, r24
    4e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    4e5c:	28 2f       	mov	r18, r24
    4e5e:	30 e0       	ldi	r19, 0x00	; 0
    4e60:	81 e0       	ldi	r24, 0x01	; 1
    4e62:	90 e0       	ldi	r25, 0x00	; 0
    4e64:	02 2e       	mov	r0, r18
    4e66:	02 c0       	rjmp	.+4      	; 0x4e6c <DIO_SetPinDirection+0xde>
    4e68:	88 0f       	add	r24, r24
    4e6a:	99 1f       	adc	r25, r25
    4e6c:	0a 94       	dec	r0
    4e6e:	e2 f7       	brpl	.-8      	; 0x4e68 <DIO_SetPinDirection+0xda>
    4e70:	84 2b       	or	r24, r20
    4e72:	8c 93       	st	X, r24
    4e74:	8b c0       	rjmp	.+278    	; 0x4f8c <DIO_SetPinDirection+0x1fe>
				case PORTD_DIO: SET_BIT(DDRD_Register,u8PinIdCopy); break;
    4e76:	a1 e3       	ldi	r26, 0x31	; 49
    4e78:	b0 e0       	ldi	r27, 0x00	; 0
    4e7a:	e1 e3       	ldi	r30, 0x31	; 49
    4e7c:	f0 e0       	ldi	r31, 0x00	; 0
    4e7e:	80 81       	ld	r24, Z
    4e80:	48 2f       	mov	r20, r24
    4e82:	8a 81       	ldd	r24, Y+2	; 0x02
    4e84:	28 2f       	mov	r18, r24
    4e86:	30 e0       	ldi	r19, 0x00	; 0
    4e88:	81 e0       	ldi	r24, 0x01	; 1
    4e8a:	90 e0       	ldi	r25, 0x00	; 0
    4e8c:	02 2e       	mov	r0, r18
    4e8e:	02 c0       	rjmp	.+4      	; 0x4e94 <DIO_SetPinDirection+0x106>
    4e90:	88 0f       	add	r24, r24
    4e92:	99 1f       	adc	r25, r25
    4e94:	0a 94       	dec	r0
    4e96:	e2 f7       	brpl	.-8      	; 0x4e90 <DIO_SetPinDirection+0x102>
    4e98:	84 2b       	or	r24, r20
    4e9a:	8c 93       	st	X, r24
    4e9c:	77 c0       	rjmp	.+238    	; 0x4f8c <DIO_SetPinDirection+0x1fe>
			}
		}
		
		else if ( u8PinDirCopy == INPUT )
    4e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    4ea0:	88 23       	and	r24, r24
    4ea2:	09 f0       	breq	.+2      	; 0x4ea6 <DIO_SetPinDirection+0x118>
    4ea4:	73 c0       	rjmp	.+230    	; 0x4f8c <DIO_SetPinDirection+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
    4ea6:	89 81       	ldd	r24, Y+1	; 0x01
    4ea8:	28 2f       	mov	r18, r24
    4eaa:	30 e0       	ldi	r19, 0x00	; 0
    4eac:	3d 83       	std	Y+5, r19	; 0x05
    4eae:	2c 83       	std	Y+4, r18	; 0x04
    4eb0:	8c 81       	ldd	r24, Y+4	; 0x04
    4eb2:	9d 81       	ldd	r25, Y+5	; 0x05
    4eb4:	81 30       	cpi	r24, 0x01	; 1
    4eb6:	91 05       	cpc	r25, r1
    4eb8:	59 f1       	breq	.+86     	; 0x4f10 <DIO_SetPinDirection+0x182>
    4eba:	2c 81       	ldd	r18, Y+4	; 0x04
    4ebc:	3d 81       	ldd	r19, Y+5	; 0x05
    4ebe:	22 30       	cpi	r18, 0x02	; 2
    4ec0:	31 05       	cpc	r19, r1
    4ec2:	2c f4       	brge	.+10     	; 0x4ece <DIO_SetPinDirection+0x140>
    4ec4:	8c 81       	ldd	r24, Y+4	; 0x04
    4ec6:	9d 81       	ldd	r25, Y+5	; 0x05
    4ec8:	00 97       	sbiw	r24, 0x00	; 0
    4eca:	69 f0       	breq	.+26     	; 0x4ee6 <DIO_SetPinDirection+0x158>
    4ecc:	5f c0       	rjmp	.+190    	; 0x4f8c <DIO_SetPinDirection+0x1fe>
    4ece:	2c 81       	ldd	r18, Y+4	; 0x04
    4ed0:	3d 81       	ldd	r19, Y+5	; 0x05
    4ed2:	22 30       	cpi	r18, 0x02	; 2
    4ed4:	31 05       	cpc	r19, r1
    4ed6:	89 f1       	breq	.+98     	; 0x4f3a <DIO_SetPinDirection+0x1ac>
    4ed8:	8c 81       	ldd	r24, Y+4	; 0x04
    4eda:	9d 81       	ldd	r25, Y+5	; 0x05
    4edc:	83 30       	cpi	r24, 0x03	; 3
    4ede:	91 05       	cpc	r25, r1
    4ee0:	09 f4       	brne	.+2      	; 0x4ee4 <DIO_SetPinDirection+0x156>
    4ee2:	40 c0       	rjmp	.+128    	; 0x4f64 <DIO_SetPinDirection+0x1d6>
    4ee4:	53 c0       	rjmp	.+166    	; 0x4f8c <DIO_SetPinDirection+0x1fe>
			{
				case PORTA_DIO: CLR_BIT(DDRA_Register,u8PinIdCopy); break;
    4ee6:	aa e3       	ldi	r26, 0x3A	; 58
    4ee8:	b0 e0       	ldi	r27, 0x00	; 0
    4eea:	ea e3       	ldi	r30, 0x3A	; 58
    4eec:	f0 e0       	ldi	r31, 0x00	; 0
    4eee:	80 81       	ld	r24, Z
    4ef0:	48 2f       	mov	r20, r24
    4ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ef4:	28 2f       	mov	r18, r24
    4ef6:	30 e0       	ldi	r19, 0x00	; 0
    4ef8:	81 e0       	ldi	r24, 0x01	; 1
    4efa:	90 e0       	ldi	r25, 0x00	; 0
    4efc:	02 2e       	mov	r0, r18
    4efe:	02 c0       	rjmp	.+4      	; 0x4f04 <DIO_SetPinDirection+0x176>
    4f00:	88 0f       	add	r24, r24
    4f02:	99 1f       	adc	r25, r25
    4f04:	0a 94       	dec	r0
    4f06:	e2 f7       	brpl	.-8      	; 0x4f00 <DIO_SetPinDirection+0x172>
    4f08:	80 95       	com	r24
    4f0a:	84 23       	and	r24, r20
    4f0c:	8c 93       	st	X, r24
    4f0e:	3e c0       	rjmp	.+124    	; 0x4f8c <DIO_SetPinDirection+0x1fe>
				case PORTB_DIO: CLR_BIT(DDRB_Register,u8PinIdCopy); break;
    4f10:	a7 e3       	ldi	r26, 0x37	; 55
    4f12:	b0 e0       	ldi	r27, 0x00	; 0
    4f14:	e7 e3       	ldi	r30, 0x37	; 55
    4f16:	f0 e0       	ldi	r31, 0x00	; 0
    4f18:	80 81       	ld	r24, Z
    4f1a:	48 2f       	mov	r20, r24
    4f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    4f1e:	28 2f       	mov	r18, r24
    4f20:	30 e0       	ldi	r19, 0x00	; 0
    4f22:	81 e0       	ldi	r24, 0x01	; 1
    4f24:	90 e0       	ldi	r25, 0x00	; 0
    4f26:	02 2e       	mov	r0, r18
    4f28:	02 c0       	rjmp	.+4      	; 0x4f2e <DIO_SetPinDirection+0x1a0>
    4f2a:	88 0f       	add	r24, r24
    4f2c:	99 1f       	adc	r25, r25
    4f2e:	0a 94       	dec	r0
    4f30:	e2 f7       	brpl	.-8      	; 0x4f2a <DIO_SetPinDirection+0x19c>
    4f32:	80 95       	com	r24
    4f34:	84 23       	and	r24, r20
    4f36:	8c 93       	st	X, r24
    4f38:	29 c0       	rjmp	.+82     	; 0x4f8c <DIO_SetPinDirection+0x1fe>
				case PORTC_DIO: CLR_BIT(DDRC_Register,u8PinIdCopy); break;
    4f3a:	a4 e3       	ldi	r26, 0x34	; 52
    4f3c:	b0 e0       	ldi	r27, 0x00	; 0
    4f3e:	e4 e3       	ldi	r30, 0x34	; 52
    4f40:	f0 e0       	ldi	r31, 0x00	; 0
    4f42:	80 81       	ld	r24, Z
    4f44:	48 2f       	mov	r20, r24
    4f46:	8a 81       	ldd	r24, Y+2	; 0x02
    4f48:	28 2f       	mov	r18, r24
    4f4a:	30 e0       	ldi	r19, 0x00	; 0
    4f4c:	81 e0       	ldi	r24, 0x01	; 1
    4f4e:	90 e0       	ldi	r25, 0x00	; 0
    4f50:	02 2e       	mov	r0, r18
    4f52:	02 c0       	rjmp	.+4      	; 0x4f58 <DIO_SetPinDirection+0x1ca>
    4f54:	88 0f       	add	r24, r24
    4f56:	99 1f       	adc	r25, r25
    4f58:	0a 94       	dec	r0
    4f5a:	e2 f7       	brpl	.-8      	; 0x4f54 <DIO_SetPinDirection+0x1c6>
    4f5c:	80 95       	com	r24
    4f5e:	84 23       	and	r24, r20
    4f60:	8c 93       	st	X, r24
    4f62:	14 c0       	rjmp	.+40     	; 0x4f8c <DIO_SetPinDirection+0x1fe>
				case PORTD_DIO: CLR_BIT(DDRD_Register,u8PinIdCopy); break;
    4f64:	a1 e3       	ldi	r26, 0x31	; 49
    4f66:	b0 e0       	ldi	r27, 0x00	; 0
    4f68:	e1 e3       	ldi	r30, 0x31	; 49
    4f6a:	f0 e0       	ldi	r31, 0x00	; 0
    4f6c:	80 81       	ld	r24, Z
    4f6e:	48 2f       	mov	r20, r24
    4f70:	8a 81       	ldd	r24, Y+2	; 0x02
    4f72:	28 2f       	mov	r18, r24
    4f74:	30 e0       	ldi	r19, 0x00	; 0
    4f76:	81 e0       	ldi	r24, 0x01	; 1
    4f78:	90 e0       	ldi	r25, 0x00	; 0
    4f7a:	02 2e       	mov	r0, r18
    4f7c:	02 c0       	rjmp	.+4      	; 0x4f82 <DIO_SetPinDirection+0x1f4>
    4f7e:	88 0f       	add	r24, r24
    4f80:	99 1f       	adc	r25, r25
    4f82:	0a 94       	dec	r0
    4f84:	e2 f7       	brpl	.-8      	; 0x4f7e <DIO_SetPinDirection+0x1f0>
    4f86:	80 95       	com	r24
    4f88:	84 23       	and	r24, r20
    4f8a:	8c 93       	st	X, r24
	
	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
    4f8c:	27 96       	adiw	r28, 0x07	; 7
    4f8e:	0f b6       	in	r0, 0x3f	; 63
    4f90:	f8 94       	cli
    4f92:	de bf       	out	0x3e, r29	; 62
    4f94:	0f be       	out	0x3f, r0	; 63
    4f96:	cd bf       	out	0x3d, r28	; 61
    4f98:	cf 91       	pop	r28
    4f9a:	df 91       	pop	r29
    4f9c:	08 95       	ret

00004f9e <DIO_SetPortDirection>:


/* IO Ports */
void DIO_SetPortDirection (u8 u8PortId, u8 u8PortDir)
{
    4f9e:	df 93       	push	r29
    4fa0:	cf 93       	push	r28
    4fa2:	00 d0       	rcall	.+0      	; 0x4fa4 <DIO_SetPortDirection+0x6>
    4fa4:	00 d0       	rcall	.+0      	; 0x4fa6 <DIO_SetPortDirection+0x8>
    4fa6:	cd b7       	in	r28, 0x3d	; 61
    4fa8:	de b7       	in	r29, 0x3e	; 62
    4faa:	89 83       	std	Y+1, r24	; 0x01
    4fac:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
    4fae:	89 81       	ldd	r24, Y+1	; 0x01
    4fb0:	28 2f       	mov	r18, r24
    4fb2:	30 e0       	ldi	r19, 0x00	; 0
    4fb4:	3c 83       	std	Y+4, r19	; 0x04
    4fb6:	2b 83       	std	Y+3, r18	; 0x03
    4fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    4fba:	9c 81       	ldd	r25, Y+4	; 0x04
    4fbc:	81 30       	cpi	r24, 0x01	; 1
    4fbe:	91 05       	cpc	r25, r1
    4fc0:	d1 f0       	breq	.+52     	; 0x4ff6 <DIO_SetPortDirection+0x58>
    4fc2:	2b 81       	ldd	r18, Y+3	; 0x03
    4fc4:	3c 81       	ldd	r19, Y+4	; 0x04
    4fc6:	22 30       	cpi	r18, 0x02	; 2
    4fc8:	31 05       	cpc	r19, r1
    4fca:	2c f4       	brge	.+10     	; 0x4fd6 <DIO_SetPortDirection+0x38>
    4fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    4fce:	9c 81       	ldd	r25, Y+4	; 0x04
    4fd0:	00 97       	sbiw	r24, 0x00	; 0
    4fd2:	61 f0       	breq	.+24     	; 0x4fec <DIO_SetPortDirection+0x4e>
    4fd4:	1e c0       	rjmp	.+60     	; 0x5012 <DIO_SetPortDirection+0x74>
    4fd6:	2b 81       	ldd	r18, Y+3	; 0x03
    4fd8:	3c 81       	ldd	r19, Y+4	; 0x04
    4fda:	22 30       	cpi	r18, 0x02	; 2
    4fdc:	31 05       	cpc	r19, r1
    4fde:	81 f0       	breq	.+32     	; 0x5000 <DIO_SetPortDirection+0x62>
    4fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    4fe2:	9c 81       	ldd	r25, Y+4	; 0x04
    4fe4:	83 30       	cpi	r24, 0x03	; 3
    4fe6:	91 05       	cpc	r25, r1
    4fe8:	81 f0       	breq	.+32     	; 0x500a <DIO_SetPortDirection+0x6c>
    4fea:	13 c0       	rjmp	.+38     	; 0x5012 <DIO_SetPortDirection+0x74>
	{
			case PORTA_DIO: DDRA_Register = u8PortDir; break;
    4fec:	ea e3       	ldi	r30, 0x3A	; 58
    4fee:	f0 e0       	ldi	r31, 0x00	; 0
    4ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ff2:	80 83       	st	Z, r24
    4ff4:	0e c0       	rjmp	.+28     	; 0x5012 <DIO_SetPortDirection+0x74>
			case PORTB_DIO: DDRB_Register = u8PortDir; break;
    4ff6:	e7 e3       	ldi	r30, 0x37	; 55
    4ff8:	f0 e0       	ldi	r31, 0x00	; 0
    4ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    4ffc:	80 83       	st	Z, r24
    4ffe:	09 c0       	rjmp	.+18     	; 0x5012 <DIO_SetPortDirection+0x74>
			case PORTC_DIO: DDRC_Register = u8PortDir; break;
    5000:	e4 e3       	ldi	r30, 0x34	; 52
    5002:	f0 e0       	ldi	r31, 0x00	; 0
    5004:	8a 81       	ldd	r24, Y+2	; 0x02
    5006:	80 83       	st	Z, r24
    5008:	04 c0       	rjmp	.+8      	; 0x5012 <DIO_SetPortDirection+0x74>
			case PORTD_DIO: DDRD_Register = u8PortDir; break;
    500a:	e1 e3       	ldi	r30, 0x31	; 49
    500c:	f0 e0       	ldi	r31, 0x00	; 0
    500e:	8a 81       	ldd	r24, Y+2	; 0x02
    5010:	80 83       	st	Z, r24
		default: /* Wrong Port ID */       break;
	}
}
    5012:	0f 90       	pop	r0
    5014:	0f 90       	pop	r0
    5016:	0f 90       	pop	r0
    5018:	0f 90       	pop	r0
    501a:	cf 91       	pop	r28
    501c:	df 91       	pop	r29
    501e:	08 95       	ret

00005020 <DIO_SetPortValue>:

void DIO_SetPortValue (u8 u8PortId, u8 u8PortVal)
{
    5020:	df 93       	push	r29
    5022:	cf 93       	push	r28
    5024:	00 d0       	rcall	.+0      	; 0x5026 <DIO_SetPortValue+0x6>
    5026:	00 d0       	rcall	.+0      	; 0x5028 <DIO_SetPortValue+0x8>
    5028:	cd b7       	in	r28, 0x3d	; 61
    502a:	de b7       	in	r29, 0x3e	; 62
    502c:	89 83       	std	Y+1, r24	; 0x01
    502e:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
    5030:	89 81       	ldd	r24, Y+1	; 0x01
    5032:	28 2f       	mov	r18, r24
    5034:	30 e0       	ldi	r19, 0x00	; 0
    5036:	3c 83       	std	Y+4, r19	; 0x04
    5038:	2b 83       	std	Y+3, r18	; 0x03
    503a:	8b 81       	ldd	r24, Y+3	; 0x03
    503c:	9c 81       	ldd	r25, Y+4	; 0x04
    503e:	81 30       	cpi	r24, 0x01	; 1
    5040:	91 05       	cpc	r25, r1
    5042:	d1 f0       	breq	.+52     	; 0x5078 <DIO_SetPortValue+0x58>
    5044:	2b 81       	ldd	r18, Y+3	; 0x03
    5046:	3c 81       	ldd	r19, Y+4	; 0x04
    5048:	22 30       	cpi	r18, 0x02	; 2
    504a:	31 05       	cpc	r19, r1
    504c:	2c f4       	brge	.+10     	; 0x5058 <DIO_SetPortValue+0x38>
    504e:	8b 81       	ldd	r24, Y+3	; 0x03
    5050:	9c 81       	ldd	r25, Y+4	; 0x04
    5052:	00 97       	sbiw	r24, 0x00	; 0
    5054:	61 f0       	breq	.+24     	; 0x506e <DIO_SetPortValue+0x4e>
    5056:	1e c0       	rjmp	.+60     	; 0x5094 <DIO_SetPortValue+0x74>
    5058:	2b 81       	ldd	r18, Y+3	; 0x03
    505a:	3c 81       	ldd	r19, Y+4	; 0x04
    505c:	22 30       	cpi	r18, 0x02	; 2
    505e:	31 05       	cpc	r19, r1
    5060:	81 f0       	breq	.+32     	; 0x5082 <DIO_SetPortValue+0x62>
    5062:	8b 81       	ldd	r24, Y+3	; 0x03
    5064:	9c 81       	ldd	r25, Y+4	; 0x04
    5066:	83 30       	cpi	r24, 0x03	; 3
    5068:	91 05       	cpc	r25, r1
    506a:	81 f0       	breq	.+32     	; 0x508c <DIO_SetPortValue+0x6c>
    506c:	13 c0       	rjmp	.+38     	; 0x5094 <DIO_SetPortValue+0x74>
	{
			case PORTA_DIO: PORTA_Register = u8PortVal; break;
    506e:	eb e3       	ldi	r30, 0x3B	; 59
    5070:	f0 e0       	ldi	r31, 0x00	; 0
    5072:	8a 81       	ldd	r24, Y+2	; 0x02
    5074:	80 83       	st	Z, r24
    5076:	0e c0       	rjmp	.+28     	; 0x5094 <DIO_SetPortValue+0x74>
			case PORTB_DIO: PORTB_Register = u8PortVal; break;
    5078:	e8 e3       	ldi	r30, 0x38	; 56
    507a:	f0 e0       	ldi	r31, 0x00	; 0
    507c:	8a 81       	ldd	r24, Y+2	; 0x02
    507e:	80 83       	st	Z, r24
    5080:	09 c0       	rjmp	.+18     	; 0x5094 <DIO_SetPortValue+0x74>
			case PORTC_DIO: PORTC_Register = u8PortVal; break;
    5082:	e5 e3       	ldi	r30, 0x35	; 53
    5084:	f0 e0       	ldi	r31, 0x00	; 0
    5086:	8a 81       	ldd	r24, Y+2	; 0x02
    5088:	80 83       	st	Z, r24
    508a:	04 c0       	rjmp	.+8      	; 0x5094 <DIO_SetPortValue+0x74>
			case PORTD_DIO: PORTD_Register = u8PortVal; break;
    508c:	e2 e3       	ldi	r30, 0x32	; 50
    508e:	f0 e0       	ldi	r31, 0x00	; 0
    5090:	8a 81       	ldd	r24, Y+2	; 0x02
    5092:	80 83       	st	Z, r24
		default: /* Wrong Port ID */        break;
	}
}
    5094:	0f 90       	pop	r0
    5096:	0f 90       	pop	r0
    5098:	0f 90       	pop	r0
    509a:	0f 90       	pop	r0
    509c:	cf 91       	pop	r28
    509e:	df 91       	pop	r29
    50a0:	08 95       	ret

000050a2 <main>:
xTaskHandle xTask2_Handle = NULL ;



int main (void)
{
    50a2:	ef 92       	push	r14
    50a4:	ff 92       	push	r15
    50a6:	0f 93       	push	r16
    50a8:	df 93       	push	r29
    50aa:	cf 93       	push	r28
    50ac:	cd b7       	in	r28, 0x3d	; 61
    50ae:	de b7       	in	r29, 0x3e	; 62
	vid_SystemInit() ;
    50b0:	0e 94 85 29 	call	0x530a	; 0x530a <vid_SystemInit>



	xTaskCreate( vTask1_Function,"RedLed_ON_",configMINIMAL_STACK_SIZE,NULL, 1,&xTask1_Handle );
    50b4:	8b e7       	ldi	r24, 0x7B	; 123
    50b6:	98 e2       	ldi	r25, 0x28	; 40
    50b8:	25 e6       	ldi	r18, 0x65	; 101
    50ba:	30 e0       	ldi	r19, 0x00	; 0
    50bc:	e2 e2       	ldi	r30, 0x22	; 34
    50be:	f1 e0       	ldi	r31, 0x01	; 1
    50c0:	b9 01       	movw	r22, r18
    50c2:	45 e5       	ldi	r20, 0x55	; 85
    50c4:	50 e0       	ldi	r21, 0x00	; 0
    50c6:	20 e0       	ldi	r18, 0x00	; 0
    50c8:	30 e0       	ldi	r19, 0x00	; 0
    50ca:	01 e0       	ldi	r16, 0x01	; 1
    50cc:	7f 01       	movw	r14, r30
    50ce:	0e 94 c2 18 	call	0x3184	; 0x3184 <xTaskCreate>
	xTaskCreate( vTask2_Function,"RedLed_OFF_",configMINIMAL_STACK_SIZE,NULL, 1,&xTask2_Handle );
    50d2:	80 e0       	ldi	r24, 0x00	; 0
    50d4:	99 e2       	ldi	r25, 0x29	; 41
    50d6:	20 e7       	ldi	r18, 0x70	; 112
    50d8:	30 e0       	ldi	r19, 0x00	; 0
    50da:	e4 e2       	ldi	r30, 0x24	; 36
    50dc:	f1 e0       	ldi	r31, 0x01	; 1
    50de:	b9 01       	movw	r22, r18
    50e0:	45 e5       	ldi	r20, 0x55	; 85
    50e2:	50 e0       	ldi	r21, 0x00	; 0
    50e4:	20 e0       	ldi	r18, 0x00	; 0
    50e6:	30 e0       	ldi	r19, 0x00	; 0
    50e8:	01 e0       	ldi	r16, 0x01	; 1
    50ea:	7f 01       	movw	r14, r30
    50ec:	0e 94 c2 18 	call	0x3184	; 0x3184 <xTaskCreate>

	vTaskStartScheduler() ;
    50f0:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <vTaskStartScheduler>
    50f4:	ff cf       	rjmp	.-2      	; 0x50f4 <main+0x52>

000050f6 <vTask1_Function>:

}


void vTask1_Function ( void *param )
{
    50f6:	df 93       	push	r29
    50f8:	cf 93       	push	r28
    50fa:	cd b7       	in	r28, 0x3d	; 61
    50fc:	de b7       	in	r29, 0x3e	; 62
    50fe:	60 97       	sbiw	r28, 0x10	; 16
    5100:	0f b6       	in	r0, 0x3f	; 63
    5102:	f8 94       	cli
    5104:	de bf       	out	0x3e, r29	; 62
    5106:	0f be       	out	0x3f, r0	; 63
    5108:	cd bf       	out	0x3d, r28	; 61
    510a:	98 8b       	std	Y+16, r25	; 0x10
    510c:	8f 87       	std	Y+15, r24	; 0x0f
	while(1)
	{
		RedLed_ON    ();
    510e:	0e 94 96 29 	call	0x532c	; 0x532c <RedLed_ON>
		vTaskDelay(1000);
    5112:	88 ee       	ldi	r24, 0xE8	; 232
    5114:	93 e0       	ldi	r25, 0x03	; 3
    5116:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <vTaskDelay>
    511a:	80 e0       	ldi	r24, 0x00	; 0
    511c:	90 e0       	ldi	r25, 0x00	; 0
    511e:	aa e7       	ldi	r26, 0x7A	; 122
    5120:	b4 e4       	ldi	r27, 0x44	; 68
    5122:	8b 87       	std	Y+11, r24	; 0x0b
    5124:	9c 87       	std	Y+12, r25	; 0x0c
    5126:	ad 87       	std	Y+13, r26	; 0x0d
    5128:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    512a:	6b 85       	ldd	r22, Y+11	; 0x0b
    512c:	7c 85       	ldd	r23, Y+12	; 0x0c
    512e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5130:	9e 85       	ldd	r25, Y+14	; 0x0e
    5132:	20 e0       	ldi	r18, 0x00	; 0
    5134:	30 e0       	ldi	r19, 0x00	; 0
    5136:	4a ef       	ldi	r20, 0xFA	; 250
    5138:	54 e4       	ldi	r21, 0x44	; 68
    513a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    513e:	dc 01       	movw	r26, r24
    5140:	cb 01       	movw	r24, r22
    5142:	8f 83       	std	Y+7, r24	; 0x07
    5144:	98 87       	std	Y+8, r25	; 0x08
    5146:	a9 87       	std	Y+9, r26	; 0x09
    5148:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    514a:	6f 81       	ldd	r22, Y+7	; 0x07
    514c:	78 85       	ldd	r23, Y+8	; 0x08
    514e:	89 85       	ldd	r24, Y+9	; 0x09
    5150:	9a 85       	ldd	r25, Y+10	; 0x0a
    5152:	20 e0       	ldi	r18, 0x00	; 0
    5154:	30 e0       	ldi	r19, 0x00	; 0
    5156:	40 e8       	ldi	r20, 0x80	; 128
    5158:	5f e3       	ldi	r21, 0x3F	; 63
    515a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    515e:	88 23       	and	r24, r24
    5160:	2c f4       	brge	.+10     	; 0x516c <vTask1_Function+0x76>
		__ticks = 1;
    5162:	81 e0       	ldi	r24, 0x01	; 1
    5164:	90 e0       	ldi	r25, 0x00	; 0
    5166:	9e 83       	std	Y+6, r25	; 0x06
    5168:	8d 83       	std	Y+5, r24	; 0x05
    516a:	3f c0       	rjmp	.+126    	; 0x51ea <vTask1_Function+0xf4>
	else if (__tmp > 65535)
    516c:	6f 81       	ldd	r22, Y+7	; 0x07
    516e:	78 85       	ldd	r23, Y+8	; 0x08
    5170:	89 85       	ldd	r24, Y+9	; 0x09
    5172:	9a 85       	ldd	r25, Y+10	; 0x0a
    5174:	20 e0       	ldi	r18, 0x00	; 0
    5176:	3f ef       	ldi	r19, 0xFF	; 255
    5178:	4f e7       	ldi	r20, 0x7F	; 127
    517a:	57 e4       	ldi	r21, 0x47	; 71
    517c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5180:	18 16       	cp	r1, r24
    5182:	4c f5       	brge	.+82     	; 0x51d6 <vTask1_Function+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5184:	6b 85       	ldd	r22, Y+11	; 0x0b
    5186:	7c 85       	ldd	r23, Y+12	; 0x0c
    5188:	8d 85       	ldd	r24, Y+13	; 0x0d
    518a:	9e 85       	ldd	r25, Y+14	; 0x0e
    518c:	20 e0       	ldi	r18, 0x00	; 0
    518e:	30 e0       	ldi	r19, 0x00	; 0
    5190:	40 e2       	ldi	r20, 0x20	; 32
    5192:	51 e4       	ldi	r21, 0x41	; 65
    5194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5198:	dc 01       	movw	r26, r24
    519a:	cb 01       	movw	r24, r22
    519c:	bc 01       	movw	r22, r24
    519e:	cd 01       	movw	r24, r26
    51a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51a4:	dc 01       	movw	r26, r24
    51a6:	cb 01       	movw	r24, r22
    51a8:	9e 83       	std	Y+6, r25	; 0x06
    51aa:	8d 83       	std	Y+5, r24	; 0x05
    51ac:	0f c0       	rjmp	.+30     	; 0x51cc <vTask1_Function+0xd6>
    51ae:	88 ec       	ldi	r24, 0xC8	; 200
    51b0:	90 e0       	ldi	r25, 0x00	; 0
    51b2:	9c 83       	std	Y+4, r25	; 0x04
    51b4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    51b6:	8b 81       	ldd	r24, Y+3	; 0x03
    51b8:	9c 81       	ldd	r25, Y+4	; 0x04
    51ba:	01 97       	sbiw	r24, 0x01	; 1
    51bc:	f1 f7       	brne	.-4      	; 0x51ba <vTask1_Function+0xc4>
    51be:	9c 83       	std	Y+4, r25	; 0x04
    51c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51c2:	8d 81       	ldd	r24, Y+5	; 0x05
    51c4:	9e 81       	ldd	r25, Y+6	; 0x06
    51c6:	01 97       	sbiw	r24, 0x01	; 1
    51c8:	9e 83       	std	Y+6, r25	; 0x06
    51ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51cc:	8d 81       	ldd	r24, Y+5	; 0x05
    51ce:	9e 81       	ldd	r25, Y+6	; 0x06
    51d0:	00 97       	sbiw	r24, 0x00	; 0
    51d2:	69 f7       	brne	.-38     	; 0x51ae <vTask1_Function+0xb8>
    51d4:	9c cf       	rjmp	.-200    	; 0x510e <vTask1_Function+0x18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51d6:	6f 81       	ldd	r22, Y+7	; 0x07
    51d8:	78 85       	ldd	r23, Y+8	; 0x08
    51da:	89 85       	ldd	r24, Y+9	; 0x09
    51dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    51de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51e2:	dc 01       	movw	r26, r24
    51e4:	cb 01       	movw	r24, r22
    51e6:	9e 83       	std	Y+6, r25	; 0x06
    51e8:	8d 83       	std	Y+5, r24	; 0x05
    51ea:	8d 81       	ldd	r24, Y+5	; 0x05
    51ec:	9e 81       	ldd	r25, Y+6	; 0x06
    51ee:	9a 83       	std	Y+2, r25	; 0x02
    51f0:	89 83       	std	Y+1, r24	; 0x01
    51f2:	89 81       	ldd	r24, Y+1	; 0x01
    51f4:	9a 81       	ldd	r25, Y+2	; 0x02
    51f6:	01 97       	sbiw	r24, 0x01	; 1
    51f8:	f1 f7       	brne	.-4      	; 0x51f6 <vTask1_Function+0x100>
    51fa:	9a 83       	std	Y+2, r25	; 0x02
    51fc:	89 83       	std	Y+1, r24	; 0x01
    51fe:	87 cf       	rjmp	.-242    	; 0x510e <vTask1_Function+0x18>

00005200 <vTask2_Function>:
}



void vTask2_Function ( void *param )
{
    5200:	df 93       	push	r29
    5202:	cf 93       	push	r28
    5204:	cd b7       	in	r28, 0x3d	; 61
    5206:	de b7       	in	r29, 0x3e	; 62
    5208:	60 97       	sbiw	r28, 0x10	; 16
    520a:	0f b6       	in	r0, 0x3f	; 63
    520c:	f8 94       	cli
    520e:	de bf       	out	0x3e, r29	; 62
    5210:	0f be       	out	0x3f, r0	; 63
    5212:	cd bf       	out	0x3d, r28	; 61
    5214:	98 8b       	std	Y+16, r25	; 0x10
    5216:	8f 87       	std	Y+15, r24	; 0x0f
	while(1)
	{
		GreenLed_ON   ();
    5218:	0e 94 b3 29 	call	0x5366	; 0x5366 <GreenLed_ON>
		vTaskDelay(1000);
    521c:	88 ee       	ldi	r24, 0xE8	; 232
    521e:	93 e0       	ldi	r25, 0x03	; 3
    5220:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <vTaskDelay>
    5224:	80 e0       	ldi	r24, 0x00	; 0
    5226:	90 e0       	ldi	r25, 0x00	; 0
    5228:	aa e7       	ldi	r26, 0x7A	; 122
    522a:	b4 e4       	ldi	r27, 0x44	; 68
    522c:	8b 87       	std	Y+11, r24	; 0x0b
    522e:	9c 87       	std	Y+12, r25	; 0x0c
    5230:	ad 87       	std	Y+13, r26	; 0x0d
    5232:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5234:	6b 85       	ldd	r22, Y+11	; 0x0b
    5236:	7c 85       	ldd	r23, Y+12	; 0x0c
    5238:	8d 85       	ldd	r24, Y+13	; 0x0d
    523a:	9e 85       	ldd	r25, Y+14	; 0x0e
    523c:	20 e0       	ldi	r18, 0x00	; 0
    523e:	30 e0       	ldi	r19, 0x00	; 0
    5240:	4a ef       	ldi	r20, 0xFA	; 250
    5242:	54 e4       	ldi	r21, 0x44	; 68
    5244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5248:	dc 01       	movw	r26, r24
    524a:	cb 01       	movw	r24, r22
    524c:	8f 83       	std	Y+7, r24	; 0x07
    524e:	98 87       	std	Y+8, r25	; 0x08
    5250:	a9 87       	std	Y+9, r26	; 0x09
    5252:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5254:	6f 81       	ldd	r22, Y+7	; 0x07
    5256:	78 85       	ldd	r23, Y+8	; 0x08
    5258:	89 85       	ldd	r24, Y+9	; 0x09
    525a:	9a 85       	ldd	r25, Y+10	; 0x0a
    525c:	20 e0       	ldi	r18, 0x00	; 0
    525e:	30 e0       	ldi	r19, 0x00	; 0
    5260:	40 e8       	ldi	r20, 0x80	; 128
    5262:	5f e3       	ldi	r21, 0x3F	; 63
    5264:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5268:	88 23       	and	r24, r24
    526a:	2c f4       	brge	.+10     	; 0x5276 <vTask2_Function+0x76>
		__ticks = 1;
    526c:	81 e0       	ldi	r24, 0x01	; 1
    526e:	90 e0       	ldi	r25, 0x00	; 0
    5270:	9e 83       	std	Y+6, r25	; 0x06
    5272:	8d 83       	std	Y+5, r24	; 0x05
    5274:	3f c0       	rjmp	.+126    	; 0x52f4 <vTask2_Function+0xf4>
	else if (__tmp > 65535)
    5276:	6f 81       	ldd	r22, Y+7	; 0x07
    5278:	78 85       	ldd	r23, Y+8	; 0x08
    527a:	89 85       	ldd	r24, Y+9	; 0x09
    527c:	9a 85       	ldd	r25, Y+10	; 0x0a
    527e:	20 e0       	ldi	r18, 0x00	; 0
    5280:	3f ef       	ldi	r19, 0xFF	; 255
    5282:	4f e7       	ldi	r20, 0x7F	; 127
    5284:	57 e4       	ldi	r21, 0x47	; 71
    5286:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    528a:	18 16       	cp	r1, r24
    528c:	4c f5       	brge	.+82     	; 0x52e0 <vTask2_Function+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    528e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5290:	7c 85       	ldd	r23, Y+12	; 0x0c
    5292:	8d 85       	ldd	r24, Y+13	; 0x0d
    5294:	9e 85       	ldd	r25, Y+14	; 0x0e
    5296:	20 e0       	ldi	r18, 0x00	; 0
    5298:	30 e0       	ldi	r19, 0x00	; 0
    529a:	40 e2       	ldi	r20, 0x20	; 32
    529c:	51 e4       	ldi	r21, 0x41	; 65
    529e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52a2:	dc 01       	movw	r26, r24
    52a4:	cb 01       	movw	r24, r22
    52a6:	bc 01       	movw	r22, r24
    52a8:	cd 01       	movw	r24, r26
    52aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52ae:	dc 01       	movw	r26, r24
    52b0:	cb 01       	movw	r24, r22
    52b2:	9e 83       	std	Y+6, r25	; 0x06
    52b4:	8d 83       	std	Y+5, r24	; 0x05
    52b6:	0f c0       	rjmp	.+30     	; 0x52d6 <vTask2_Function+0xd6>
    52b8:	88 ec       	ldi	r24, 0xC8	; 200
    52ba:	90 e0       	ldi	r25, 0x00	; 0
    52bc:	9c 83       	std	Y+4, r25	; 0x04
    52be:	8b 83       	std	Y+3, r24	; 0x03
    52c0:	8b 81       	ldd	r24, Y+3	; 0x03
    52c2:	9c 81       	ldd	r25, Y+4	; 0x04
    52c4:	01 97       	sbiw	r24, 0x01	; 1
    52c6:	f1 f7       	brne	.-4      	; 0x52c4 <vTask2_Function+0xc4>
    52c8:	9c 83       	std	Y+4, r25	; 0x04
    52ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52cc:	8d 81       	ldd	r24, Y+5	; 0x05
    52ce:	9e 81       	ldd	r25, Y+6	; 0x06
    52d0:	01 97       	sbiw	r24, 0x01	; 1
    52d2:	9e 83       	std	Y+6, r25	; 0x06
    52d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52d6:	8d 81       	ldd	r24, Y+5	; 0x05
    52d8:	9e 81       	ldd	r25, Y+6	; 0x06
    52da:	00 97       	sbiw	r24, 0x00	; 0
    52dc:	69 f7       	brne	.-38     	; 0x52b8 <vTask2_Function+0xb8>
    52de:	9c cf       	rjmp	.-200    	; 0x5218 <vTask2_Function+0x18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52e0:	6f 81       	ldd	r22, Y+7	; 0x07
    52e2:	78 85       	ldd	r23, Y+8	; 0x08
    52e4:	89 85       	ldd	r24, Y+9	; 0x09
    52e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    52e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52ec:	dc 01       	movw	r26, r24
    52ee:	cb 01       	movw	r24, r22
    52f0:	9e 83       	std	Y+6, r25	; 0x06
    52f2:	8d 83       	std	Y+5, r24	; 0x05
    52f4:	8d 81       	ldd	r24, Y+5	; 0x05
    52f6:	9e 81       	ldd	r25, Y+6	; 0x06
    52f8:	9a 83       	std	Y+2, r25	; 0x02
    52fa:	89 83       	std	Y+1, r24	; 0x01
    52fc:	89 81       	ldd	r24, Y+1	; 0x01
    52fe:	9a 81       	ldd	r25, Y+2	; 0x02
    5300:	01 97       	sbiw	r24, 0x01	; 1
    5302:	f1 f7       	brne	.-4      	; 0x5300 <vTask2_Function+0x100>
    5304:	9a 83       	std	Y+2, r25	; 0x02
    5306:	89 83       	std	Y+1, r24	; 0x01
    5308:	87 cf       	rjmp	.-242    	; 0x5218 <vTask2_Function+0x18>

0000530a <vid_SystemInit>:
#include "config.h"

/***--------------------------------------------------------------***/

void vid_SystemInit (void)
{
    530a:	df 93       	push	r29
    530c:	cf 93       	push	r28
    530e:	cd b7       	in	r28, 0x3d	; 61
    5310:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection (PORTA_DIO, RED_LED, OUTPUT);
    5312:	80 e0       	ldi	r24, 0x00	; 0
    5314:	60 e0       	ldi	r22, 0x00	; 0
    5316:	41 e0       	ldi	r20, 0x01	; 1
    5318:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <DIO_SetPinDirection>
	DIO_SetPinDirection (PORTA_DIO, GREEN_LED, OUTPUT);
    531c:	80 e0       	ldi	r24, 0x00	; 0
    531e:	61 e0       	ldi	r22, 0x01	; 1
    5320:	41 e0       	ldi	r20, 0x01	; 1
    5322:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <DIO_SetPinDirection>

}
    5326:	cf 91       	pop	r28
    5328:	df 91       	pop	r29
    532a:	08 95       	ret

0000532c <RedLed_ON>:

/***--------------------------------------------------------------***/

void RedLed_ON (void)
{
    532c:	df 93       	push	r29
    532e:	cf 93       	push	r28
    5330:	cd b7       	in	r28, 0x3d	; 61
    5332:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue (PORTA_DIO, RED_LED, HIGH);
    5334:	80 e0       	ldi	r24, 0x00	; 0
    5336:	60 e0       	ldi	r22, 0x00	; 0
    5338:	41 e0       	ldi	r20, 0x01	; 1
    533a:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <DIO_SetPinValue>
	DIO_SetPinValue (PORTA_DIO, GREEN_LED, LOW);
    533e:	80 e0       	ldi	r24, 0x00	; 0
    5340:	61 e0       	ldi	r22, 0x01	; 1
    5342:	40 e0       	ldi	r20, 0x00	; 0
    5344:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <DIO_SetPinValue>
}
    5348:	cf 91       	pop	r28
    534a:	df 91       	pop	r29
    534c:	08 95       	ret

0000534e <RedLed_OFF>:

/***--------------------------------------------------------------***/

void RedLed_OFF (void)
{
    534e:	df 93       	push	r29
    5350:	cf 93       	push	r28
    5352:	cd b7       	in	r28, 0x3d	; 61
    5354:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue (PORTA_DIO, RED_LED, LOW);
    5356:	80 e0       	ldi	r24, 0x00	; 0
    5358:	60 e0       	ldi	r22, 0x00	; 0
    535a:	40 e0       	ldi	r20, 0x00	; 0
    535c:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <DIO_SetPinValue>
}
    5360:	cf 91       	pop	r28
    5362:	df 91       	pop	r29
    5364:	08 95       	ret

00005366 <GreenLed_ON>:


/***--------------------------------------------------------------***/

void GreenLed_ON (void)
{
    5366:	df 93       	push	r29
    5368:	cf 93       	push	r28
    536a:	cd b7       	in	r28, 0x3d	; 61
    536c:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue (PORTA_DIO, GREEN_LED, HIGH);
    536e:	80 e0       	ldi	r24, 0x00	; 0
    5370:	61 e0       	ldi	r22, 0x01	; 1
    5372:	41 e0       	ldi	r20, 0x01	; 1
    5374:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <DIO_SetPinValue>
	DIO_SetPinValue (PORTA_DIO, RED_LED, LOW);
    5378:	80 e0       	ldi	r24, 0x00	; 0
    537a:	60 e0       	ldi	r22, 0x00	; 0
    537c:	40 e0       	ldi	r20, 0x00	; 0
    537e:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <DIO_SetPinValue>
}
    5382:	cf 91       	pop	r28
    5384:	df 91       	pop	r29
    5386:	08 95       	ret

00005388 <GreenLed_OFF>:

/***--------------------------------------------------------------***/

void GreenLed_OFF (void)
{
    5388:	df 93       	push	r29
    538a:	cf 93       	push	r28
    538c:	cd b7       	in	r28, 0x3d	; 61
    538e:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue (PORTA_DIO, GREEN_LED, LOW);
    5390:	80 e0       	ldi	r24, 0x00	; 0
    5392:	61 e0       	ldi	r22, 0x01	; 1
    5394:	40 e0       	ldi	r20, 0x00	; 0
    5396:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <DIO_SetPinValue>
}
    539a:	cf 91       	pop	r28
    539c:	df 91       	pop	r29
    539e:	08 95       	ret

000053a0 <__prologue_saves__>:
    53a0:	2f 92       	push	r2
    53a2:	3f 92       	push	r3
    53a4:	4f 92       	push	r4
    53a6:	5f 92       	push	r5
    53a8:	6f 92       	push	r6
    53aa:	7f 92       	push	r7
    53ac:	8f 92       	push	r8
    53ae:	9f 92       	push	r9
    53b0:	af 92       	push	r10
    53b2:	bf 92       	push	r11
    53b4:	cf 92       	push	r12
    53b6:	df 92       	push	r13
    53b8:	ef 92       	push	r14
    53ba:	ff 92       	push	r15
    53bc:	0f 93       	push	r16
    53be:	1f 93       	push	r17
    53c0:	cf 93       	push	r28
    53c2:	df 93       	push	r29
    53c4:	cd b7       	in	r28, 0x3d	; 61
    53c6:	de b7       	in	r29, 0x3e	; 62
    53c8:	ca 1b       	sub	r28, r26
    53ca:	db 0b       	sbc	r29, r27
    53cc:	0f b6       	in	r0, 0x3f	; 63
    53ce:	f8 94       	cli
    53d0:	de bf       	out	0x3e, r29	; 62
    53d2:	0f be       	out	0x3f, r0	; 63
    53d4:	cd bf       	out	0x3d, r28	; 61
    53d6:	09 94       	ijmp

000053d8 <__epilogue_restores__>:
    53d8:	2a 88       	ldd	r2, Y+18	; 0x12
    53da:	39 88       	ldd	r3, Y+17	; 0x11
    53dc:	48 88       	ldd	r4, Y+16	; 0x10
    53de:	5f 84       	ldd	r5, Y+15	; 0x0f
    53e0:	6e 84       	ldd	r6, Y+14	; 0x0e
    53e2:	7d 84       	ldd	r7, Y+13	; 0x0d
    53e4:	8c 84       	ldd	r8, Y+12	; 0x0c
    53e6:	9b 84       	ldd	r9, Y+11	; 0x0b
    53e8:	aa 84       	ldd	r10, Y+10	; 0x0a
    53ea:	b9 84       	ldd	r11, Y+9	; 0x09
    53ec:	c8 84       	ldd	r12, Y+8	; 0x08
    53ee:	df 80       	ldd	r13, Y+7	; 0x07
    53f0:	ee 80       	ldd	r14, Y+6	; 0x06
    53f2:	fd 80       	ldd	r15, Y+5	; 0x05
    53f4:	0c 81       	ldd	r16, Y+4	; 0x04
    53f6:	1b 81       	ldd	r17, Y+3	; 0x03
    53f8:	aa 81       	ldd	r26, Y+2	; 0x02
    53fa:	b9 81       	ldd	r27, Y+1	; 0x01
    53fc:	ce 0f       	add	r28, r30
    53fe:	d1 1d       	adc	r29, r1
    5400:	0f b6       	in	r0, 0x3f	; 63
    5402:	f8 94       	cli
    5404:	de bf       	out	0x3e, r29	; 62
    5406:	0f be       	out	0x3f, r0	; 63
    5408:	cd bf       	out	0x3d, r28	; 61
    540a:	ed 01       	movw	r28, r26
    540c:	08 95       	ret

0000540e <malloc>:
    540e:	cf 93       	push	r28
    5410:	df 93       	push	r29
    5412:	bc 01       	movw	r22, r24
    5414:	82 30       	cpi	r24, 0x02	; 2
    5416:	91 05       	cpc	r25, r1
    5418:	10 f4       	brcc	.+4      	; 0x541e <malloc+0x10>
    541a:	62 e0       	ldi	r22, 0x02	; 2
    541c:	70 e0       	ldi	r23, 0x00	; 0
    541e:	a0 91 28 01 	lds	r26, 0x0128
    5422:	b0 91 29 01 	lds	r27, 0x0129
    5426:	ed 01       	movw	r28, r26
    5428:	e0 e0       	ldi	r30, 0x00	; 0
    542a:	f0 e0       	ldi	r31, 0x00	; 0
    542c:	40 e0       	ldi	r20, 0x00	; 0
    542e:	50 e0       	ldi	r21, 0x00	; 0
    5430:	21 c0       	rjmp	.+66     	; 0x5474 <malloc+0x66>
    5432:	88 81       	ld	r24, Y
    5434:	99 81       	ldd	r25, Y+1	; 0x01
    5436:	86 17       	cp	r24, r22
    5438:	97 07       	cpc	r25, r23
    543a:	69 f4       	brne	.+26     	; 0x5456 <malloc+0x48>
    543c:	8a 81       	ldd	r24, Y+2	; 0x02
    543e:	9b 81       	ldd	r25, Y+3	; 0x03
    5440:	30 97       	sbiw	r30, 0x00	; 0
    5442:	19 f0       	breq	.+6      	; 0x544a <malloc+0x3c>
    5444:	93 83       	std	Z+3, r25	; 0x03
    5446:	82 83       	std	Z+2, r24	; 0x02
    5448:	04 c0       	rjmp	.+8      	; 0x5452 <malloc+0x44>
    544a:	90 93 29 01 	sts	0x0129, r25
    544e:	80 93 28 01 	sts	0x0128, r24
    5452:	fe 01       	movw	r30, r28
    5454:	34 c0       	rjmp	.+104    	; 0x54be <malloc+0xb0>
    5456:	68 17       	cp	r22, r24
    5458:	79 07       	cpc	r23, r25
    545a:	38 f4       	brcc	.+14     	; 0x546a <malloc+0x5c>
    545c:	41 15       	cp	r20, r1
    545e:	51 05       	cpc	r21, r1
    5460:	19 f0       	breq	.+6      	; 0x5468 <malloc+0x5a>
    5462:	84 17       	cp	r24, r20
    5464:	95 07       	cpc	r25, r21
    5466:	08 f4       	brcc	.+2      	; 0x546a <malloc+0x5c>
    5468:	ac 01       	movw	r20, r24
    546a:	fe 01       	movw	r30, r28
    546c:	8a 81       	ldd	r24, Y+2	; 0x02
    546e:	9b 81       	ldd	r25, Y+3	; 0x03
    5470:	9c 01       	movw	r18, r24
    5472:	e9 01       	movw	r28, r18
    5474:	20 97       	sbiw	r28, 0x00	; 0
    5476:	e9 f6       	brne	.-70     	; 0x5432 <malloc+0x24>
    5478:	41 15       	cp	r20, r1
    547a:	51 05       	cpc	r21, r1
    547c:	a9 f1       	breq	.+106    	; 0x54e8 <malloc+0xda>
    547e:	ca 01       	movw	r24, r20
    5480:	86 1b       	sub	r24, r22
    5482:	97 0b       	sbc	r25, r23
    5484:	04 97       	sbiw	r24, 0x04	; 4
    5486:	08 f4       	brcc	.+2      	; 0x548a <malloc+0x7c>
    5488:	ba 01       	movw	r22, r20
    548a:	e0 e0       	ldi	r30, 0x00	; 0
    548c:	f0 e0       	ldi	r31, 0x00	; 0
    548e:	2a c0       	rjmp	.+84     	; 0x54e4 <malloc+0xd6>
    5490:	8d 91       	ld	r24, X+
    5492:	9c 91       	ld	r25, X
    5494:	11 97       	sbiw	r26, 0x01	; 1
    5496:	84 17       	cp	r24, r20
    5498:	95 07       	cpc	r25, r21
    549a:	f9 f4       	brne	.+62     	; 0x54da <malloc+0xcc>
    549c:	64 17       	cp	r22, r20
    549e:	75 07       	cpc	r23, r21
    54a0:	81 f4       	brne	.+32     	; 0x54c2 <malloc+0xb4>
    54a2:	12 96       	adiw	r26, 0x02	; 2
    54a4:	8d 91       	ld	r24, X+
    54a6:	9c 91       	ld	r25, X
    54a8:	13 97       	sbiw	r26, 0x03	; 3
    54aa:	30 97       	sbiw	r30, 0x00	; 0
    54ac:	19 f0       	breq	.+6      	; 0x54b4 <malloc+0xa6>
    54ae:	93 83       	std	Z+3, r25	; 0x03
    54b0:	82 83       	std	Z+2, r24	; 0x02
    54b2:	04 c0       	rjmp	.+8      	; 0x54bc <malloc+0xae>
    54b4:	90 93 29 01 	sts	0x0129, r25
    54b8:	80 93 28 01 	sts	0x0128, r24
    54bc:	fd 01       	movw	r30, r26
    54be:	32 96       	adiw	r30, 0x02	; 2
    54c0:	4f c0       	rjmp	.+158    	; 0x5560 <malloc+0x152>
    54c2:	ca 01       	movw	r24, r20
    54c4:	86 1b       	sub	r24, r22
    54c6:	97 0b       	sbc	r25, r23
    54c8:	fd 01       	movw	r30, r26
    54ca:	e8 0f       	add	r30, r24
    54cc:	f9 1f       	adc	r31, r25
    54ce:	61 93       	st	Z+, r22
    54d0:	71 93       	st	Z+, r23
    54d2:	02 97       	sbiw	r24, 0x02	; 2
    54d4:	8d 93       	st	X+, r24
    54d6:	9c 93       	st	X, r25
    54d8:	43 c0       	rjmp	.+134    	; 0x5560 <malloc+0x152>
    54da:	fd 01       	movw	r30, r26
    54dc:	82 81       	ldd	r24, Z+2	; 0x02
    54de:	93 81       	ldd	r25, Z+3	; 0x03
    54e0:	9c 01       	movw	r18, r24
    54e2:	d9 01       	movw	r26, r18
    54e4:	10 97       	sbiw	r26, 0x00	; 0
    54e6:	a1 f6       	brne	.-88     	; 0x5490 <malloc+0x82>
    54e8:	80 91 26 01 	lds	r24, 0x0126
    54ec:	90 91 27 01 	lds	r25, 0x0127
    54f0:	89 2b       	or	r24, r25
    54f2:	41 f4       	brne	.+16     	; 0x5504 <malloc+0xf6>
    54f4:	80 91 86 00 	lds	r24, 0x0086
    54f8:	90 91 87 00 	lds	r25, 0x0087
    54fc:	90 93 27 01 	sts	0x0127, r25
    5500:	80 93 26 01 	sts	0x0126, r24
    5504:	40 91 88 00 	lds	r20, 0x0088
    5508:	50 91 89 00 	lds	r21, 0x0089
    550c:	41 15       	cp	r20, r1
    550e:	51 05       	cpc	r21, r1
    5510:	41 f4       	brne	.+16     	; 0x5522 <malloc+0x114>
    5512:	4d b7       	in	r20, 0x3d	; 61
    5514:	5e b7       	in	r21, 0x3e	; 62
    5516:	80 91 84 00 	lds	r24, 0x0084
    551a:	90 91 85 00 	lds	r25, 0x0085
    551e:	48 1b       	sub	r20, r24
    5520:	59 0b       	sbc	r21, r25
    5522:	20 91 26 01 	lds	r18, 0x0126
    5526:	30 91 27 01 	lds	r19, 0x0127
    552a:	24 17       	cp	r18, r20
    552c:	35 07       	cpc	r19, r21
    552e:	b0 f4       	brcc	.+44     	; 0x555c <malloc+0x14e>
    5530:	ca 01       	movw	r24, r20
    5532:	82 1b       	sub	r24, r18
    5534:	93 0b       	sbc	r25, r19
    5536:	86 17       	cp	r24, r22
    5538:	97 07       	cpc	r25, r23
    553a:	80 f0       	brcs	.+32     	; 0x555c <malloc+0x14e>
    553c:	ab 01       	movw	r20, r22
    553e:	4e 5f       	subi	r20, 0xFE	; 254
    5540:	5f 4f       	sbci	r21, 0xFF	; 255
    5542:	84 17       	cp	r24, r20
    5544:	95 07       	cpc	r25, r21
    5546:	50 f0       	brcs	.+20     	; 0x555c <malloc+0x14e>
    5548:	42 0f       	add	r20, r18
    554a:	53 1f       	adc	r21, r19
    554c:	50 93 27 01 	sts	0x0127, r21
    5550:	40 93 26 01 	sts	0x0126, r20
    5554:	f9 01       	movw	r30, r18
    5556:	61 93       	st	Z+, r22
    5558:	71 93       	st	Z+, r23
    555a:	02 c0       	rjmp	.+4      	; 0x5560 <malloc+0x152>
    555c:	e0 e0       	ldi	r30, 0x00	; 0
    555e:	f0 e0       	ldi	r31, 0x00	; 0
    5560:	cf 01       	movw	r24, r30
    5562:	df 91       	pop	r29
    5564:	cf 91       	pop	r28
    5566:	08 95       	ret

00005568 <free>:
    5568:	cf 93       	push	r28
    556a:	df 93       	push	r29
    556c:	00 97       	sbiw	r24, 0x00	; 0
    556e:	09 f4       	brne	.+2      	; 0x5572 <free+0xa>
    5570:	50 c0       	rjmp	.+160    	; 0x5612 <free+0xaa>
    5572:	ec 01       	movw	r28, r24
    5574:	22 97       	sbiw	r28, 0x02	; 2
    5576:	1b 82       	std	Y+3, r1	; 0x03
    5578:	1a 82       	std	Y+2, r1	; 0x02
    557a:	a0 91 28 01 	lds	r26, 0x0128
    557e:	b0 91 29 01 	lds	r27, 0x0129
    5582:	10 97       	sbiw	r26, 0x00	; 0
    5584:	09 f1       	breq	.+66     	; 0x55c8 <free+0x60>
    5586:	40 e0       	ldi	r20, 0x00	; 0
    5588:	50 e0       	ldi	r21, 0x00	; 0
    558a:	ac 17       	cp	r26, r28
    558c:	bd 07       	cpc	r27, r29
    558e:	08 f1       	brcs	.+66     	; 0x55d2 <free+0x6a>
    5590:	bb 83       	std	Y+3, r27	; 0x03
    5592:	aa 83       	std	Y+2, r26	; 0x02
    5594:	fe 01       	movw	r30, r28
    5596:	21 91       	ld	r18, Z+
    5598:	31 91       	ld	r19, Z+
    559a:	e2 0f       	add	r30, r18
    559c:	f3 1f       	adc	r31, r19
    559e:	ae 17       	cp	r26, r30
    55a0:	bf 07       	cpc	r27, r31
    55a2:	79 f4       	brne	.+30     	; 0x55c2 <free+0x5a>
    55a4:	8d 91       	ld	r24, X+
    55a6:	9c 91       	ld	r25, X
    55a8:	11 97       	sbiw	r26, 0x01	; 1
    55aa:	28 0f       	add	r18, r24
    55ac:	39 1f       	adc	r19, r25
    55ae:	2e 5f       	subi	r18, 0xFE	; 254
    55b0:	3f 4f       	sbci	r19, 0xFF	; 255
    55b2:	39 83       	std	Y+1, r19	; 0x01
    55b4:	28 83       	st	Y, r18
    55b6:	12 96       	adiw	r26, 0x02	; 2
    55b8:	8d 91       	ld	r24, X+
    55ba:	9c 91       	ld	r25, X
    55bc:	13 97       	sbiw	r26, 0x03	; 3
    55be:	9b 83       	std	Y+3, r25	; 0x03
    55c0:	8a 83       	std	Y+2, r24	; 0x02
    55c2:	41 15       	cp	r20, r1
    55c4:	51 05       	cpc	r21, r1
    55c6:	71 f4       	brne	.+28     	; 0x55e4 <free+0x7c>
    55c8:	d0 93 29 01 	sts	0x0129, r29
    55cc:	c0 93 28 01 	sts	0x0128, r28
    55d0:	20 c0       	rjmp	.+64     	; 0x5612 <free+0xaa>
    55d2:	12 96       	adiw	r26, 0x02	; 2
    55d4:	8d 91       	ld	r24, X+
    55d6:	9c 91       	ld	r25, X
    55d8:	13 97       	sbiw	r26, 0x03	; 3
    55da:	ad 01       	movw	r20, r26
    55dc:	00 97       	sbiw	r24, 0x00	; 0
    55de:	11 f0       	breq	.+4      	; 0x55e4 <free+0x7c>
    55e0:	dc 01       	movw	r26, r24
    55e2:	d3 cf       	rjmp	.-90     	; 0x558a <free+0x22>
    55e4:	fa 01       	movw	r30, r20
    55e6:	d3 83       	std	Z+3, r29	; 0x03
    55e8:	c2 83       	std	Z+2, r28	; 0x02
    55ea:	21 91       	ld	r18, Z+
    55ec:	31 91       	ld	r19, Z+
    55ee:	e2 0f       	add	r30, r18
    55f0:	f3 1f       	adc	r31, r19
    55f2:	ce 17       	cp	r28, r30
    55f4:	df 07       	cpc	r29, r31
    55f6:	69 f4       	brne	.+26     	; 0x5612 <free+0xaa>
    55f8:	88 81       	ld	r24, Y
    55fa:	99 81       	ldd	r25, Y+1	; 0x01
    55fc:	28 0f       	add	r18, r24
    55fe:	39 1f       	adc	r19, r25
    5600:	2e 5f       	subi	r18, 0xFE	; 254
    5602:	3f 4f       	sbci	r19, 0xFF	; 255
    5604:	fa 01       	movw	r30, r20
    5606:	31 83       	std	Z+1, r19	; 0x01
    5608:	20 83       	st	Z, r18
    560a:	8a 81       	ldd	r24, Y+2	; 0x02
    560c:	9b 81       	ldd	r25, Y+3	; 0x03
    560e:	93 83       	std	Z+3, r25	; 0x03
    5610:	82 83       	std	Z+2, r24	; 0x02
    5612:	df 91       	pop	r29
    5614:	cf 91       	pop	r28
    5616:	08 95       	ret

00005618 <memcpy>:
    5618:	fb 01       	movw	r30, r22
    561a:	dc 01       	movw	r26, r24
    561c:	02 c0       	rjmp	.+4      	; 0x5622 <memcpy+0xa>
    561e:	01 90       	ld	r0, Z+
    5620:	0d 92       	st	X+, r0
    5622:	41 50       	subi	r20, 0x01	; 1
    5624:	50 40       	sbci	r21, 0x00	; 0
    5626:	d8 f7       	brcc	.-10     	; 0x561e <memcpy+0x6>
    5628:	08 95       	ret

0000562a <_exit>:
    562a:	f8 94       	cli

0000562c <__stop_program>:
    562c:	ff cf       	rjmp	.-2      	; 0x562c <__stop_program>
