
S_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00002e32  00002ec6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  008000a0  008000a0  00002f06  2**0
                  ALLOC
  3 .stab         00002a78  00000000  00000000  00002f08  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f6d  00000000  00000000  00005980  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000068ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000087e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000096d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a480  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a5e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a86d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b03b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__vector_1>
       8:	0c 94 ad 0a 	jmp	0x155a	; 0x155a <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e3       	ldi	r30, 0x32	; 50
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3a       	cpi	r26, 0xA0	; 160
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ea       	ldi	r26, 0xA0	; 160
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3a       	cpi	r26, 0xA7	; 167
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 12 06 	call	0xc24	; 0xc24 <main>
      8a:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e9       	ldi	r26, 0x94	; 148
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e9       	ldi	r24, 0x94	; 148
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f0 16 	jmp	0x2de0	; 0x2de0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0c 17 	jmp	0x2e18	; 0x2e18 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_16>:
extern u8 u8_TMP_Read ;
extern u8 u8_LDR_Read ;



ISR(ADC_vect){
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	8f 93       	push	r24
     b52:	ef 93       	push	r30
     b54:	ff 93       	push	r31
     b56:	df 93       	push	r29
     b58:	cf 93       	push	r28
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62

	if (u8AdcChannel == TEMPERATURE_SENSOR ) {
     b5e:	80 91 a0 00 	lds	r24, 0x00A0
     b62:	88 23       	and	r24, r24
     b64:	31 f4       	brne	.+12     	; 0xb72 <__vector_16+0x2c>
		u8_TMP_Read = ADCH_REG ;
     b66:	e5 e2       	ldi	r30, 0x25	; 37
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	80 93 a1 00 	sts	0x00A1, r24
     b70:	09 c0       	rjmp	.+18     	; 0xb84 <__vector_16+0x3e>
	}
	else if (u8AdcChannel == LDR_SENSOR) {
     b72:	80 91 a0 00 	lds	r24, 0x00A0
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	29 f4       	brne	.+10     	; 0xb84 <__vector_16+0x3e>
		u8_LDR_Read = ADCH_REG ;
     b7a:	e5 e2       	ldi	r30, 0x25	; 37
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	80 93 a2 00 	sts	0x00A2, r24
	}
	else {

	}

}
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	ff 91       	pop	r31
     b8a:	ef 91       	pop	r30
     b8c:	8f 91       	pop	r24
     b8e:	0f 90       	pop	r0
     b90:	0f be       	out	0x3f, r0	; 63
     b92:	0f 90       	pop	r0
     b94:	1f 90       	pop	r1
     b96:	18 95       	reti

00000b98 <vid_ADC_vid_Initialize>:
/************************************************************/

extern u8 u8AdcChannel  ;


void vid_ADC_vid_Initialize (void) {
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62

	ADMUX_REG =  0b01100000 ;     // VR : AVCC , LEFT SHIFT
     ba0:	e7 e2       	ldi	r30, 0x27	; 39
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 e6       	ldi	r24, 0x60	; 96
     ba6:	80 83       	st	Z, r24

	SET_BIT(ADCSRA_REG,ADEN)  ;    // ENABLE ADC ,
     ba8:	a6 e2       	ldi	r26, 0x26	; 38
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	e6 e2       	ldi	r30, 0x26	; 38
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	80 68       	ori	r24, 0x80	; 128
     bb4:	8c 93       	st	X, r24
	(ADCSRA_REG) &= ~((1 << (0))|(1 << (1))|(1 << (2)) ) ; // PRESCALER = 2
     bb6:	a6 e2       	ldi	r26, 0x26	; 38
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	e6 e2       	ldi	r30, 0x26	; 38
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	88 7f       	andi	r24, 0xF8	; 248
     bc2:	8c 93       	st	X, r24

	SET_BIT(ADCSRA_REG,ADIE)  ;    // ENABLE ADC INTERRUPT ,
     bc4:	a6 e2       	ldi	r26, 0x26	; 38
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	e6 e2       	ldi	r30, 0x26	; 38
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	88 60       	ori	r24, 0x08	; 8
     bd0:	8c 93       	st	X, r24

}
     bd2:	cf 91       	pop	r28
     bd4:	df 91       	pop	r29
     bd6:	08 95       	ret

00000bd8 <U8_ADC_U8_Read>:

/************************************************************/

void U8_ADC_U8_Read (u8 channel) {
     bd8:	df 93       	push	r29
     bda:	cf 93       	push	r28
     bdc:	0f 92       	push	r0
     bde:	cd b7       	in	r28, 0x3d	; 61
     be0:	de b7       	in	r29, 0x3e	; 62
     be2:	89 83       	std	Y+1, r24	; 0x01

		u8AdcChannel = channel ;
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	80 93 a0 00 	sts	0x00A0, r24

		channel &= 0b00000111;        // channel from 0 : 7(0b111)  ,& to neglect any bit more than 7
     bea:	89 81       	ldd	r24, Y+1	; 0x01
     bec:	87 70       	andi	r24, 0x07	; 7
     bee:	89 83       	std	Y+1, r24	; 0x01
		ADMUX_REG &= 0b11100000;      // to save higher 3 bits as they are and set the rest to 0
     bf0:	a7 e2       	ldi	r26, 0x27	; 39
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	e7 e2       	ldi	r30, 0x27	; 39
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	80 7e       	andi	r24, 0xE0	; 224
     bfc:	8c 93       	st	X, r24
		ADMUX_REG |= channel;         // Take the target channel
     bfe:	a7 e2       	ldi	r26, 0x27	; 39
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e7 e2       	ldi	r30, 0x27	; 39
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	90 81       	ld	r25, Z
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	89 2b       	or	r24, r25
     c0c:	8c 93       	st	X, r24

		SET_BIT(ADCSRA_REG,ADSC)  ;     // start conversion
     c0e:	a6 e2       	ldi	r26, 0x26	; 38
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e6 e2       	ldi	r30, 0x26	; 38
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	80 64       	ori	r24, 0x40	; 64
     c1a:	8c 93       	st	X, r24

}
     c1c:	0f 90       	pop	r0
     c1e:	cf 91       	pop	r28
     c20:	df 91       	pop	r29
     c22:	08 95       	ret

00000c24 <main>:
/****************************************************************/




int main (void) {
     c24:	df 93       	push	r29
     c26:	cf 93       	push	r28
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62


	vid_DIO_vid_SetDioDirections () ;
     c2c:	0e 94 48 12 	call	0x2490	; 0x2490 <vid_DIO_vid_SetDioDirections>

	vid_ADC_vid_Initialize () ;
     c30:	0e 94 cc 05 	call	0xb98	; 0xb98 <vid_ADC_vid_Initialize>

	vid_Timer0_vid_InitializePWM () ;
     c34:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <vid_Timer0_vid_InitializePWM>

	vid_ExtInt0_vid_InitializeExtInt () ;
     c38:	0e 94 4a 09 	call	0x1294	; 0x1294 <vid_ExtInt0_vid_InitializeExtInt>
	vid_ExtInt1_vid_InitializeExtInt () ;
     c3c:	0e 94 67 09 	call	0x12ce	; 0x12ce <vid_ExtInt1_vid_InitializeExtInt>

	vid_Stepper_Init ();
     c40:	0e 94 a5 14 	call	0x294a	; 0x294a <vid_Stepper_Init>
	LCD_vidInitialize() ;
     c44:	0e 94 80 0c 	call	0x1900	; 0x1900 <LCD_vidInitialize>

	vid_WelcomeMsg();
     c48:	0e 94 45 13 	call	0x268a	; 0x268a <vid_WelcomeMsg>
     c4c:	06 c0       	rjmp	.+12     	; 0xc5a <main+0x36>



while (u8PeopleInside != 0 )
{
    UpdateFanSpeed () ;
     c4e:	0e 94 89 12 	call	0x2512	; 0x2512 <UpdateFanSpeed>
    UpdateLightIlluminance () ;
     c52:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <UpdateLightIlluminance>
    vid_LCD_vid_DisplayData() ;
     c56:	0e 94 f5 13 	call	0x27ea	; 0x27ea <vid_LCD_vid_DisplayData>





while (u8PeopleInside != 0 )
     c5a:	80 91 a6 00 	lds	r24, 0x00A6
     c5e:	88 23       	and	r24, r24
     c60:	b1 f7       	brne	.-20     	; 0xc4e <main+0x2a>
{
    UpdateFanSpeed () ;
    UpdateLightIlluminance () ;
    vid_LCD_vid_DisplayData() ;
}
DIO_SystemSleep () ;
     c62:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_SystemSleep>
     c66:	f9 cf       	rjmp	.-14     	; 0xc5a <main+0x36>

00000c68 <DIO_SetPinValue>:
#include "DIO_reg.h"


/* IO Pins */
void DIO_SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy)
{
     c68:	df 93       	push	r29
     c6a:	cf 93       	push	r28
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
     c70:	27 97       	sbiw	r28, 0x07	; 7
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	89 83       	std	Y+1, r24	; 0x01
     c7e:	6a 83       	std	Y+2, r22	; 0x02
     c80:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD_DIO) && (u8PinIdCopy <= PIN7))
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	84 30       	cpi	r24, 0x04	; 4
     c86:	08 f0       	brcs	.+2      	; 0xc8a <DIO_SetPinValue+0x22>
     c88:	ee c0       	rjmp	.+476    	; 0xe66 <DIO_SetPinValue+0x1fe>
     c8a:	8a 81       	ldd	r24, Y+2	; 0x02
     c8c:	88 30       	cpi	r24, 0x08	; 8
     c8e:	08 f0       	brcs	.+2      	; 0xc92 <DIO_SetPinValue+0x2a>
     c90:	ea c0       	rjmp	.+468    	; 0xe66 <DIO_SetPinValue+0x1fe>
	{
		if (u8PinValCopy == HIGH)
     c92:	8b 81       	ldd	r24, Y+3	; 0x03
     c94:	81 30       	cpi	r24, 0x01	; 1
     c96:	09 f0       	breq	.+2      	; 0xc9a <DIO_SetPinValue+0x32>
     c98:	6f c0       	rjmp	.+222    	; 0xd78 <DIO_SetPinValue+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	3f 83       	std	Y+7, r19	; 0x07
     ca2:	2e 83       	std	Y+6, r18	; 0x06
     ca4:	8e 81       	ldd	r24, Y+6	; 0x06
     ca6:	9f 81       	ldd	r25, Y+7	; 0x07
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	91 05       	cpc	r25, r1
     cac:	49 f1       	breq	.+82     	; 0xd00 <DIO_SetPinValue+0x98>
     cae:	2e 81       	ldd	r18, Y+6	; 0x06
     cb0:	3f 81       	ldd	r19, Y+7	; 0x07
     cb2:	22 30       	cpi	r18, 0x02	; 2
     cb4:	31 05       	cpc	r19, r1
     cb6:	2c f4       	brge	.+10     	; 0xcc2 <DIO_SetPinValue+0x5a>
     cb8:	8e 81       	ldd	r24, Y+6	; 0x06
     cba:	9f 81       	ldd	r25, Y+7	; 0x07
     cbc:	00 97       	sbiw	r24, 0x00	; 0
     cbe:	61 f0       	breq	.+24     	; 0xcd8 <DIO_SetPinValue+0x70>
     cc0:	d2 c0       	rjmp	.+420    	; 0xe66 <DIO_SetPinValue+0x1fe>
     cc2:	2e 81       	ldd	r18, Y+6	; 0x06
     cc4:	3f 81       	ldd	r19, Y+7	; 0x07
     cc6:	22 30       	cpi	r18, 0x02	; 2
     cc8:	31 05       	cpc	r19, r1
     cca:	71 f1       	breq	.+92     	; 0xd28 <DIO_SetPinValue+0xc0>
     ccc:	8e 81       	ldd	r24, Y+6	; 0x06
     cce:	9f 81       	ldd	r25, Y+7	; 0x07
     cd0:	83 30       	cpi	r24, 0x03	; 3
     cd2:	91 05       	cpc	r25, r1
     cd4:	e9 f1       	breq	.+122    	; 0xd50 <DIO_SetPinValue+0xe8>
     cd6:	c7 c0       	rjmp	.+398    	; 0xe66 <DIO_SetPinValue+0x1fe>
			{
				case PORTA_DIO: SET_BIT(PORTA_Register,u8PinIdCopy); break;
     cd8:	ab e3       	ldi	r26, 0x3B	; 59
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	eb e3       	ldi	r30, 0x3B	; 59
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	48 2f       	mov	r20, r24
     ce4:	8a 81       	ldd	r24, Y+2	; 0x02
     ce6:	28 2f       	mov	r18, r24
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	02 2e       	mov	r0, r18
     cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <DIO_SetPinValue+0x8e>
     cf2:	88 0f       	add	r24, r24
     cf4:	99 1f       	adc	r25, r25
     cf6:	0a 94       	dec	r0
     cf8:	e2 f7       	brpl	.-8      	; 0xcf2 <DIO_SetPinValue+0x8a>
     cfa:	84 2b       	or	r24, r20
     cfc:	8c 93       	st	X, r24
     cfe:	b3 c0       	rjmp	.+358    	; 0xe66 <DIO_SetPinValue+0x1fe>
				case PORTB_DIO: SET_BIT(PORTB_Register,u8PinIdCopy); break;
     d00:	a8 e3       	ldi	r26, 0x38	; 56
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e8 e3       	ldi	r30, 0x38	; 56
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	48 2f       	mov	r20, r24
     d0c:	8a 81       	ldd	r24, Y+2	; 0x02
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	02 2e       	mov	r0, r18
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <DIO_SetPinValue+0xb6>
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	0a 94       	dec	r0
     d20:	e2 f7       	brpl	.-8      	; 0xd1a <DIO_SetPinValue+0xb2>
     d22:	84 2b       	or	r24, r20
     d24:	8c 93       	st	X, r24
     d26:	9f c0       	rjmp	.+318    	; 0xe66 <DIO_SetPinValue+0x1fe>
				case PORTC_DIO: SET_BIT(PORTC_Register,u8PinIdCopy); break;
     d28:	a5 e3       	ldi	r26, 0x35	; 53
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e5 e3       	ldi	r30, 0x35	; 53
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	48 2f       	mov	r20, r24
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	02 2e       	mov	r0, r18
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <DIO_SetPinValue+0xde>
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	0a 94       	dec	r0
     d48:	e2 f7       	brpl	.-8      	; 0xd42 <DIO_SetPinValue+0xda>
     d4a:	84 2b       	or	r24, r20
     d4c:	8c 93       	st	X, r24
     d4e:	8b c0       	rjmp	.+278    	; 0xe66 <DIO_SetPinValue+0x1fe>
				case PORTD_DIO: SET_BIT(PORTD_Register,u8PinIdCopy); break;
     d50:	a2 e3       	ldi	r26, 0x32	; 50
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	e2 e3       	ldi	r30, 0x32	; 50
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	48 2f       	mov	r20, r24
     d5c:	8a 81       	ldd	r24, Y+2	; 0x02
     d5e:	28 2f       	mov	r18, r24
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	02 2e       	mov	r0, r18
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <DIO_SetPinValue+0x106>
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	0a 94       	dec	r0
     d70:	e2 f7       	brpl	.-8      	; 0xd6a <DIO_SetPinValue+0x102>
     d72:	84 2b       	or	r24, r20
     d74:	8c 93       	st	X, r24
     d76:	77 c0       	rjmp	.+238    	; 0xe66 <DIO_SetPinValue+0x1fe>
			}
		
		}
		
		else if (u8PinValCopy == LOW)
     d78:	8b 81       	ldd	r24, Y+3	; 0x03
     d7a:	88 23       	and	r24, r24
     d7c:	09 f0       	breq	.+2      	; 0xd80 <DIO_SetPinValue+0x118>
     d7e:	73 c0       	rjmp	.+230    	; 0xe66 <DIO_SetPinValue+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	28 2f       	mov	r18, r24
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	3d 83       	std	Y+5, r19	; 0x05
     d88:	2c 83       	std	Y+4, r18	; 0x04
     d8a:	8c 81       	ldd	r24, Y+4	; 0x04
     d8c:	9d 81       	ldd	r25, Y+5	; 0x05
     d8e:	81 30       	cpi	r24, 0x01	; 1
     d90:	91 05       	cpc	r25, r1
     d92:	59 f1       	breq	.+86     	; 0xdea <DIO_SetPinValue+0x182>
     d94:	2c 81       	ldd	r18, Y+4	; 0x04
     d96:	3d 81       	ldd	r19, Y+5	; 0x05
     d98:	22 30       	cpi	r18, 0x02	; 2
     d9a:	31 05       	cpc	r19, r1
     d9c:	2c f4       	brge	.+10     	; 0xda8 <DIO_SetPinValue+0x140>
     d9e:	8c 81       	ldd	r24, Y+4	; 0x04
     da0:	9d 81       	ldd	r25, Y+5	; 0x05
     da2:	00 97       	sbiw	r24, 0x00	; 0
     da4:	69 f0       	breq	.+26     	; 0xdc0 <DIO_SetPinValue+0x158>
     da6:	5f c0       	rjmp	.+190    	; 0xe66 <DIO_SetPinValue+0x1fe>
     da8:	2c 81       	ldd	r18, Y+4	; 0x04
     daa:	3d 81       	ldd	r19, Y+5	; 0x05
     dac:	22 30       	cpi	r18, 0x02	; 2
     dae:	31 05       	cpc	r19, r1
     db0:	89 f1       	breq	.+98     	; 0xe14 <DIO_SetPinValue+0x1ac>
     db2:	8c 81       	ldd	r24, Y+4	; 0x04
     db4:	9d 81       	ldd	r25, Y+5	; 0x05
     db6:	83 30       	cpi	r24, 0x03	; 3
     db8:	91 05       	cpc	r25, r1
     dba:	09 f4       	brne	.+2      	; 0xdbe <DIO_SetPinValue+0x156>
     dbc:	40 c0       	rjmp	.+128    	; 0xe3e <DIO_SetPinValue+0x1d6>
     dbe:	53 c0       	rjmp	.+166    	; 0xe66 <DIO_SetPinValue+0x1fe>
			{
				case PORTA_DIO: CLR_BIT(PORTA_Register,u8PinIdCopy); break;
     dc0:	ab e3       	ldi	r26, 0x3B	; 59
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	eb e3       	ldi	r30, 0x3B	; 59
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	48 2f       	mov	r20, r24
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	28 2f       	mov	r18, r24
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	02 2e       	mov	r0, r18
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <DIO_SetPinValue+0x176>
     dda:	88 0f       	add	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	0a 94       	dec	r0
     de0:	e2 f7       	brpl	.-8      	; 0xdda <DIO_SetPinValue+0x172>
     de2:	80 95       	com	r24
     de4:	84 23       	and	r24, r20
     de6:	8c 93       	st	X, r24
     de8:	3e c0       	rjmp	.+124    	; 0xe66 <DIO_SetPinValue+0x1fe>
				case PORTB_DIO: CLR_BIT(PORTB_Register,u8PinIdCopy); break;
     dea:	a8 e3       	ldi	r26, 0x38	; 56
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e8 e3       	ldi	r30, 0x38	; 56
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	48 2f       	mov	r20, r24
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 2e       	mov	r0, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <DIO_SetPinValue+0x1a0>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	0a 94       	dec	r0
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <DIO_SetPinValue+0x19c>
     e0c:	80 95       	com	r24
     e0e:	84 23       	and	r24, r20
     e10:	8c 93       	st	X, r24
     e12:	29 c0       	rjmp	.+82     	; 0xe66 <DIO_SetPinValue+0x1fe>
				case PORTC_DIO: CLR_BIT(PORTC_Register,u8PinIdCopy); break;
     e14:	a5 e3       	ldi	r26, 0x35	; 53
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e5 e3       	ldi	r30, 0x35	; 53
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 2e       	mov	r0, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <DIO_SetPinValue+0x1ca>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	0a 94       	dec	r0
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <DIO_SetPinValue+0x1c6>
     e36:	80 95       	com	r24
     e38:	84 23       	and	r24, r20
     e3a:	8c 93       	st	X, r24
     e3c:	14 c0       	rjmp	.+40     	; 0xe66 <DIO_SetPinValue+0x1fe>
				case PORTD_DIO: CLR_BIT(PORTD_Register,u8PinIdCopy); break;
     e3e:	a2 e3       	ldi	r26, 0x32	; 50
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e2 e3       	ldi	r30, 0x32	; 50
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	48 2f       	mov	r20, r24
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	02 2e       	mov	r0, r18
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <DIO_SetPinValue+0x1f4>
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	0a 94       	dec	r0
     e5e:	e2 f7       	brpl	.-8      	; 0xe58 <DIO_SetPinValue+0x1f0>
     e60:	80 95       	com	r24
     e62:	84 23       	and	r24, r20
     e64:	8c 93       	st	X, r24
	
	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
     e66:	27 96       	adiw	r28, 0x07	; 7
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	cf 91       	pop	r28
     e74:	df 91       	pop	r29
     e76:	08 95       	ret

00000e78 <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy)
{
     e78:	df 93       	push	r29
     e7a:	cf 93       	push	r28
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <DIO_GetPinValue+0x6>
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <DIO_GetPinValue+0x8>
     e80:	0f 92       	push	r0
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
     e86:	8a 83       	std	Y+2, r24	; 0x02
     e88:	6b 83       	std	Y+3, r22	; 0x03
	/* Define Local Variable to get the BIT Value */
	u8 u8ResultLocal;
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD_DIO) && (u8PinIdCopy <= PIN7))
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	84 30       	cpi	r24, 0x04	; 4
     e8e:	08 f0       	brcs	.+2      	; 0xe92 <DIO_GetPinValue+0x1a>
     e90:	6c c0       	rjmp	.+216    	; 0xf6a <DIO_GetPinValue+0xf2>
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	88 30       	cpi	r24, 0x08	; 8
     e96:	08 f0       	brcs	.+2      	; 0xe9a <DIO_GetPinValue+0x22>
     e98:	68 c0       	rjmp	.+208    	; 0xf6a <DIO_GetPinValue+0xf2>
	{
		/* Check on the Required PORT Number */
		switch (u8PortIdCopy)
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	3d 83       	std	Y+5, r19	; 0x05
     ea2:	2c 83       	std	Y+4, r18	; 0x04
     ea4:	4c 81       	ldd	r20, Y+4	; 0x04
     ea6:	5d 81       	ldd	r21, Y+5	; 0x05
     ea8:	41 30       	cpi	r20, 0x01	; 1
     eaa:	51 05       	cpc	r21, r1
     eac:	41 f1       	breq	.+80     	; 0xefe <DIO_GetPinValue+0x86>
     eae:	8c 81       	ldd	r24, Y+4	; 0x04
     eb0:	9d 81       	ldd	r25, Y+5	; 0x05
     eb2:	82 30       	cpi	r24, 0x02	; 2
     eb4:	91 05       	cpc	r25, r1
     eb6:	34 f4       	brge	.+12     	; 0xec4 <DIO_GetPinValue+0x4c>
     eb8:	2c 81       	ldd	r18, Y+4	; 0x04
     eba:	3d 81       	ldd	r19, Y+5	; 0x05
     ebc:	21 15       	cp	r18, r1
     ebe:	31 05       	cpc	r19, r1
     ec0:	61 f0       	breq	.+24     	; 0xeda <DIO_GetPinValue+0x62>
     ec2:	55 c0       	rjmp	.+170    	; 0xf6e <DIO_GetPinValue+0xf6>
     ec4:	4c 81       	ldd	r20, Y+4	; 0x04
     ec6:	5d 81       	ldd	r21, Y+5	; 0x05
     ec8:	42 30       	cpi	r20, 0x02	; 2
     eca:	51 05       	cpc	r21, r1
     ecc:	51 f1       	breq	.+84     	; 0xf22 <DIO_GetPinValue+0xaa>
     ece:	8c 81       	ldd	r24, Y+4	; 0x04
     ed0:	9d 81       	ldd	r25, Y+5	; 0x05
     ed2:	83 30       	cpi	r24, 0x03	; 3
     ed4:	91 05       	cpc	r25, r1
     ed6:	b9 f1       	breq	.+110    	; 0xf46 <DIO_GetPinValue+0xce>
     ed8:	4a c0       	rjmp	.+148    	; 0xf6e <DIO_GetPinValue+0xf6>
		{
			case PORTA_DIO: u8ResultLocal= GET_BIT(PINA_Register,u8PinIdCopy); break;
     eda:	e9 e3       	ldi	r30, 0x39	; 57
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	88 2f       	mov	r24, r24
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	a9 01       	movw	r20, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <DIO_GetPinValue+0x7a>
     eee:	55 95       	asr	r21
     ef0:	47 95       	ror	r20
     ef2:	8a 95       	dec	r24
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <DIO_GetPinValue+0x76>
     ef6:	ca 01       	movw	r24, r20
     ef8:	81 70       	andi	r24, 0x01	; 1
     efa:	89 83       	std	Y+1, r24	; 0x01
     efc:	38 c0       	rjmp	.+112    	; 0xf6e <DIO_GetPinValue+0xf6>
			case PORTB_DIO: u8ResultLocal= GET_BIT(PINB_Register,u8PinIdCopy); break;
     efe:	e6 e3       	ldi	r30, 0x36	; 54
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	88 2f       	mov	r24, r24
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	a9 01       	movw	r20, r18
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <DIO_GetPinValue+0x9e>
     f12:	55 95       	asr	r21
     f14:	47 95       	ror	r20
     f16:	8a 95       	dec	r24
     f18:	e2 f7       	brpl	.-8      	; 0xf12 <DIO_GetPinValue+0x9a>
     f1a:	ca 01       	movw	r24, r20
     f1c:	81 70       	andi	r24, 0x01	; 1
     f1e:	89 83       	std	Y+1, r24	; 0x01
     f20:	26 c0       	rjmp	.+76     	; 0xf6e <DIO_GetPinValue+0xf6>
			case PORTC_DIO: u8ResultLocal= GET_BIT(PINC_Register,u8PinIdCopy); break;
     f22:	e3 e3       	ldi	r30, 0x33	; 51
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	8b 81       	ldd	r24, Y+3	; 0x03
     f2e:	88 2f       	mov	r24, r24
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	a9 01       	movw	r20, r18
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <DIO_GetPinValue+0xc2>
     f36:	55 95       	asr	r21
     f38:	47 95       	ror	r20
     f3a:	8a 95       	dec	r24
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <DIO_GetPinValue+0xbe>
     f3e:	ca 01       	movw	r24, r20
     f40:	81 70       	andi	r24, 0x01	; 1
     f42:	89 83       	std	Y+1, r24	; 0x01
     f44:	14 c0       	rjmp	.+40     	; 0xf6e <DIO_GetPinValue+0xf6>
			case PORTD_DIO: u8ResultLocal= GET_BIT(PIND_Register,u8PinIdCopy); break;
     f46:	e0 e3       	ldi	r30, 0x30	; 48
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	88 2f       	mov	r24, r24
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	a9 01       	movw	r20, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <DIO_GetPinValue+0xe6>
     f5a:	55 95       	asr	r21
     f5c:	47 95       	ror	r20
     f5e:	8a 95       	dec	r24
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <DIO_GetPinValue+0xe2>
     f62:	ca 01       	movw	r24, r20
     f64:	81 70       	andi	r24, 0x01	; 1
     f66:	89 83       	std	Y+1, r24	; 0x01
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <DIO_GetPinValue+0xf6>
	}
	
	else
	{
		/* return 0xff in case of error in the Pin ID or PORT ID */
		u8ResultLocal = 0xFF;
     f6a:	8f ef       	ldi	r24, 0xFF	; 255
     f6c:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return u8ResultLocal;
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <DIO_SetPinDirection>:

void DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	27 97       	sbiw	r28, 0x07	; 7
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	de bf       	out	0x3e, r29	; 62
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	cd bf       	out	0x3d, r28	; 61
     f94:	89 83       	std	Y+1, r24	; 0x01
     f96:	6a 83       	std	Y+2, r22	; 0x02
     f98:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD_DIO) && (u8PinIdCopy <= PIN7))
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	84 30       	cpi	r24, 0x04	; 4
     f9e:	08 f0       	brcs	.+2      	; 0xfa2 <DIO_SetPinDirection+0x22>
     fa0:	ee c0       	rjmp	.+476    	; 0x117e <DIO_SetPinDirection+0x1fe>
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	88 30       	cpi	r24, 0x08	; 8
     fa6:	08 f0       	brcs	.+2      	; 0xfaa <DIO_SetPinDirection+0x2a>
     fa8:	ea c0       	rjmp	.+468    	; 0x117e <DIO_SetPinDirection+0x1fe>
	{
		if ( u8PinDirCopy == OUTPUT )
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	81 30       	cpi	r24, 0x01	; 1
     fae:	09 f0       	breq	.+2      	; 0xfb2 <DIO_SetPinDirection+0x32>
     fb0:	6f c0       	rjmp	.+222    	; 0x1090 <DIO_SetPinDirection+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	3f 83       	std	Y+7, r19	; 0x07
     fba:	2e 83       	std	Y+6, r18	; 0x06
     fbc:	8e 81       	ldd	r24, Y+6	; 0x06
     fbe:	9f 81       	ldd	r25, Y+7	; 0x07
     fc0:	81 30       	cpi	r24, 0x01	; 1
     fc2:	91 05       	cpc	r25, r1
     fc4:	49 f1       	breq	.+82     	; 0x1018 <DIO_SetPinDirection+0x98>
     fc6:	2e 81       	ldd	r18, Y+6	; 0x06
     fc8:	3f 81       	ldd	r19, Y+7	; 0x07
     fca:	22 30       	cpi	r18, 0x02	; 2
     fcc:	31 05       	cpc	r19, r1
     fce:	2c f4       	brge	.+10     	; 0xfda <DIO_SetPinDirection+0x5a>
     fd0:	8e 81       	ldd	r24, Y+6	; 0x06
     fd2:	9f 81       	ldd	r25, Y+7	; 0x07
     fd4:	00 97       	sbiw	r24, 0x00	; 0
     fd6:	61 f0       	breq	.+24     	; 0xff0 <DIO_SetPinDirection+0x70>
     fd8:	d2 c0       	rjmp	.+420    	; 0x117e <DIO_SetPinDirection+0x1fe>
     fda:	2e 81       	ldd	r18, Y+6	; 0x06
     fdc:	3f 81       	ldd	r19, Y+7	; 0x07
     fde:	22 30       	cpi	r18, 0x02	; 2
     fe0:	31 05       	cpc	r19, r1
     fe2:	71 f1       	breq	.+92     	; 0x1040 <DIO_SetPinDirection+0xc0>
     fe4:	8e 81       	ldd	r24, Y+6	; 0x06
     fe6:	9f 81       	ldd	r25, Y+7	; 0x07
     fe8:	83 30       	cpi	r24, 0x03	; 3
     fea:	91 05       	cpc	r25, r1
     fec:	e9 f1       	breq	.+122    	; 0x1068 <DIO_SetPinDirection+0xe8>
     fee:	c7 c0       	rjmp	.+398    	; 0x117e <DIO_SetPinDirection+0x1fe>
			{
				case PORTA_DIO: SET_BIT(DDRA_Register,u8PinIdCopy); break;
     ff0:	aa e3       	ldi	r26, 0x3A	; 58
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	ea e3       	ldi	r30, 0x3A	; 58
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	48 2f       	mov	r20, r24
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 2e       	mov	r0, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <DIO_SetPinDirection+0x8e>
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	0a 94       	dec	r0
    1010:	e2 f7       	brpl	.-8      	; 0x100a <DIO_SetPinDirection+0x8a>
    1012:	84 2b       	or	r24, r20
    1014:	8c 93       	st	X, r24
    1016:	b3 c0       	rjmp	.+358    	; 0x117e <DIO_SetPinDirection+0x1fe>
				case PORTB_DIO: SET_BIT(DDRB_Register,u8PinIdCopy); break;
    1018:	a7 e3       	ldi	r26, 0x37	; 55
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e7 e3       	ldi	r30, 0x37	; 55
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	48 2f       	mov	r20, r24
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 2e       	mov	r0, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <DIO_SetPinDirection+0xb6>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	0a 94       	dec	r0
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <DIO_SetPinDirection+0xb2>
    103a:	84 2b       	or	r24, r20
    103c:	8c 93       	st	X, r24
    103e:	9f c0       	rjmp	.+318    	; 0x117e <DIO_SetPinDirection+0x1fe>
				case PORTC_DIO: SET_BIT(DDRC_Register,u8PinIdCopy); break;
    1040:	a4 e3       	ldi	r26, 0x34	; 52
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e4 e3       	ldi	r30, 0x34	; 52
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	48 2f       	mov	r20, r24
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	02 2e       	mov	r0, r18
    1058:	02 c0       	rjmp	.+4      	; 0x105e <DIO_SetPinDirection+0xde>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	0a 94       	dec	r0
    1060:	e2 f7       	brpl	.-8      	; 0x105a <DIO_SetPinDirection+0xda>
    1062:	84 2b       	or	r24, r20
    1064:	8c 93       	st	X, r24
    1066:	8b c0       	rjmp	.+278    	; 0x117e <DIO_SetPinDirection+0x1fe>
				case PORTD_DIO: SET_BIT(DDRD_Register,u8PinIdCopy); break;
    1068:	a1 e3       	ldi	r26, 0x31	; 49
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e1 e3       	ldi	r30, 0x31	; 49
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	48 2f       	mov	r20, r24
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	02 2e       	mov	r0, r18
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <DIO_SetPinDirection+0x106>
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	0a 94       	dec	r0
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <DIO_SetPinDirection+0x102>
    108a:	84 2b       	or	r24, r20
    108c:	8c 93       	st	X, r24
    108e:	77 c0       	rjmp	.+238    	; 0x117e <DIO_SetPinDirection+0x1fe>
			}
		}
		
		else if ( u8PinDirCopy == INPUT )
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	88 23       	and	r24, r24
    1094:	09 f0       	breq	.+2      	; 0x1098 <DIO_SetPinDirection+0x118>
    1096:	73 c0       	rjmp	.+230    	; 0x117e <DIO_SetPinDirection+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	3d 83       	std	Y+5, r19	; 0x05
    10a0:	2c 83       	std	Y+4, r18	; 0x04
    10a2:	8c 81       	ldd	r24, Y+4	; 0x04
    10a4:	9d 81       	ldd	r25, Y+5	; 0x05
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	91 05       	cpc	r25, r1
    10aa:	59 f1       	breq	.+86     	; 0x1102 <DIO_SetPinDirection+0x182>
    10ac:	2c 81       	ldd	r18, Y+4	; 0x04
    10ae:	3d 81       	ldd	r19, Y+5	; 0x05
    10b0:	22 30       	cpi	r18, 0x02	; 2
    10b2:	31 05       	cpc	r19, r1
    10b4:	2c f4       	brge	.+10     	; 0x10c0 <DIO_SetPinDirection+0x140>
    10b6:	8c 81       	ldd	r24, Y+4	; 0x04
    10b8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	69 f0       	breq	.+26     	; 0x10d8 <DIO_SetPinDirection+0x158>
    10be:	5f c0       	rjmp	.+190    	; 0x117e <DIO_SetPinDirection+0x1fe>
    10c0:	2c 81       	ldd	r18, Y+4	; 0x04
    10c2:	3d 81       	ldd	r19, Y+5	; 0x05
    10c4:	22 30       	cpi	r18, 0x02	; 2
    10c6:	31 05       	cpc	r19, r1
    10c8:	89 f1       	breq	.+98     	; 0x112c <DIO_SetPinDirection+0x1ac>
    10ca:	8c 81       	ldd	r24, Y+4	; 0x04
    10cc:	9d 81       	ldd	r25, Y+5	; 0x05
    10ce:	83 30       	cpi	r24, 0x03	; 3
    10d0:	91 05       	cpc	r25, r1
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <DIO_SetPinDirection+0x156>
    10d4:	40 c0       	rjmp	.+128    	; 0x1156 <DIO_SetPinDirection+0x1d6>
    10d6:	53 c0       	rjmp	.+166    	; 0x117e <DIO_SetPinDirection+0x1fe>
			{
				case PORTA_DIO: CLR_BIT(DDRA_Register,u8PinIdCopy); break;
    10d8:	aa e3       	ldi	r26, 0x3A	; 58
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	ea e3       	ldi	r30, 0x3A	; 58
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	48 2f       	mov	r20, r24
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	02 2e       	mov	r0, r18
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <DIO_SetPinDirection+0x176>
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	0a 94       	dec	r0
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <DIO_SetPinDirection+0x172>
    10fa:	80 95       	com	r24
    10fc:	84 23       	and	r24, r20
    10fe:	8c 93       	st	X, r24
    1100:	3e c0       	rjmp	.+124    	; 0x117e <DIO_SetPinDirection+0x1fe>
				case PORTB_DIO: CLR_BIT(DDRB_Register,u8PinIdCopy); break;
    1102:	a7 e3       	ldi	r26, 0x37	; 55
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e7 e3       	ldi	r30, 0x37	; 55
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	48 2f       	mov	r20, r24
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	02 2e       	mov	r0, r18
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <DIO_SetPinDirection+0x1a0>
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	0a 94       	dec	r0
    1122:	e2 f7       	brpl	.-8      	; 0x111c <DIO_SetPinDirection+0x19c>
    1124:	80 95       	com	r24
    1126:	84 23       	and	r24, r20
    1128:	8c 93       	st	X, r24
    112a:	29 c0       	rjmp	.+82     	; 0x117e <DIO_SetPinDirection+0x1fe>
				case PORTC_DIO: CLR_BIT(DDRC_Register,u8PinIdCopy); break;
    112c:	a4 e3       	ldi	r26, 0x34	; 52
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e4 e3       	ldi	r30, 0x34	; 52
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	48 2f       	mov	r20, r24
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	02 2e       	mov	r0, r18
    1144:	02 c0       	rjmp	.+4      	; 0x114a <DIO_SetPinDirection+0x1ca>
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	0a 94       	dec	r0
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <DIO_SetPinDirection+0x1c6>
    114e:	80 95       	com	r24
    1150:	84 23       	and	r24, r20
    1152:	8c 93       	st	X, r24
    1154:	14 c0       	rjmp	.+40     	; 0x117e <DIO_SetPinDirection+0x1fe>
				case PORTD_DIO: CLR_BIT(DDRD_Register,u8PinIdCopy); break;
    1156:	a1 e3       	ldi	r26, 0x31	; 49
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e1 e3       	ldi	r30, 0x31	; 49
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	48 2f       	mov	r20, r24
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	02 2e       	mov	r0, r18
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <DIO_SetPinDirection+0x1f4>
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	0a 94       	dec	r0
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <DIO_SetPinDirection+0x1f0>
    1178:	80 95       	com	r24
    117a:	84 23       	and	r24, r20
    117c:	8c 93       	st	X, r24
	
	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
    117e:	27 96       	adiw	r28, 0x07	; 7
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	cd bf       	out	0x3d, r28	; 61
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <DIO_SetPortDirection>:


/* IO Ports */
void DIO_SetPortDirection (u8 u8PortId, u8 u8PortDir)
{
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	00 d0       	rcall	.+0      	; 0x1196 <DIO_SetPortDirection+0x6>
    1196:	00 d0       	rcall	.+0      	; 0x1198 <DIO_SetPortDirection+0x8>
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	3c 83       	std	Y+4, r19	; 0x04
    11a8:	2b 83       	std	Y+3, r18	; 0x03
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	9c 81       	ldd	r25, Y+4	; 0x04
    11ae:	81 30       	cpi	r24, 0x01	; 1
    11b0:	91 05       	cpc	r25, r1
    11b2:	d1 f0       	breq	.+52     	; 0x11e8 <DIO_SetPortDirection+0x58>
    11b4:	2b 81       	ldd	r18, Y+3	; 0x03
    11b6:	3c 81       	ldd	r19, Y+4	; 0x04
    11b8:	22 30       	cpi	r18, 0x02	; 2
    11ba:	31 05       	cpc	r19, r1
    11bc:	2c f4       	brge	.+10     	; 0x11c8 <DIO_SetPortDirection+0x38>
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	9c 81       	ldd	r25, Y+4	; 0x04
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	61 f0       	breq	.+24     	; 0x11de <DIO_SetPortDirection+0x4e>
    11c6:	1e c0       	rjmp	.+60     	; 0x1204 <DIO_SetPortDirection+0x74>
    11c8:	2b 81       	ldd	r18, Y+3	; 0x03
    11ca:	3c 81       	ldd	r19, Y+4	; 0x04
    11cc:	22 30       	cpi	r18, 0x02	; 2
    11ce:	31 05       	cpc	r19, r1
    11d0:	81 f0       	breq	.+32     	; 0x11f2 <DIO_SetPortDirection+0x62>
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	9c 81       	ldd	r25, Y+4	; 0x04
    11d6:	83 30       	cpi	r24, 0x03	; 3
    11d8:	91 05       	cpc	r25, r1
    11da:	81 f0       	breq	.+32     	; 0x11fc <DIO_SetPortDirection+0x6c>
    11dc:	13 c0       	rjmp	.+38     	; 0x1204 <DIO_SetPortDirection+0x74>
	{
			case PORTA_DIO: DDRA_Register = u8PortDir; break;
    11de:	ea e3       	ldi	r30, 0x3A	; 58
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	80 83       	st	Z, r24
    11e6:	0e c0       	rjmp	.+28     	; 0x1204 <DIO_SetPortDirection+0x74>
			case PORTB_DIO: DDRB_Register = u8PortDir; break;
    11e8:	e7 e3       	ldi	r30, 0x37	; 55
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	80 83       	st	Z, r24
    11f0:	09 c0       	rjmp	.+18     	; 0x1204 <DIO_SetPortDirection+0x74>
			case PORTC_DIO: DDRC_Register = u8PortDir; break;
    11f2:	e4 e3       	ldi	r30, 0x34	; 52
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	80 83       	st	Z, r24
    11fa:	04 c0       	rjmp	.+8      	; 0x1204 <DIO_SetPortDirection+0x74>
			case PORTD_DIO: DDRD_Register = u8PortDir; break;
    11fc:	e1 e3       	ldi	r30, 0x31	; 49
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	80 83       	st	Z, r24
		default: /* Wrong Port ID */       break;
	}
}
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	08 95       	ret

00001212 <DIO_SetPortValue>:

void DIO_SetPortValue (u8 u8PortId, u8 u8PortVal)
{
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	00 d0       	rcall	.+0      	; 0x1218 <DIO_SetPortValue+0x6>
    1218:	00 d0       	rcall	.+0      	; 0x121a <DIO_SetPortValue+0x8>
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    121e:	89 83       	std	Y+1, r24	; 0x01
    1220:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	3c 83       	std	Y+4, r19	; 0x04
    122a:	2b 83       	std	Y+3, r18	; 0x03
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	9c 81       	ldd	r25, Y+4	; 0x04
    1230:	81 30       	cpi	r24, 0x01	; 1
    1232:	91 05       	cpc	r25, r1
    1234:	d1 f0       	breq	.+52     	; 0x126a <DIO_SetPortValue+0x58>
    1236:	2b 81       	ldd	r18, Y+3	; 0x03
    1238:	3c 81       	ldd	r19, Y+4	; 0x04
    123a:	22 30       	cpi	r18, 0x02	; 2
    123c:	31 05       	cpc	r19, r1
    123e:	2c f4       	brge	.+10     	; 0x124a <DIO_SetPortValue+0x38>
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	9c 81       	ldd	r25, Y+4	; 0x04
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	61 f0       	breq	.+24     	; 0x1260 <DIO_SetPortValue+0x4e>
    1248:	1e c0       	rjmp	.+60     	; 0x1286 <DIO_SetPortValue+0x74>
    124a:	2b 81       	ldd	r18, Y+3	; 0x03
    124c:	3c 81       	ldd	r19, Y+4	; 0x04
    124e:	22 30       	cpi	r18, 0x02	; 2
    1250:	31 05       	cpc	r19, r1
    1252:	81 f0       	breq	.+32     	; 0x1274 <DIO_SetPortValue+0x62>
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	9c 81       	ldd	r25, Y+4	; 0x04
    1258:	83 30       	cpi	r24, 0x03	; 3
    125a:	91 05       	cpc	r25, r1
    125c:	81 f0       	breq	.+32     	; 0x127e <DIO_SetPortValue+0x6c>
    125e:	13 c0       	rjmp	.+38     	; 0x1286 <DIO_SetPortValue+0x74>
	{
			case PORTA_DIO: PORTA_Register = u8PortVal; break;
    1260:	eb e3       	ldi	r30, 0x3B	; 59
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	80 83       	st	Z, r24
    1268:	0e c0       	rjmp	.+28     	; 0x1286 <DIO_SetPortValue+0x74>
			case PORTB_DIO: PORTB_Register = u8PortVal; break;
    126a:	e8 e3       	ldi	r30, 0x38	; 56
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	80 83       	st	Z, r24
    1272:	09 c0       	rjmp	.+18     	; 0x1286 <DIO_SetPortValue+0x74>
			case PORTC_DIO: PORTC_Register = u8PortVal; break;
    1274:	e5 e3       	ldi	r30, 0x35	; 53
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	80 83       	st	Z, r24
    127c:	04 c0       	rjmp	.+8      	; 0x1286 <DIO_SetPortValue+0x74>
			case PORTD_DIO: PORTD_Register = u8PortVal; break;
    127e:	e2 e3       	ldi	r30, 0x32	; 50
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	80 83       	st	Z, r24
		default: /* Wrong Port ID */        break;
	}
}
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	08 95       	ret

00001294 <vid_ExtInt0_vid_InitializeExtInt>:
#include "Configuration.h"
#include "BIT_MATH.h"
#include "EXT_INT_INTERFACE.H"


void vid_ExtInt0_vid_InitializeExtInt (void) {
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(MCUCR_REG,0) ;        // falling edge generates an interrupt
    129c:	a5 e5       	ldi	r26, 0x55	; 85
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e5 e5       	ldi	r30, 0x55	; 85
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	8e 7f       	andi	r24, 0xFE	; 254
    12a8:	8c 93       	st	X, r24
	SET_BIT(MCUCR_REG,1) ;
    12aa:	a5 e5       	ldi	r26, 0x55	; 85
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e5 e5       	ldi	r30, 0x55	; 85
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	82 60       	ori	r24, 0x02	; 2
    12b6:	8c 93       	st	X, r24

	 SET_BIT(GICR_REG,6) ;         // enable INT 0
    12b8:	ab e5       	ldi	r26, 0x5B	; 91
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	eb e5       	ldi	r30, 0x5B	; 91
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	80 64       	ori	r24, 0x40	; 64
    12c4:	8c 93       	st	X, r24

   // SET_BIT (SREG_REG,7) ;

	 asm ("SEI") ;   //ENABLE GLOBAL INTERRUPT
    12c6:	78 94       	sei

}
    12c8:	cf 91       	pop	r28
    12ca:	df 91       	pop	r29
    12cc:	08 95       	ret

000012ce <vid_ExtInt1_vid_InitializeExtInt>:


void vid_ExtInt1_vid_InitializeExtInt (void) {
    12ce:	df 93       	push	r29
    12d0:	cf 93       	push	r28
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(MCUCR_REG,2) ;
    12d6:	a5 e5       	ldi	r26, 0x55	; 85
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e5 e5       	ldi	r30, 0x55	; 85
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	8b 7f       	andi	r24, 0xFB	; 251
    12e2:	8c 93       	st	X, r24
	SET_BIT(MCUCR_REG,3) ;
    12e4:	a5 e5       	ldi	r26, 0x55	; 85
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	e5 e5       	ldi	r30, 0x55	; 85
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	88 60       	ori	r24, 0x08	; 8
    12f0:	8c 93       	st	X, r24

	 SET_BIT(GICR_REG,7) ;     // enable INT 1
    12f2:	ab e5       	ldi	r26, 0x5B	; 91
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	eb e5       	ldi	r30, 0x5B	; 91
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	80 68       	ori	r24, 0x80	; 128
    12fe:	8c 93       	st	X, r24


	 asm ("SEI") ;   //ENABLE GLOBAL INTERRUPT
    1300:	78 94       	sei

}
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	08 95       	ret

00001308 <__vector_1>:


/**************************************************************************/


ISR(INT0_vect) {      // entering
    1308:	1f 92       	push	r1
    130a:	0f 92       	push	r0
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	0f 92       	push	r0
    1310:	11 24       	eor	r1, r1
    1312:	2f 93       	push	r18
    1314:	3f 93       	push	r19
    1316:	4f 93       	push	r20
    1318:	5f 93       	push	r21
    131a:	6f 93       	push	r22
    131c:	7f 93       	push	r23
    131e:	8f 93       	push	r24
    1320:	9f 93       	push	r25
    1322:	af 93       	push	r26
    1324:	bf 93       	push	r27
    1326:	ef 93       	push	r30
    1328:	ff 93       	push	r31
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
    1332:	6e 97       	sbiw	r28, 0x1e	; 30
    1334:	de bf       	out	0x3e, r29	; 62
    1336:	cd bf       	out	0x3d, r28	; 61




	for(int i = 0 ; i<100 ; i++)
    1338:	1e 8e       	std	Y+30, r1	; 0x1e
    133a:	1d 8e       	std	Y+29, r1	; 0x1d
    133c:	ed c0       	rjmp	.+474    	; 0x1518 <__vector_1+0x210>
	{
	vid_Stepper_Set() ;
    133e:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <vid_Stepper_Set>
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	a0 ea       	ldi	r26, 0xA0	; 160
    1348:	b0 e4       	ldi	r27, 0x40	; 64
    134a:	89 8f       	std	Y+25, r24	; 0x19
    134c:	9a 8f       	std	Y+26, r25	; 0x1a
    134e:	ab 8f       	std	Y+27, r26	; 0x1b
    1350:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1352:	69 8d       	ldd	r22, Y+25	; 0x19
    1354:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1356:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1358:	9c 8d       	ldd	r25, Y+28	; 0x1c
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e8       	ldi	r19, 0x80	; 128
    135e:	4b e3       	ldi	r20, 0x3B	; 59
    1360:	55 e4       	ldi	r21, 0x45	; 69
    1362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	8d 8b       	std	Y+21, r24	; 0x15
    136c:	9e 8b       	std	Y+22, r25	; 0x16
    136e:	af 8b       	std	Y+23, r26	; 0x17
    1370:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1372:	6d 89       	ldd	r22, Y+21	; 0x15
    1374:	7e 89       	ldd	r23, Y+22	; 0x16
    1376:	8f 89       	ldd	r24, Y+23	; 0x17
    1378:	98 8d       	ldd	r25, Y+24	; 0x18
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	40 e8       	ldi	r20, 0x80	; 128
    1380:	5f e3       	ldi	r21, 0x3F	; 63
    1382:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1386:	88 23       	and	r24, r24
    1388:	2c f4       	brge	.+10     	; 0x1394 <__vector_1+0x8c>
		__ticks = 1;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	9c 8b       	std	Y+20, r25	; 0x14
    1390:	8b 8b       	std	Y+19, r24	; 0x13
    1392:	3f c0       	rjmp	.+126    	; 0x1412 <__vector_1+0x10a>
	else if (__tmp > 65535)
    1394:	6d 89       	ldd	r22, Y+21	; 0x15
    1396:	7e 89       	ldd	r23, Y+22	; 0x16
    1398:	8f 89       	ldd	r24, Y+23	; 0x17
    139a:	98 8d       	ldd	r25, Y+24	; 0x18
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	3f ef       	ldi	r19, 0xFF	; 255
    13a0:	4f e7       	ldi	r20, 0x7F	; 127
    13a2:	57 e4       	ldi	r21, 0x47	; 71
    13a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13a8:	18 16       	cp	r1, r24
    13aa:	4c f5       	brge	.+82     	; 0x13fe <__vector_1+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ac:	69 8d       	ldd	r22, Y+25	; 0x19
    13ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	40 e2       	ldi	r20, 0x20	; 32
    13ba:	51 e4       	ldi	r21, 0x41	; 65
    13bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	bc 01       	movw	r22, r24
    13c6:	cd 01       	movw	r24, r26
    13c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	9c 8b       	std	Y+20, r25	; 0x14
    13d2:	8b 8b       	std	Y+19, r24	; 0x13
    13d4:	0f c0       	rjmp	.+30     	; 0x13f4 <__vector_1+0xec>
    13d6:	8c e2       	ldi	r24, 0x2C	; 44
    13d8:	91 e0       	ldi	r25, 0x01	; 1
    13da:	9a 8b       	std	Y+18, r25	; 0x12
    13dc:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13de:	89 89       	ldd	r24, Y+17	; 0x11
    13e0:	9a 89       	ldd	r25, Y+18	; 0x12
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	f1 f7       	brne	.-4      	; 0x13e2 <__vector_1+0xda>
    13e6:	9a 8b       	std	Y+18, r25	; 0x12
    13e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ea:	8b 89       	ldd	r24, Y+19	; 0x13
    13ec:	9c 89       	ldd	r25, Y+20	; 0x14
    13ee:	01 97       	sbiw	r24, 0x01	; 1
    13f0:	9c 8b       	std	Y+20, r25	; 0x14
    13f2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f4:	8b 89       	ldd	r24, Y+19	; 0x13
    13f6:	9c 89       	ldd	r25, Y+20	; 0x14
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	69 f7       	brne	.-38     	; 0x13d6 <__vector_1+0xce>
    13fc:	14 c0       	rjmp	.+40     	; 0x1426 <__vector_1+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1400:	7e 89       	ldd	r23, Y+22	; 0x16
    1402:	8f 89       	ldd	r24, Y+23	; 0x17
    1404:	98 8d       	ldd	r25, Y+24	; 0x18
    1406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	9c 8b       	std	Y+20, r25	; 0x14
    1410:	8b 8b       	std	Y+19, r24	; 0x13
    1412:	8b 89       	ldd	r24, Y+19	; 0x13
    1414:	9c 89       	ldd	r25, Y+20	; 0x14
    1416:	98 8b       	std	Y+16, r25	; 0x10
    1418:	8f 87       	std	Y+15, r24	; 0x0f
    141a:	8f 85       	ldd	r24, Y+15	; 0x0f
    141c:	98 89       	ldd	r25, Y+16	; 0x10
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	f1 f7       	brne	.-4      	; 0x141e <__vector_1+0x116>
    1422:	98 8b       	std	Y+16, r25	; 0x10
    1424:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms (5) ;
	vid_Stepper_Reset() ;
    1426:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <vid_Stepper_Reset>
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	a0 ea       	ldi	r26, 0xA0	; 160
    1430:	b0 e4       	ldi	r27, 0x40	; 64
    1432:	8b 87       	std	Y+11, r24	; 0x0b
    1434:	9c 87       	std	Y+12, r25	; 0x0c
    1436:	ad 87       	std	Y+13, r26	; 0x0d
    1438:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    143a:	6b 85       	ldd	r22, Y+11	; 0x0b
    143c:	7c 85       	ldd	r23, Y+12	; 0x0c
    143e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1440:	9e 85       	ldd	r25, Y+14	; 0x0e
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e8       	ldi	r19, 0x80	; 128
    1446:	4b e3       	ldi	r20, 0x3B	; 59
    1448:	55 e4       	ldi	r21, 0x45	; 69
    144a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	8f 83       	std	Y+7, r24	; 0x07
    1454:	98 87       	std	Y+8, r25	; 0x08
    1456:	a9 87       	std	Y+9, r26	; 0x09
    1458:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    145a:	6f 81       	ldd	r22, Y+7	; 0x07
    145c:	78 85       	ldd	r23, Y+8	; 0x08
    145e:	89 85       	ldd	r24, Y+9	; 0x09
    1460:	9a 85       	ldd	r25, Y+10	; 0x0a
    1462:	20 e0       	ldi	r18, 0x00	; 0
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	40 e8       	ldi	r20, 0x80	; 128
    1468:	5f e3       	ldi	r21, 0x3F	; 63
    146a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    146e:	88 23       	and	r24, r24
    1470:	2c f4       	brge	.+10     	; 0x147c <__vector_1+0x174>
		__ticks = 1;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	9e 83       	std	Y+6, r25	; 0x06
    1478:	8d 83       	std	Y+5, r24	; 0x05
    147a:	3f c0       	rjmp	.+126    	; 0x14fa <__vector_1+0x1f2>
	else if (__tmp > 65535)
    147c:	6f 81       	ldd	r22, Y+7	; 0x07
    147e:	78 85       	ldd	r23, Y+8	; 0x08
    1480:	89 85       	ldd	r24, Y+9	; 0x09
    1482:	9a 85       	ldd	r25, Y+10	; 0x0a
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	3f ef       	ldi	r19, 0xFF	; 255
    1488:	4f e7       	ldi	r20, 0x7F	; 127
    148a:	57 e4       	ldi	r21, 0x47	; 71
    148c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1490:	18 16       	cp	r1, r24
    1492:	4c f5       	brge	.+82     	; 0x14e6 <__vector_1+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1494:	6b 85       	ldd	r22, Y+11	; 0x0b
    1496:	7c 85       	ldd	r23, Y+12	; 0x0c
    1498:	8d 85       	ldd	r24, Y+13	; 0x0d
    149a:	9e 85       	ldd	r25, Y+14	; 0x0e
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	40 e2       	ldi	r20, 0x20	; 32
    14a2:	51 e4       	ldi	r21, 0x41	; 65
    14a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a8:	dc 01       	movw	r26, r24
    14aa:	cb 01       	movw	r24, r22
    14ac:	bc 01       	movw	r22, r24
    14ae:	cd 01       	movw	r24, r26
    14b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	9e 83       	std	Y+6, r25	; 0x06
    14ba:	8d 83       	std	Y+5, r24	; 0x05
    14bc:	0f c0       	rjmp	.+30     	; 0x14dc <__vector_1+0x1d4>
    14be:	8c e2       	ldi	r24, 0x2C	; 44
    14c0:	91 e0       	ldi	r25, 0x01	; 1
    14c2:	9c 83       	std	Y+4, r25	; 0x04
    14c4:	8b 83       	std	Y+3, r24	; 0x03
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ca:	01 97       	sbiw	r24, 0x01	; 1
    14cc:	f1 f7       	brne	.-4      	; 0x14ca <__vector_1+0x1c2>
    14ce:	9c 83       	std	Y+4, r25	; 0x04
    14d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d2:	8d 81       	ldd	r24, Y+5	; 0x05
    14d4:	9e 81       	ldd	r25, Y+6	; 0x06
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	9e 83       	std	Y+6, r25	; 0x06
    14da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14dc:	8d 81       	ldd	r24, Y+5	; 0x05
    14de:	9e 81       	ldd	r25, Y+6	; 0x06
    14e0:	00 97       	sbiw	r24, 0x00	; 0
    14e2:	69 f7       	brne	.-38     	; 0x14be <__vector_1+0x1b6>
    14e4:	14 c0       	rjmp	.+40     	; 0x150e <__vector_1+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e6:	6f 81       	ldd	r22, Y+7	; 0x07
    14e8:	78 85       	ldd	r23, Y+8	; 0x08
    14ea:	89 85       	ldd	r24, Y+9	; 0x09
    14ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	9e 83       	std	Y+6, r25	; 0x06
    14f8:	8d 83       	std	Y+5, r24	; 0x05
    14fa:	8d 81       	ldd	r24, Y+5	; 0x05
    14fc:	9e 81       	ldd	r25, Y+6	; 0x06
    14fe:	9a 83       	std	Y+2, r25	; 0x02
    1500:	89 83       	std	Y+1, r24	; 0x01
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	9a 81       	ldd	r25, Y+2	; 0x02
    1506:	01 97       	sbiw	r24, 0x01	; 1
    1508:	f1 f7       	brne	.-4      	; 0x1506 <__vector_1+0x1fe>
    150a:	9a 83       	std	Y+2, r25	; 0x02
    150c:	89 83       	std	Y+1, r24	; 0x01
ISR(INT0_vect) {      // entering




	for(int i = 0 ; i<100 ; i++)
    150e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1510:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1512:	01 96       	adiw	r24, 0x01	; 1
    1514:	9e 8f       	std	Y+30, r25	; 0x1e
    1516:	8d 8f       	std	Y+29, r24	; 0x1d
    1518:	8d 8d       	ldd	r24, Y+29	; 0x1d
    151a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    151c:	84 36       	cpi	r24, 0x64	; 100
    151e:	91 05       	cpc	r25, r1
    1520:	0c f4       	brge	.+2      	; 0x1524 <__vector_1+0x21c>
    1522:	0d cf       	rjmp	.-486    	; 0x133e <__vector_1+0x36>
	vid_Stepper_Reset() ;
	_delay_ms (5) ;

	}

	u8PeopleInside ++ ;
    1524:	80 91 a6 00 	lds	r24, 0x00A6
    1528:	8f 5f       	subi	r24, 0xFF	; 255
    152a:	80 93 a6 00 	sts	0x00A6, r24

}
    152e:	6e 96       	adiw	r28, 0x1e	; 30
    1530:	de bf       	out	0x3e, r29	; 62
    1532:	cd bf       	out	0x3d, r28	; 61
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	ff 91       	pop	r31
    153a:	ef 91       	pop	r30
    153c:	bf 91       	pop	r27
    153e:	af 91       	pop	r26
    1540:	9f 91       	pop	r25
    1542:	8f 91       	pop	r24
    1544:	7f 91       	pop	r23
    1546:	6f 91       	pop	r22
    1548:	5f 91       	pop	r21
    154a:	4f 91       	pop	r20
    154c:	3f 91       	pop	r19
    154e:	2f 91       	pop	r18
    1550:	0f 90       	pop	r0
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	0f 90       	pop	r0
    1556:	1f 90       	pop	r1
    1558:	18 95       	reti

0000155a <__vector_2>:

/**************************************************************************/

ISR(INT1_vect) {       // exit
    155a:	1f 92       	push	r1
    155c:	0f 92       	push	r0
    155e:	0f b6       	in	r0, 0x3f	; 63
    1560:	0f 92       	push	r0
    1562:	11 24       	eor	r1, r1
    1564:	2f 93       	push	r18
    1566:	3f 93       	push	r19
    1568:	4f 93       	push	r20
    156a:	5f 93       	push	r21
    156c:	6f 93       	push	r22
    156e:	7f 93       	push	r23
    1570:	8f 93       	push	r24
    1572:	9f 93       	push	r25
    1574:	af 93       	push	r26
    1576:	bf 93       	push	r27
    1578:	ef 93       	push	r30
    157a:	ff 93       	push	r31
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    1584:	6e 97       	sbiw	r28, 0x1e	; 30
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	cd bf       	out	0x3d, r28	; 61



	for(int i = 0 ; i<100 ; i++)
    158a:	1e 8e       	std	Y+30, r1	; 0x1e
    158c:	1d 8e       	std	Y+29, r1	; 0x1d
    158e:	ed c0       	rjmp	.+474    	; 0x176a <__vector_2+0x210>
		{
		vid_Stepper_Set() ;
    1590:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <vid_Stepper_Set>
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	a0 ea       	ldi	r26, 0xA0	; 160
    159a:	b0 e4       	ldi	r27, 0x40	; 64
    159c:	89 8f       	std	Y+25, r24	; 0x19
    159e:	9a 8f       	std	Y+26, r25	; 0x1a
    15a0:	ab 8f       	std	Y+27, r26	; 0x1b
    15a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a4:	69 8d       	ldd	r22, Y+25	; 0x19
    15a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e8       	ldi	r19, 0x80	; 128
    15b0:	4b e3       	ldi	r20, 0x3B	; 59
    15b2:	55 e4       	ldi	r21, 0x45	; 69
    15b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	8d 8b       	std	Y+21, r24	; 0x15
    15be:	9e 8b       	std	Y+22, r25	; 0x16
    15c0:	af 8b       	std	Y+23, r26	; 0x17
    15c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15c4:	6d 89       	ldd	r22, Y+21	; 0x15
    15c6:	7e 89       	ldd	r23, Y+22	; 0x16
    15c8:	8f 89       	ldd	r24, Y+23	; 0x17
    15ca:	98 8d       	ldd	r25, Y+24	; 0x18
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	40 e8       	ldi	r20, 0x80	; 128
    15d2:	5f e3       	ldi	r21, 0x3F	; 63
    15d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15d8:	88 23       	and	r24, r24
    15da:	2c f4       	brge	.+10     	; 0x15e6 <__vector_2+0x8c>
		__ticks = 1;
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	9c 8b       	std	Y+20, r25	; 0x14
    15e2:	8b 8b       	std	Y+19, r24	; 0x13
    15e4:	3f c0       	rjmp	.+126    	; 0x1664 <__vector_2+0x10a>
	else if (__tmp > 65535)
    15e6:	6d 89       	ldd	r22, Y+21	; 0x15
    15e8:	7e 89       	ldd	r23, Y+22	; 0x16
    15ea:	8f 89       	ldd	r24, Y+23	; 0x17
    15ec:	98 8d       	ldd	r25, Y+24	; 0x18
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	3f ef       	ldi	r19, 0xFF	; 255
    15f2:	4f e7       	ldi	r20, 0x7F	; 127
    15f4:	57 e4       	ldi	r21, 0x47	; 71
    15f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15fa:	18 16       	cp	r1, r24
    15fc:	4c f5       	brge	.+82     	; 0x1650 <__vector_2+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15fe:	69 8d       	ldd	r22, Y+25	; 0x19
    1600:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1602:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1604:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	40 e2       	ldi	r20, 0x20	; 32
    160c:	51 e4       	ldi	r21, 0x41	; 65
    160e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	bc 01       	movw	r22, r24
    1618:	cd 01       	movw	r24, r26
    161a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	9c 8b       	std	Y+20, r25	; 0x14
    1624:	8b 8b       	std	Y+19, r24	; 0x13
    1626:	0f c0       	rjmp	.+30     	; 0x1646 <__vector_2+0xec>
    1628:	8c e2       	ldi	r24, 0x2C	; 44
    162a:	91 e0       	ldi	r25, 0x01	; 1
    162c:	9a 8b       	std	Y+18, r25	; 0x12
    162e:	89 8b       	std	Y+17, r24	; 0x11
    1630:	89 89       	ldd	r24, Y+17	; 0x11
    1632:	9a 89       	ldd	r25, Y+18	; 0x12
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	f1 f7       	brne	.-4      	; 0x1634 <__vector_2+0xda>
    1638:	9a 8b       	std	Y+18, r25	; 0x12
    163a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163c:	8b 89       	ldd	r24, Y+19	; 0x13
    163e:	9c 89       	ldd	r25, Y+20	; 0x14
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	9c 8b       	std	Y+20, r25	; 0x14
    1644:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1646:	8b 89       	ldd	r24, Y+19	; 0x13
    1648:	9c 89       	ldd	r25, Y+20	; 0x14
    164a:	00 97       	sbiw	r24, 0x00	; 0
    164c:	69 f7       	brne	.-38     	; 0x1628 <__vector_2+0xce>
    164e:	14 c0       	rjmp	.+40     	; 0x1678 <__vector_2+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1650:	6d 89       	ldd	r22, Y+21	; 0x15
    1652:	7e 89       	ldd	r23, Y+22	; 0x16
    1654:	8f 89       	ldd	r24, Y+23	; 0x17
    1656:	98 8d       	ldd	r25, Y+24	; 0x18
    1658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	9c 8b       	std	Y+20, r25	; 0x14
    1662:	8b 8b       	std	Y+19, r24	; 0x13
    1664:	8b 89       	ldd	r24, Y+19	; 0x13
    1666:	9c 89       	ldd	r25, Y+20	; 0x14
    1668:	98 8b       	std	Y+16, r25	; 0x10
    166a:	8f 87       	std	Y+15, r24	; 0x0f
    166c:	8f 85       	ldd	r24, Y+15	; 0x0f
    166e:	98 89       	ldd	r25, Y+16	; 0x10
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	f1 f7       	brne	.-4      	; 0x1670 <__vector_2+0x116>
    1674:	98 8b       	std	Y+16, r25	; 0x10
    1676:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms (5) ;
		vid_Stepper_Reset() ;
    1678:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <vid_Stepper_Reset>
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	a0 ea       	ldi	r26, 0xA0	; 160
    1682:	b0 e4       	ldi	r27, 0x40	; 64
    1684:	8b 87       	std	Y+11, r24	; 0x0b
    1686:	9c 87       	std	Y+12, r25	; 0x0c
    1688:	ad 87       	std	Y+13, r26	; 0x0d
    168a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    168c:	6b 85       	ldd	r22, Y+11	; 0x0b
    168e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1690:	8d 85       	ldd	r24, Y+13	; 0x0d
    1692:	9e 85       	ldd	r25, Y+14	; 0x0e
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e8       	ldi	r19, 0x80	; 128
    1698:	4b e3       	ldi	r20, 0x3B	; 59
    169a:	55 e4       	ldi	r21, 0x45	; 69
    169c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	8f 83       	std	Y+7, r24	; 0x07
    16a6:	98 87       	std	Y+8, r25	; 0x08
    16a8:	a9 87       	std	Y+9, r26	; 0x09
    16aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16ac:	6f 81       	ldd	r22, Y+7	; 0x07
    16ae:	78 85       	ldd	r23, Y+8	; 0x08
    16b0:	89 85       	ldd	r24, Y+9	; 0x09
    16b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	40 e8       	ldi	r20, 0x80	; 128
    16ba:	5f e3       	ldi	r21, 0x3F	; 63
    16bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16c0:	88 23       	and	r24, r24
    16c2:	2c f4       	brge	.+10     	; 0x16ce <__vector_2+0x174>
		__ticks = 1;
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	9e 83       	std	Y+6, r25	; 0x06
    16ca:	8d 83       	std	Y+5, r24	; 0x05
    16cc:	3f c0       	rjmp	.+126    	; 0x174c <__vector_2+0x1f2>
	else if (__tmp > 65535)
    16ce:	6f 81       	ldd	r22, Y+7	; 0x07
    16d0:	78 85       	ldd	r23, Y+8	; 0x08
    16d2:	89 85       	ldd	r24, Y+9	; 0x09
    16d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	3f ef       	ldi	r19, 0xFF	; 255
    16da:	4f e7       	ldi	r20, 0x7F	; 127
    16dc:	57 e4       	ldi	r21, 0x47	; 71
    16de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16e2:	18 16       	cp	r1, r24
    16e4:	4c f5       	brge	.+82     	; 0x1738 <__vector_2+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	40 e2       	ldi	r20, 0x20	; 32
    16f4:	51 e4       	ldi	r21, 0x41	; 65
    16f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	bc 01       	movw	r22, r24
    1700:	cd 01       	movw	r24, r26
    1702:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	9e 83       	std	Y+6, r25	; 0x06
    170c:	8d 83       	std	Y+5, r24	; 0x05
    170e:	0f c0       	rjmp	.+30     	; 0x172e <__vector_2+0x1d4>
    1710:	8c e2       	ldi	r24, 0x2C	; 44
    1712:	91 e0       	ldi	r25, 0x01	; 1
    1714:	9c 83       	std	Y+4, r25	; 0x04
    1716:	8b 83       	std	Y+3, r24	; 0x03
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	9c 81       	ldd	r25, Y+4	; 0x04
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	f1 f7       	brne	.-4      	; 0x171c <__vector_2+0x1c2>
    1720:	9c 83       	std	Y+4, r25	; 0x04
    1722:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1724:	8d 81       	ldd	r24, Y+5	; 0x05
    1726:	9e 81       	ldd	r25, Y+6	; 0x06
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	9e 83       	std	Y+6, r25	; 0x06
    172c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172e:	8d 81       	ldd	r24, Y+5	; 0x05
    1730:	9e 81       	ldd	r25, Y+6	; 0x06
    1732:	00 97       	sbiw	r24, 0x00	; 0
    1734:	69 f7       	brne	.-38     	; 0x1710 <__vector_2+0x1b6>
    1736:	14 c0       	rjmp	.+40     	; 0x1760 <__vector_2+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1738:	6f 81       	ldd	r22, Y+7	; 0x07
    173a:	78 85       	ldd	r23, Y+8	; 0x08
    173c:	89 85       	ldd	r24, Y+9	; 0x09
    173e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	9e 83       	std	Y+6, r25	; 0x06
    174a:	8d 83       	std	Y+5, r24	; 0x05
    174c:	8d 81       	ldd	r24, Y+5	; 0x05
    174e:	9e 81       	ldd	r25, Y+6	; 0x06
    1750:	9a 83       	std	Y+2, r25	; 0x02
    1752:	89 83       	std	Y+1, r24	; 0x01
    1754:	89 81       	ldd	r24, Y+1	; 0x01
    1756:	9a 81       	ldd	r25, Y+2	; 0x02
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	f1 f7       	brne	.-4      	; 0x1758 <__vector_2+0x1fe>
    175c:	9a 83       	std	Y+2, r25	; 0x02
    175e:	89 83       	std	Y+1, r24	; 0x01

ISR(INT1_vect) {       // exit



	for(int i = 0 ; i<100 ; i++)
    1760:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1762:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1764:	01 96       	adiw	r24, 0x01	; 1
    1766:	9e 8f       	std	Y+30, r25	; 0x1e
    1768:	8d 8f       	std	Y+29, r24	; 0x1d
    176a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    176c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    176e:	84 36       	cpi	r24, 0x64	; 100
    1770:	91 05       	cpc	r25, r1
    1772:	0c f4       	brge	.+2      	; 0x1776 <__vector_2+0x21c>
    1774:	0d cf       	rjmp	.-486    	; 0x1590 <__vector_2+0x36>

		}



	if (u8PeopleInside!=0) {
    1776:	80 91 a6 00 	lds	r24, 0x00A6
    177a:	88 23       	and	r24, r24
    177c:	31 f0       	breq	.+12     	; 0x178a <__vector_2+0x230>
	u8PeopleInside -- ;
    177e:	80 91 a6 00 	lds	r24, 0x00A6
    1782:	81 50       	subi	r24, 0x01	; 1
    1784:	80 93 a6 00 	sts	0x00A6, r24
    1788:	02 c0       	rjmp	.+4      	; 0x178e <__vector_2+0x234>
	}

	else {
		u8PeopleInside = 0 ;
    178a:	10 92 a6 00 	sts	0x00A6, r1
	}

}
    178e:	6e 96       	adiw	r28, 0x1e	; 30
    1790:	de bf       	out	0x3e, r29	; 62
    1792:	cd bf       	out	0x3d, r28	; 61
    1794:	cf 91       	pop	r28
    1796:	df 91       	pop	r29
    1798:	ff 91       	pop	r31
    179a:	ef 91       	pop	r30
    179c:	bf 91       	pop	r27
    179e:	af 91       	pop	r26
    17a0:	9f 91       	pop	r25
    17a2:	8f 91       	pop	r24
    17a4:	7f 91       	pop	r23
    17a6:	6f 91       	pop	r22
    17a8:	5f 91       	pop	r21
    17aa:	4f 91       	pop	r20
    17ac:	3f 91       	pop	r19
    17ae:	2f 91       	pop	r18
    17b0:	0f 90       	pop	r0
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	0f 90       	pop	r0
    17b6:	1f 90       	pop	r1
    17b8:	18 95       	reti

000017ba <LCD_vidWriteCommand>:
#include "LCD_int.h"
#include "LCD_Config.h"


/****************************************************************/
void LCD_vidWriteCommand (u8 u8CmdCpy) {
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	2f 97       	sbiw	r28, 0x0f	; 15
    17c4:	0f b6       	in	r0, 0x3f	; 63
    17c6:	f8 94       	cli
    17c8:	de bf       	out	0x3e, r29	; 62
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	cd bf       	out	0x3d, r28	; 61
    17ce:	8f 87       	std	Y+15, r24	; 0x0f
	  // Set RS = 0
	  DIO_SetPinValue(Ctrl_PORT , RS, LOW);
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	65 e0       	ldi	r22, 0x05	; 5
    17d4:	40 e0       	ldi	r20, 0x00	; 0
    17d6:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>

	  // Set R/W = 0
	  DIO_SetPinValue(Ctrl_PORT , RW, LOW);
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	66 e0       	ldi	r22, 0x06	; 6
    17de:	40 e0       	ldi	r20, 0x00	; 0
    17e0:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>

	  // Set EN
	  DIO_SetPinValue(Ctrl_PORT , E, HIGH);
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	67 e0       	ldi	r22, 0x07	; 7
    17e8:	41 e0       	ldi	r20, 0x01	; 1
    17ea:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>

	  // read data when E is high  , write data on falling edge
	  DIO_SetPortValue (Buff_PORT,u8CmdCpy);
    17ee:	82 e0       	ldi	r24, 0x02	; 2
    17f0:	6f 85       	ldd	r22, Y+15	; 0x0f
    17f2:	0e 94 09 09 	call	0x1212	; 0x1212 <DIO_SetPortValue>

	  // set EN to 1 after settting command
	  // pulse
	  DIO_SetPinValue(Ctrl_PORT , E, LOW);
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	67 e0       	ldi	r22, 0x07	; 7
    17fa:	40 e0       	ldi	r20, 0x00	; 0
    17fc:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	a0 ea       	ldi	r26, 0xA0	; 160
    1806:	b0 e4       	ldi	r27, 0x40	; 64
    1808:	8b 87       	std	Y+11, r24	; 0x0b
    180a:	9c 87       	std	Y+12, r25	; 0x0c
    180c:	ad 87       	std	Y+13, r26	; 0x0d
    180e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1810:	6b 85       	ldd	r22, Y+11	; 0x0b
    1812:	7c 85       	ldd	r23, Y+12	; 0x0c
    1814:	8d 85       	ldd	r24, Y+13	; 0x0d
    1816:	9e 85       	ldd	r25, Y+14	; 0x0e
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e8       	ldi	r19, 0x80	; 128
    181c:	4b e3       	ldi	r20, 0x3B	; 59
    181e:	55 e4       	ldi	r21, 0x45	; 69
    1820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	8f 83       	std	Y+7, r24	; 0x07
    182a:	98 87       	std	Y+8, r25	; 0x08
    182c:	a9 87       	std	Y+9, r26	; 0x09
    182e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1830:	6f 81       	ldd	r22, Y+7	; 0x07
    1832:	78 85       	ldd	r23, Y+8	; 0x08
    1834:	89 85       	ldd	r24, Y+9	; 0x09
    1836:	9a 85       	ldd	r25, Y+10	; 0x0a
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	40 e8       	ldi	r20, 0x80	; 128
    183e:	5f e3       	ldi	r21, 0x3F	; 63
    1840:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1844:	88 23       	and	r24, r24
    1846:	2c f4       	brge	.+10     	; 0x1852 <LCD_vidWriteCommand+0x98>
		__ticks = 1;
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	9e 83       	std	Y+6, r25	; 0x06
    184e:	8d 83       	std	Y+5, r24	; 0x05
    1850:	3f c0       	rjmp	.+126    	; 0x18d0 <LCD_vidWriteCommand+0x116>
	else if (__tmp > 65535)
    1852:	6f 81       	ldd	r22, Y+7	; 0x07
    1854:	78 85       	ldd	r23, Y+8	; 0x08
    1856:	89 85       	ldd	r24, Y+9	; 0x09
    1858:	9a 85       	ldd	r25, Y+10	; 0x0a
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	3f ef       	ldi	r19, 0xFF	; 255
    185e:	4f e7       	ldi	r20, 0x7F	; 127
    1860:	57 e4       	ldi	r21, 0x47	; 71
    1862:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1866:	18 16       	cp	r1, r24
    1868:	4c f5       	brge	.+82     	; 0x18bc <LCD_vidWriteCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    186a:	6b 85       	ldd	r22, Y+11	; 0x0b
    186c:	7c 85       	ldd	r23, Y+12	; 0x0c
    186e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1870:	9e 85       	ldd	r25, Y+14	; 0x0e
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	40 e2       	ldi	r20, 0x20	; 32
    1878:	51 e4       	ldi	r21, 0x41	; 65
    187a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	bc 01       	movw	r22, r24
    1884:	cd 01       	movw	r24, r26
    1886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	9e 83       	std	Y+6, r25	; 0x06
    1890:	8d 83       	std	Y+5, r24	; 0x05
    1892:	0f c0       	rjmp	.+30     	; 0x18b2 <LCD_vidWriteCommand+0xf8>
    1894:	8c e2       	ldi	r24, 0x2C	; 44
    1896:	91 e0       	ldi	r25, 0x01	; 1
    1898:	9c 83       	std	Y+4, r25	; 0x04
    189a:	8b 83       	std	Y+3, r24	; 0x03
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	9c 81       	ldd	r25, Y+4	; 0x04
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	f1 f7       	brne	.-4      	; 0x18a0 <LCD_vidWriteCommand+0xe6>
    18a4:	9c 83       	std	Y+4, r25	; 0x04
    18a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a8:	8d 81       	ldd	r24, Y+5	; 0x05
    18aa:	9e 81       	ldd	r25, Y+6	; 0x06
    18ac:	01 97       	sbiw	r24, 0x01	; 1
    18ae:	9e 83       	std	Y+6, r25	; 0x06
    18b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b2:	8d 81       	ldd	r24, Y+5	; 0x05
    18b4:	9e 81       	ldd	r25, Y+6	; 0x06
    18b6:	00 97       	sbiw	r24, 0x00	; 0
    18b8:	69 f7       	brne	.-38     	; 0x1894 <LCD_vidWriteCommand+0xda>
    18ba:	14 c0       	rjmp	.+40     	; 0x18e4 <LCD_vidWriteCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18bc:	6f 81       	ldd	r22, Y+7	; 0x07
    18be:	78 85       	ldd	r23, Y+8	; 0x08
    18c0:	89 85       	ldd	r24, Y+9	; 0x09
    18c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	9e 83       	std	Y+6, r25	; 0x06
    18ce:	8d 83       	std	Y+5, r24	; 0x05
    18d0:	8d 81       	ldd	r24, Y+5	; 0x05
    18d2:	9e 81       	ldd	r25, Y+6	; 0x06
    18d4:	9a 83       	std	Y+2, r25	; 0x02
    18d6:	89 83       	std	Y+1, r24	; 0x01
    18d8:	89 81       	ldd	r24, Y+1	; 0x01
    18da:	9a 81       	ldd	r25, Y+2	; 0x02
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	f1 f7       	brne	.-4      	; 0x18dc <LCD_vidWriteCommand+0x122>
    18e0:	9a 83       	std	Y+2, r25	; 0x02
    18e2:	89 83       	std	Y+1, r24	; 0x01
	  _delay_ms(5);
	  DIO_SetPinValue(Ctrl_PORT , E, HIGH);
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	67 e0       	ldi	r22, 0x07	; 7
    18e8:	41 e0       	ldi	r20, 0x01	; 1
    18ea:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>

  }
    18ee:	2f 96       	adiw	r28, 0x0f	; 15
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	f8 94       	cli
    18f4:	de bf       	out	0x3e, r29	; 62
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	cd bf       	out	0x3d, r28	; 61
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	08 95       	ret

00001900 <LCD_vidInitialize>:


/****************************************************************/


void LCD_vidInitialize(void){
    1900:	0f 93       	push	r16
    1902:	1f 93       	push	r17
    1904:	df 93       	push	r29
    1906:	cf 93       	push	r28
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
    190c:	c6 54       	subi	r28, 0x46	; 70
    190e:	d0 40       	sbci	r29, 0x00	; 0
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	f8 94       	cli
    1914:	de bf       	out	0x3e, r29	; 62
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	cd bf       	out	0x3d, r28	; 61


	/****************  LCD Configuration  *****************/

			  // SET VDD TO D0   5 Volt (D0 >> VDD)
			  DIO_SetPinDirection (Ctrl_PORT, VDD , HIGH);
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	64 e0       	ldi	r22, 0x04	; 4
    191e:	41 e0       	ldi	r20, 0x01	; 1
    1920:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>

			  //  RS >> D1
			  DIO_SetPinDirection (Ctrl_PORT, RS, HIGH);
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	65 e0       	ldi	r22, 0x05	; 5
    1928:	41 e0       	ldi	r20, 0x01	; 1
    192a:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>

			  //  R/W >> D2
			  DIO_SetPinDirection (Ctrl_PORT, RW, HIGH);
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	66 e0       	ldi	r22, 0x06	; 6
    1932:	41 e0       	ldi	r20, 0x01	; 1
    1934:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>

			  //  Enable >> D3
			   DIO_SetPinDirection (Ctrl_PORT, E, HIGH);
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	67 e0       	ldi	r22, 0x07	; 7
    193c:	41 e0       	ldi	r20, 0x01	; 1
    193e:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>


			  //SET PORTC AS OUTPUT (PORTC >> DB0...DB7)
			  DIO_SetPortDirection (Buff_PORT, 0XFF);
    1942:	82 e0       	ldi	r24, 0x02	; 2
    1944:	6f ef       	ldi	r22, 0xFF	; 255
    1946:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_SetPortDirection>

	  /***************************************************************/

	 // set VDD @ A0 to 5 volt
	  DIO_SetPinValue(Ctrl_PORT , VDD, HIGH);
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	64 e0       	ldi	r22, 0x04	; 4
    194e:	41 e0       	ldi	r20, 0x01	; 1
    1950:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>
    1954:	fe 01       	movw	r30, r28
    1956:	ed 5b       	subi	r30, 0xBD	; 189
    1958:	ff 4f       	sbci	r31, 0xFF	; 255
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	a0 ea       	ldi	r26, 0xA0	; 160
    1960:	b0 e4       	ldi	r27, 0x40	; 64
    1962:	80 83       	st	Z, r24
    1964:	91 83       	std	Z+1, r25	; 0x01
    1966:	a2 83       	std	Z+2, r26	; 0x02
    1968:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    196a:	8e 01       	movw	r16, r28
    196c:	01 5c       	subi	r16, 0xC1	; 193
    196e:	1f 4f       	sbci	r17, 0xFF	; 255
    1970:	fe 01       	movw	r30, r28
    1972:	ed 5b       	subi	r30, 0xBD	; 189
    1974:	ff 4f       	sbci	r31, 0xFF	; 255
    1976:	60 81       	ld	r22, Z
    1978:	71 81       	ldd	r23, Z+1	; 0x01
    197a:	82 81       	ldd	r24, Z+2	; 0x02
    197c:	93 81       	ldd	r25, Z+3	; 0x03
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e8       	ldi	r19, 0x80	; 128
    1982:	4b e3       	ldi	r20, 0x3B	; 59
    1984:	55 e4       	ldi	r21, 0x45	; 69
    1986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	f8 01       	movw	r30, r16
    1990:	80 83       	st	Z, r24
    1992:	91 83       	std	Z+1, r25	; 0x01
    1994:	a2 83       	std	Z+2, r26	; 0x02
    1996:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1998:	fe 01       	movw	r30, r28
    199a:	ff 96       	adiw	r30, 0x3f	; 63
    199c:	60 81       	ld	r22, Z
    199e:	71 81       	ldd	r23, Z+1	; 0x01
    19a0:	82 81       	ldd	r24, Z+2	; 0x02
    19a2:	93 81       	ldd	r25, Z+3	; 0x03
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e8       	ldi	r20, 0x80	; 128
    19aa:	5f e3       	ldi	r21, 0x3F	; 63
    19ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19b0:	88 23       	and	r24, r24
    19b2:	2c f4       	brge	.+10     	; 0x19be <LCD_vidInitialize+0xbe>
		__ticks = 1;
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	9e af       	std	Y+62, r25	; 0x3e
    19ba:	8d af       	std	Y+61, r24	; 0x3d
    19bc:	46 c0       	rjmp	.+140    	; 0x1a4a <LCD_vidInitialize+0x14a>
	else if (__tmp > 65535)
    19be:	fe 01       	movw	r30, r28
    19c0:	ff 96       	adiw	r30, 0x3f	; 63
    19c2:	60 81       	ld	r22, Z
    19c4:	71 81       	ldd	r23, Z+1	; 0x01
    19c6:	82 81       	ldd	r24, Z+2	; 0x02
    19c8:	93 81       	ldd	r25, Z+3	; 0x03
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	3f ef       	ldi	r19, 0xFF	; 255
    19ce:	4f e7       	ldi	r20, 0x7F	; 127
    19d0:	57 e4       	ldi	r21, 0x47	; 71
    19d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19d6:	18 16       	cp	r1, r24
    19d8:	64 f5       	brge	.+88     	; 0x1a32 <LCD_vidInitialize+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19da:	fe 01       	movw	r30, r28
    19dc:	ed 5b       	subi	r30, 0xBD	; 189
    19de:	ff 4f       	sbci	r31, 0xFF	; 255
    19e0:	60 81       	ld	r22, Z
    19e2:	71 81       	ldd	r23, Z+1	; 0x01
    19e4:	82 81       	ldd	r24, Z+2	; 0x02
    19e6:	93 81       	ldd	r25, Z+3	; 0x03
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e2       	ldi	r20, 0x20	; 32
    19ee:	51 e4       	ldi	r21, 0x41	; 65
    19f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	bc 01       	movw	r22, r24
    19fa:	cd 01       	movw	r24, r26
    19fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	9e af       	std	Y+62, r25	; 0x3e
    1a06:	8d af       	std	Y+61, r24	; 0x3d
    1a08:	0f c0       	rjmp	.+30     	; 0x1a28 <LCD_vidInitialize+0x128>
    1a0a:	8c e2       	ldi	r24, 0x2C	; 44
    1a0c:	91 e0       	ldi	r25, 0x01	; 1
    1a0e:	9c af       	std	Y+60, r25	; 0x3c
    1a10:	8b af       	std	Y+59, r24	; 0x3b
    1a12:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a14:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	f1 f7       	brne	.-4      	; 0x1a16 <LCD_vidInitialize+0x116>
    1a1a:	9c af       	std	Y+60, r25	; 0x3c
    1a1c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a1e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a20:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	9e af       	std	Y+62, r25	; 0x3e
    1a26:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a28:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a2c:	00 97       	sbiw	r24, 0x00	; 0
    1a2e:	69 f7       	brne	.-38     	; 0x1a0a <LCD_vidInitialize+0x10a>
    1a30:	16 c0       	rjmp	.+44     	; 0x1a5e <LCD_vidInitialize+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a32:	fe 01       	movw	r30, r28
    1a34:	ff 96       	adiw	r30, 0x3f	; 63
    1a36:	60 81       	ld	r22, Z
    1a38:	71 81       	ldd	r23, Z+1	; 0x01
    1a3a:	82 81       	ldd	r24, Z+2	; 0x02
    1a3c:	93 81       	ldd	r25, Z+3	; 0x03
    1a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	9e af       	std	Y+62, r25	; 0x3e
    1a48:	8d af       	std	Y+61, r24	; 0x3d
    1a4a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a4c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a4e:	9a af       	std	Y+58, r25	; 0x3a
    1a50:	89 af       	std	Y+57, r24	; 0x39
    1a52:	89 ad       	ldd	r24, Y+57	; 0x39
    1a54:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	f1 f7       	brne	.-4      	; 0x1a56 <LCD_vidInitialize+0x156>
    1a5a:	9a af       	std	Y+58, r25	; 0x3a
    1a5c:	89 af       	std	Y+57, r24	; 0x39
	  _delay_ms(5);



	 // FUNCTION SET
	  LCD_vidWriteCommand (0b00111000);   //0X38  // N=0 1 line 0b00110000
    1a5e:	88 e3       	ldi	r24, 0x38	; 56
    1a60:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <LCD_vidWriteCommand>
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	a0 ea       	ldi	r26, 0xA0	; 160
    1a6a:	b0 e4       	ldi	r27, 0x40	; 64
    1a6c:	8d ab       	std	Y+53, r24	; 0x35
    1a6e:	9e ab       	std	Y+54, r25	; 0x36
    1a70:	af ab       	std	Y+55, r26	; 0x37
    1a72:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a74:	6d a9       	ldd	r22, Y+53	; 0x35
    1a76:	7e a9       	ldd	r23, Y+54	; 0x36
    1a78:	8f a9       	ldd	r24, Y+55	; 0x37
    1a7a:	98 ad       	ldd	r25, Y+56	; 0x38
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e8       	ldi	r19, 0x80	; 128
    1a80:	4b e3       	ldi	r20, 0x3B	; 59
    1a82:	55 e4       	ldi	r21, 0x45	; 69
    1a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	89 ab       	std	Y+49, r24	; 0x31
    1a8e:	9a ab       	std	Y+50, r25	; 0x32
    1a90:	ab ab       	std	Y+51, r26	; 0x33
    1a92:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a94:	69 a9       	ldd	r22, Y+49	; 0x31
    1a96:	7a a9       	ldd	r23, Y+50	; 0x32
    1a98:	8b a9       	ldd	r24, Y+51	; 0x33
    1a9a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	40 e8       	ldi	r20, 0x80	; 128
    1aa2:	5f e3       	ldi	r21, 0x3F	; 63
    1aa4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aa8:	88 23       	and	r24, r24
    1aaa:	2c f4       	brge	.+10     	; 0x1ab6 <LCD_vidInitialize+0x1b6>
		__ticks = 1;
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	98 ab       	std	Y+48, r25	; 0x30
    1ab2:	8f a7       	std	Y+47, r24	; 0x2f
    1ab4:	3f c0       	rjmp	.+126    	; 0x1b34 <LCD_vidInitialize+0x234>
	else if (__tmp > 65535)
    1ab6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ab8:	7a a9       	ldd	r23, Y+50	; 0x32
    1aba:	8b a9       	ldd	r24, Y+51	; 0x33
    1abc:	9c a9       	ldd	r25, Y+52	; 0x34
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	3f ef       	ldi	r19, 0xFF	; 255
    1ac2:	4f e7       	ldi	r20, 0x7F	; 127
    1ac4:	57 e4       	ldi	r21, 0x47	; 71
    1ac6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aca:	18 16       	cp	r1, r24
    1acc:	4c f5       	brge	.+82     	; 0x1b20 <LCD_vidInitialize+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ace:	6d a9       	ldd	r22, Y+53	; 0x35
    1ad0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ad2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ad4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	40 e2       	ldi	r20, 0x20	; 32
    1adc:	51 e4       	ldi	r21, 0x41	; 65
    1ade:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	bc 01       	movw	r22, r24
    1ae8:	cd 01       	movw	r24, r26
    1aea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	98 ab       	std	Y+48, r25	; 0x30
    1af4:	8f a7       	std	Y+47, r24	; 0x2f
    1af6:	0f c0       	rjmp	.+30     	; 0x1b16 <LCD_vidInitialize+0x216>
    1af8:	8c e2       	ldi	r24, 0x2C	; 44
    1afa:	91 e0       	ldi	r25, 0x01	; 1
    1afc:	9e a7       	std	Y+46, r25	; 0x2e
    1afe:	8d a7       	std	Y+45, r24	; 0x2d
    1b00:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b02:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	f1 f7       	brne	.-4      	; 0x1b04 <LCD_vidInitialize+0x204>
    1b08:	9e a7       	std	Y+46, r25	; 0x2e
    1b0a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b0e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b10:	01 97       	sbiw	r24, 0x01	; 1
    1b12:	98 ab       	std	Y+48, r25	; 0x30
    1b14:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b16:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b18:	98 a9       	ldd	r25, Y+48	; 0x30
    1b1a:	00 97       	sbiw	r24, 0x00	; 0
    1b1c:	69 f7       	brne	.-38     	; 0x1af8 <LCD_vidInitialize+0x1f8>
    1b1e:	14 c0       	rjmp	.+40     	; 0x1b48 <LCD_vidInitialize+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b20:	69 a9       	ldd	r22, Y+49	; 0x31
    1b22:	7a a9       	ldd	r23, Y+50	; 0x32
    1b24:	8b a9       	ldd	r24, Y+51	; 0x33
    1b26:	9c a9       	ldd	r25, Y+52	; 0x34
    1b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	98 ab       	std	Y+48, r25	; 0x30
    1b32:	8f a7       	std	Y+47, r24	; 0x2f
    1b34:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b36:	98 a9       	ldd	r25, Y+48	; 0x30
    1b38:	9c a7       	std	Y+44, r25	; 0x2c
    1b3a:	8b a7       	std	Y+43, r24	; 0x2b
    1b3c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b3e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	f1 f7       	brne	.-4      	; 0x1b40 <LCD_vidInitialize+0x240>
    1b44:	9c a7       	std	Y+44, r25	; 0x2c
    1b46:	8b a7       	std	Y+43, r24	; 0x2b
	  _delay_ms (5);


	  // DISPLAY ON/OFF CONTROL
	  LCD_vidWriteCommand (0b00001111);
    1b48:	8f e0       	ldi	r24, 0x0F	; 15
    1b4a:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <LCD_vidWriteCommand>
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	a0 ea       	ldi	r26, 0xA0	; 160
    1b54:	b0 e4       	ldi	r27, 0x40	; 64
    1b56:	8f a3       	std	Y+39, r24	; 0x27
    1b58:	98 a7       	std	Y+40, r25	; 0x28
    1b5a:	a9 a7       	std	Y+41, r26	; 0x29
    1b5c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b5e:	6f a1       	ldd	r22, Y+39	; 0x27
    1b60:	78 a5       	ldd	r23, Y+40	; 0x28
    1b62:	89 a5       	ldd	r24, Y+41	; 0x29
    1b64:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e8       	ldi	r19, 0x80	; 128
    1b6a:	4b e3       	ldi	r20, 0x3B	; 59
    1b6c:	55 e4       	ldi	r21, 0x45	; 69
    1b6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	8b a3       	std	Y+35, r24	; 0x23
    1b78:	9c a3       	std	Y+36, r25	; 0x24
    1b7a:	ad a3       	std	Y+37, r26	; 0x25
    1b7c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b7e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b80:	7c a1       	ldd	r23, Y+36	; 0x24
    1b82:	8d a1       	ldd	r24, Y+37	; 0x25
    1b84:	9e a1       	ldd	r25, Y+38	; 0x26
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 e8       	ldi	r20, 0x80	; 128
    1b8c:	5f e3       	ldi	r21, 0x3F	; 63
    1b8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b92:	88 23       	and	r24, r24
    1b94:	2c f4       	brge	.+10     	; 0x1ba0 <LCD_vidInitialize+0x2a0>
		__ticks = 1;
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	9a a3       	std	Y+34, r25	; 0x22
    1b9c:	89 a3       	std	Y+33, r24	; 0x21
    1b9e:	3f c0       	rjmp	.+126    	; 0x1c1e <LCD_vidInitialize+0x31e>
	else if (__tmp > 65535)
    1ba0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ba2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ba4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ba6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	3f ef       	ldi	r19, 0xFF	; 255
    1bac:	4f e7       	ldi	r20, 0x7F	; 127
    1bae:	57 e4       	ldi	r21, 0x47	; 71
    1bb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bb4:	18 16       	cp	r1, r24
    1bb6:	4c f5       	brge	.+82     	; 0x1c0a <LCD_vidInitialize+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb8:	6f a1       	ldd	r22, Y+39	; 0x27
    1bba:	78 a5       	ldd	r23, Y+40	; 0x28
    1bbc:	89 a5       	ldd	r24, Y+41	; 0x29
    1bbe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	40 e2       	ldi	r20, 0x20	; 32
    1bc6:	51 e4       	ldi	r21, 0x41	; 65
    1bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	bc 01       	movw	r22, r24
    1bd2:	cd 01       	movw	r24, r26
    1bd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	9a a3       	std	Y+34, r25	; 0x22
    1bde:	89 a3       	std	Y+33, r24	; 0x21
    1be0:	0f c0       	rjmp	.+30     	; 0x1c00 <LCD_vidInitialize+0x300>
    1be2:	8c e2       	ldi	r24, 0x2C	; 44
    1be4:	91 e0       	ldi	r25, 0x01	; 1
    1be6:	98 a3       	std	Y+32, r25	; 0x20
    1be8:	8f 8f       	std	Y+31, r24	; 0x1f
    1bea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bec:	98 a1       	ldd	r25, Y+32	; 0x20
    1bee:	01 97       	sbiw	r24, 0x01	; 1
    1bf0:	f1 f7       	brne	.-4      	; 0x1bee <LCD_vidInitialize+0x2ee>
    1bf2:	98 a3       	std	Y+32, r25	; 0x20
    1bf4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf6:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf8:	9a a1       	ldd	r25, Y+34	; 0x22
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	9a a3       	std	Y+34, r25	; 0x22
    1bfe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c00:	89 a1       	ldd	r24, Y+33	; 0x21
    1c02:	9a a1       	ldd	r25, Y+34	; 0x22
    1c04:	00 97       	sbiw	r24, 0x00	; 0
    1c06:	69 f7       	brne	.-38     	; 0x1be2 <LCD_vidInitialize+0x2e2>
    1c08:	14 c0       	rjmp	.+40     	; 0x1c32 <LCD_vidInitialize+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c0c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c0e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c10:	9e a1       	ldd	r25, Y+38	; 0x26
    1c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	9a a3       	std	Y+34, r25	; 0x22
    1c1c:	89 a3       	std	Y+33, r24	; 0x21
    1c1e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c20:	9a a1       	ldd	r25, Y+34	; 0x22
    1c22:	9e 8f       	std	Y+30, r25	; 0x1e
    1c24:	8d 8f       	std	Y+29, r24	; 0x1d
    1c26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c28:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	f1 f7       	brne	.-4      	; 0x1c2a <LCD_vidInitialize+0x32a>
    1c2e:	9e 8f       	std	Y+30, r25	; 0x1e
    1c30:	8d 8f       	std	Y+29, r24	; 0x1d
	 //  LCD_vidWriteCommand (0b00001100); //0X0C
	  _delay_ms (5);

	  // DISPLAY CLEAR
	 	  LCD_vidWriteCommand (0b00000001);
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <LCD_vidWriteCommand>
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	a0 ea       	ldi	r26, 0xA0	; 160
    1c3e:	b0 e4       	ldi	r27, 0x40	; 64
    1c40:	89 8f       	std	Y+25, r24	; 0x19
    1c42:	9a 8f       	std	Y+26, r25	; 0x1a
    1c44:	ab 8f       	std	Y+27, r26	; 0x1b
    1c46:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c48:	69 8d       	ldd	r22, Y+25	; 0x19
    1c4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e8       	ldi	r19, 0x80	; 128
    1c54:	4b e3       	ldi	r20, 0x3B	; 59
    1c56:	55 e4       	ldi	r21, 0x45	; 69
    1c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	8d 8b       	std	Y+21, r24	; 0x15
    1c62:	9e 8b       	std	Y+22, r25	; 0x16
    1c64:	af 8b       	std	Y+23, r26	; 0x17
    1c66:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c68:	6d 89       	ldd	r22, Y+21	; 0x15
    1c6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	40 e8       	ldi	r20, 0x80	; 128
    1c76:	5f e3       	ldi	r21, 0x3F	; 63
    1c78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c7c:	88 23       	and	r24, r24
    1c7e:	2c f4       	brge	.+10     	; 0x1c8a <LCD_vidInitialize+0x38a>
		__ticks = 1;
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	9c 8b       	std	Y+20, r25	; 0x14
    1c86:	8b 8b       	std	Y+19, r24	; 0x13
    1c88:	3f c0       	rjmp	.+126    	; 0x1d08 <LCD_vidInitialize+0x408>
	else if (__tmp > 65535)
    1c8a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c8c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c90:	98 8d       	ldd	r25, Y+24	; 0x18
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	3f ef       	ldi	r19, 0xFF	; 255
    1c96:	4f e7       	ldi	r20, 0x7F	; 127
    1c98:	57 e4       	ldi	r21, 0x47	; 71
    1c9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c9e:	18 16       	cp	r1, r24
    1ca0:	4c f5       	brge	.+82     	; 0x1cf4 <LCD_vidInitialize+0x3f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ca4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ca6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ca8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	40 e2       	ldi	r20, 0x20	; 32
    1cb0:	51 e4       	ldi	r21, 0x41	; 65
    1cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	bc 01       	movw	r22, r24
    1cbc:	cd 01       	movw	r24, r26
    1cbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	9c 8b       	std	Y+20, r25	; 0x14
    1cc8:	8b 8b       	std	Y+19, r24	; 0x13
    1cca:	0f c0       	rjmp	.+30     	; 0x1cea <LCD_vidInitialize+0x3ea>
    1ccc:	8c e2       	ldi	r24, 0x2C	; 44
    1cce:	91 e0       	ldi	r25, 0x01	; 1
    1cd0:	9a 8b       	std	Y+18, r25	; 0x12
    1cd2:	89 8b       	std	Y+17, r24	; 0x11
    1cd4:	89 89       	ldd	r24, Y+17	; 0x11
    1cd6:	9a 89       	ldd	r25, Y+18	; 0x12
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	f1 f7       	brne	.-4      	; 0x1cd8 <LCD_vidInitialize+0x3d8>
    1cdc:	9a 8b       	std	Y+18, r25	; 0x12
    1cde:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ce2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ce4:	01 97       	sbiw	r24, 0x01	; 1
    1ce6:	9c 8b       	std	Y+20, r25	; 0x14
    1ce8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cea:	8b 89       	ldd	r24, Y+19	; 0x13
    1cec:	9c 89       	ldd	r25, Y+20	; 0x14
    1cee:	00 97       	sbiw	r24, 0x00	; 0
    1cf0:	69 f7       	brne	.-38     	; 0x1ccc <LCD_vidInitialize+0x3cc>
    1cf2:	14 c0       	rjmp	.+40     	; 0x1d1c <LCD_vidInitialize+0x41c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf4:	6d 89       	ldd	r22, Y+21	; 0x15
    1cf6:	7e 89       	ldd	r23, Y+22	; 0x16
    1cf8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cfa:	98 8d       	ldd	r25, Y+24	; 0x18
    1cfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	9c 8b       	std	Y+20, r25	; 0x14
    1d06:	8b 8b       	std	Y+19, r24	; 0x13
    1d08:	8b 89       	ldd	r24, Y+19	; 0x13
    1d0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d0c:	98 8b       	std	Y+16, r25	; 0x10
    1d0e:	8f 87       	std	Y+15, r24	; 0x0f
    1d10:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d12:	98 89       	ldd	r25, Y+16	; 0x10
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	f1 f7       	brne	.-4      	; 0x1d14 <LCD_vidInitialize+0x414>
    1d18:	98 8b       	std	Y+16, r25	; 0x10
    1d1a:	8f 87       	std	Y+15, r24	; 0x0f
	 	  _delay_ms (5);

	  // Entry mode set
	  LCD_vidWriteCommand (0b00000110);   //0X06
    1d1c:	86 e0       	ldi	r24, 0x06	; 6
    1d1e:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <LCD_vidWriteCommand>
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	a0 ea       	ldi	r26, 0xA0	; 160
    1d28:	b0 e4       	ldi	r27, 0x40	; 64
    1d2a:	8b 87       	std	Y+11, r24	; 0x0b
    1d2c:	9c 87       	std	Y+12, r25	; 0x0c
    1d2e:	ad 87       	std	Y+13, r26	; 0x0d
    1d30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d32:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d34:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d38:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e8       	ldi	r19, 0x80	; 128
    1d3e:	4b e3       	ldi	r20, 0x3B	; 59
    1d40:	55 e4       	ldi	r21, 0x45	; 69
    1d42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	8f 83       	std	Y+7, r24	; 0x07
    1d4c:	98 87       	std	Y+8, r25	; 0x08
    1d4e:	a9 87       	std	Y+9, r26	; 0x09
    1d50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d52:	6f 81       	ldd	r22, Y+7	; 0x07
    1d54:	78 85       	ldd	r23, Y+8	; 0x08
    1d56:	89 85       	ldd	r24, Y+9	; 0x09
    1d58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	40 e8       	ldi	r20, 0x80	; 128
    1d60:	5f e3       	ldi	r21, 0x3F	; 63
    1d62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d66:	88 23       	and	r24, r24
    1d68:	2c f4       	brge	.+10     	; 0x1d74 <LCD_vidInitialize+0x474>
		__ticks = 1;
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	9e 83       	std	Y+6, r25	; 0x06
    1d70:	8d 83       	std	Y+5, r24	; 0x05
    1d72:	3f c0       	rjmp	.+126    	; 0x1df2 <LCD_vidInitialize+0x4f2>
	else if (__tmp > 65535)
    1d74:	6f 81       	ldd	r22, Y+7	; 0x07
    1d76:	78 85       	ldd	r23, Y+8	; 0x08
    1d78:	89 85       	ldd	r24, Y+9	; 0x09
    1d7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	3f ef       	ldi	r19, 0xFF	; 255
    1d80:	4f e7       	ldi	r20, 0x7F	; 127
    1d82:	57 e4       	ldi	r21, 0x47	; 71
    1d84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d88:	18 16       	cp	r1, r24
    1d8a:	4c f5       	brge	.+82     	; 0x1dde <LCD_vidInitialize+0x4de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 e2       	ldi	r20, 0x20	; 32
    1d9a:	51 e4       	ldi	r21, 0x41	; 65
    1d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	bc 01       	movw	r22, r24
    1da6:	cd 01       	movw	r24, r26
    1da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	9e 83       	std	Y+6, r25	; 0x06
    1db2:	8d 83       	std	Y+5, r24	; 0x05
    1db4:	0f c0       	rjmp	.+30     	; 0x1dd4 <LCD_vidInitialize+0x4d4>
    1db6:	8c e2       	ldi	r24, 0x2C	; 44
    1db8:	91 e0       	ldi	r25, 0x01	; 1
    1dba:	9c 83       	std	Y+4, r25	; 0x04
    1dbc:	8b 83       	std	Y+3, r24	; 0x03
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	f1 f7       	brne	.-4      	; 0x1dc2 <LCD_vidInitialize+0x4c2>
    1dc6:	9c 83       	std	Y+4, r25	; 0x04
    1dc8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dca:	8d 81       	ldd	r24, Y+5	; 0x05
    1dcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	9e 83       	std	Y+6, r25	; 0x06
    1dd2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd8:	00 97       	sbiw	r24, 0x00	; 0
    1dda:	69 f7       	brne	.-38     	; 0x1db6 <LCD_vidInitialize+0x4b6>
    1ddc:	14 c0       	rjmp	.+40     	; 0x1e06 <LCD_vidInitialize+0x506>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dde:	6f 81       	ldd	r22, Y+7	; 0x07
    1de0:	78 85       	ldd	r23, Y+8	; 0x08
    1de2:	89 85       	ldd	r24, Y+9	; 0x09
    1de4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	9e 83       	std	Y+6, r25	; 0x06
    1df0:	8d 83       	std	Y+5, r24	; 0x05
    1df2:	8d 81       	ldd	r24, Y+5	; 0x05
    1df4:	9e 81       	ldd	r25, Y+6	; 0x06
    1df6:	9a 83       	std	Y+2, r25	; 0x02
    1df8:	89 83       	std	Y+1, r24	; 0x01
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
    1dfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	f1 f7       	brne	.-4      	; 0x1dfe <LCD_vidInitialize+0x4fe>
    1e02:	9a 83       	std	Y+2, r25	; 0x02
    1e04:	89 83       	std	Y+1, r24	; 0x01
	  _delay_ms (5);

}
    1e06:	ca 5b       	subi	r28, 0xBA	; 186
    1e08:	df 4f       	sbci	r29, 0xFF	; 255
    1e0a:	0f b6       	in	r0, 0x3f	; 63
    1e0c:	f8 94       	cli
    1e0e:	de bf       	out	0x3e, r29	; 62
    1e10:	0f be       	out	0x3f, r0	; 63
    1e12:	cd bf       	out	0x3d, r28	; 61
    1e14:	cf 91       	pop	r28
    1e16:	df 91       	pop	r29
    1e18:	1f 91       	pop	r17
    1e1a:	0f 91       	pop	r16
    1e1c:	08 95       	ret

00001e1e <LCD_vidWriteCharacter>:


/****************************************************************/

void LCD_vidWriteCharacter(u8 u8DataCpy){
    1e1e:	df 93       	push	r29
    1e20:	cf 93       	push	r28
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	6d 97       	sbiw	r28, 0x1d	; 29
    1e28:	0f b6       	in	r0, 0x3f	; 63
    1e2a:	f8 94       	cli
    1e2c:	de bf       	out	0x3e, r29	; 62
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	cd bf       	out	0x3d, r28	; 61
    1e32:	8d 8f       	std	Y+29, r24	; 0x1d
	 // Set RS to HIGH
		DIO_SetPinValue(Ctrl_PORT, RS , HIGH);
    1e34:	80 e0       	ldi	r24, 0x00	; 0
    1e36:	65 e0       	ldi	r22, 0x05	; 5
    1e38:	41 e0       	ldi	r20, 0x01	; 1
    1e3a:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>

		// Set R/W to LOW
		DIO_SetPinValue(Ctrl_PORT, RW , LOW);
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	66 e0       	ldi	r22, 0x06	; 6
    1e42:	40 e0       	ldi	r20, 0x00	; 0
    1e44:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>

		// Set E to HIGH
		DIO_SetPinValue(Ctrl_PORT, E , HIGH);
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	67 e0       	ldi	r22, 0x07	; 7
    1e4c:	41 e0       	ldi	r20, 0x01	; 1
    1e4e:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>

		// Load Command on Data bus
		DIO_SetPortValue(Buff_PORT, u8DataCpy);
    1e52:	82 e0       	ldi	r24, 0x02	; 2
    1e54:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1e56:	0e 94 09 09 	call	0x1212	; 0x1212 <DIO_SetPortValue>

		// Set E to LOW ( write on falling edge)
		DIO_SetPinValue(Ctrl_PORT, E, LOW);
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	67 e0       	ldi	r22, 0x07	; 7
    1e5e:	40 e0       	ldi	r20, 0x00	; 0
    1e60:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	a0 ea       	ldi	r26, 0xA0	; 160
    1e6a:	b0 e4       	ldi	r27, 0x40	; 64
    1e6c:	89 8f       	std	Y+25, r24	; 0x19
    1e6e:	9a 8f       	std	Y+26, r25	; 0x1a
    1e70:	ab 8f       	std	Y+27, r26	; 0x1b
    1e72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e74:	69 8d       	ldd	r22, Y+25	; 0x19
    1e76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e8       	ldi	r19, 0x80	; 128
    1e80:	4b e3       	ldi	r20, 0x3B	; 59
    1e82:	55 e4       	ldi	r21, 0x45	; 69
    1e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	8d 8b       	std	Y+21, r24	; 0x15
    1e8e:	9e 8b       	std	Y+22, r25	; 0x16
    1e90:	af 8b       	std	Y+23, r26	; 0x17
    1e92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e94:	6d 89       	ldd	r22, Y+21	; 0x15
    1e96:	7e 89       	ldd	r23, Y+22	; 0x16
    1e98:	8f 89       	ldd	r24, Y+23	; 0x17
    1e9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	40 e8       	ldi	r20, 0x80	; 128
    1ea2:	5f e3       	ldi	r21, 0x3F	; 63
    1ea4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ea8:	88 23       	and	r24, r24
    1eaa:	2c f4       	brge	.+10     	; 0x1eb6 <LCD_vidWriteCharacter+0x98>
		__ticks = 1;
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	9c 8b       	std	Y+20, r25	; 0x14
    1eb2:	8b 8b       	std	Y+19, r24	; 0x13
    1eb4:	3f c0       	rjmp	.+126    	; 0x1f34 <LCD_vidWriteCharacter+0x116>
	else if (__tmp > 65535)
    1eb6:	6d 89       	ldd	r22, Y+21	; 0x15
    1eb8:	7e 89       	ldd	r23, Y+22	; 0x16
    1eba:	8f 89       	ldd	r24, Y+23	; 0x17
    1ebc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	3f ef       	ldi	r19, 0xFF	; 255
    1ec2:	4f e7       	ldi	r20, 0x7F	; 127
    1ec4:	57 e4       	ldi	r21, 0x47	; 71
    1ec6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eca:	18 16       	cp	r1, r24
    1ecc:	4c f5       	brge	.+82     	; 0x1f20 <LCD_vidWriteCharacter+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ece:	69 8d       	ldd	r22, Y+25	; 0x19
    1ed0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ed2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ed4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	40 e2       	ldi	r20, 0x20	; 32
    1edc:	51 e4       	ldi	r21, 0x41	; 65
    1ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	bc 01       	movw	r22, r24
    1ee8:	cd 01       	movw	r24, r26
    1eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	9c 8b       	std	Y+20, r25	; 0x14
    1ef4:	8b 8b       	std	Y+19, r24	; 0x13
    1ef6:	0f c0       	rjmp	.+30     	; 0x1f16 <LCD_vidWriteCharacter+0xf8>
    1ef8:	8c e2       	ldi	r24, 0x2C	; 44
    1efa:	91 e0       	ldi	r25, 0x01	; 1
    1efc:	9a 8b       	std	Y+18, r25	; 0x12
    1efe:	89 8b       	std	Y+17, r24	; 0x11
    1f00:	89 89       	ldd	r24, Y+17	; 0x11
    1f02:	9a 89       	ldd	r25, Y+18	; 0x12
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	f1 f7       	brne	.-4      	; 0x1f04 <LCD_vidWriteCharacter+0xe6>
    1f08:	9a 8b       	std	Y+18, r25	; 0x12
    1f0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	9c 8b       	std	Y+20, r25	; 0x14
    1f14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f16:	8b 89       	ldd	r24, Y+19	; 0x13
    1f18:	9c 89       	ldd	r25, Y+20	; 0x14
    1f1a:	00 97       	sbiw	r24, 0x00	; 0
    1f1c:	69 f7       	brne	.-38     	; 0x1ef8 <LCD_vidWriteCharacter+0xda>
    1f1e:	14 c0       	rjmp	.+40     	; 0x1f48 <LCD_vidWriteCharacter+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f20:	6d 89       	ldd	r22, Y+21	; 0x15
    1f22:	7e 89       	ldd	r23, Y+22	; 0x16
    1f24:	8f 89       	ldd	r24, Y+23	; 0x17
    1f26:	98 8d       	ldd	r25, Y+24	; 0x18
    1f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	9c 8b       	std	Y+20, r25	; 0x14
    1f32:	8b 8b       	std	Y+19, r24	; 0x13
    1f34:	8b 89       	ldd	r24, Y+19	; 0x13
    1f36:	9c 89       	ldd	r25, Y+20	; 0x14
    1f38:	98 8b       	std	Y+16, r25	; 0x10
    1f3a:	8f 87       	std	Y+15, r24	; 0x0f
    1f3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f3e:	98 89       	ldd	r25, Y+16	; 0x10
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	f1 f7       	brne	.-4      	; 0x1f40 <LCD_vidWriteCharacter+0x122>
    1f44:	98 8b       	std	Y+16, r25	; 0x10
    1f46:	8f 87       	std	Y+15, r24	; 0x0f

		// Wait for E to settle
		_delay_ms(5);

		// Set E to HIGH
		DIO_SetPinValue(Ctrl_PORT, E, HIGH);
    1f48:	80 e0       	ldi	r24, 0x00	; 0
    1f4a:	67 e0       	ldi	r22, 0x07	; 7
    1f4c:	41 e0       	ldi	r20, 0x01	; 1
    1f4e:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	a0 ea       	ldi	r26, 0xA0	; 160
    1f58:	b0 e4       	ldi	r27, 0x40	; 64
    1f5a:	8b 87       	std	Y+11, r24	; 0x0b
    1f5c:	9c 87       	std	Y+12, r25	; 0x0c
    1f5e:	ad 87       	std	Y+13, r26	; 0x0d
    1f60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e8       	ldi	r19, 0x80	; 128
    1f6e:	4b e3       	ldi	r20, 0x3B	; 59
    1f70:	55 e4       	ldi	r21, 0x45	; 69
    1f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	8f 83       	std	Y+7, r24	; 0x07
    1f7c:	98 87       	std	Y+8, r25	; 0x08
    1f7e:	a9 87       	std	Y+9, r26	; 0x09
    1f80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f82:	6f 81       	ldd	r22, Y+7	; 0x07
    1f84:	78 85       	ldd	r23, Y+8	; 0x08
    1f86:	89 85       	ldd	r24, Y+9	; 0x09
    1f88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	40 e8       	ldi	r20, 0x80	; 128
    1f90:	5f e3       	ldi	r21, 0x3F	; 63
    1f92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f96:	88 23       	and	r24, r24
    1f98:	2c f4       	brge	.+10     	; 0x1fa4 <LCD_vidWriteCharacter+0x186>
		__ticks = 1;
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	9e 83       	std	Y+6, r25	; 0x06
    1fa0:	8d 83       	std	Y+5, r24	; 0x05
    1fa2:	3f c0       	rjmp	.+126    	; 0x2022 <LCD_vidWriteCharacter+0x204>
	else if (__tmp > 65535)
    1fa4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa6:	78 85       	ldd	r23, Y+8	; 0x08
    1fa8:	89 85       	ldd	r24, Y+9	; 0x09
    1faa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	3f ef       	ldi	r19, 0xFF	; 255
    1fb0:	4f e7       	ldi	r20, 0x7F	; 127
    1fb2:	57 e4       	ldi	r21, 0x47	; 71
    1fb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fb8:	18 16       	cp	r1, r24
    1fba:	4c f5       	brge	.+82     	; 0x200e <LCD_vidWriteCharacter+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	40 e2       	ldi	r20, 0x20	; 32
    1fca:	51 e4       	ldi	r21, 0x41	; 65
    1fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	bc 01       	movw	r22, r24
    1fd6:	cd 01       	movw	r24, r26
    1fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	9e 83       	std	Y+6, r25	; 0x06
    1fe2:	8d 83       	std	Y+5, r24	; 0x05
    1fe4:	0f c0       	rjmp	.+30     	; 0x2004 <LCD_vidWriteCharacter+0x1e6>
    1fe6:	8c e2       	ldi	r24, 0x2C	; 44
    1fe8:	91 e0       	ldi	r25, 0x01	; 1
    1fea:	9c 83       	std	Y+4, r25	; 0x04
    1fec:	8b 83       	std	Y+3, r24	; 0x03
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff2:	01 97       	sbiw	r24, 0x01	; 1
    1ff4:	f1 f7       	brne	.-4      	; 0x1ff2 <LCD_vidWriteCharacter+0x1d4>
    1ff6:	9c 83       	std	Y+4, r25	; 0x04
    1ff8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffa:	8d 81       	ldd	r24, Y+5	; 0x05
    1ffc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ffe:	01 97       	sbiw	r24, 0x01	; 1
    2000:	9e 83       	std	Y+6, r25	; 0x06
    2002:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2004:	8d 81       	ldd	r24, Y+5	; 0x05
    2006:	9e 81       	ldd	r25, Y+6	; 0x06
    2008:	00 97       	sbiw	r24, 0x00	; 0
    200a:	69 f7       	brne	.-38     	; 0x1fe6 <LCD_vidWriteCharacter+0x1c8>
    200c:	14 c0       	rjmp	.+40     	; 0x2036 <LCD_vidWriteCharacter+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    200e:	6f 81       	ldd	r22, Y+7	; 0x07
    2010:	78 85       	ldd	r23, Y+8	; 0x08
    2012:	89 85       	ldd	r24, Y+9	; 0x09
    2014:	9a 85       	ldd	r25, Y+10	; 0x0a
    2016:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	9e 83       	std	Y+6, r25	; 0x06
    2020:	8d 83       	std	Y+5, r24	; 0x05
    2022:	8d 81       	ldd	r24, Y+5	; 0x05
    2024:	9e 81       	ldd	r25, Y+6	; 0x06
    2026:	9a 83       	std	Y+2, r25	; 0x02
    2028:	89 83       	std	Y+1, r24	; 0x01
    202a:	89 81       	ldd	r24, Y+1	; 0x01
    202c:	9a 81       	ldd	r25, Y+2	; 0x02
    202e:	01 97       	sbiw	r24, 0x01	; 1
    2030:	f1 f7       	brne	.-4      	; 0x202e <LCD_vidWriteCharacter+0x210>
    2032:	9a 83       	std	Y+2, r25	; 0x02
    2034:	89 83       	std	Y+1, r24	; 0x01

		// Delay to let the LCD Display the character
		_delay_ms(5);

}
    2036:	6d 96       	adiw	r28, 0x1d	; 29
    2038:	0f b6       	in	r0, 0x3f	; 63
    203a:	f8 94       	cli
    203c:	de bf       	out	0x3e, r29	; 62
    203e:	0f be       	out	0x3f, r0	; 63
    2040:	cd bf       	out	0x3d, r28	; 61
    2042:	cf 91       	pop	r28
    2044:	df 91       	pop	r29
    2046:	08 95       	ret

00002048 <LCD_vidWriteString>:


/****************************************************************/

void LCD_vidWriteString (u8* pu8StringCpy, u8 u8Index){
    2048:	df 93       	push	r29
    204a:	cf 93       	push	r28
    204c:	cd b7       	in	r28, 0x3d	; 61
    204e:	de b7       	in	r29, 0x3e	; 62
    2050:	62 97       	sbiw	r28, 0x12	; 18
    2052:	0f b6       	in	r0, 0x3f	; 63
    2054:	f8 94       	cli
    2056:	de bf       	out	0x3e, r29	; 62
    2058:	0f be       	out	0x3f, r0	; 63
    205a:	cd bf       	out	0x3d, r28	; 61
    205c:	99 8b       	std	Y+17, r25	; 0x11
    205e:	88 8b       	std	Y+16, r24	; 0x10
    2060:	6a 8b       	std	Y+18, r22	; 0x12

	// Local loop index

		u8 iteration=0;
    2062:	1f 86       	std	Y+15, r1	; 0x0f

		for (iteration=0; ((iteration<u8Index)&&(pu8StringCpy[iteration] != '\0')) ; iteration++)
    2064:	1f 86       	std	Y+15, r1	; 0x0f
    2066:	80 c0       	rjmp	.+256    	; 0x2168 <LCD_vidWriteString+0x120>
		{
			/* Write Character on LCD */
			LCD_vidWriteCharacter(pu8StringCpy[iteration]);
    2068:	8f 85       	ldd	r24, Y+15	; 0x0f
    206a:	28 2f       	mov	r18, r24
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	88 89       	ldd	r24, Y+16	; 0x10
    2070:	99 89       	ldd	r25, Y+17	; 0x11
    2072:	fc 01       	movw	r30, r24
    2074:	e2 0f       	add	r30, r18
    2076:	f3 1f       	adc	r31, r19
    2078:	80 81       	ld	r24, Z
    207a:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_vidWriteCharacter>
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	a0 ea       	ldi	r26, 0xA0	; 160
    2084:	b0 e4       	ldi	r27, 0x40	; 64
    2086:	8b 87       	std	Y+11, r24	; 0x0b
    2088:	9c 87       	std	Y+12, r25	; 0x0c
    208a:	ad 87       	std	Y+13, r26	; 0x0d
    208c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    208e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2090:	7c 85       	ldd	r23, Y+12	; 0x0c
    2092:	8d 85       	ldd	r24, Y+13	; 0x0d
    2094:	9e 85       	ldd	r25, Y+14	; 0x0e
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e8       	ldi	r19, 0x80	; 128
    209a:	4b e3       	ldi	r20, 0x3B	; 59
    209c:	55 e4       	ldi	r21, 0x45	; 69
    209e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	8f 83       	std	Y+7, r24	; 0x07
    20a8:	98 87       	std	Y+8, r25	; 0x08
    20aa:	a9 87       	std	Y+9, r26	; 0x09
    20ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20ae:	6f 81       	ldd	r22, Y+7	; 0x07
    20b0:	78 85       	ldd	r23, Y+8	; 0x08
    20b2:	89 85       	ldd	r24, Y+9	; 0x09
    20b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	40 e8       	ldi	r20, 0x80	; 128
    20bc:	5f e3       	ldi	r21, 0x3F	; 63
    20be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c2:	88 23       	and	r24, r24
    20c4:	2c f4       	brge	.+10     	; 0x20d0 <LCD_vidWriteString+0x88>
		__ticks = 1;
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	9e 83       	std	Y+6, r25	; 0x06
    20cc:	8d 83       	std	Y+5, r24	; 0x05
    20ce:	3f c0       	rjmp	.+126    	; 0x214e <LCD_vidWriteString+0x106>
	else if (__tmp > 65535)
    20d0:	6f 81       	ldd	r22, Y+7	; 0x07
    20d2:	78 85       	ldd	r23, Y+8	; 0x08
    20d4:	89 85       	ldd	r24, Y+9	; 0x09
    20d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	3f ef       	ldi	r19, 0xFF	; 255
    20dc:	4f e7       	ldi	r20, 0x7F	; 127
    20de:	57 e4       	ldi	r21, 0x47	; 71
    20e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e4:	18 16       	cp	r1, r24
    20e6:	4c f5       	brge	.+82     	; 0x213a <LCD_vidWriteString+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	40 e2       	ldi	r20, 0x20	; 32
    20f6:	51 e4       	ldi	r21, 0x41	; 65
    20f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	bc 01       	movw	r22, r24
    2102:	cd 01       	movw	r24, r26
    2104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	9e 83       	std	Y+6, r25	; 0x06
    210e:	8d 83       	std	Y+5, r24	; 0x05
    2110:	0f c0       	rjmp	.+30     	; 0x2130 <LCD_vidWriteString+0xe8>
    2112:	8c e2       	ldi	r24, 0x2C	; 44
    2114:	91 e0       	ldi	r25, 0x01	; 1
    2116:	9c 83       	std	Y+4, r25	; 0x04
    2118:	8b 83       	std	Y+3, r24	; 0x03
    211a:	8b 81       	ldd	r24, Y+3	; 0x03
    211c:	9c 81       	ldd	r25, Y+4	; 0x04
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	f1 f7       	brne	.-4      	; 0x211e <LCD_vidWriteString+0xd6>
    2122:	9c 83       	std	Y+4, r25	; 0x04
    2124:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2126:	8d 81       	ldd	r24, Y+5	; 0x05
    2128:	9e 81       	ldd	r25, Y+6	; 0x06
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	9e 83       	std	Y+6, r25	; 0x06
    212e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2130:	8d 81       	ldd	r24, Y+5	; 0x05
    2132:	9e 81       	ldd	r25, Y+6	; 0x06
    2134:	00 97       	sbiw	r24, 0x00	; 0
    2136:	69 f7       	brne	.-38     	; 0x2112 <LCD_vidWriteString+0xca>
    2138:	14 c0       	rjmp	.+40     	; 0x2162 <LCD_vidWriteString+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213a:	6f 81       	ldd	r22, Y+7	; 0x07
    213c:	78 85       	ldd	r23, Y+8	; 0x08
    213e:	89 85       	ldd	r24, Y+9	; 0x09
    2140:	9a 85       	ldd	r25, Y+10	; 0x0a
    2142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	9e 83       	std	Y+6, r25	; 0x06
    214c:	8d 83       	std	Y+5, r24	; 0x05
    214e:	8d 81       	ldd	r24, Y+5	; 0x05
    2150:	9e 81       	ldd	r25, Y+6	; 0x06
    2152:	9a 83       	std	Y+2, r25	; 0x02
    2154:	89 83       	std	Y+1, r24	; 0x01
    2156:	89 81       	ldd	r24, Y+1	; 0x01
    2158:	9a 81       	ldd	r25, Y+2	; 0x02
    215a:	01 97       	sbiw	r24, 0x01	; 1
    215c:	f1 f7       	brne	.-4      	; 0x215a <LCD_vidWriteString+0x112>
    215e:	9a 83       	std	Y+2, r25	; 0x02
    2160:	89 83       	std	Y+1, r24	; 0x01

	// Local loop index

		u8 iteration=0;

		for (iteration=0; ((iteration<u8Index)&&(pu8StringCpy[iteration] != '\0')) ; iteration++)
    2162:	8f 85       	ldd	r24, Y+15	; 0x0f
    2164:	8f 5f       	subi	r24, 0xFF	; 255
    2166:	8f 87       	std	Y+15, r24	; 0x0f
    2168:	9f 85       	ldd	r25, Y+15	; 0x0f
    216a:	8a 89       	ldd	r24, Y+18	; 0x12
    216c:	98 17       	cp	r25, r24
    216e:	60 f4       	brcc	.+24     	; 0x2188 <LCD_vidWriteString+0x140>
    2170:	8f 85       	ldd	r24, Y+15	; 0x0f
    2172:	28 2f       	mov	r18, r24
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	88 89       	ldd	r24, Y+16	; 0x10
    2178:	99 89       	ldd	r25, Y+17	; 0x11
    217a:	fc 01       	movw	r30, r24
    217c:	e2 0f       	add	r30, r18
    217e:	f3 1f       	adc	r31, r19
    2180:	80 81       	ld	r24, Z
    2182:	88 23       	and	r24, r24
    2184:	09 f0       	breq	.+2      	; 0x2188 <LCD_vidWriteString+0x140>
    2186:	70 cf       	rjmp	.-288    	; 0x2068 <LCD_vidWriteString+0x20>
			LCD_vidWriteCharacter(pu8StringCpy[iteration]);

			/* Delay to let the LCD show the character */
			_delay_ms(5);
		}
}
    2188:	62 96       	adiw	r28, 0x12	; 18
    218a:	0f b6       	in	r0, 0x3f	; 63
    218c:	f8 94       	cli
    218e:	de bf       	out	0x3e, r29	; 62
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	cd bf       	out	0x3d, r28	; 61
    2194:	cf 91       	pop	r28
    2196:	df 91       	pop	r29
    2198:	08 95       	ret

0000219a <LCD_vidClear>:

/****************************************************************/


void LCD_vidClear(void)
{
    219a:	df 93       	push	r29
    219c:	cf 93       	push	r28
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
	LCD_vidWriteCommand (0x01);		/* clear display */
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <LCD_vidWriteCommand>
	LCD_vidWriteCommand (0x02);		/* cursor at home position */
    21a8:	82 e0       	ldi	r24, 0x02	; 2
    21aa:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <LCD_vidWriteCommand>
}
    21ae:	cf 91       	pop	r28
    21b0:	df 91       	pop	r29
    21b2:	08 95       	ret

000021b4 <Gotoxy>:

/****************************************************************/

void Gotoxy (u8 X,u8 Y){
    21b4:	df 93       	push	r29
    21b6:	cf 93       	push	r28
    21b8:	00 d0       	rcall	.+0      	; 0x21ba <Gotoxy+0x6>
    21ba:	00 d0       	rcall	.+0      	; 0x21bc <Gotoxy+0x8>
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	89 83       	std	Y+1, r24	; 0x01
    21c2:	6a 83       	std	Y+2, r22	; 0x02
  2*16 LCD
		    {80 81 ... 8F}   0X80 = 128  :Force cursor to beginning of the first line
		    {C0 C1 ... CF}   0XC0 = 192  :Force cursor to beginning of the SECOND line

*/
	if (X>0 && X<=16)           // x from 1 to 16 , y : 1 or 2
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	88 23       	and	r24, r24
    21c8:	e1 f0       	breq	.+56     	; 0x2202 <Gotoxy+0x4e>
    21ca:	89 81       	ldd	r24, Y+1	; 0x01
    21cc:	81 31       	cpi	r24, 0x11	; 17
    21ce:	c8 f4       	brcc	.+50     	; 0x2202 <Gotoxy+0x4e>
		{
		    switch(Y)
    21d0:	8a 81       	ldd	r24, Y+2	; 0x02
    21d2:	28 2f       	mov	r18, r24
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	3c 83       	std	Y+4, r19	; 0x04
    21d8:	2b 83       	std	Y+3, r18	; 0x03
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	9c 81       	ldd	r25, Y+4	; 0x04
    21de:	81 30       	cpi	r24, 0x01	; 1
    21e0:	91 05       	cpc	r25, r1
    21e2:	31 f0       	breq	.+12     	; 0x21f0 <Gotoxy+0x3c>
    21e4:	2b 81       	ldd	r18, Y+3	; 0x03
    21e6:	3c 81       	ldd	r19, Y+4	; 0x04
    21e8:	22 30       	cpi	r18, 0x02	; 2
    21ea:	31 05       	cpc	r19, r1
    21ec:	31 f0       	breq	.+12     	; 0x21fa <Gotoxy+0x46>
    21ee:	09 c0       	rjmp	.+18     	; 0x2202 <Gotoxy+0x4e>
		    {
			    case 1:
			    	LCD_vidWriteCommand(X+127);
    21f0:	89 81       	ldd	r24, Y+1	; 0x01
    21f2:	81 58       	subi	r24, 0x81	; 129
    21f4:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <LCD_vidWriteCommand>
    21f8:	04 c0       	rjmp	.+8      	; 0x2202 <Gotoxy+0x4e>
			    break;
			    case 2:
			    	LCD_vidWriteCommand(X+191);
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	81 54       	subi	r24, 0x41	; 65
    21fe:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <LCD_vidWriteCommand>
			    default:
			    break;
		    }
		}

}
    2202:	0f 90       	pop	r0
    2204:	0f 90       	pop	r0
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	cf 91       	pop	r28
    220c:	df 91       	pop	r29
    220e:	08 95       	ret

00002210 <LCDWriteInteger>:

/********************************************************/

void LCDWriteInteger(u16 val , u16 field_length)
{
    2210:	df 93       	push	r29
    2212:	cf 93       	push	r28
    2214:	cd b7       	in	r28, 0x3d	; 61
    2216:	de b7       	in	r29, 0x3e	; 62
    2218:	62 97       	sbiw	r28, 0x12	; 18
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	de bf       	out	0x3e, r29	; 62
    2220:	0f be       	out	0x3f, r0	; 63
    2222:	cd bf       	out	0x3d, r28	; 61
    2224:	98 8b       	std	Y+16, r25	; 0x10
    2226:	8f 87       	std	Y+15, r24	; 0x0f
    2228:	7a 8b       	std	Y+18, r23	; 0x12
    222a:	69 8b       	std	Y+17, r22	; 0x11
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	u16 str[5]={0,0,0,0,0};
    222c:	8a e0       	ldi	r24, 0x0A	; 10
    222e:	fe 01       	movw	r30, r28
    2230:	35 96       	adiw	r30, 0x05	; 5
    2232:	df 01       	movw	r26, r30
    2234:	28 2f       	mov	r18, r24
    2236:	1d 92       	st	X+, r1
    2238:	2a 95       	dec	r18
    223a:	e9 f7       	brne	.-6      	; 0x2236 <LCDWriteInteger+0x26>
	u16 i=4,j=0;
    223c:	84 e0       	ldi	r24, 0x04	; 4
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	9c 83       	std	Y+4, r25	; 0x04
    2242:	8b 83       	std	Y+3, r24	; 0x03
    2244:	1a 82       	std	Y+2, r1	; 0x02
    2246:	19 82       	std	Y+1, r1	; 0x01
		LCD_vidWriteCharacter('-');   //Write Negative sign
		val=val*(-1);     //convert to positive
	}
	else
	{
		LCD_vidWriteCharacter(' ');
    2248:	80 e2       	ldi	r24, 0x20	; 32
    224a:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_vidWriteCharacter>
    224e:	24 c0       	rjmp	.+72     	; 0x2298 <LCDWriteInteger+0x88>
	}

	while(val)
	{
		str[i]=val%10;
    2250:	eb 81       	ldd	r30, Y+3	; 0x03
    2252:	fc 81       	ldd	r31, Y+4	; 0x04
    2254:	8f 85       	ldd	r24, Y+15	; 0x0f
    2256:	98 89       	ldd	r25, Y+16	; 0x10
    2258:	2a e0       	ldi	r18, 0x0A	; 10
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	b9 01       	movw	r22, r18
    225e:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <__udivmodhi4>
    2262:	ac 01       	movw	r20, r24
    2264:	9f 01       	movw	r18, r30
    2266:	22 0f       	add	r18, r18
    2268:	33 1f       	adc	r19, r19
    226a:	ce 01       	movw	r24, r28
    226c:	01 96       	adiw	r24, 0x01	; 1
    226e:	82 0f       	add	r24, r18
    2270:	93 1f       	adc	r25, r19
    2272:	fc 01       	movw	r30, r24
    2274:	34 96       	adiw	r30, 0x04	; 4
    2276:	51 83       	std	Z+1, r21	; 0x01
    2278:	40 83       	st	Z, r20
		val=val/10;
    227a:	8f 85       	ldd	r24, Y+15	; 0x0f
    227c:	98 89       	ldd	r25, Y+16	; 0x10
    227e:	2a e0       	ldi	r18, 0x0A	; 10
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	b9 01       	movw	r22, r18
    2284:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <__udivmodhi4>
    2288:	cb 01       	movw	r24, r22
    228a:	98 8b       	std	Y+16, r25	; 0x10
    228c:	8f 87       	std	Y+15, r24	; 0x0f
		i--;
    228e:	8b 81       	ldd	r24, Y+3	; 0x03
    2290:	9c 81       	ldd	r25, Y+4	; 0x04
    2292:	01 97       	sbiw	r24, 0x01	; 1
    2294:	9c 83       	std	Y+4, r25	; 0x04
    2296:	8b 83       	std	Y+3, r24	; 0x03
	else
	{
		LCD_vidWriteCharacter(' ');
	}

	while(val)
    2298:	8f 85       	ldd	r24, Y+15	; 0x0f
    229a:	98 89       	ldd	r25, Y+16	; 0x10
    229c:	00 97       	sbiw	r24, 0x00	; 0
    229e:	c1 f6       	brne	.-80     	; 0x2250 <LCDWriteInteger+0x40>
		str[i]=val%10;
		val=val/10;
		i--;
	}

	if(field_length==-1)
    22a0:	89 89       	ldd	r24, Y+17	; 0x11
    22a2:	9a 89       	ldd	r25, Y+18	; 0x12
    22a4:	af ef       	ldi	r26, 0xFF	; 255
    22a6:	8f 3f       	cpi	r24, 0xFF	; 255
    22a8:	9a 07       	cpc	r25, r26
    22aa:	b1 f4       	brne	.+44     	; 0x22d8 <LCDWriteInteger+0xc8>
    22ac:	05 c0       	rjmp	.+10     	; 0x22b8 <LCDWriteInteger+0xa8>
		while(str[j]==0) j++;
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	9a 81       	ldd	r25, Y+2	; 0x02
    22b2:	01 96       	adiw	r24, 0x01	; 1
    22b4:	9a 83       	std	Y+2, r25	; 0x02
    22b6:	89 83       	std	Y+1, r24	; 0x01
    22b8:	89 81       	ldd	r24, Y+1	; 0x01
    22ba:	9a 81       	ldd	r25, Y+2	; 0x02
    22bc:	9c 01       	movw	r18, r24
    22be:	22 0f       	add	r18, r18
    22c0:	33 1f       	adc	r19, r19
    22c2:	ce 01       	movw	r24, r28
    22c4:	01 96       	adiw	r24, 0x01	; 1
    22c6:	82 0f       	add	r24, r18
    22c8:	93 1f       	adc	r25, r19
    22ca:	fc 01       	movw	r30, r24
    22cc:	34 96       	adiw	r30, 0x04	; 4
    22ce:	80 81       	ld	r24, Z
    22d0:	91 81       	ldd	r25, Z+1	; 0x01
    22d2:	00 97       	sbiw	r24, 0x00	; 0
    22d4:	61 f3       	breq	.-40     	; 0x22ae <LCDWriteInteger+0x9e>
    22d6:	08 c0       	rjmp	.+16     	; 0x22e8 <LCDWriteInteger+0xd8>
	else
		j=5-field_length;
    22d8:	85 e0       	ldi	r24, 0x05	; 5
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	29 89       	ldd	r18, Y+17	; 0x11
    22de:	3a 89       	ldd	r19, Y+18	; 0x12
    22e0:	82 1b       	sub	r24, r18
    22e2:	93 0b       	sbc	r25, r19
    22e4:	9a 83       	std	Y+2, r25	; 0x02
    22e6:	89 83       	std	Y+1, r24	; 0x01

	for(i=j;i<5;i++)
    22e8:	89 81       	ldd	r24, Y+1	; 0x01
    22ea:	9a 81       	ldd	r25, Y+2	; 0x02
    22ec:	9c 83       	std	Y+4, r25	; 0x04
    22ee:	8b 83       	std	Y+3, r24	; 0x03
    22f0:	15 c0       	rjmp	.+42     	; 0x231c <LCDWriteInteger+0x10c>
	{
		LCD_vidWriteCharacter('0'+str[i]);
    22f2:	8b 81       	ldd	r24, Y+3	; 0x03
    22f4:	9c 81       	ldd	r25, Y+4	; 0x04
    22f6:	9c 01       	movw	r18, r24
    22f8:	22 0f       	add	r18, r18
    22fa:	33 1f       	adc	r19, r19
    22fc:	ce 01       	movw	r24, r28
    22fe:	01 96       	adiw	r24, 0x01	; 1
    2300:	82 0f       	add	r24, r18
    2302:	93 1f       	adc	r25, r19
    2304:	fc 01       	movw	r30, r24
    2306:	34 96       	adiw	r30, 0x04	; 4
    2308:	80 81       	ld	r24, Z
    230a:	91 81       	ldd	r25, Z+1	; 0x01
    230c:	80 5d       	subi	r24, 0xD0	; 208
    230e:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_vidWriteCharacter>
	if(field_length==-1)
		while(str[j]==0) j++;
	else
		j=5-field_length;

	for(i=j;i<5;i++)
    2312:	8b 81       	ldd	r24, Y+3	; 0x03
    2314:	9c 81       	ldd	r25, Y+4	; 0x04
    2316:	01 96       	adiw	r24, 0x01	; 1
    2318:	9c 83       	std	Y+4, r25	; 0x04
    231a:	8b 83       	std	Y+3, r24	; 0x03
    231c:	8b 81       	ldd	r24, Y+3	; 0x03
    231e:	9c 81       	ldd	r25, Y+4	; 0x04
    2320:	85 30       	cpi	r24, 0x05	; 5
    2322:	91 05       	cpc	r25, r1
    2324:	30 f3       	brcs	.-52     	; 0x22f2 <LCDWriteInteger+0xe2>
	{
		LCD_vidWriteCharacter('0'+str[i]);
	}
}
    2326:	62 96       	adiw	r28, 0x12	; 18
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	f8 94       	cli
    232c:	de bf       	out	0x3e, r29	; 62
    232e:	0f be       	out	0x3f, r0	; 63
    2330:	cd bf       	out	0x3d, r28	; 61
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <vid_SeparateResult>:


/********************************************************/

void vid_SeparateResult(u32 u32Result , u8 * u8ArrayResult) {
    2338:	0f 93       	push	r16
    233a:	1f 93       	push	r17
    233c:	df 93       	push	r29
    233e:	cf 93       	push	r28
    2340:	00 d0       	rcall	.+0      	; 0x2342 <vid_SeparateResult+0xa>
    2342:	00 d0       	rcall	.+0      	; 0x2344 <vid_SeparateResult+0xc>
    2344:	00 d0       	rcall	.+0      	; 0x2346 <vid_SeparateResult+0xe>
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
    234a:	69 83       	std	Y+1, r22	; 0x01
    234c:	7a 83       	std	Y+2, r23	; 0x02
    234e:	8b 83       	std	Y+3, r24	; 0x03
    2350:	9c 83       	std	Y+4, r25	; 0x04
    2352:	5e 83       	std	Y+6, r21	; 0x06
    2354:	4d 83       	std	Y+5, r20	; 0x05

	u8ArrayResult[0]= ( (u32Result / 10000) % 10 ) + 48 ;   //48 is the asci of 0
    2356:	89 81       	ldd	r24, Y+1	; 0x01
    2358:	9a 81       	ldd	r25, Y+2	; 0x02
    235a:	ab 81       	ldd	r26, Y+3	; 0x03
    235c:	bc 81       	ldd	r27, Y+4	; 0x04
    235e:	20 e1       	ldi	r18, 0x10	; 16
    2360:	37 e2       	ldi	r19, 0x27	; 39
    2362:	40 e0       	ldi	r20, 0x00	; 0
    2364:	50 e0       	ldi	r21, 0x00	; 0
    2366:	bc 01       	movw	r22, r24
    2368:	cd 01       	movw	r24, r26
    236a:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__udivmodsi4>
    236e:	da 01       	movw	r26, r20
    2370:	c9 01       	movw	r24, r18
    2372:	2a e0       	ldi	r18, 0x0A	; 10
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	40 e0       	ldi	r20, 0x00	; 0
    2378:	50 e0       	ldi	r21, 0x00	; 0
    237a:	bc 01       	movw	r22, r24
    237c:	cd 01       	movw	r24, r26
    237e:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__udivmodsi4>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	80 5d       	subi	r24, 0xD0	; 208
    2388:	ed 81       	ldd	r30, Y+5	; 0x05
    238a:	fe 81       	ldd	r31, Y+6	; 0x06
    238c:	80 83       	st	Z, r24
	u8ArrayResult[1]= ( (u32Result / 1000) % 10 ) + 48 ;
    238e:	8d 81       	ldd	r24, Y+5	; 0x05
    2390:	9e 81       	ldd	r25, Y+6	; 0x06
    2392:	8c 01       	movw	r16, r24
    2394:	0f 5f       	subi	r16, 0xFF	; 255
    2396:	1f 4f       	sbci	r17, 0xFF	; 255
    2398:	89 81       	ldd	r24, Y+1	; 0x01
    239a:	9a 81       	ldd	r25, Y+2	; 0x02
    239c:	ab 81       	ldd	r26, Y+3	; 0x03
    239e:	bc 81       	ldd	r27, Y+4	; 0x04
    23a0:	28 ee       	ldi	r18, 0xE8	; 232
    23a2:	33 e0       	ldi	r19, 0x03	; 3
    23a4:	40 e0       	ldi	r20, 0x00	; 0
    23a6:	50 e0       	ldi	r21, 0x00	; 0
    23a8:	bc 01       	movw	r22, r24
    23aa:	cd 01       	movw	r24, r26
    23ac:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__udivmodsi4>
    23b0:	da 01       	movw	r26, r20
    23b2:	c9 01       	movw	r24, r18
    23b4:	2a e0       	ldi	r18, 0x0A	; 10
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	40 e0       	ldi	r20, 0x00	; 0
    23ba:	50 e0       	ldi	r21, 0x00	; 0
    23bc:	bc 01       	movw	r22, r24
    23be:	cd 01       	movw	r24, r26
    23c0:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__udivmodsi4>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	80 5d       	subi	r24, 0xD0	; 208
    23ca:	f8 01       	movw	r30, r16
    23cc:	80 83       	st	Z, r24
	u8ArrayResult[2]= ( (u32Result / 100) % 10 ) + 48 ;
    23ce:	8d 81       	ldd	r24, Y+5	; 0x05
    23d0:	9e 81       	ldd	r25, Y+6	; 0x06
    23d2:	8c 01       	movw	r16, r24
    23d4:	0e 5f       	subi	r16, 0xFE	; 254
    23d6:	1f 4f       	sbci	r17, 0xFF	; 255
    23d8:	89 81       	ldd	r24, Y+1	; 0x01
    23da:	9a 81       	ldd	r25, Y+2	; 0x02
    23dc:	ab 81       	ldd	r26, Y+3	; 0x03
    23de:	bc 81       	ldd	r27, Y+4	; 0x04
    23e0:	24 e6       	ldi	r18, 0x64	; 100
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	40 e0       	ldi	r20, 0x00	; 0
    23e6:	50 e0       	ldi	r21, 0x00	; 0
    23e8:	bc 01       	movw	r22, r24
    23ea:	cd 01       	movw	r24, r26
    23ec:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__udivmodsi4>
    23f0:	da 01       	movw	r26, r20
    23f2:	c9 01       	movw	r24, r18
    23f4:	2a e0       	ldi	r18, 0x0A	; 10
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	40 e0       	ldi	r20, 0x00	; 0
    23fa:	50 e0       	ldi	r21, 0x00	; 0
    23fc:	bc 01       	movw	r22, r24
    23fe:	cd 01       	movw	r24, r26
    2400:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__udivmodsi4>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	80 5d       	subi	r24, 0xD0	; 208
    240a:	f8 01       	movw	r30, r16
    240c:	80 83       	st	Z, r24
	u8ArrayResult[3]= ( (u32Result / 10) % 10 ) + 48 ;
    240e:	8d 81       	ldd	r24, Y+5	; 0x05
    2410:	9e 81       	ldd	r25, Y+6	; 0x06
    2412:	8c 01       	movw	r16, r24
    2414:	0d 5f       	subi	r16, 0xFD	; 253
    2416:	1f 4f       	sbci	r17, 0xFF	; 255
    2418:	89 81       	ldd	r24, Y+1	; 0x01
    241a:	9a 81       	ldd	r25, Y+2	; 0x02
    241c:	ab 81       	ldd	r26, Y+3	; 0x03
    241e:	bc 81       	ldd	r27, Y+4	; 0x04
    2420:	2a e0       	ldi	r18, 0x0A	; 10
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	40 e0       	ldi	r20, 0x00	; 0
    2426:	50 e0       	ldi	r21, 0x00	; 0
    2428:	bc 01       	movw	r22, r24
    242a:	cd 01       	movw	r24, r26
    242c:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__udivmodsi4>
    2430:	da 01       	movw	r26, r20
    2432:	c9 01       	movw	r24, r18
    2434:	2a e0       	ldi	r18, 0x0A	; 10
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	40 e0       	ldi	r20, 0x00	; 0
    243a:	50 e0       	ldi	r21, 0x00	; 0
    243c:	bc 01       	movw	r22, r24
    243e:	cd 01       	movw	r24, r26
    2440:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__udivmodsi4>
    2444:	dc 01       	movw	r26, r24
    2446:	cb 01       	movw	r24, r22
    2448:	80 5d       	subi	r24, 0xD0	; 208
    244a:	f8 01       	movw	r30, r16
    244c:	80 83       	st	Z, r24
	u8ArrayResult[4]=   (u32Result  % 10 ) + 48 ;
    244e:	8d 81       	ldd	r24, Y+5	; 0x05
    2450:	9e 81       	ldd	r25, Y+6	; 0x06
    2452:	8c 01       	movw	r16, r24
    2454:	0c 5f       	subi	r16, 0xFC	; 252
    2456:	1f 4f       	sbci	r17, 0xFF	; 255
    2458:	89 81       	ldd	r24, Y+1	; 0x01
    245a:	9a 81       	ldd	r25, Y+2	; 0x02
    245c:	ab 81       	ldd	r26, Y+3	; 0x03
    245e:	bc 81       	ldd	r27, Y+4	; 0x04
    2460:	2a e0       	ldi	r18, 0x0A	; 10
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	40 e0       	ldi	r20, 0x00	; 0
    2466:	50 e0       	ldi	r21, 0x00	; 0
    2468:	bc 01       	movw	r22, r24
    246a:	cd 01       	movw	r24, r26
    246c:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__udivmodsi4>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	80 5d       	subi	r24, 0xD0	; 208
    2476:	f8 01       	movw	r30, r16
    2478:	80 83       	st	Z, r24

}
    247a:	26 96       	adiw	r28, 0x06	; 6
    247c:	0f b6       	in	r0, 0x3f	; 63
    247e:	f8 94       	cli
    2480:	de bf       	out	0x3e, r29	; 62
    2482:	0f be       	out	0x3f, r0	; 63
    2484:	cd bf       	out	0x3d, r28	; 61
    2486:	cf 91       	pop	r28
    2488:	df 91       	pop	r29
    248a:	1f 91       	pop	r17
    248c:	0f 91       	pop	r16
    248e:	08 95       	ret

00002490 <vid_DIO_vid_SetDioDirections>:
extern u8 u8PeopleInside ;

/************************************************************/


void vid_DIO_vid_SetDioDirections (void) {
    2490:	df 93       	push	r29
    2492:	cf 93       	push	r28
    2494:	cd b7       	in	r28, 0x3d	; 61
    2496:	de b7       	in	r29, 0x3e	; 62

/*********************** Analog Input *************************/
	DIO_SetPinDirection (PORTA_DIO,TEMP_SENSOR,INPUT) ;
    2498:	80 e0       	ldi	r24, 0x00	; 0
    249a:	60 e0       	ldi	r22, 0x00	; 0
    249c:	40 e0       	ldi	r20, 0x00	; 0
    249e:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>
	DIO_SetPinDirection (PORTA_DIO,LDR,INPUT) ;
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	61 e0       	ldi	r22, 0x01	; 1
    24a6:	40 e0       	ldi	r20, 0x00	; 0
    24a8:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>

/******************** Input External Interrupt **********************/
	DIO_SetPinDirection (PORTD_DIO,PIR1,INPUT) ;
    24ac:	83 e0       	ldi	r24, 0x03	; 3
    24ae:	62 e0       	ldi	r22, 0x02	; 2
    24b0:	40 e0       	ldi	r20, 0x00	; 0
    24b2:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>
	DIO_SetPinDirection (PORTD_DIO,PIR2,INPUT) ;
    24b6:	83 e0       	ldi	r24, 0x03	; 3
    24b8:	63 e0       	ldi	r22, 0x03	; 3
    24ba:	40 e0       	ldi	r20, 0x00	; 0
    24bc:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>




/********************** Digital Output ************************/
	DIO_SetPinDirection (PORTB_DIO,LIGHT,OUTPUT) ;
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	60 e0       	ldi	r22, 0x00	; 0
    24c4:	41 e0       	ldi	r20, 0x01	; 1
    24c6:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>




/************************ PWM Output *************************/
	DIO_SetPinDirection (PORTB_DIO,FAN,OUTPUT) ;
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	63 e0       	ldi	r22, 0x03	; 3
    24ce:	41 e0       	ldi	r20, 0x01	; 1
    24d0:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>



/************************ PORTS INITIALIZATION *************************/

	DIO_SetPinValue(PORTD_DIO , PIR1 , HIGH);
    24d4:	83 e0       	ldi	r24, 0x03	; 3
    24d6:	62 e0       	ldi	r22, 0x02	; 2
    24d8:	41 e0       	ldi	r20, 0x01	; 1
    24da:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>
	DIO_SetPinValue(PORTD_DIO , PIR2 , HIGH);
    24de:	83 e0       	ldi	r24, 0x03	; 3
    24e0:	63 e0       	ldi	r22, 0x03	; 3
    24e2:	41 e0       	ldi	r20, 0x01	; 1
    24e4:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>
	DIO_SetPinValue(PORTB_DIO,LIGHT,LOW) ;
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	60 e0       	ldi	r22, 0x00	; 0
    24ec:	40 e0       	ldi	r20, 0x00	; 0
    24ee:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>
	DIO_SetPinValue(PORTB_DIO,FAN,HIGH) ;
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	63 e0       	ldi	r22, 0x03	; 3
    24f6:	41 e0       	ldi	r20, 0x01	; 1
    24f8:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>


	/************************ LCD INITIALIZATION *************************/


	DIO_SetPortDirection(LCD_PORT,0XFF) ;           // lcd data pins
    24fc:	82 e0       	ldi	r24, 0x02	; 2
    24fe:	6f ef       	ldi	r22, 0xFF	; 255
    2500:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_SetPortDirection>
	DIO_SetPortDirection(LCD_CTRL,0XF0) ;           // lcd control pins
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	60 ef       	ldi	r22, 0xF0	; 240
    2508:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_SetPortDirection>
}
    250c:	cf 91       	pop	r28
    250e:	df 91       	pop	r29
    2510:	08 95       	ret

00002512 <UpdateFanSpeed>:


/************************************************************/

void UpdateFanSpeed (void) {
    2512:	df 93       	push	r29
    2514:	cf 93       	push	r28
    2516:	00 d0       	rcall	.+0      	; 0x2518 <UpdateFanSpeed+0x6>
    2518:	cd b7       	in	r28, 0x3d	; 61
    251a:	de b7       	in	r29, 0x3e	; 62

	u16 u16Volt = 0 ;
    251c:	1a 82       	std	Y+2, r1	; 0x02
    251e:	19 82       	std	Y+1, r1	; 0x01

	U8_ADC_U8_Read(TEMPERATURE_SENSOR)  ;
    2520:	80 e0       	ldi	r24, 0x00	; 0
    2522:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <U8_ADC_U8_Read>
	// analog = ((digital * V ref )/2^resolution)
	u16Volt =( ( ( (u32)u8_TMP_Read *  5000UL) ) / 255UL )  ;
    2526:	80 91 a1 00 	lds	r24, 0x00A1
    252a:	88 2f       	mov	r24, r24
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	a0 e0       	ldi	r26, 0x00	; 0
    2530:	b0 e0       	ldi	r27, 0x00	; 0
    2532:	28 e8       	ldi	r18, 0x88	; 136
    2534:	33 e1       	ldi	r19, 0x13	; 19
    2536:	40 e0       	ldi	r20, 0x00	; 0
    2538:	50 e0       	ldi	r21, 0x00	; 0
    253a:	bc 01       	movw	r22, r24
    253c:	cd 01       	movw	r24, r26
    253e:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <__mulsi3>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	2f ef       	ldi	r18, 0xFF	; 255
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	40 e0       	ldi	r20, 0x00	; 0
    254c:	50 e0       	ldi	r21, 0x00	; 0
    254e:	bc 01       	movw	r22, r24
    2550:	cd 01       	movw	r24, r26
    2552:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__udivmodsi4>
    2556:	da 01       	movw	r26, r20
    2558:	c9 01       	movw	r24, r18
    255a:	9a 83       	std	Y+2, r25	; 0x02
    255c:	89 83       	std	Y+1, r24	; 0x01
	u16Temp = u16Volt/10 ;
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	9a 81       	ldd	r25, Y+2	; 0x02
    2562:	2a e0       	ldi	r18, 0x0A	; 10
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	b9 01       	movw	r22, r18
    2568:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <__udivmodhi4>
    256c:	cb 01       	movw	r24, r22
    256e:	90 93 a4 00 	sts	0x00A4, r25
    2572:	80 93 a3 00 	sts	0x00A3, r24



if      (u16Temp<20)
    2576:	80 91 a3 00 	lds	r24, 0x00A3
    257a:	90 91 a4 00 	lds	r25, 0x00A4
    257e:	84 31       	cpi	r24, 0x14	; 20
    2580:	91 05       	cpc	r25, r1
    2582:	50 f4       	brcc	.+20     	; 0x2598 <UpdateFanSpeed+0x86>
{

	OCR0_REG = 0 ;
    2584:	ec e5       	ldi	r30, 0x5C	; 92
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	10 82       	st	Z, r1
	Str_FanStatus  = "_OFF" ;
    258a:	84 e6       	ldi	r24, 0x64	; 100
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	90 93 9f 00 	sts	0x009F, r25
    2592:	80 93 9e 00 	sts	0x009E, r24
    2596:	28 c0       	rjmp	.+80     	; 0x25e8 <UpdateFanSpeed+0xd6>
}

else if ((u16Temp>=20)&&(u16Temp<=27))
    2598:	80 91 a3 00 	lds	r24, 0x00A3
    259c:	90 91 a4 00 	lds	r25, 0x00A4
    25a0:	84 31       	cpi	r24, 0x14	; 20
    25a2:	91 05       	cpc	r25, r1
    25a4:	90 f0       	brcs	.+36     	; 0x25ca <UpdateFanSpeed+0xb8>
    25a6:	80 91 a3 00 	lds	r24, 0x00A3
    25aa:	90 91 a4 00 	lds	r25, 0x00A4
    25ae:	8c 31       	cpi	r24, 0x1C	; 28
    25b0:	91 05       	cpc	r25, r1
    25b2:	58 f4       	brcc	.+22     	; 0x25ca <UpdateFanSpeed+0xb8>
{
	OCR0_REG = 128 ;
    25b4:	ec e5       	ldi	r30, 0x5C	; 92
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	80 e8       	ldi	r24, 0x80	; 128
    25ba:	80 83       	st	Z, r24
	Str_FanStatus  = "_ON_" ;
    25bc:	89 e6       	ldi	r24, 0x69	; 105
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	90 93 9f 00 	sts	0x009F, r25
    25c4:	80 93 9e 00 	sts	0x009E, r24
    25c8:	0f c0       	rjmp	.+30     	; 0x25e8 <UpdateFanSpeed+0xd6>

}
else
{
	DIO_SetPinValue(PORTB_DIO,3,LOW) ;
    25ca:	81 e0       	ldi	r24, 0x01	; 1
    25cc:	63 e0       	ldi	r22, 0x03	; 3
    25ce:	40 e0       	ldi	r20, 0x00	; 0
    25d0:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>
	OCR0_REG=255 ;
    25d4:	ec e5       	ldi	r30, 0x5C	; 92
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	8f ef       	ldi	r24, 0xFF	; 255
    25da:	80 83       	st	Z, r24
	Str_FanStatus  = "_ON_" ;
    25dc:	89 e6       	ldi	r24, 0x69	; 105
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	90 93 9f 00 	sts	0x009F, r25
    25e4:	80 93 9e 00 	sts	0x009E, r24
}

}
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	cf 91       	pop	r28
    25ee:	df 91       	pop	r29
    25f0:	08 95       	ret

000025f2 <UpdateLightIlluminance>:

/************************************************************/

void UpdateLightIlluminance (void) {
    25f2:	df 93       	push	r29
    25f4:	cf 93       	push	r28
    25f6:	cd b7       	in	r28, 0x3d	; 61
    25f8:	de b7       	in	r29, 0x3e	; 62

	U8_ADC_U8_Read(LDR_SENSOR)  ;
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <U8_ADC_U8_Read>

	u8Lumen  = u8_LDR_Read ;
    2600:	80 91 a2 00 	lds	r24, 0x00A2
    2604:	80 93 a5 00 	sts	0x00A5, r24


	if (u8_LDR_Read <= 100 )
    2608:	80 91 a2 00 	lds	r24, 0x00A2
    260c:	85 36       	cpi	r24, 0x65	; 101
    260e:	60 f4       	brcc	.+24     	; 0x2628 <UpdateLightIlluminance+0x36>
	{
		DIO_SetPinValue(PORTB_DIO , LIGHT , ON);
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	60 e0       	ldi	r22, 0x00	; 0
    2614:	41 e0       	ldi	r20, 0x01	; 1
    2616:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>
		Str_LampStatus = "_ON" ;
    261a:	8e e6       	ldi	r24, 0x6E	; 110
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	90 93 9d 00 	sts	0x009D, r25
    2622:	80 93 9c 00 	sts	0x009C, r24
    2626:	0b c0       	rjmp	.+22     	; 0x263e <UpdateLightIlluminance+0x4c>
	}
	else
	{
		DIO_SetPinValue(PORTB_DIO , LIGHT , OFF);
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	60 e0       	ldi	r22, 0x00	; 0
    262c:	40 e0       	ldi	r20, 0x00	; 0
    262e:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>
		Str_LampStatus = "_OFF"  ;
    2632:	84 e6       	ldi	r24, 0x64	; 100
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	90 93 9d 00 	sts	0x009D, r25
    263a:	80 93 9c 00 	sts	0x009C, r24
	}


}
    263e:	cf 91       	pop	r28
    2640:	df 91       	pop	r29
    2642:	08 95       	ret

00002644 <DIO_SystemSleep>:


/************************************************************/

void DIO_SystemSleep (void)
{
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62


	LCD_vidClear();
    264c:	0e 94 cd 10 	call	0x219a	; 0x219a <LCD_vidClear>
	OCR0_REG = 0;
    2650:	ec e5       	ldi	r30, 0x5C	; 92
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	10 82       	st	Z, r1
	OCR2_REG = 0 ;
    2656:	e3 e4       	ldi	r30, 0x43	; 67
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	10 82       	st	Z, r1
	DIO_SetPinValue(PORTB_DIO,LIGHT,LOW) ;
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	60 e0       	ldi	r22, 0x00	; 0
    2660:	40 e0       	ldi	r20, 0x00	; 0
    2662:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>
	DIO_SetPinValue(PORTD_DIO , PIR1 , HIGH);
    2666:	83 e0       	ldi	r24, 0x03	; 3
    2668:	62 e0       	ldi	r22, 0x02	; 2
    266a:	41 e0       	ldi	r20, 0x01	; 1
    266c:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>
	DIO_SetPinValue(PORTD_DIO , PIR2 , HIGH);
    2670:	83 e0       	ldi	r24, 0x03	; 3
    2672:	63 e0       	ldi	r22, 0x03	; 3
    2674:	41 e0       	ldi	r20, 0x01	; 1
    2676:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>
	DIO_SetPinValue(PORTB_DIO,FAN,HIGH) ; //
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	63 e0       	ldi	r22, 0x03	; 3
    267e:	41 e0       	ldi	r20, 0x01	; 1
    2680:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>

}
    2684:	cf 91       	pop	r28
    2686:	df 91       	pop	r29
    2688:	08 95       	ret

0000268a <vid_WelcomeMsg>:

/************************************************************/

void vid_WelcomeMsg(void){
    268a:	df 93       	push	r29
    268c:	cf 93       	push	r28
    268e:	cd b7       	in	r28, 0x3d	; 61
    2690:	de b7       	in	r29, 0x3e	; 62
    2692:	6e 97       	sbiw	r28, 0x1e	; 30
    2694:	0f b6       	in	r0, 0x3f	; 63
    2696:	f8 94       	cli
    2698:	de bf       	out	0x3e, r29	; 62
    269a:	0f be       	out	0x3f, r0	; 63
    269c:	cd bf       	out	0x3d, r28	; 61


	u8 String_WLCM [11] = ("Welcome...") ;
    269e:	ce 01       	movw	r24, r28
    26a0:	0f 96       	adiw	r24, 0x0f	; 15
    26a2:	9b 8f       	std	Y+27, r25	; 0x1b
    26a4:	8a 8f       	std	Y+26, r24	; 0x1a
    26a6:	e2 e7       	ldi	r30, 0x72	; 114
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	fd 8f       	std	Y+29, r31	; 0x1d
    26ac:	ec 8f       	std	Y+28, r30	; 0x1c
    26ae:	fb e0       	ldi	r31, 0x0B	; 11
    26b0:	fe 8f       	std	Y+30, r31	; 0x1e
    26b2:	ec 8d       	ldd	r30, Y+28	; 0x1c
    26b4:	fd 8d       	ldd	r31, Y+29	; 0x1d
    26b6:	00 80       	ld	r0, Z
    26b8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26ba:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26bc:	01 96       	adiw	r24, 0x01	; 1
    26be:	9d 8f       	std	Y+29, r25	; 0x1d
    26c0:	8c 8f       	std	Y+28, r24	; 0x1c
    26c2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    26c4:	fb 8d       	ldd	r31, Y+27	; 0x1b
    26c6:	00 82       	st	Z, r0
    26c8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26ca:	9b 8d       	ldd	r25, Y+27	; 0x1b
    26cc:	01 96       	adiw	r24, 0x01	; 1
    26ce:	9b 8f       	std	Y+27, r25	; 0x1b
    26d0:	8a 8f       	std	Y+26, r24	; 0x1a
    26d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26d4:	91 50       	subi	r25, 0x01	; 1
    26d6:	9e 8f       	std	Y+30, r25	; 0x1e
    26d8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    26da:	ee 23       	and	r30, r30
    26dc:	51 f7       	brne	.-44     	; 0x26b2 <vid_WelcomeMsg+0x28>

	Gotoxy(1,1) ;
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	61 e0       	ldi	r22, 0x01	; 1
    26e2:	0e 94 da 10 	call	0x21b4	; 0x21b4 <Gotoxy>
	LCD_vidWriteString(String_WLCM,10) ;
    26e6:	ce 01       	movw	r24, r28
    26e8:	0f 96       	adiw	r24, 0x0f	; 15
    26ea:	6a e0       	ldi	r22, 0x0A	; 10
    26ec:	0e 94 24 10 	call	0x2048	; 0x2048 <LCD_vidWriteString>
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	aa e7       	ldi	r26, 0x7A	; 122
    26f6:	b4 e4       	ldi	r27, 0x44	; 68
    26f8:	8b 87       	std	Y+11, r24	; 0x0b
    26fa:	9c 87       	std	Y+12, r25	; 0x0c
    26fc:	ad 87       	std	Y+13, r26	; 0x0d
    26fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2700:	6b 85       	ldd	r22, Y+11	; 0x0b
    2702:	7c 85       	ldd	r23, Y+12	; 0x0c
    2704:	8d 85       	ldd	r24, Y+13	; 0x0d
    2706:	9e 85       	ldd	r25, Y+14	; 0x0e
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	30 e8       	ldi	r19, 0x80	; 128
    270c:	4b e3       	ldi	r20, 0x3B	; 59
    270e:	55 e4       	ldi	r21, 0x45	; 69
    2710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	8f 83       	std	Y+7, r24	; 0x07
    271a:	98 87       	std	Y+8, r25	; 0x08
    271c:	a9 87       	std	Y+9, r26	; 0x09
    271e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2720:	6f 81       	ldd	r22, Y+7	; 0x07
    2722:	78 85       	ldd	r23, Y+8	; 0x08
    2724:	89 85       	ldd	r24, Y+9	; 0x09
    2726:	9a 85       	ldd	r25, Y+10	; 0x0a
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	40 e8       	ldi	r20, 0x80	; 128
    272e:	5f e3       	ldi	r21, 0x3F	; 63
    2730:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2734:	88 23       	and	r24, r24
    2736:	2c f4       	brge	.+10     	; 0x2742 <vid_WelcomeMsg+0xb8>
		__ticks = 1;
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	9e 83       	std	Y+6, r25	; 0x06
    273e:	8d 83       	std	Y+5, r24	; 0x05
    2740:	3f c0       	rjmp	.+126    	; 0x27c0 <vid_WelcomeMsg+0x136>
	else if (__tmp > 65535)
    2742:	6f 81       	ldd	r22, Y+7	; 0x07
    2744:	78 85       	ldd	r23, Y+8	; 0x08
    2746:	89 85       	ldd	r24, Y+9	; 0x09
    2748:	9a 85       	ldd	r25, Y+10	; 0x0a
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	3f ef       	ldi	r19, 0xFF	; 255
    274e:	4f e7       	ldi	r20, 0x7F	; 127
    2750:	57 e4       	ldi	r21, 0x47	; 71
    2752:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2756:	18 16       	cp	r1, r24
    2758:	4c f5       	brge	.+82     	; 0x27ac <vid_WelcomeMsg+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275a:	6b 85       	ldd	r22, Y+11	; 0x0b
    275c:	7c 85       	ldd	r23, Y+12	; 0x0c
    275e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2760:	9e 85       	ldd	r25, Y+14	; 0x0e
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	40 e2       	ldi	r20, 0x20	; 32
    2768:	51 e4       	ldi	r21, 0x41	; 65
    276a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	bc 01       	movw	r22, r24
    2774:	cd 01       	movw	r24, r26
    2776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	9e 83       	std	Y+6, r25	; 0x06
    2780:	8d 83       	std	Y+5, r24	; 0x05
    2782:	0f c0       	rjmp	.+30     	; 0x27a2 <vid_WelcomeMsg+0x118>
    2784:	8c e2       	ldi	r24, 0x2C	; 44
    2786:	91 e0       	ldi	r25, 0x01	; 1
    2788:	9c 83       	std	Y+4, r25	; 0x04
    278a:	8b 83       	std	Y+3, r24	; 0x03
    278c:	8b 81       	ldd	r24, Y+3	; 0x03
    278e:	9c 81       	ldd	r25, Y+4	; 0x04
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	f1 f7       	brne	.-4      	; 0x2790 <vid_WelcomeMsg+0x106>
    2794:	9c 83       	std	Y+4, r25	; 0x04
    2796:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2798:	8d 81       	ldd	r24, Y+5	; 0x05
    279a:	9e 81       	ldd	r25, Y+6	; 0x06
    279c:	01 97       	sbiw	r24, 0x01	; 1
    279e:	9e 83       	std	Y+6, r25	; 0x06
    27a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a2:	8d 81       	ldd	r24, Y+5	; 0x05
    27a4:	9e 81       	ldd	r25, Y+6	; 0x06
    27a6:	00 97       	sbiw	r24, 0x00	; 0
    27a8:	69 f7       	brne	.-38     	; 0x2784 <vid_WelcomeMsg+0xfa>
    27aa:	14 c0       	rjmp	.+40     	; 0x27d4 <vid_WelcomeMsg+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ac:	6f 81       	ldd	r22, Y+7	; 0x07
    27ae:	78 85       	ldd	r23, Y+8	; 0x08
    27b0:	89 85       	ldd	r24, Y+9	; 0x09
    27b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	9e 83       	std	Y+6, r25	; 0x06
    27be:	8d 83       	std	Y+5, r24	; 0x05
    27c0:	8d 81       	ldd	r24, Y+5	; 0x05
    27c2:	9e 81       	ldd	r25, Y+6	; 0x06
    27c4:	9a 83       	std	Y+2, r25	; 0x02
    27c6:	89 83       	std	Y+1, r24	; 0x01
    27c8:	89 81       	ldd	r24, Y+1	; 0x01
    27ca:	9a 81       	ldd	r25, Y+2	; 0x02
    27cc:	01 97       	sbiw	r24, 0x01	; 1
    27ce:	f1 f7       	brne	.-4      	; 0x27cc <vid_WelcomeMsg+0x142>
    27d0:	9a 83       	std	Y+2, r25	; 0x02
    27d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000) ;

	LCD_vidClear();
    27d4:	0e 94 cd 10 	call	0x219a	; 0x219a <LCD_vidClear>


}
    27d8:	6e 96       	adiw	r28, 0x1e	; 30
    27da:	0f b6       	in	r0, 0x3f	; 63
    27dc:	f8 94       	cli
    27de:	de bf       	out	0x3e, r29	; 62
    27e0:	0f be       	out	0x3f, r0	; 63
    27e2:	cd bf       	out	0x3d, r28	; 61
    27e4:	cf 91       	pop	r28
    27e6:	df 91       	pop	r29
    27e8:	08 95       	ret

000027ea <vid_LCD_vid_DisplayData>:

/*************************************************************/


void vid_LCD_vid_DisplayData(void) {
    27ea:	df 93       	push	r29
    27ec:	cf 93       	push	r28
    27ee:	cd b7       	in	r28, 0x3d	; 61
    27f0:	de b7       	in	r29, 0x3e	; 62
    27f2:	6a 97       	sbiw	r28, 0x1a	; 26
    27f4:	0f b6       	in	r0, 0x3f	; 63
    27f6:	f8 94       	cli
    27f8:	de bf       	out	0x3e, r29	; 62
    27fa:	0f be       	out	0x3f, r0	; 63
    27fc:	cd bf       	out	0x3d, r28	; 61


	u8 String_TEMP [4] = "TMP" ;
    27fe:	80 91 84 00 	lds	r24, 0x0084
    2802:	90 91 85 00 	lds	r25, 0x0085
    2806:	a0 91 86 00 	lds	r26, 0x0086
    280a:	b0 91 87 00 	lds	r27, 0x0087
    280e:	89 83       	std	Y+1, r24	; 0x01
    2810:	9a 83       	std	Y+2, r25	; 0x02
    2812:	ab 83       	std	Y+3, r26	; 0x03
    2814:	bc 83       	std	Y+4, r27	; 0x04
	u8 String_FAN [4] = "FAN" ;
    2816:	80 91 88 00 	lds	r24, 0x0088
    281a:	90 91 89 00 	lds	r25, 0x0089
    281e:	a0 91 8a 00 	lds	r26, 0x008A
    2822:	b0 91 8b 00 	lds	r27, 0x008B
    2826:	8d 83       	std	Y+5, r24	; 0x05
    2828:	9e 83       	std	Y+6, r25	; 0x06
    282a:	af 83       	std	Y+7, r26	; 0x07
    282c:	b8 87       	std	Y+8, r27	; 0x08
	u8 String_LAMP [5] = "LAMP" ;
    282e:	ce 01       	movw	r24, r28
    2830:	09 96       	adiw	r24, 0x09	; 9
    2832:	9a 8b       	std	Y+18, r25	; 0x12
    2834:	89 8b       	std	Y+17, r24	; 0x11
    2836:	ec e8       	ldi	r30, 0x8C	; 140
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	fc 8b       	std	Y+20, r31	; 0x14
    283c:	eb 8b       	std	Y+19, r30	; 0x13
    283e:	f5 e0       	ldi	r31, 0x05	; 5
    2840:	fd 8b       	std	Y+21, r31	; 0x15
    2842:	eb 89       	ldd	r30, Y+19	; 0x13
    2844:	fc 89       	ldd	r31, Y+20	; 0x14
    2846:	00 80       	ld	r0, Z
    2848:	8b 89       	ldd	r24, Y+19	; 0x13
    284a:	9c 89       	ldd	r25, Y+20	; 0x14
    284c:	01 96       	adiw	r24, 0x01	; 1
    284e:	9c 8b       	std	Y+20, r25	; 0x14
    2850:	8b 8b       	std	Y+19, r24	; 0x13
    2852:	e9 89       	ldd	r30, Y+17	; 0x11
    2854:	fa 89       	ldd	r31, Y+18	; 0x12
    2856:	00 82       	st	Z, r0
    2858:	89 89       	ldd	r24, Y+17	; 0x11
    285a:	9a 89       	ldd	r25, Y+18	; 0x12
    285c:	01 96       	adiw	r24, 0x01	; 1
    285e:	9a 8b       	std	Y+18, r25	; 0x12
    2860:	89 8b       	std	Y+17, r24	; 0x11
    2862:	9d 89       	ldd	r25, Y+21	; 0x15
    2864:	91 50       	subi	r25, 0x01	; 1
    2866:	9d 8b       	std	Y+21, r25	; 0x15
    2868:	ed 89       	ldd	r30, Y+21	; 0x15
    286a:	ee 23       	and	r30, r30
    286c:	51 f7       	brne	.-44     	; 0x2842 <vid_LCD_vid_DisplayData+0x58>
	u8 String_NBOfPeople [3] = "NB" ;
    286e:	ce 01       	movw	r24, r28
    2870:	0e 96       	adiw	r24, 0x0e	; 14
    2872:	9f 8b       	std	Y+23, r25	; 0x17
    2874:	8e 8b       	std	Y+22, r24	; 0x16
    2876:	e1 e9       	ldi	r30, 0x91	; 145
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	f9 8f       	std	Y+25, r31	; 0x19
    287c:	e8 8f       	std	Y+24, r30	; 0x18
    287e:	f3 e0       	ldi	r31, 0x03	; 3
    2880:	fa 8f       	std	Y+26, r31	; 0x1a
    2882:	e8 8d       	ldd	r30, Y+24	; 0x18
    2884:	f9 8d       	ldd	r31, Y+25	; 0x19
    2886:	00 80       	ld	r0, Z
    2888:	88 8d       	ldd	r24, Y+24	; 0x18
    288a:	99 8d       	ldd	r25, Y+25	; 0x19
    288c:	01 96       	adiw	r24, 0x01	; 1
    288e:	99 8f       	std	Y+25, r25	; 0x19
    2890:	88 8f       	std	Y+24, r24	; 0x18
    2892:	ee 89       	ldd	r30, Y+22	; 0x16
    2894:	ff 89       	ldd	r31, Y+23	; 0x17
    2896:	00 82       	st	Z, r0
    2898:	8e 89       	ldd	r24, Y+22	; 0x16
    289a:	9f 89       	ldd	r25, Y+23	; 0x17
    289c:	01 96       	adiw	r24, 0x01	; 1
    289e:	9f 8b       	std	Y+23, r25	; 0x17
    28a0:	8e 8b       	std	Y+22, r24	; 0x16
    28a2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    28a4:	91 50       	subi	r25, 0x01	; 1
    28a6:	9a 8f       	std	Y+26, r25	; 0x1a
    28a8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    28aa:	ee 23       	and	r30, r30
    28ac:	51 f7       	brne	.-44     	; 0x2882 <vid_LCD_vid_DisplayData+0x98>


			//LCD_vidClear();


			  Gotoxy(1,1) ;
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	61 e0       	ldi	r22, 0x01	; 1
    28b2:	0e 94 da 10 	call	0x21b4	; 0x21b4 <Gotoxy>
			  LCD_vidWriteString(String_TEMP,3) ;
    28b6:	ce 01       	movw	r24, r28
    28b8:	01 96       	adiw	r24, 0x01	; 1
    28ba:	63 e0       	ldi	r22, 0x03	; 3
    28bc:	0e 94 24 10 	call	0x2048	; 0x2048 <LCD_vidWriteString>
			  LCDWriteInteger(u16Temp,2) ;
    28c0:	80 91 a3 00 	lds	r24, 0x00A3
    28c4:	90 91 a4 00 	lds	r25, 0x00A4
    28c8:	62 e0       	ldi	r22, 0x02	; 2
    28ca:	70 e0       	ldi	r23, 0x00	; 0
    28cc:	0e 94 08 11 	call	0x2210	; 0x2210 <LCDWriteInteger>

			  LCD_vidWriteString( " ## ",4 ) ;       // SPACE
    28d0:	8d e7       	ldi	r24, 0x7D	; 125
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	64 e0       	ldi	r22, 0x04	; 4
    28d6:	0e 94 24 10 	call	0x2048	; 0x2048 <LCD_vidWriteString>
			  LCD_vidWriteString(String_NBOfPeople,2) ;
    28da:	ce 01       	movw	r24, r28
    28dc:	0e 96       	adiw	r24, 0x0e	; 14
    28de:	62 e0       	ldi	r22, 0x02	; 2
    28e0:	0e 94 24 10 	call	0x2048	; 0x2048 <LCD_vidWriteString>
			  LCDWriteInteger((u8PeopleInside/2),2) ;
    28e4:	80 91 a6 00 	lds	r24, 0x00A6
    28e8:	86 95       	lsr	r24
    28ea:	88 2f       	mov	r24, r24
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	62 e0       	ldi	r22, 0x02	; 2
    28f0:	70 e0       	ldi	r23, 0x00	; 0
    28f2:	0e 94 08 11 	call	0x2210	; 0x2210 <LCDWriteInteger>

			  Gotoxy(1,2) ;
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	62 e0       	ldi	r22, 0x02	; 2
    28fa:	0e 94 da 10 	call	0x21b4	; 0x21b4 <Gotoxy>
			  LCD_vidWriteString(String_FAN,4) ;
    28fe:	ce 01       	movw	r24, r28
    2900:	05 96       	adiw	r24, 0x05	; 5
    2902:	64 e0       	ldi	r22, 0x04	; 4
    2904:	0e 94 24 10 	call	0x2048	; 0x2048 <LCD_vidWriteString>
			  LCD_vidWriteString( Str_FanStatus,3 ) ;
    2908:	80 91 9e 00 	lds	r24, 0x009E
    290c:	90 91 9f 00 	lds	r25, 0x009F
    2910:	63 e0       	ldi	r22, 0x03	; 3
    2912:	0e 94 24 10 	call	0x2048	; 0x2048 <LCD_vidWriteString>

			  LCD_vidWriteString( "#",3 ) ;       // SPACE
    2916:	82 e8       	ldi	r24, 0x82	; 130
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	63 e0       	ldi	r22, 0x03	; 3
    291c:	0e 94 24 10 	call	0x2048	; 0x2048 <LCD_vidWriteString>

			  LCD_vidWriteString(String_LAMP,4) ;
    2920:	ce 01       	movw	r24, r28
    2922:	09 96       	adiw	r24, 0x09	; 9
    2924:	64 e0       	ldi	r22, 0x04	; 4
    2926:	0e 94 24 10 	call	0x2048	; 0x2048 <LCD_vidWriteString>
			  LCD_vidWriteString(Str_LampStatus,4) ;
    292a:	80 91 9c 00 	lds	r24, 0x009C
    292e:	90 91 9d 00 	lds	r25, 0x009D
    2932:	64 e0       	ldi	r22, 0x04	; 4
    2934:	0e 94 24 10 	call	0x2048	; 0x2048 <LCD_vidWriteString>





	}
    2938:	6a 96       	adiw	r28, 0x1a	; 26
    293a:	0f b6       	in	r0, 0x3f	; 63
    293c:	f8 94       	cli
    293e:	de bf       	out	0x3e, r29	; 62
    2940:	0f be       	out	0x3f, r0	; 63
    2942:	cd bf       	out	0x3d, r28	; 61
    2944:	cf 91       	pop	r28
    2946:	df 91       	pop	r29
    2948:	08 95       	ret

0000294a <vid_Stepper_Init>:




void vid_Stepper_Init(void)
{
    294a:	df 93       	push	r29
    294c:	cf 93       	push	r28
    294e:	cd b7       	in	r28, 0x3d	; 61
    2950:	de b7       	in	r29, 0x3e	; 62

	DIO_SetPinDirection(STP_PORT,STP_COIL1,OUTPUT) ;
    2952:	83 e0       	ldi	r24, 0x03	; 3
    2954:	64 e0       	ldi	r22, 0x04	; 4
    2956:	41 e0       	ldi	r20, 0x01	; 1
    2958:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>
	DIO_SetPinDirection(STP_PORT,STP_COIL2,OUTPUT) ;
    295c:	83 e0       	ldi	r24, 0x03	; 3
    295e:	65 e0       	ldi	r22, 0x05	; 5
    2960:	41 e0       	ldi	r20, 0x01	; 1
    2962:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>
	DIO_SetPinDirection(STP_PORT,STP_COIL3,OUTPUT) ;
    2966:	83 e0       	ldi	r24, 0x03	; 3
    2968:	66 e0       	ldi	r22, 0x06	; 6
    296a:	41 e0       	ldi	r20, 0x01	; 1
    296c:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>
	DIO_SetPinDirection(STP_PORT,STP_COIL4,OUTPUT) ;
    2970:	83 e0       	ldi	r24, 0x03	; 3
    2972:	67 e0       	ldi	r22, 0x07	; 7
    2974:	41 e0       	ldi	r20, 0x01	; 1
    2976:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_SetPinDirection>

	DIO_SetPinValue(STP_PORT,STP_COIL1,HIGH) ;
    297a:	83 e0       	ldi	r24, 0x03	; 3
    297c:	64 e0       	ldi	r22, 0x04	; 4
    297e:	41 e0       	ldi	r20, 0x01	; 1
    2980:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>
	DIO_SetPinValue(STP_PORT,STP_COIL2,LOW) ;
    2984:	83 e0       	ldi	r24, 0x03	; 3
    2986:	65 e0       	ldi	r22, 0x05	; 5
    2988:	40 e0       	ldi	r20, 0x00	; 0
    298a:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>
	DIO_SetPinValue(STP_PORT,STP_COIL3,LOW) ;
    298e:	83 e0       	ldi	r24, 0x03	; 3
    2990:	66 e0       	ldi	r22, 0x06	; 6
    2992:	40 e0       	ldi	r20, 0x00	; 0
    2994:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>
	DIO_SetPinValue(STP_PORT,STP_COIL4,LOW) ;
    2998:	83 e0       	ldi	r24, 0x03	; 3
    299a:	67 e0       	ldi	r22, 0x07	; 7
    299c:	40 e0       	ldi	r20, 0x00	; 0
    299e:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>

}
    29a2:	cf 91       	pop	r28
    29a4:	df 91       	pop	r29
    29a6:	08 95       	ret

000029a8 <vid_Stepper>:

/**--------------------------------------------------------**/


void vid_Stepper(void) {
    29a8:	df 93       	push	r29
    29aa:	cf 93       	push	r28
    29ac:	cd b7       	in	r28, 0x3d	; 61
    29ae:	de b7       	in	r29, 0x3e	; 62
    29b0:	aa 97       	sbiw	r28, 0x2a	; 42
    29b2:	0f b6       	in	r0, 0x3f	; 63
    29b4:	f8 94       	cli
    29b6:	de bf       	out	0x3e, r29	; 62
    29b8:	0f be       	out	0x3f, r0	; 63
    29ba:	cd bf       	out	0x3d, r28	; 61





			DIO_SetPinValue(STP_PORT,STP_COIL1,LOW) ;
    29bc:	83 e0       	ldi	r24, 0x03	; 3
    29be:	64 e0       	ldi	r22, 0x04	; 4
    29c0:	40 e0       	ldi	r20, 0x00	; 0
    29c2:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>
			DIO_SetPinValue(STP_PORT,STP_COIL2,HIGH) ;
    29c6:	83 e0       	ldi	r24, 0x03	; 3
    29c8:	65 e0       	ldi	r22, 0x05	; 5
    29ca:	41 e0       	ldi	r20, 0x01	; 1
    29cc:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>
    29d0:	80 e0       	ldi	r24, 0x00	; 0
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	a0 e2       	ldi	r26, 0x20	; 32
    29d6:	b1 e4       	ldi	r27, 0x41	; 65
    29d8:	8f a3       	std	Y+39, r24	; 0x27
    29da:	98 a7       	std	Y+40, r25	; 0x28
    29dc:	a9 a7       	std	Y+41, r26	; 0x29
    29de:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29e0:	6f a1       	ldd	r22, Y+39	; 0x27
    29e2:	78 a5       	ldd	r23, Y+40	; 0x28
    29e4:	89 a5       	ldd	r24, Y+41	; 0x29
    29e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	30 e8       	ldi	r19, 0x80	; 128
    29ec:	4b e3       	ldi	r20, 0x3B	; 59
    29ee:	55 e4       	ldi	r21, 0x45	; 69
    29f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	8b a3       	std	Y+35, r24	; 0x23
    29fa:	9c a3       	std	Y+36, r25	; 0x24
    29fc:	ad a3       	std	Y+37, r26	; 0x25
    29fe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a00:	6b a1       	ldd	r22, Y+35	; 0x23
    2a02:	7c a1       	ldd	r23, Y+36	; 0x24
    2a04:	8d a1       	ldd	r24, Y+37	; 0x25
    2a06:	9e a1       	ldd	r25, Y+38	; 0x26
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	40 e8       	ldi	r20, 0x80	; 128
    2a0e:	5f e3       	ldi	r21, 0x3F	; 63
    2a10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a14:	88 23       	and	r24, r24
    2a16:	2c f4       	brge	.+10     	; 0x2a22 <vid_Stepper+0x7a>
		__ticks = 1;
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	9a a3       	std	Y+34, r25	; 0x22
    2a1e:	89 a3       	std	Y+33, r24	; 0x21
    2a20:	3f c0       	rjmp	.+126    	; 0x2aa0 <vid_Stepper+0xf8>
	else if (__tmp > 65535)
    2a22:	6b a1       	ldd	r22, Y+35	; 0x23
    2a24:	7c a1       	ldd	r23, Y+36	; 0x24
    2a26:	8d a1       	ldd	r24, Y+37	; 0x25
    2a28:	9e a1       	ldd	r25, Y+38	; 0x26
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	3f ef       	ldi	r19, 0xFF	; 255
    2a2e:	4f e7       	ldi	r20, 0x7F	; 127
    2a30:	57 e4       	ldi	r21, 0x47	; 71
    2a32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a36:	18 16       	cp	r1, r24
    2a38:	4c f5       	brge	.+82     	; 0x2a8c <vid_Stepper+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a3a:	6f a1       	ldd	r22, Y+39	; 0x27
    2a3c:	78 a5       	ldd	r23, Y+40	; 0x28
    2a3e:	89 a5       	ldd	r24, Y+41	; 0x29
    2a40:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a42:	20 e0       	ldi	r18, 0x00	; 0
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	40 e2       	ldi	r20, 0x20	; 32
    2a48:	51 e4       	ldi	r21, 0x41	; 65
    2a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a4e:	dc 01       	movw	r26, r24
    2a50:	cb 01       	movw	r24, r22
    2a52:	bc 01       	movw	r22, r24
    2a54:	cd 01       	movw	r24, r26
    2a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	9a a3       	std	Y+34, r25	; 0x22
    2a60:	89 a3       	std	Y+33, r24	; 0x21
    2a62:	0f c0       	rjmp	.+30     	; 0x2a82 <vid_Stepper+0xda>
    2a64:	8c e2       	ldi	r24, 0x2C	; 44
    2a66:	91 e0       	ldi	r25, 0x01	; 1
    2a68:	98 a3       	std	Y+32, r25	; 0x20
    2a6a:	8f 8f       	std	Y+31, r24	; 0x1f
    2a6c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a6e:	98 a1       	ldd	r25, Y+32	; 0x20
    2a70:	01 97       	sbiw	r24, 0x01	; 1
    2a72:	f1 f7       	brne	.-4      	; 0x2a70 <vid_Stepper+0xc8>
    2a74:	98 a3       	std	Y+32, r25	; 0x20
    2a76:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a78:	89 a1       	ldd	r24, Y+33	; 0x21
    2a7a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a7c:	01 97       	sbiw	r24, 0x01	; 1
    2a7e:	9a a3       	std	Y+34, r25	; 0x22
    2a80:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a82:	89 a1       	ldd	r24, Y+33	; 0x21
    2a84:	9a a1       	ldd	r25, Y+34	; 0x22
    2a86:	00 97       	sbiw	r24, 0x00	; 0
    2a88:	69 f7       	brne	.-38     	; 0x2a64 <vid_Stepper+0xbc>
    2a8a:	14 c0       	rjmp	.+40     	; 0x2ab4 <vid_Stepper+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a8c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a8e:	7c a1       	ldd	r23, Y+36	; 0x24
    2a90:	8d a1       	ldd	r24, Y+37	; 0x25
    2a92:	9e a1       	ldd	r25, Y+38	; 0x26
    2a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	9a a3       	std	Y+34, r25	; 0x22
    2a9e:	89 a3       	std	Y+33, r24	; 0x21
    2aa0:	89 a1       	ldd	r24, Y+33	; 0x21
    2aa2:	9a a1       	ldd	r25, Y+34	; 0x22
    2aa4:	9e 8f       	std	Y+30, r25	; 0x1e
    2aa6:	8d 8f       	std	Y+29, r24	; 0x1d
    2aa8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2aaa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2aac:	01 97       	sbiw	r24, 0x01	; 1
    2aae:	f1 f7       	brne	.-4      	; 0x2aac <vid_Stepper+0x104>
    2ab0:	9e 8f       	std	Y+30, r25	; 0x1e
    2ab2:	8d 8f       	std	Y+29, r24	; 0x1d



		_delay_ms(10);

			DIO_SetPinValue(STP_PORT,STP_COIL2,LOW) ;
    2ab4:	83 e0       	ldi	r24, 0x03	; 3
    2ab6:	65 e0       	ldi	r22, 0x05	; 5
    2ab8:	40 e0       	ldi	r20, 0x00	; 0
    2aba:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>
			DIO_SetPinValue(STP_PORT,STP_COIL3,HIGH) ;
    2abe:	83 e0       	ldi	r24, 0x03	; 3
    2ac0:	66 e0       	ldi	r22, 0x06	; 6
    2ac2:	41 e0       	ldi	r20, 0x01	; 1
    2ac4:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	a0 e2       	ldi	r26, 0x20	; 32
    2ace:	b1 e4       	ldi	r27, 0x41	; 65
    2ad0:	89 8f       	std	Y+25, r24	; 0x19
    2ad2:	9a 8f       	std	Y+26, r25	; 0x1a
    2ad4:	ab 8f       	std	Y+27, r26	; 0x1b
    2ad6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad8:	69 8d       	ldd	r22, Y+25	; 0x19
    2ada:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2adc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ade:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e8       	ldi	r19, 0x80	; 128
    2ae4:	4b e3       	ldi	r20, 0x3B	; 59
    2ae6:	55 e4       	ldi	r21, 0x45	; 69
    2ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	8d 8b       	std	Y+21, r24	; 0x15
    2af2:	9e 8b       	std	Y+22, r25	; 0x16
    2af4:	af 8b       	std	Y+23, r26	; 0x17
    2af6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2af8:	6d 89       	ldd	r22, Y+21	; 0x15
    2afa:	7e 89       	ldd	r23, Y+22	; 0x16
    2afc:	8f 89       	ldd	r24, Y+23	; 0x17
    2afe:	98 8d       	ldd	r25, Y+24	; 0x18
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	40 e8       	ldi	r20, 0x80	; 128
    2b06:	5f e3       	ldi	r21, 0x3F	; 63
    2b08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b0c:	88 23       	and	r24, r24
    2b0e:	2c f4       	brge	.+10     	; 0x2b1a <vid_Stepper+0x172>
		__ticks = 1;
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	9c 8b       	std	Y+20, r25	; 0x14
    2b16:	8b 8b       	std	Y+19, r24	; 0x13
    2b18:	3f c0       	rjmp	.+126    	; 0x2b98 <vid_Stepper+0x1f0>
	else if (__tmp > 65535)
    2b1a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b1c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b1e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b20:	98 8d       	ldd	r25, Y+24	; 0x18
    2b22:	20 e0       	ldi	r18, 0x00	; 0
    2b24:	3f ef       	ldi	r19, 0xFF	; 255
    2b26:	4f e7       	ldi	r20, 0x7F	; 127
    2b28:	57 e4       	ldi	r21, 0x47	; 71
    2b2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b2e:	18 16       	cp	r1, r24
    2b30:	4c f5       	brge	.+82     	; 0x2b84 <vid_Stepper+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b32:	69 8d       	ldd	r22, Y+25	; 0x19
    2b34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	40 e2       	ldi	r20, 0x20	; 32
    2b40:	51 e4       	ldi	r21, 0x41	; 65
    2b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	bc 01       	movw	r22, r24
    2b4c:	cd 01       	movw	r24, r26
    2b4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b52:	dc 01       	movw	r26, r24
    2b54:	cb 01       	movw	r24, r22
    2b56:	9c 8b       	std	Y+20, r25	; 0x14
    2b58:	8b 8b       	std	Y+19, r24	; 0x13
    2b5a:	0f c0       	rjmp	.+30     	; 0x2b7a <vid_Stepper+0x1d2>
    2b5c:	8c e2       	ldi	r24, 0x2C	; 44
    2b5e:	91 e0       	ldi	r25, 0x01	; 1
    2b60:	9a 8b       	std	Y+18, r25	; 0x12
    2b62:	89 8b       	std	Y+17, r24	; 0x11
    2b64:	89 89       	ldd	r24, Y+17	; 0x11
    2b66:	9a 89       	ldd	r25, Y+18	; 0x12
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <vid_Stepper+0x1c0>
    2b6c:	9a 8b       	std	Y+18, r25	; 0x12
    2b6e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b70:	8b 89       	ldd	r24, Y+19	; 0x13
    2b72:	9c 89       	ldd	r25, Y+20	; 0x14
    2b74:	01 97       	sbiw	r24, 0x01	; 1
    2b76:	9c 8b       	std	Y+20, r25	; 0x14
    2b78:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b7a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b7c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b7e:	00 97       	sbiw	r24, 0x00	; 0
    2b80:	69 f7       	brne	.-38     	; 0x2b5c <vid_Stepper+0x1b4>
    2b82:	14 c0       	rjmp	.+40     	; 0x2bac <vid_Stepper+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b84:	6d 89       	ldd	r22, Y+21	; 0x15
    2b86:	7e 89       	ldd	r23, Y+22	; 0x16
    2b88:	8f 89       	ldd	r24, Y+23	; 0x17
    2b8a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	9c 8b       	std	Y+20, r25	; 0x14
    2b96:	8b 8b       	std	Y+19, r24	; 0x13
    2b98:	8b 89       	ldd	r24, Y+19	; 0x13
    2b9a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b9c:	98 8b       	std	Y+16, r25	; 0x10
    2b9e:	8f 87       	std	Y+15, r24	; 0x0f
    2ba0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ba2:	98 89       	ldd	r25, Y+16	; 0x10
    2ba4:	01 97       	sbiw	r24, 0x01	; 1
    2ba6:	f1 f7       	brne	.-4      	; 0x2ba4 <vid_Stepper+0x1fc>
    2ba8:	98 8b       	std	Y+16, r25	; 0x10
    2baa:	8f 87       	std	Y+15, r24	; 0x0f



			_delay_ms(10);

				DIO_SetPinValue(STP_PORT,STP_COIL3,LOW) ;
    2bac:	83 e0       	ldi	r24, 0x03	; 3
    2bae:	66 e0       	ldi	r22, 0x06	; 6
    2bb0:	40 e0       	ldi	r20, 0x00	; 0
    2bb2:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>
				DIO_SetPinValue(STP_PORT,STP_COIL4,HIGH) ;
    2bb6:	83 e0       	ldi	r24, 0x03	; 3
    2bb8:	67 e0       	ldi	r22, 0x07	; 7
    2bba:	41 e0       	ldi	r20, 0x01	; 1
    2bbc:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>
    2bc0:	80 e0       	ldi	r24, 0x00	; 0
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	a0 e2       	ldi	r26, 0x20	; 32
    2bc6:	b1 e4       	ldi	r27, 0x41	; 65
    2bc8:	8b 87       	std	Y+11, r24	; 0x0b
    2bca:	9c 87       	std	Y+12, r25	; 0x0c
    2bcc:	ad 87       	std	Y+13, r26	; 0x0d
    2bce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	30 e8       	ldi	r19, 0x80	; 128
    2bdc:	4b e3       	ldi	r20, 0x3B	; 59
    2bde:	55 e4       	ldi	r21, 0x45	; 69
    2be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	8f 83       	std	Y+7, r24	; 0x07
    2bea:	98 87       	std	Y+8, r25	; 0x08
    2bec:	a9 87       	std	Y+9, r26	; 0x09
    2bee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bf0:	6f 81       	ldd	r22, Y+7	; 0x07
    2bf2:	78 85       	ldd	r23, Y+8	; 0x08
    2bf4:	89 85       	ldd	r24, Y+9	; 0x09
    2bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bf8:	20 e0       	ldi	r18, 0x00	; 0
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	40 e8       	ldi	r20, 0x80	; 128
    2bfe:	5f e3       	ldi	r21, 0x3F	; 63
    2c00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c04:	88 23       	and	r24, r24
    2c06:	2c f4       	brge	.+10     	; 0x2c12 <vid_Stepper+0x26a>
		__ticks = 1;
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	9e 83       	std	Y+6, r25	; 0x06
    2c0e:	8d 83       	std	Y+5, r24	; 0x05
    2c10:	3f c0       	rjmp	.+126    	; 0x2c90 <vid_Stepper+0x2e8>
	else if (__tmp > 65535)
    2c12:	6f 81       	ldd	r22, Y+7	; 0x07
    2c14:	78 85       	ldd	r23, Y+8	; 0x08
    2c16:	89 85       	ldd	r24, Y+9	; 0x09
    2c18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	3f ef       	ldi	r19, 0xFF	; 255
    2c1e:	4f e7       	ldi	r20, 0x7F	; 127
    2c20:	57 e4       	ldi	r21, 0x47	; 71
    2c22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c26:	18 16       	cp	r1, r24
    2c28:	4c f5       	brge	.+82     	; 0x2c7c <vid_Stepper+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c30:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	40 e2       	ldi	r20, 0x20	; 32
    2c38:	51 e4       	ldi	r21, 0x41	; 65
    2c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	bc 01       	movw	r22, r24
    2c44:	cd 01       	movw	r24, r26
    2c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	9e 83       	std	Y+6, r25	; 0x06
    2c50:	8d 83       	std	Y+5, r24	; 0x05
    2c52:	0f c0       	rjmp	.+30     	; 0x2c72 <vid_Stepper+0x2ca>
    2c54:	8c e2       	ldi	r24, 0x2C	; 44
    2c56:	91 e0       	ldi	r25, 0x01	; 1
    2c58:	9c 83       	std	Y+4, r25	; 0x04
    2c5a:	8b 83       	std	Y+3, r24	; 0x03
    2c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c60:	01 97       	sbiw	r24, 0x01	; 1
    2c62:	f1 f7       	brne	.-4      	; 0x2c60 <vid_Stepper+0x2b8>
    2c64:	9c 83       	std	Y+4, r25	; 0x04
    2c66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c68:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c6c:	01 97       	sbiw	r24, 0x01	; 1
    2c6e:	9e 83       	std	Y+6, r25	; 0x06
    2c70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c72:	8d 81       	ldd	r24, Y+5	; 0x05
    2c74:	9e 81       	ldd	r25, Y+6	; 0x06
    2c76:	00 97       	sbiw	r24, 0x00	; 0
    2c78:	69 f7       	brne	.-38     	; 0x2c54 <vid_Stepper+0x2ac>
    2c7a:	14 c0       	rjmp	.+40     	; 0x2ca4 <vid_Stepper+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c7e:	78 85       	ldd	r23, Y+8	; 0x08
    2c80:	89 85       	ldd	r24, Y+9	; 0x09
    2c82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c88:	dc 01       	movw	r26, r24
    2c8a:	cb 01       	movw	r24, r22
    2c8c:	9e 83       	std	Y+6, r25	; 0x06
    2c8e:	8d 83       	std	Y+5, r24	; 0x05
    2c90:	8d 81       	ldd	r24, Y+5	; 0x05
    2c92:	9e 81       	ldd	r25, Y+6	; 0x06
    2c94:	9a 83       	std	Y+2, r25	; 0x02
    2c96:	89 83       	std	Y+1, r24	; 0x01
    2c98:	89 81       	ldd	r24, Y+1	; 0x01
    2c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9c:	01 97       	sbiw	r24, 0x01	; 1
    2c9e:	f1 f7       	brne	.-4      	; 0x2c9c <vid_Stepper+0x2f4>
    2ca0:	9a 83       	std	Y+2, r25	; 0x02
    2ca2:	89 83       	std	Y+1, r24	; 0x01





}
    2ca4:	aa 96       	adiw	r28, 0x2a	; 42
    2ca6:	0f b6       	in	r0, 0x3f	; 63
    2ca8:	f8 94       	cli
    2caa:	de bf       	out	0x3e, r29	; 62
    2cac:	0f be       	out	0x3f, r0	; 63
    2cae:	cd bf       	out	0x3d, r28	; 61
    2cb0:	cf 91       	pop	r28
    2cb2:	df 91       	pop	r29
    2cb4:	08 95       	ret

00002cb6 <vid_Stepper_Set>:



void vid_Stepper_Set(void)
{
    2cb6:	df 93       	push	r29
    2cb8:	cf 93       	push	r28
    2cba:	cd b7       	in	r28, 0x3d	; 61
    2cbc:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(STP_PORT,STP_COIL1,LOW) ;
    2cbe:	83 e0       	ldi	r24, 0x03	; 3
    2cc0:	64 e0       	ldi	r22, 0x04	; 4
    2cc2:	40 e0       	ldi	r20, 0x00	; 0
    2cc4:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>
	DIO_SetPinValue(STP_PORT,STP_COIL2,HIGH) ;
    2cc8:	83 e0       	ldi	r24, 0x03	; 3
    2cca:	65 e0       	ldi	r22, 0x05	; 5
    2ccc:	41 e0       	ldi	r20, 0x01	; 1
    2cce:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>
}
    2cd2:	cf 91       	pop	r28
    2cd4:	df 91       	pop	r29
    2cd6:	08 95       	ret

00002cd8 <vid_Stepper_Reset>:

/**--------------------------------------------------------**/

void vid_Stepper_Reset(void)
{
    2cd8:	df 93       	push	r29
    2cda:	cf 93       	push	r28
    2cdc:	cd b7       	in	r28, 0x3d	; 61
    2cde:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(STP_PORT,STP_COIL1,HIGH) ;
    2ce0:	83 e0       	ldi	r24, 0x03	; 3
    2ce2:	64 e0       	ldi	r22, 0x04	; 4
    2ce4:	41 e0       	ldi	r20, 0x01	; 1
    2ce6:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>
	DIO_SetPinValue(STP_PORT,STP_COIL2,LOW) ;
    2cea:	83 e0       	ldi	r24, 0x03	; 3
    2cec:	65 e0       	ldi	r22, 0x05	; 5
    2cee:	40 e0       	ldi	r20, 0x00	; 0
    2cf0:	0e 94 34 06 	call	0xc68	; 0xc68 <DIO_SetPinValue>
}
    2cf4:	cf 91       	pop	r28
    2cf6:	df 91       	pop	r29
    2cf8:	08 95       	ret

00002cfa <vid_Timer0_vid_InitializePWM>:


#include "Timer0_interface.h"


void vid_Timer0_vid_InitializePWM (void)  {
    2cfa:	df 93       	push	r29
    2cfc:	cf 93       	push	r28
    2cfe:	cd b7       	in	r28, 0x3d	; 61
    2d00:	de b7       	in	r29, 0x3e	; 62

		TCCR0_REG=0b01100011 ;
    2d02:	e3 e5       	ldi	r30, 0x53	; 83
    2d04:	f0 e0       	ldi	r31, 0x00	; 0
    2d06:	83 e6       	ldi	r24, 0x63	; 99
    2d08:	80 83       	st	Z, r24
		OCR0_REG = 0X00 ;
    2d0a:	ec e5       	ldi	r30, 0x5C	; 92
    2d0c:	f0 e0       	ldi	r31, 0x00	; 0
    2d0e:	10 82       	st	Z, r1

}
    2d10:	cf 91       	pop	r28
    2d12:	df 91       	pop	r29
    2d14:	08 95       	ret

00002d16 <__mulsi3>:
    2d16:	62 9f       	mul	r22, r18
    2d18:	d0 01       	movw	r26, r0
    2d1a:	73 9f       	mul	r23, r19
    2d1c:	f0 01       	movw	r30, r0
    2d1e:	82 9f       	mul	r24, r18
    2d20:	e0 0d       	add	r30, r0
    2d22:	f1 1d       	adc	r31, r1
    2d24:	64 9f       	mul	r22, r20
    2d26:	e0 0d       	add	r30, r0
    2d28:	f1 1d       	adc	r31, r1
    2d2a:	92 9f       	mul	r25, r18
    2d2c:	f0 0d       	add	r31, r0
    2d2e:	83 9f       	mul	r24, r19
    2d30:	f0 0d       	add	r31, r0
    2d32:	74 9f       	mul	r23, r20
    2d34:	f0 0d       	add	r31, r0
    2d36:	65 9f       	mul	r22, r21
    2d38:	f0 0d       	add	r31, r0
    2d3a:	99 27       	eor	r25, r25
    2d3c:	72 9f       	mul	r23, r18
    2d3e:	b0 0d       	add	r27, r0
    2d40:	e1 1d       	adc	r30, r1
    2d42:	f9 1f       	adc	r31, r25
    2d44:	63 9f       	mul	r22, r19
    2d46:	b0 0d       	add	r27, r0
    2d48:	e1 1d       	adc	r30, r1
    2d4a:	f9 1f       	adc	r31, r25
    2d4c:	bd 01       	movw	r22, r26
    2d4e:	cf 01       	movw	r24, r30
    2d50:	11 24       	eor	r1, r1
    2d52:	08 95       	ret

00002d54 <__udivmodhi4>:
    2d54:	aa 1b       	sub	r26, r26
    2d56:	bb 1b       	sub	r27, r27
    2d58:	51 e1       	ldi	r21, 0x11	; 17
    2d5a:	07 c0       	rjmp	.+14     	; 0x2d6a <__udivmodhi4_ep>

00002d5c <__udivmodhi4_loop>:
    2d5c:	aa 1f       	adc	r26, r26
    2d5e:	bb 1f       	adc	r27, r27
    2d60:	a6 17       	cp	r26, r22
    2d62:	b7 07       	cpc	r27, r23
    2d64:	10 f0       	brcs	.+4      	; 0x2d6a <__udivmodhi4_ep>
    2d66:	a6 1b       	sub	r26, r22
    2d68:	b7 0b       	sbc	r27, r23

00002d6a <__udivmodhi4_ep>:
    2d6a:	88 1f       	adc	r24, r24
    2d6c:	99 1f       	adc	r25, r25
    2d6e:	5a 95       	dec	r21
    2d70:	a9 f7       	brne	.-22     	; 0x2d5c <__udivmodhi4_loop>
    2d72:	80 95       	com	r24
    2d74:	90 95       	com	r25
    2d76:	bc 01       	movw	r22, r24
    2d78:	cd 01       	movw	r24, r26
    2d7a:	08 95       	ret

00002d7c <__udivmodsi4>:
    2d7c:	a1 e2       	ldi	r26, 0x21	; 33
    2d7e:	1a 2e       	mov	r1, r26
    2d80:	aa 1b       	sub	r26, r26
    2d82:	bb 1b       	sub	r27, r27
    2d84:	fd 01       	movw	r30, r26
    2d86:	0d c0       	rjmp	.+26     	; 0x2da2 <__udivmodsi4_ep>

00002d88 <__udivmodsi4_loop>:
    2d88:	aa 1f       	adc	r26, r26
    2d8a:	bb 1f       	adc	r27, r27
    2d8c:	ee 1f       	adc	r30, r30
    2d8e:	ff 1f       	adc	r31, r31
    2d90:	a2 17       	cp	r26, r18
    2d92:	b3 07       	cpc	r27, r19
    2d94:	e4 07       	cpc	r30, r20
    2d96:	f5 07       	cpc	r31, r21
    2d98:	20 f0       	brcs	.+8      	; 0x2da2 <__udivmodsi4_ep>
    2d9a:	a2 1b       	sub	r26, r18
    2d9c:	b3 0b       	sbc	r27, r19
    2d9e:	e4 0b       	sbc	r30, r20
    2da0:	f5 0b       	sbc	r31, r21

00002da2 <__udivmodsi4_ep>:
    2da2:	66 1f       	adc	r22, r22
    2da4:	77 1f       	adc	r23, r23
    2da6:	88 1f       	adc	r24, r24
    2da8:	99 1f       	adc	r25, r25
    2daa:	1a 94       	dec	r1
    2dac:	69 f7       	brne	.-38     	; 0x2d88 <__udivmodsi4_loop>
    2dae:	60 95       	com	r22
    2db0:	70 95       	com	r23
    2db2:	80 95       	com	r24
    2db4:	90 95       	com	r25
    2db6:	9b 01       	movw	r18, r22
    2db8:	ac 01       	movw	r20, r24
    2dba:	bd 01       	movw	r22, r26
    2dbc:	cf 01       	movw	r24, r30
    2dbe:	08 95       	ret

00002dc0 <__prologue_saves__>:
    2dc0:	2f 92       	push	r2
    2dc2:	3f 92       	push	r3
    2dc4:	4f 92       	push	r4
    2dc6:	5f 92       	push	r5
    2dc8:	6f 92       	push	r6
    2dca:	7f 92       	push	r7
    2dcc:	8f 92       	push	r8
    2dce:	9f 92       	push	r9
    2dd0:	af 92       	push	r10
    2dd2:	bf 92       	push	r11
    2dd4:	cf 92       	push	r12
    2dd6:	df 92       	push	r13
    2dd8:	ef 92       	push	r14
    2dda:	ff 92       	push	r15
    2ddc:	0f 93       	push	r16
    2dde:	1f 93       	push	r17
    2de0:	cf 93       	push	r28
    2de2:	df 93       	push	r29
    2de4:	cd b7       	in	r28, 0x3d	; 61
    2de6:	de b7       	in	r29, 0x3e	; 62
    2de8:	ca 1b       	sub	r28, r26
    2dea:	db 0b       	sbc	r29, r27
    2dec:	0f b6       	in	r0, 0x3f	; 63
    2dee:	f8 94       	cli
    2df0:	de bf       	out	0x3e, r29	; 62
    2df2:	0f be       	out	0x3f, r0	; 63
    2df4:	cd bf       	out	0x3d, r28	; 61
    2df6:	09 94       	ijmp

00002df8 <__epilogue_restores__>:
    2df8:	2a 88       	ldd	r2, Y+18	; 0x12
    2dfa:	39 88       	ldd	r3, Y+17	; 0x11
    2dfc:	48 88       	ldd	r4, Y+16	; 0x10
    2dfe:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e00:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e02:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e04:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e06:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e08:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e0a:	b9 84       	ldd	r11, Y+9	; 0x09
    2e0c:	c8 84       	ldd	r12, Y+8	; 0x08
    2e0e:	df 80       	ldd	r13, Y+7	; 0x07
    2e10:	ee 80       	ldd	r14, Y+6	; 0x06
    2e12:	fd 80       	ldd	r15, Y+5	; 0x05
    2e14:	0c 81       	ldd	r16, Y+4	; 0x04
    2e16:	1b 81       	ldd	r17, Y+3	; 0x03
    2e18:	aa 81       	ldd	r26, Y+2	; 0x02
    2e1a:	b9 81       	ldd	r27, Y+1	; 0x01
    2e1c:	ce 0f       	add	r28, r30
    2e1e:	d1 1d       	adc	r29, r1
    2e20:	0f b6       	in	r0, 0x3f	; 63
    2e22:	f8 94       	cli
    2e24:	de bf       	out	0x3e, r29	; 62
    2e26:	0f be       	out	0x3f, r0	; 63
    2e28:	cd bf       	out	0x3d, r28	; 61
    2e2a:	ed 01       	movw	r28, r26
    2e2c:	08 95       	ret

00002e2e <_exit>:
    2e2e:	f8 94       	cli

00002e30 <__stop_program>:
    2e30:	ff cf       	rjmp	.-2      	; 0x2e30 <__stop_program>
