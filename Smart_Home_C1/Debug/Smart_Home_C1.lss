
Smart_Home_C1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000212c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000212c  000021c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800068  00800068  000021c8  2**0
                  ALLOC
  3 .stab         00001de8  00000000  00000000  000021c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c27  00000000  00000000  00003fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004d17  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004e87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000079bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008768  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000088c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008b55  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009323  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8c 0c 	jmp	0x1918	; 0x1918 <__vector_1>
       8:	0c 94 c1 0d 	jmp	0x1b82	; 0x1b82 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ae 36       	cpi	r26, 0x6E	; 110
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ec e2       	ldi	r30, 0x2C	; 44
      78:	f1 e2       	ldi	r31, 0x21	; 33
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <main>
      8a:	0c 94 94 10 	jmp	0x2128	; 0x2128 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5d 10 	jmp	0x20ba	; 0x20ba <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 79 10 	jmp	0x20f2	; 0x20f2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 85 10 	jmp	0x210a	; 0x210a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 85 10 	jmp	0x210a	; 0x210a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5d 10 	jmp	0x20ba	; 0x20ba <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 79 10 	jmp	0x20f2	; 0x20f2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 85 10 	jmp	0x210a	; 0x210a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 85 10 	jmp	0x210a	; 0x210a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 85 10 	jmp	0x210a	; 0x210a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6d 10 	jmp	0x20da	; 0x20da <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 89 10 	jmp	0x2112	; 0x2112 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_16>:

#include <avr/interrupt.h>
#include "registers.h"


ISR(ADC_vect){
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	df 93       	push	r29
     b52:	cf 93       	push	r28
     b54:	cd b7       	in	r28, 0x3d	; 61
     b56:	de b7       	in	r29, 0x3e	; 62
	else {

	}

*/
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	0f 90       	pop	r0
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	0f 90       	pop	r0
     b62:	1f 90       	pop	r1
     b64:	18 95       	reti

00000b66 <vid_ADC_vid_Initialize>:


/************************************************************/


void vid_ADC_vid_Initialize (void) {
     b66:	df 93       	push	r29
     b68:	cf 93       	push	r28
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62

	ADMUX_REG =  0b01100000 ;
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 e6       	ldi	r24, 0x60	; 96
     b74:	80 83       	st	Z, r24
	ADCSRA_REG = 0b10000111 ;    // disable interrupt
     b76:	e6 e2       	ldi	r30, 0x26	; 38
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	87 e8       	ldi	r24, 0x87	; 135
     b7c:	80 83       	st	Z, r24

}
     b7e:	cf 91       	pop	r28
     b80:	df 91       	pop	r29
     b82:	08 95       	ret

00000b84 <U8_ADC_U8_Read>:

/************************************************************/

u8 U8_ADC_U8_Read (u8 channel) {
     b84:	df 93       	push	r29
     b86:	cf 93       	push	r28
     b88:	0f 92       	push	r0
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
     b8e:	89 83       	std	Y+1, r24	; 0x01

		channel &= 0x07;       // channel from 0 : 7  ,& to neglect any bit more than 7
     b90:	89 81       	ldd	r24, Y+1	; 0x01
     b92:	87 70       	andi	r24, 0x07	; 7
     b94:	89 83       	std	Y+1, r24	; 0x01
		ADMUX_REG &= 0xE0;    // to save higher 3 bits as they are and set the rest to 0
     b96:	a7 e2       	ldi	r26, 0x27	; 39
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	e7 e2       	ldi	r30, 0x27	; 39
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	80 7e       	andi	r24, 0xE0	; 224
     ba2:	8c 93       	st	X, r24
		ADMUX_REG |= channel;           // Take the target channel
     ba4:	a7 e2       	ldi	r26, 0x27	; 39
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	e7 e2       	ldi	r30, 0x27	; 39
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	90 81       	ld	r25, Z
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	89 2b       	or	r24, r25
     bb2:	8c 93       	st	X, r24

		SET_BIT(ADCSRA_REG,ADSC)  ;     // start conversion
     bb4:	a6 e2       	ldi	r26, 0x26	; 38
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	e6 e2       	ldi	r30, 0x26	; 38
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	80 64       	ori	r24, 0x40	; 64
     bc0:	8c 93       	st	X, r24

		while(!(ADCSRA_REG & (1<<4)));  //POLLING TO WAIT CONVERSION
     bc2:	e6 e2       	ldi	r30, 0x26	; 38
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	88 2f       	mov	r24, r24
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	80 71       	andi	r24, 0x10	; 16
     bce:	90 70       	andi	r25, 0x00	; 0
     bd0:	00 97       	sbiw	r24, 0x00	; 0
     bd2:	b9 f3       	breq	.-18     	; 0xbc2 <U8_ADC_U8_Read+0x3e>

		return ADCH_REG;
     bd4:	e5 e2       	ldi	r30, 0x25	; 37
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z

}
     bda:	0f 90       	pop	r0
     bdc:	cf 91       	pop	r28
     bde:	df 91       	pop	r29
     be0:	08 95       	ret

00000be2 <main>:
/****************************************************************/




void main (void) {
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	df 93       	push	r29
     be8:	cf 93       	push	r28
     bea:	cd b7       	in	r28, 0x3d	; 61
     bec:	de b7       	in	r29, 0x3e	; 62
     bee:	c4 55       	subi	r28, 0x54	; 84
     bf0:	d0 40       	sbci	r29, 0x00	; 0
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	f8 94       	cli
     bf6:	de bf       	out	0x3e, r29	; 62
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	cd bf       	out	0x3d, r28	; 61



	vid_DIO_vid_SetDioDirections () ;
     bfc:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <vid_DIO_vid_SetDioDirections>

	vid_ADC_vid_Initialize () ;
     c00:	0e 94 b3 05 	call	0xb66	; 0xb66 <vid_ADC_vid_Initialize>

	vid_Timer0_vid_InitializePWM () ;
     c04:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <vid_Timer0_vid_InitializePWM>

	vid_Timer2_vid_InitializePWM () ;
     c08:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <vid_Timer2_vid_InitializePWM>

	vid_ExtInt0_vid_InitializeExtInt () ;
     c0c:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <vid_ExtInt0_vid_InitializeExtInt>

	vid_ExtInt1_vid_InitializeExtInt () ;
     c10:	0e 94 6f 0c 	call	0x18de	; 0x18de <vid_ExtInt1_vid_InitializeExtInt>

	vid_UART_vid_Initialize();
     c14:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <vid_UART_vid_Initialize>

	while (1) {



    UpdateFanSpeed () ;
     c18:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <UpdateFanSpeed>
    UpdateLightIlluminance () ;
     c1c:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <UpdateLightIlluminance>


	u8PeopleInside = u8PeopleEnter - u8PeopleExit ;
     c20:	90 91 6b 00 	lds	r25, 0x006B
     c24:	80 91 6c 00 	lds	r24, 0x006C
     c28:	29 2f       	mov	r18, r25
     c2a:	28 1b       	sub	r18, r24
     c2c:	82 2f       	mov	r24, r18
     c2e:	80 93 6d 00 	sts	0x006D, r24


    asm ("CLI") ;
     c32:	f8 94       	cli


    vid_UART_vid_SendChar('a') ;
     c34:	81 e6       	ldi	r24, 0x61	; 97
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <vid_UART_vid_SendChar>
     c3c:	fe 01       	movw	r30, r28
     c3e:	ef 5a       	subi	r30, 0xAF	; 175
     c40:	ff 4f       	sbci	r31, 0xFF	; 255
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	a8 ec       	ldi	r26, 0xC8	; 200
     c48:	b2 e4       	ldi	r27, 0x42	; 66
     c4a:	80 83       	st	Z, r24
     c4c:	91 83       	std	Z+1, r25	; 0x01
     c4e:	a2 83       	std	Z+2, r26	; 0x02
     c50:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c52:	8e 01       	movw	r16, r28
     c54:	03 5b       	subi	r16, 0xB3	; 179
     c56:	1f 4f       	sbci	r17, 0xFF	; 255
     c58:	fe 01       	movw	r30, r28
     c5a:	ef 5a       	subi	r30, 0xAF	; 175
     c5c:	ff 4f       	sbci	r31, 0xFF	; 255
     c5e:	60 81       	ld	r22, Z
     c60:	71 81       	ldd	r23, Z+1	; 0x01
     c62:	82 81       	ldd	r24, Z+2	; 0x02
     c64:	93 81       	ldd	r25, Z+3	; 0x03
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	46 e9       	ldi	r20, 0x96	; 150
     c6c:	53 e4       	ldi	r21, 0x43	; 67
     c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c72:	dc 01       	movw	r26, r24
     c74:	cb 01       	movw	r24, r22
     c76:	f8 01       	movw	r30, r16
     c78:	80 83       	st	Z, r24
     c7a:	91 83       	std	Z+1, r25	; 0x01
     c7c:	a2 83       	std	Z+2, r26	; 0x02
     c7e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c80:	fe 01       	movw	r30, r28
     c82:	e3 5b       	subi	r30, 0xB3	; 179
     c84:	ff 4f       	sbci	r31, 0xFF	; 255
     c86:	60 81       	ld	r22, Z
     c88:	71 81       	ldd	r23, Z+1	; 0x01
     c8a:	82 81       	ldd	r24, Z+2	; 0x02
     c8c:	93 81       	ldd	r25, Z+3	; 0x03
     c8e:	20 e0       	ldi	r18, 0x00	; 0
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	40 e8       	ldi	r20, 0x80	; 128
     c94:	5f e3       	ldi	r21, 0x3F	; 63
     c96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c9a:	88 23       	and	r24, r24
     c9c:	44 f4       	brge	.+16     	; 0xcae <main+0xcc>
		__ticks = 1;
     c9e:	fe 01       	movw	r30, r28
     ca0:	e5 5b       	subi	r30, 0xB5	; 181
     ca2:	ff 4f       	sbci	r31, 0xFF	; 255
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	91 83       	std	Z+1, r25	; 0x01
     caa:	80 83       	st	Z, r24
     cac:	64 c0       	rjmp	.+200    	; 0xd76 <main+0x194>
	else if (__tmp > 65535)
     cae:	fe 01       	movw	r30, r28
     cb0:	e3 5b       	subi	r30, 0xB3	; 179
     cb2:	ff 4f       	sbci	r31, 0xFF	; 255
     cb4:	60 81       	ld	r22, Z
     cb6:	71 81       	ldd	r23, Z+1	; 0x01
     cb8:	82 81       	ldd	r24, Z+2	; 0x02
     cba:	93 81       	ldd	r25, Z+3	; 0x03
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	3f ef       	ldi	r19, 0xFF	; 255
     cc0:	4f e7       	ldi	r20, 0x7F	; 127
     cc2:	57 e4       	ldi	r21, 0x47	; 71
     cc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cc8:	18 16       	cp	r1, r24
     cca:	0c f0       	brlt	.+2      	; 0xcce <main+0xec>
     ccc:	43 c0       	rjmp	.+134    	; 0xd54 <main+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cce:	fe 01       	movw	r30, r28
     cd0:	ef 5a       	subi	r30, 0xAF	; 175
     cd2:	ff 4f       	sbci	r31, 0xFF	; 255
     cd4:	60 81       	ld	r22, Z
     cd6:	71 81       	ldd	r23, Z+1	; 0x01
     cd8:	82 81       	ldd	r24, Z+2	; 0x02
     cda:	93 81       	ldd	r25, Z+3	; 0x03
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	40 e2       	ldi	r20, 0x20	; 32
     ce2:	51 e4       	ldi	r21, 0x41	; 65
     ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce8:	dc 01       	movw	r26, r24
     cea:	cb 01       	movw	r24, r22
     cec:	8e 01       	movw	r16, r28
     cee:	05 5b       	subi	r16, 0xB5	; 181
     cf0:	1f 4f       	sbci	r17, 0xFF	; 255
     cf2:	bc 01       	movw	r22, r24
     cf4:	cd 01       	movw	r24, r26
     cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cfa:	dc 01       	movw	r26, r24
     cfc:	cb 01       	movw	r24, r22
     cfe:	f8 01       	movw	r30, r16
     d00:	91 83       	std	Z+1, r25	; 0x01
     d02:	80 83       	st	Z, r24
     d04:	1f c0       	rjmp	.+62     	; 0xd44 <main+0x162>
     d06:	fe 01       	movw	r30, r28
     d08:	e7 5b       	subi	r30, 0xB7	; 183
     d0a:	ff 4f       	sbci	r31, 0xFF	; 255
     d0c:	8e e1       	ldi	r24, 0x1E	; 30
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	91 83       	std	Z+1, r25	; 0x01
     d12:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d14:	fe 01       	movw	r30, r28
     d16:	e7 5b       	subi	r30, 0xB7	; 183
     d18:	ff 4f       	sbci	r31, 0xFF	; 255
     d1a:	80 81       	ld	r24, Z
     d1c:	91 81       	ldd	r25, Z+1	; 0x01
     d1e:	01 97       	sbiw	r24, 0x01	; 1
     d20:	f1 f7       	brne	.-4      	; 0xd1e <main+0x13c>
     d22:	fe 01       	movw	r30, r28
     d24:	e7 5b       	subi	r30, 0xB7	; 183
     d26:	ff 4f       	sbci	r31, 0xFF	; 255
     d28:	91 83       	std	Z+1, r25	; 0x01
     d2a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d2c:	de 01       	movw	r26, r28
     d2e:	a5 5b       	subi	r26, 0xB5	; 181
     d30:	bf 4f       	sbci	r27, 0xFF	; 255
     d32:	fe 01       	movw	r30, r28
     d34:	e5 5b       	subi	r30, 0xB5	; 181
     d36:	ff 4f       	sbci	r31, 0xFF	; 255
     d38:	80 81       	ld	r24, Z
     d3a:	91 81       	ldd	r25, Z+1	; 0x01
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	11 96       	adiw	r26, 0x01	; 1
     d40:	9c 93       	st	X, r25
     d42:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d44:	fe 01       	movw	r30, r28
     d46:	e5 5b       	subi	r30, 0xB5	; 181
     d48:	ff 4f       	sbci	r31, 0xFF	; 255
     d4a:	80 81       	ld	r24, Z
     d4c:	91 81       	ldd	r25, Z+1	; 0x01
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	d1 f6       	brne	.-76     	; 0xd06 <main+0x124>
     d52:	27 c0       	rjmp	.+78     	; 0xda2 <main+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d54:	8e 01       	movw	r16, r28
     d56:	05 5b       	subi	r16, 0xB5	; 181
     d58:	1f 4f       	sbci	r17, 0xFF	; 255
     d5a:	fe 01       	movw	r30, r28
     d5c:	e3 5b       	subi	r30, 0xB3	; 179
     d5e:	ff 4f       	sbci	r31, 0xFF	; 255
     d60:	60 81       	ld	r22, Z
     d62:	71 81       	ldd	r23, Z+1	; 0x01
     d64:	82 81       	ldd	r24, Z+2	; 0x02
     d66:	93 81       	ldd	r25, Z+3	; 0x03
     d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	f8 01       	movw	r30, r16
     d72:	91 83       	std	Z+1, r25	; 0x01
     d74:	80 83       	st	Z, r24
     d76:	de 01       	movw	r26, r28
     d78:	a9 5b       	subi	r26, 0xB9	; 185
     d7a:	bf 4f       	sbci	r27, 0xFF	; 255
     d7c:	fe 01       	movw	r30, r28
     d7e:	e5 5b       	subi	r30, 0xB5	; 181
     d80:	ff 4f       	sbci	r31, 0xFF	; 255
     d82:	80 81       	ld	r24, Z
     d84:	91 81       	ldd	r25, Z+1	; 0x01
     d86:	8d 93       	st	X+, r24
     d88:	9c 93       	st	X, r25
     d8a:	fe 01       	movw	r30, r28
     d8c:	e9 5b       	subi	r30, 0xB9	; 185
     d8e:	ff 4f       	sbci	r31, 0xFF	; 255
     d90:	80 81       	ld	r24, Z
     d92:	91 81       	ldd	r25, Z+1	; 0x01
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	f1 f7       	brne	.-4      	; 0xd94 <main+0x1b2>
     d98:	fe 01       	movw	r30, r28
     d9a:	e9 5b       	subi	r30, 0xB9	; 185
     d9c:	ff 4f       	sbci	r31, 0xFF	; 255
     d9e:	91 83       	std	Z+1, r25	; 0x01
     da0:	80 83       	st	Z, r24
    _delay_ms(100) ;
    vid_UART_vid_SendChar((u8)u16Temp);
     da2:	80 91 68 00 	lds	r24, 0x0068
     da6:	90 91 69 00 	lds	r25, 0x0069
     daa:	88 2f       	mov	r24, r24
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <vid_UART_vid_SendChar>
     db2:	fe 01       	movw	r30, r28
     db4:	ed 5b       	subi	r30, 0xBD	; 189
     db6:	ff 4f       	sbci	r31, 0xFF	; 255
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	a8 ec       	ldi	r26, 0xC8	; 200
     dbe:	b2 e4       	ldi	r27, 0x42	; 66
     dc0:	80 83       	st	Z, r24
     dc2:	91 83       	std	Z+1, r25	; 0x01
     dc4:	a2 83       	std	Z+2, r26	; 0x02
     dc6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dc8:	8e 01       	movw	r16, r28
     dca:	01 5c       	subi	r16, 0xC1	; 193
     dcc:	1f 4f       	sbci	r17, 0xFF	; 255
     dce:	fe 01       	movw	r30, r28
     dd0:	ed 5b       	subi	r30, 0xBD	; 189
     dd2:	ff 4f       	sbci	r31, 0xFF	; 255
     dd4:	60 81       	ld	r22, Z
     dd6:	71 81       	ldd	r23, Z+1	; 0x01
     dd8:	82 81       	ldd	r24, Z+2	; 0x02
     dda:	93 81       	ldd	r25, Z+3	; 0x03
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	46 e9       	ldi	r20, 0x96	; 150
     de2:	53 e4       	ldi	r21, 0x43	; 67
     de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     de8:	dc 01       	movw	r26, r24
     dea:	cb 01       	movw	r24, r22
     dec:	f8 01       	movw	r30, r16
     dee:	80 83       	st	Z, r24
     df0:	91 83       	std	Z+1, r25	; 0x01
     df2:	a2 83       	std	Z+2, r26	; 0x02
     df4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     df6:	fe 01       	movw	r30, r28
     df8:	ff 96       	adiw	r30, 0x3f	; 63
     dfa:	60 81       	ld	r22, Z
     dfc:	71 81       	ldd	r23, Z+1	; 0x01
     dfe:	82 81       	ldd	r24, Z+2	; 0x02
     e00:	93 81       	ldd	r25, Z+3	; 0x03
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	40 e8       	ldi	r20, 0x80	; 128
     e08:	5f e3       	ldi	r21, 0x3F	; 63
     e0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e0e:	88 23       	and	r24, r24
     e10:	2c f4       	brge	.+10     	; 0xe1c <main+0x23a>
		__ticks = 1;
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	9e af       	std	Y+62, r25	; 0x3e
     e18:	8d af       	std	Y+61, r24	; 0x3d
     e1a:	46 c0       	rjmp	.+140    	; 0xea8 <main+0x2c6>
	else if (__tmp > 65535)
     e1c:	fe 01       	movw	r30, r28
     e1e:	ff 96       	adiw	r30, 0x3f	; 63
     e20:	60 81       	ld	r22, Z
     e22:	71 81       	ldd	r23, Z+1	; 0x01
     e24:	82 81       	ldd	r24, Z+2	; 0x02
     e26:	93 81       	ldd	r25, Z+3	; 0x03
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	3f ef       	ldi	r19, 0xFF	; 255
     e2c:	4f e7       	ldi	r20, 0x7F	; 127
     e2e:	57 e4       	ldi	r21, 0x47	; 71
     e30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e34:	18 16       	cp	r1, r24
     e36:	64 f5       	brge	.+88     	; 0xe90 <main+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e38:	fe 01       	movw	r30, r28
     e3a:	ed 5b       	subi	r30, 0xBD	; 189
     e3c:	ff 4f       	sbci	r31, 0xFF	; 255
     e3e:	60 81       	ld	r22, Z
     e40:	71 81       	ldd	r23, Z+1	; 0x01
     e42:	82 81       	ldd	r24, Z+2	; 0x02
     e44:	93 81       	ldd	r25, Z+3	; 0x03
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	40 e2       	ldi	r20, 0x20	; 32
     e4c:	51 e4       	ldi	r21, 0x41	; 65
     e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	bc 01       	movw	r22, r24
     e58:	cd 01       	movw	r24, r26
     e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5e:	dc 01       	movw	r26, r24
     e60:	cb 01       	movw	r24, r22
     e62:	9e af       	std	Y+62, r25	; 0x3e
     e64:	8d af       	std	Y+61, r24	; 0x3d
     e66:	0f c0       	rjmp	.+30     	; 0xe86 <main+0x2a4>
     e68:	8e e1       	ldi	r24, 0x1E	; 30
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	9c af       	std	Y+60, r25	; 0x3c
     e6e:	8b af       	std	Y+59, r24	; 0x3b
     e70:	8b ad       	ldd	r24, Y+59	; 0x3b
     e72:	9c ad       	ldd	r25, Y+60	; 0x3c
     e74:	01 97       	sbiw	r24, 0x01	; 1
     e76:	f1 f7       	brne	.-4      	; 0xe74 <main+0x292>
     e78:	9c af       	std	Y+60, r25	; 0x3c
     e7a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7c:	8d ad       	ldd	r24, Y+61	; 0x3d
     e7e:	9e ad       	ldd	r25, Y+62	; 0x3e
     e80:	01 97       	sbiw	r24, 0x01	; 1
     e82:	9e af       	std	Y+62, r25	; 0x3e
     e84:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e86:	8d ad       	ldd	r24, Y+61	; 0x3d
     e88:	9e ad       	ldd	r25, Y+62	; 0x3e
     e8a:	00 97       	sbiw	r24, 0x00	; 0
     e8c:	69 f7       	brne	.-38     	; 0xe68 <main+0x286>
     e8e:	16 c0       	rjmp	.+44     	; 0xebc <main+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e90:	fe 01       	movw	r30, r28
     e92:	ff 96       	adiw	r30, 0x3f	; 63
     e94:	60 81       	ld	r22, Z
     e96:	71 81       	ldd	r23, Z+1	; 0x01
     e98:	82 81       	ldd	r24, Z+2	; 0x02
     e9a:	93 81       	ldd	r25, Z+3	; 0x03
     e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ea0:	dc 01       	movw	r26, r24
     ea2:	cb 01       	movw	r24, r22
     ea4:	9e af       	std	Y+62, r25	; 0x3e
     ea6:	8d af       	std	Y+61, r24	; 0x3d
     ea8:	8d ad       	ldd	r24, Y+61	; 0x3d
     eaa:	9e ad       	ldd	r25, Y+62	; 0x3e
     eac:	9a af       	std	Y+58, r25	; 0x3a
     eae:	89 af       	std	Y+57, r24	; 0x39
     eb0:	89 ad       	ldd	r24, Y+57	; 0x39
     eb2:	9a ad       	ldd	r25, Y+58	; 0x3a
     eb4:	01 97       	sbiw	r24, 0x01	; 1
     eb6:	f1 f7       	brne	.-4      	; 0xeb4 <main+0x2d2>
     eb8:	9a af       	std	Y+58, r25	; 0x3a
     eba:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(100) ;


    vid_UART_vid_SendChar('b') ;
     ebc:	82 e6       	ldi	r24, 0x62	; 98
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <vid_UART_vid_SendChar>
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	a8 ec       	ldi	r26, 0xC8	; 200
     eca:	b2 e4       	ldi	r27, 0x42	; 66
     ecc:	8d ab       	std	Y+53, r24	; 0x35
     ece:	9e ab       	std	Y+54, r25	; 0x36
     ed0:	af ab       	std	Y+55, r26	; 0x37
     ed2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ed4:	6d a9       	ldd	r22, Y+53	; 0x35
     ed6:	7e a9       	ldd	r23, Y+54	; 0x36
     ed8:	8f a9       	ldd	r24, Y+55	; 0x37
     eda:	98 ad       	ldd	r25, Y+56	; 0x38
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	46 e9       	ldi	r20, 0x96	; 150
     ee2:	53 e4       	ldi	r21, 0x43	; 67
     ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee8:	dc 01       	movw	r26, r24
     eea:	cb 01       	movw	r24, r22
     eec:	89 ab       	std	Y+49, r24	; 0x31
     eee:	9a ab       	std	Y+50, r25	; 0x32
     ef0:	ab ab       	std	Y+51, r26	; 0x33
     ef2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     ef4:	69 a9       	ldd	r22, Y+49	; 0x31
     ef6:	7a a9       	ldd	r23, Y+50	; 0x32
     ef8:	8b a9       	ldd	r24, Y+51	; 0x33
     efa:	9c a9       	ldd	r25, Y+52	; 0x34
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	40 e8       	ldi	r20, 0x80	; 128
     f02:	5f e3       	ldi	r21, 0x3F	; 63
     f04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f08:	88 23       	and	r24, r24
     f0a:	2c f4       	brge	.+10     	; 0xf16 <main+0x334>
		__ticks = 1;
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	98 ab       	std	Y+48, r25	; 0x30
     f12:	8f a7       	std	Y+47, r24	; 0x2f
     f14:	3f c0       	rjmp	.+126    	; 0xf94 <main+0x3b2>
	else if (__tmp > 65535)
     f16:	69 a9       	ldd	r22, Y+49	; 0x31
     f18:	7a a9       	ldd	r23, Y+50	; 0x32
     f1a:	8b a9       	ldd	r24, Y+51	; 0x33
     f1c:	9c a9       	ldd	r25, Y+52	; 0x34
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	3f ef       	ldi	r19, 0xFF	; 255
     f22:	4f e7       	ldi	r20, 0x7F	; 127
     f24:	57 e4       	ldi	r21, 0x47	; 71
     f26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f2a:	18 16       	cp	r1, r24
     f2c:	4c f5       	brge	.+82     	; 0xf80 <main+0x39e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f2e:	6d a9       	ldd	r22, Y+53	; 0x35
     f30:	7e a9       	ldd	r23, Y+54	; 0x36
     f32:	8f a9       	ldd	r24, Y+55	; 0x37
     f34:	98 ad       	ldd	r25, Y+56	; 0x38
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	40 e2       	ldi	r20, 0x20	; 32
     f3c:	51 e4       	ldi	r21, 0x41	; 65
     f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f42:	dc 01       	movw	r26, r24
     f44:	cb 01       	movw	r24, r22
     f46:	bc 01       	movw	r22, r24
     f48:	cd 01       	movw	r24, r26
     f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f4e:	dc 01       	movw	r26, r24
     f50:	cb 01       	movw	r24, r22
     f52:	98 ab       	std	Y+48, r25	; 0x30
     f54:	8f a7       	std	Y+47, r24	; 0x2f
     f56:	0f c0       	rjmp	.+30     	; 0xf76 <main+0x394>
     f58:	8e e1       	ldi	r24, 0x1E	; 30
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	9e a7       	std	Y+46, r25	; 0x2e
     f5e:	8d a7       	std	Y+45, r24	; 0x2d
     f60:	8d a5       	ldd	r24, Y+45	; 0x2d
     f62:	9e a5       	ldd	r25, Y+46	; 0x2e
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	f1 f7       	brne	.-4      	; 0xf64 <main+0x382>
     f68:	9e a7       	std	Y+46, r25	; 0x2e
     f6a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f6c:	8f a5       	ldd	r24, Y+47	; 0x2f
     f6e:	98 a9       	ldd	r25, Y+48	; 0x30
     f70:	01 97       	sbiw	r24, 0x01	; 1
     f72:	98 ab       	std	Y+48, r25	; 0x30
     f74:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f76:	8f a5       	ldd	r24, Y+47	; 0x2f
     f78:	98 a9       	ldd	r25, Y+48	; 0x30
     f7a:	00 97       	sbiw	r24, 0x00	; 0
     f7c:	69 f7       	brne	.-38     	; 0xf58 <main+0x376>
     f7e:	14 c0       	rjmp	.+40     	; 0xfa8 <main+0x3c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f80:	69 a9       	ldd	r22, Y+49	; 0x31
     f82:	7a a9       	ldd	r23, Y+50	; 0x32
     f84:	8b a9       	ldd	r24, Y+51	; 0x33
     f86:	9c a9       	ldd	r25, Y+52	; 0x34
     f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f8c:	dc 01       	movw	r26, r24
     f8e:	cb 01       	movw	r24, r22
     f90:	98 ab       	std	Y+48, r25	; 0x30
     f92:	8f a7       	std	Y+47, r24	; 0x2f
     f94:	8f a5       	ldd	r24, Y+47	; 0x2f
     f96:	98 a9       	ldd	r25, Y+48	; 0x30
     f98:	9c a7       	std	Y+44, r25	; 0x2c
     f9a:	8b a7       	std	Y+43, r24	; 0x2b
     f9c:	8b a5       	ldd	r24, Y+43	; 0x2b
     f9e:	9c a5       	ldd	r25, Y+44	; 0x2c
     fa0:	01 97       	sbiw	r24, 0x01	; 1
     fa2:	f1 f7       	brne	.-4      	; 0xfa0 <main+0x3be>
     fa4:	9c a7       	std	Y+44, r25	; 0x2c
     fa6:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(100) ;
    vid_UART_vid_SendChar(u8Lumen);
     fa8:	80 91 6a 00 	lds	r24, 0x006A
     fac:	88 2f       	mov	r24, r24
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <vid_UART_vid_SendChar>
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	a8 ec       	ldi	r26, 0xC8	; 200
     fba:	b2 e4       	ldi	r27, 0x42	; 66
     fbc:	8f a3       	std	Y+39, r24	; 0x27
     fbe:	98 a7       	std	Y+40, r25	; 0x28
     fc0:	a9 a7       	std	Y+41, r26	; 0x29
     fc2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fc4:	6f a1       	ldd	r22, Y+39	; 0x27
     fc6:	78 a5       	ldd	r23, Y+40	; 0x28
     fc8:	89 a5       	ldd	r24, Y+41	; 0x29
     fca:	9a a5       	ldd	r25, Y+42	; 0x2a
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	46 e9       	ldi	r20, 0x96	; 150
     fd2:	53 e4       	ldi	r21, 0x43	; 67
     fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd8:	dc 01       	movw	r26, r24
     fda:	cb 01       	movw	r24, r22
     fdc:	8b a3       	std	Y+35, r24	; 0x23
     fde:	9c a3       	std	Y+36, r25	; 0x24
     fe0:	ad a3       	std	Y+37, r26	; 0x25
     fe2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     fe4:	6b a1       	ldd	r22, Y+35	; 0x23
     fe6:	7c a1       	ldd	r23, Y+36	; 0x24
     fe8:	8d a1       	ldd	r24, Y+37	; 0x25
     fea:	9e a1       	ldd	r25, Y+38	; 0x26
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	40 e8       	ldi	r20, 0x80	; 128
     ff2:	5f e3       	ldi	r21, 0x3F	; 63
     ff4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ff8:	88 23       	and	r24, r24
     ffa:	2c f4       	brge	.+10     	; 0x1006 <main+0x424>
		__ticks = 1;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	9a a3       	std	Y+34, r25	; 0x22
    1002:	89 a3       	std	Y+33, r24	; 0x21
    1004:	3f c0       	rjmp	.+126    	; 0x1084 <main+0x4a2>
	else if (__tmp > 65535)
    1006:	6b a1       	ldd	r22, Y+35	; 0x23
    1008:	7c a1       	ldd	r23, Y+36	; 0x24
    100a:	8d a1       	ldd	r24, Y+37	; 0x25
    100c:	9e a1       	ldd	r25, Y+38	; 0x26
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	3f ef       	ldi	r19, 0xFF	; 255
    1012:	4f e7       	ldi	r20, 0x7F	; 127
    1014:	57 e4       	ldi	r21, 0x47	; 71
    1016:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    101a:	18 16       	cp	r1, r24
    101c:	4c f5       	brge	.+82     	; 0x1070 <main+0x48e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    101e:	6f a1       	ldd	r22, Y+39	; 0x27
    1020:	78 a5       	ldd	r23, Y+40	; 0x28
    1022:	89 a5       	ldd	r24, Y+41	; 0x29
    1024:	9a a5       	ldd	r25, Y+42	; 0x2a
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	40 e2       	ldi	r20, 0x20	; 32
    102c:	51 e4       	ldi	r21, 0x41	; 65
    102e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1032:	dc 01       	movw	r26, r24
    1034:	cb 01       	movw	r24, r22
    1036:	bc 01       	movw	r22, r24
    1038:	cd 01       	movw	r24, r26
    103a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	9a a3       	std	Y+34, r25	; 0x22
    1044:	89 a3       	std	Y+33, r24	; 0x21
    1046:	0f c0       	rjmp	.+30     	; 0x1066 <main+0x484>
    1048:	8e e1       	ldi	r24, 0x1E	; 30
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	98 a3       	std	Y+32, r25	; 0x20
    104e:	8f 8f       	std	Y+31, r24	; 0x1f
    1050:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1052:	98 a1       	ldd	r25, Y+32	; 0x20
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	f1 f7       	brne	.-4      	; 0x1054 <main+0x472>
    1058:	98 a3       	std	Y+32, r25	; 0x20
    105a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    105c:	89 a1       	ldd	r24, Y+33	; 0x21
    105e:	9a a1       	ldd	r25, Y+34	; 0x22
    1060:	01 97       	sbiw	r24, 0x01	; 1
    1062:	9a a3       	std	Y+34, r25	; 0x22
    1064:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1066:	89 a1       	ldd	r24, Y+33	; 0x21
    1068:	9a a1       	ldd	r25, Y+34	; 0x22
    106a:	00 97       	sbiw	r24, 0x00	; 0
    106c:	69 f7       	brne	.-38     	; 0x1048 <main+0x466>
    106e:	14 c0       	rjmp	.+40     	; 0x1098 <main+0x4b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1070:	6b a1       	ldd	r22, Y+35	; 0x23
    1072:	7c a1       	ldd	r23, Y+36	; 0x24
    1074:	8d a1       	ldd	r24, Y+37	; 0x25
    1076:	9e a1       	ldd	r25, Y+38	; 0x26
    1078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	9a a3       	std	Y+34, r25	; 0x22
    1082:	89 a3       	std	Y+33, r24	; 0x21
    1084:	89 a1       	ldd	r24, Y+33	; 0x21
    1086:	9a a1       	ldd	r25, Y+34	; 0x22
    1088:	9e 8f       	std	Y+30, r25	; 0x1e
    108a:	8d 8f       	std	Y+29, r24	; 0x1d
    108c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    108e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1090:	01 97       	sbiw	r24, 0x01	; 1
    1092:	f1 f7       	brne	.-4      	; 0x1090 <main+0x4ae>
    1094:	9e 8f       	std	Y+30, r25	; 0x1e
    1096:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(100) ;


   vid_UART_vid_SendChar('c') ;
    1098:	83 e6       	ldi	r24, 0x63	; 99
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <vid_UART_vid_SendChar>
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	a8 ec       	ldi	r26, 0xC8	; 200
    10a6:	b2 e4       	ldi	r27, 0x42	; 66
    10a8:	89 8f       	std	Y+25, r24	; 0x19
    10aa:	9a 8f       	std	Y+26, r25	; 0x1a
    10ac:	ab 8f       	std	Y+27, r26	; 0x1b
    10ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10b0:	69 8d       	ldd	r22, Y+25	; 0x19
    10b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10b8:	20 e0       	ldi	r18, 0x00	; 0
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	46 e9       	ldi	r20, 0x96	; 150
    10be:	53 e4       	ldi	r21, 0x43	; 67
    10c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c4:	dc 01       	movw	r26, r24
    10c6:	cb 01       	movw	r24, r22
    10c8:	8d 8b       	std	Y+21, r24	; 0x15
    10ca:	9e 8b       	std	Y+22, r25	; 0x16
    10cc:	af 8b       	std	Y+23, r26	; 0x17
    10ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    10d0:	6d 89       	ldd	r22, Y+21	; 0x15
    10d2:	7e 89       	ldd	r23, Y+22	; 0x16
    10d4:	8f 89       	ldd	r24, Y+23	; 0x17
    10d6:	98 8d       	ldd	r25, Y+24	; 0x18
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	40 e8       	ldi	r20, 0x80	; 128
    10de:	5f e3       	ldi	r21, 0x3F	; 63
    10e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10e4:	88 23       	and	r24, r24
    10e6:	2c f4       	brge	.+10     	; 0x10f2 <main+0x510>
		__ticks = 1;
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	9c 8b       	std	Y+20, r25	; 0x14
    10ee:	8b 8b       	std	Y+19, r24	; 0x13
    10f0:	3f c0       	rjmp	.+126    	; 0x1170 <main+0x58e>
	else if (__tmp > 65535)
    10f2:	6d 89       	ldd	r22, Y+21	; 0x15
    10f4:	7e 89       	ldd	r23, Y+22	; 0x16
    10f6:	8f 89       	ldd	r24, Y+23	; 0x17
    10f8:	98 8d       	ldd	r25, Y+24	; 0x18
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	3f ef       	ldi	r19, 0xFF	; 255
    10fe:	4f e7       	ldi	r20, 0x7F	; 127
    1100:	57 e4       	ldi	r21, 0x47	; 71
    1102:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1106:	18 16       	cp	r1, r24
    1108:	4c f5       	brge	.+82     	; 0x115c <main+0x57a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    110a:	69 8d       	ldd	r22, Y+25	; 0x19
    110c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    110e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1110:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	40 e2       	ldi	r20, 0x20	; 32
    1118:	51 e4       	ldi	r21, 0x41	; 65
    111a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    111e:	dc 01       	movw	r26, r24
    1120:	cb 01       	movw	r24, r22
    1122:	bc 01       	movw	r22, r24
    1124:	cd 01       	movw	r24, r26
    1126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	9c 8b       	std	Y+20, r25	; 0x14
    1130:	8b 8b       	std	Y+19, r24	; 0x13
    1132:	0f c0       	rjmp	.+30     	; 0x1152 <main+0x570>
    1134:	8e e1       	ldi	r24, 0x1E	; 30
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	9a 8b       	std	Y+18, r25	; 0x12
    113a:	89 8b       	std	Y+17, r24	; 0x11
    113c:	89 89       	ldd	r24, Y+17	; 0x11
    113e:	9a 89       	ldd	r25, Y+18	; 0x12
    1140:	01 97       	sbiw	r24, 0x01	; 1
    1142:	f1 f7       	brne	.-4      	; 0x1140 <main+0x55e>
    1144:	9a 8b       	std	Y+18, r25	; 0x12
    1146:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1148:	8b 89       	ldd	r24, Y+19	; 0x13
    114a:	9c 89       	ldd	r25, Y+20	; 0x14
    114c:	01 97       	sbiw	r24, 0x01	; 1
    114e:	9c 8b       	std	Y+20, r25	; 0x14
    1150:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1152:	8b 89       	ldd	r24, Y+19	; 0x13
    1154:	9c 89       	ldd	r25, Y+20	; 0x14
    1156:	00 97       	sbiw	r24, 0x00	; 0
    1158:	69 f7       	brne	.-38     	; 0x1134 <main+0x552>
    115a:	14 c0       	rjmp	.+40     	; 0x1184 <main+0x5a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    115c:	6d 89       	ldd	r22, Y+21	; 0x15
    115e:	7e 89       	ldd	r23, Y+22	; 0x16
    1160:	8f 89       	ldd	r24, Y+23	; 0x17
    1162:	98 8d       	ldd	r25, Y+24	; 0x18
    1164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	9c 8b       	std	Y+20, r25	; 0x14
    116e:	8b 8b       	std	Y+19, r24	; 0x13
    1170:	8b 89       	ldd	r24, Y+19	; 0x13
    1172:	9c 89       	ldd	r25, Y+20	; 0x14
    1174:	98 8b       	std	Y+16, r25	; 0x10
    1176:	8f 87       	std	Y+15, r24	; 0x0f
    1178:	8f 85       	ldd	r24, Y+15	; 0x0f
    117a:	98 89       	ldd	r25, Y+16	; 0x10
    117c:	01 97       	sbiw	r24, 0x01	; 1
    117e:	f1 f7       	brne	.-4      	; 0x117c <main+0x59a>
    1180:	98 8b       	std	Y+16, r25	; 0x10
    1182:	8f 87       	std	Y+15, r24	; 0x0f
   _delay_ms(100) ;
   vid_UART_vid_SendChar(u8PeopleInside);
    1184:	80 91 6d 00 	lds	r24, 0x006D
    1188:	88 2f       	mov	r24, r24
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <vid_UART_vid_SendChar>
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	a8 ec       	ldi	r26, 0xC8	; 200
    1196:	b2 e4       	ldi	r27, 0x42	; 66
    1198:	8b 87       	std	Y+11, r24	; 0x0b
    119a:	9c 87       	std	Y+12, r25	; 0x0c
    119c:	ad 87       	std	Y+13, r26	; 0x0d
    119e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	46 e9       	ldi	r20, 0x96	; 150
    11ae:	53 e4       	ldi	r21, 0x43	; 67
    11b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	8f 83       	std	Y+7, r24	; 0x07
    11ba:	98 87       	std	Y+8, r25	; 0x08
    11bc:	a9 87       	std	Y+9, r26	; 0x09
    11be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11c0:	6f 81       	ldd	r22, Y+7	; 0x07
    11c2:	78 85       	ldd	r23, Y+8	; 0x08
    11c4:	89 85       	ldd	r24, Y+9	; 0x09
    11c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	40 e8       	ldi	r20, 0x80	; 128
    11ce:	5f e3       	ldi	r21, 0x3F	; 63
    11d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11d4:	88 23       	and	r24, r24
    11d6:	2c f4       	brge	.+10     	; 0x11e2 <main+0x600>
		__ticks = 1;
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	9e 83       	std	Y+6, r25	; 0x06
    11de:	8d 83       	std	Y+5, r24	; 0x05
    11e0:	3f c0       	rjmp	.+126    	; 0x1260 <main+0x67e>
	else if (__tmp > 65535)
    11e2:	6f 81       	ldd	r22, Y+7	; 0x07
    11e4:	78 85       	ldd	r23, Y+8	; 0x08
    11e6:	89 85       	ldd	r24, Y+9	; 0x09
    11e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	3f ef       	ldi	r19, 0xFF	; 255
    11ee:	4f e7       	ldi	r20, 0x7F	; 127
    11f0:	57 e4       	ldi	r21, 0x47	; 71
    11f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11f6:	18 16       	cp	r1, r24
    11f8:	4c f5       	brge	.+82     	; 0x124c <main+0x66a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    11fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    11fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1200:	9e 85       	ldd	r25, Y+14	; 0x0e
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	40 e2       	ldi	r20, 0x20	; 32
    1208:	51 e4       	ldi	r21, 0x41	; 65
    120a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	bc 01       	movw	r22, r24
    1214:	cd 01       	movw	r24, r26
    1216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    121a:	dc 01       	movw	r26, r24
    121c:	cb 01       	movw	r24, r22
    121e:	9e 83       	std	Y+6, r25	; 0x06
    1220:	8d 83       	std	Y+5, r24	; 0x05
    1222:	0f c0       	rjmp	.+30     	; 0x1242 <main+0x660>
    1224:	8e e1       	ldi	r24, 0x1E	; 30
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	9c 83       	std	Y+4, r25	; 0x04
    122a:	8b 83       	std	Y+3, r24	; 0x03
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	9c 81       	ldd	r25, Y+4	; 0x04
    1230:	01 97       	sbiw	r24, 0x01	; 1
    1232:	f1 f7       	brne	.-4      	; 0x1230 <main+0x64e>
    1234:	9c 83       	std	Y+4, r25	; 0x04
    1236:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1238:	8d 81       	ldd	r24, Y+5	; 0x05
    123a:	9e 81       	ldd	r25, Y+6	; 0x06
    123c:	01 97       	sbiw	r24, 0x01	; 1
    123e:	9e 83       	std	Y+6, r25	; 0x06
    1240:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1242:	8d 81       	ldd	r24, Y+5	; 0x05
    1244:	9e 81       	ldd	r25, Y+6	; 0x06
    1246:	00 97       	sbiw	r24, 0x00	; 0
    1248:	69 f7       	brne	.-38     	; 0x1224 <main+0x642>
    124a:	14 c0       	rjmp	.+40     	; 0x1274 <main+0x692>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    124c:	6f 81       	ldd	r22, Y+7	; 0x07
    124e:	78 85       	ldd	r23, Y+8	; 0x08
    1250:	89 85       	ldd	r24, Y+9	; 0x09
    1252:	9a 85       	ldd	r25, Y+10	; 0x0a
    1254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	9e 83       	std	Y+6, r25	; 0x06
    125e:	8d 83       	std	Y+5, r24	; 0x05
    1260:	8d 81       	ldd	r24, Y+5	; 0x05
    1262:	9e 81       	ldd	r25, Y+6	; 0x06
    1264:	9a 83       	std	Y+2, r25	; 0x02
    1266:	89 83       	std	Y+1, r24	; 0x01
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	9a 81       	ldd	r25, Y+2	; 0x02
    126c:	01 97       	sbiw	r24, 0x01	; 1
    126e:	f1 f7       	brne	.-4      	; 0x126c <main+0x68a>
    1270:	9a 83       	std	Y+2, r25	; 0x02
    1272:	89 83       	std	Y+1, r24	; 0x01
   _delay_ms(100) ;




    asm ("SEI") ;
    1274:	78 94       	sei
    1276:	d0 cc       	rjmp	.-1632   	; 0xc18 <main+0x36>

00001278 <DIO_SetPinValue>:
#include "DIO_reg.h"


/* IO Pins */
void DIO_SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy)
{
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	27 97       	sbiw	r28, 0x07	; 7
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	89 83       	std	Y+1, r24	; 0x01
    128e:	6a 83       	std	Y+2, r22	; 0x02
    1290:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD_DIO) && (u8PinIdCopy <= PIN7))
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	84 30       	cpi	r24, 0x04	; 4
    1296:	08 f0       	brcs	.+2      	; 0x129a <DIO_SetPinValue+0x22>
    1298:	ee c0       	rjmp	.+476    	; 0x1476 <DIO_SetPinValue+0x1fe>
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	88 30       	cpi	r24, 0x08	; 8
    129e:	08 f0       	brcs	.+2      	; 0x12a2 <DIO_SetPinValue+0x2a>
    12a0:	ea c0       	rjmp	.+468    	; 0x1476 <DIO_SetPinValue+0x1fe>
	{
		if (u8PinValCopy == HIGH)
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	09 f0       	breq	.+2      	; 0x12aa <DIO_SetPinValue+0x32>
    12a8:	6f c0       	rjmp	.+222    	; 0x1388 <DIO_SetPinValue+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	3f 83       	std	Y+7, r19	; 0x07
    12b2:	2e 83       	std	Y+6, r18	; 0x06
    12b4:	8e 81       	ldd	r24, Y+6	; 0x06
    12b6:	9f 81       	ldd	r25, Y+7	; 0x07
    12b8:	81 30       	cpi	r24, 0x01	; 1
    12ba:	91 05       	cpc	r25, r1
    12bc:	49 f1       	breq	.+82     	; 0x1310 <DIO_SetPinValue+0x98>
    12be:	2e 81       	ldd	r18, Y+6	; 0x06
    12c0:	3f 81       	ldd	r19, Y+7	; 0x07
    12c2:	22 30       	cpi	r18, 0x02	; 2
    12c4:	31 05       	cpc	r19, r1
    12c6:	2c f4       	brge	.+10     	; 0x12d2 <DIO_SetPinValue+0x5a>
    12c8:	8e 81       	ldd	r24, Y+6	; 0x06
    12ca:	9f 81       	ldd	r25, Y+7	; 0x07
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	61 f0       	breq	.+24     	; 0x12e8 <DIO_SetPinValue+0x70>
    12d0:	d2 c0       	rjmp	.+420    	; 0x1476 <DIO_SetPinValue+0x1fe>
    12d2:	2e 81       	ldd	r18, Y+6	; 0x06
    12d4:	3f 81       	ldd	r19, Y+7	; 0x07
    12d6:	22 30       	cpi	r18, 0x02	; 2
    12d8:	31 05       	cpc	r19, r1
    12da:	71 f1       	breq	.+92     	; 0x1338 <DIO_SetPinValue+0xc0>
    12dc:	8e 81       	ldd	r24, Y+6	; 0x06
    12de:	9f 81       	ldd	r25, Y+7	; 0x07
    12e0:	83 30       	cpi	r24, 0x03	; 3
    12e2:	91 05       	cpc	r25, r1
    12e4:	e9 f1       	breq	.+122    	; 0x1360 <DIO_SetPinValue+0xe8>
    12e6:	c7 c0       	rjmp	.+398    	; 0x1476 <DIO_SetPinValue+0x1fe>
			{
				case PORTA_DIO: SET_BIT(PORTA_Register,u8PinIdCopy); break;
    12e8:	ab e3       	ldi	r26, 0x3B	; 59
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	eb e3       	ldi	r30, 0x3B	; 59
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	48 2f       	mov	r20, r24
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	02 2e       	mov	r0, r18
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <DIO_SetPinValue+0x8e>
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	0a 94       	dec	r0
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <DIO_SetPinValue+0x8a>
    130a:	84 2b       	or	r24, r20
    130c:	8c 93       	st	X, r24
    130e:	b3 c0       	rjmp	.+358    	; 0x1476 <DIO_SetPinValue+0x1fe>
				case PORTB_DIO: SET_BIT(PORTB_Register,u8PinIdCopy); break;
    1310:	a8 e3       	ldi	r26, 0x38	; 56
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e8 e3       	ldi	r30, 0x38	; 56
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <DIO_SetPinValue+0xb6>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <DIO_SetPinValue+0xb2>
    1332:	84 2b       	or	r24, r20
    1334:	8c 93       	st	X, r24
    1336:	9f c0       	rjmp	.+318    	; 0x1476 <DIO_SetPinValue+0x1fe>
				case PORTC_DIO: SET_BIT(PORTC_Register,u8PinIdCopy); break;
    1338:	a5 e3       	ldi	r26, 0x35	; 53
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e5 e3       	ldi	r30, 0x35	; 53
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 2e       	mov	r0, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <DIO_SetPinValue+0xde>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	0a 94       	dec	r0
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <DIO_SetPinValue+0xda>
    135a:	84 2b       	or	r24, r20
    135c:	8c 93       	st	X, r24
    135e:	8b c0       	rjmp	.+278    	; 0x1476 <DIO_SetPinValue+0x1fe>
				case PORTD_DIO: SET_BIT(PORTD_Register,u8PinIdCopy); break;
    1360:	a2 e3       	ldi	r26, 0x32	; 50
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	e2 e3       	ldi	r30, 0x32	; 50
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	48 2f       	mov	r20, r24
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	02 2e       	mov	r0, r18
    1378:	02 c0       	rjmp	.+4      	; 0x137e <DIO_SetPinValue+0x106>
    137a:	88 0f       	add	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	0a 94       	dec	r0
    1380:	e2 f7       	brpl	.-8      	; 0x137a <DIO_SetPinValue+0x102>
    1382:	84 2b       	or	r24, r20
    1384:	8c 93       	st	X, r24
    1386:	77 c0       	rjmp	.+238    	; 0x1476 <DIO_SetPinValue+0x1fe>
			}
		
		}
		
		else if (u8PinValCopy == LOW)
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	88 23       	and	r24, r24
    138c:	09 f0       	breq	.+2      	; 0x1390 <DIO_SetPinValue+0x118>
    138e:	73 c0       	rjmp	.+230    	; 0x1476 <DIO_SetPinValue+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
    1390:	89 81       	ldd	r24, Y+1	; 0x01
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	3d 83       	std	Y+5, r19	; 0x05
    1398:	2c 83       	std	Y+4, r18	; 0x04
    139a:	8c 81       	ldd	r24, Y+4	; 0x04
    139c:	9d 81       	ldd	r25, Y+5	; 0x05
    139e:	81 30       	cpi	r24, 0x01	; 1
    13a0:	91 05       	cpc	r25, r1
    13a2:	59 f1       	breq	.+86     	; 0x13fa <DIO_SetPinValue+0x182>
    13a4:	2c 81       	ldd	r18, Y+4	; 0x04
    13a6:	3d 81       	ldd	r19, Y+5	; 0x05
    13a8:	22 30       	cpi	r18, 0x02	; 2
    13aa:	31 05       	cpc	r19, r1
    13ac:	2c f4       	brge	.+10     	; 0x13b8 <DIO_SetPinValue+0x140>
    13ae:	8c 81       	ldd	r24, Y+4	; 0x04
    13b0:	9d 81       	ldd	r25, Y+5	; 0x05
    13b2:	00 97       	sbiw	r24, 0x00	; 0
    13b4:	69 f0       	breq	.+26     	; 0x13d0 <DIO_SetPinValue+0x158>
    13b6:	5f c0       	rjmp	.+190    	; 0x1476 <DIO_SetPinValue+0x1fe>
    13b8:	2c 81       	ldd	r18, Y+4	; 0x04
    13ba:	3d 81       	ldd	r19, Y+5	; 0x05
    13bc:	22 30       	cpi	r18, 0x02	; 2
    13be:	31 05       	cpc	r19, r1
    13c0:	89 f1       	breq	.+98     	; 0x1424 <DIO_SetPinValue+0x1ac>
    13c2:	8c 81       	ldd	r24, Y+4	; 0x04
    13c4:	9d 81       	ldd	r25, Y+5	; 0x05
    13c6:	83 30       	cpi	r24, 0x03	; 3
    13c8:	91 05       	cpc	r25, r1
    13ca:	09 f4       	brne	.+2      	; 0x13ce <DIO_SetPinValue+0x156>
    13cc:	40 c0       	rjmp	.+128    	; 0x144e <DIO_SetPinValue+0x1d6>
    13ce:	53 c0       	rjmp	.+166    	; 0x1476 <DIO_SetPinValue+0x1fe>
			{
				case PORTA_DIO: CLR_BIT(PORTA_Register,u8PinIdCopy); break;
    13d0:	ab e3       	ldi	r26, 0x3B	; 59
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	eb e3       	ldi	r30, 0x3B	; 59
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	48 2f       	mov	r20, r24
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	02 2e       	mov	r0, r18
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <DIO_SetPinValue+0x176>
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	0a 94       	dec	r0
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <DIO_SetPinValue+0x172>
    13f2:	80 95       	com	r24
    13f4:	84 23       	and	r24, r20
    13f6:	8c 93       	st	X, r24
    13f8:	3e c0       	rjmp	.+124    	; 0x1476 <DIO_SetPinValue+0x1fe>
				case PORTB_DIO: CLR_BIT(PORTB_Register,u8PinIdCopy); break;
    13fa:	a8 e3       	ldi	r26, 0x38	; 56
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e8 e3       	ldi	r30, 0x38	; 56
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	48 2f       	mov	r20, r24
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	02 2e       	mov	r0, r18
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <DIO_SetPinValue+0x1a0>
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	0a 94       	dec	r0
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <DIO_SetPinValue+0x19c>
    141c:	80 95       	com	r24
    141e:	84 23       	and	r24, r20
    1420:	8c 93       	st	X, r24
    1422:	29 c0       	rjmp	.+82     	; 0x1476 <DIO_SetPinValue+0x1fe>
				case PORTC_DIO: CLR_BIT(PORTC_Register,u8PinIdCopy); break;
    1424:	a5 e3       	ldi	r26, 0x35	; 53
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	e5 e3       	ldi	r30, 0x35	; 53
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	48 2f       	mov	r20, r24
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	02 2e       	mov	r0, r18
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <DIO_SetPinValue+0x1ca>
    143e:	88 0f       	add	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	0a 94       	dec	r0
    1444:	e2 f7       	brpl	.-8      	; 0x143e <DIO_SetPinValue+0x1c6>
    1446:	80 95       	com	r24
    1448:	84 23       	and	r24, r20
    144a:	8c 93       	st	X, r24
    144c:	14 c0       	rjmp	.+40     	; 0x1476 <DIO_SetPinValue+0x1fe>
				case PORTD_DIO: CLR_BIT(PORTD_Register,u8PinIdCopy); break;
    144e:	a2 e3       	ldi	r26, 0x32	; 50
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	e2 e3       	ldi	r30, 0x32	; 50
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	48 2f       	mov	r20, r24
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	02 2e       	mov	r0, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <DIO_SetPinValue+0x1f4>
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	0a 94       	dec	r0
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <DIO_SetPinValue+0x1f0>
    1470:	80 95       	com	r24
    1472:	84 23       	and	r24, r20
    1474:	8c 93       	st	X, r24
	
	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
    1476:	27 96       	adiw	r28, 0x07	; 7
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	f8 94       	cli
    147c:	de bf       	out	0x3e, r29	; 62
    147e:	0f be       	out	0x3f, r0	; 63
    1480:	cd bf       	out	0x3d, r28	; 61
    1482:	cf 91       	pop	r28
    1484:	df 91       	pop	r29
    1486:	08 95       	ret

00001488 <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy)
{
    1488:	df 93       	push	r29
    148a:	cf 93       	push	r28
    148c:	00 d0       	rcall	.+0      	; 0x148e <DIO_GetPinValue+0x6>
    148e:	00 d0       	rcall	.+0      	; 0x1490 <DIO_GetPinValue+0x8>
    1490:	0f 92       	push	r0
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	8a 83       	std	Y+2, r24	; 0x02
    1498:	6b 83       	std	Y+3, r22	; 0x03
	/* Define Local Variable to get the BIT Value */
	u8 u8ResultLocal;
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD_DIO) && (u8PinIdCopy <= PIN7))
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	84 30       	cpi	r24, 0x04	; 4
    149e:	08 f0       	brcs	.+2      	; 0x14a2 <DIO_GetPinValue+0x1a>
    14a0:	6c c0       	rjmp	.+216    	; 0x157a <DIO_GetPinValue+0xf2>
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	88 30       	cpi	r24, 0x08	; 8
    14a6:	08 f0       	brcs	.+2      	; 0x14aa <DIO_GetPinValue+0x22>
    14a8:	68 c0       	rjmp	.+208    	; 0x157a <DIO_GetPinValue+0xf2>
	{
		/* Check on the Required PORT Number */
		switch (u8PortIdCopy)
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	3d 83       	std	Y+5, r19	; 0x05
    14b2:	2c 83       	std	Y+4, r18	; 0x04
    14b4:	4c 81       	ldd	r20, Y+4	; 0x04
    14b6:	5d 81       	ldd	r21, Y+5	; 0x05
    14b8:	41 30       	cpi	r20, 0x01	; 1
    14ba:	51 05       	cpc	r21, r1
    14bc:	41 f1       	breq	.+80     	; 0x150e <DIO_GetPinValue+0x86>
    14be:	8c 81       	ldd	r24, Y+4	; 0x04
    14c0:	9d 81       	ldd	r25, Y+5	; 0x05
    14c2:	82 30       	cpi	r24, 0x02	; 2
    14c4:	91 05       	cpc	r25, r1
    14c6:	34 f4       	brge	.+12     	; 0x14d4 <DIO_GetPinValue+0x4c>
    14c8:	2c 81       	ldd	r18, Y+4	; 0x04
    14ca:	3d 81       	ldd	r19, Y+5	; 0x05
    14cc:	21 15       	cp	r18, r1
    14ce:	31 05       	cpc	r19, r1
    14d0:	61 f0       	breq	.+24     	; 0x14ea <DIO_GetPinValue+0x62>
    14d2:	55 c0       	rjmp	.+170    	; 0x157e <DIO_GetPinValue+0xf6>
    14d4:	4c 81       	ldd	r20, Y+4	; 0x04
    14d6:	5d 81       	ldd	r21, Y+5	; 0x05
    14d8:	42 30       	cpi	r20, 0x02	; 2
    14da:	51 05       	cpc	r21, r1
    14dc:	51 f1       	breq	.+84     	; 0x1532 <DIO_GetPinValue+0xaa>
    14de:	8c 81       	ldd	r24, Y+4	; 0x04
    14e0:	9d 81       	ldd	r25, Y+5	; 0x05
    14e2:	83 30       	cpi	r24, 0x03	; 3
    14e4:	91 05       	cpc	r25, r1
    14e6:	b9 f1       	breq	.+110    	; 0x1556 <DIO_GetPinValue+0xce>
    14e8:	4a c0       	rjmp	.+148    	; 0x157e <DIO_GetPinValue+0xf6>
		{
			case PORTA_DIO: u8ResultLocal= GET_BIT(PINA_Register,u8PinIdCopy); break;
    14ea:	e9 e3       	ldi	r30, 0x39	; 57
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	28 2f       	mov	r18, r24
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	88 2f       	mov	r24, r24
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	a9 01       	movw	r20, r18
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <DIO_GetPinValue+0x7a>
    14fe:	55 95       	asr	r21
    1500:	47 95       	ror	r20
    1502:	8a 95       	dec	r24
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <DIO_GetPinValue+0x76>
    1506:	ca 01       	movw	r24, r20
    1508:	81 70       	andi	r24, 0x01	; 1
    150a:	89 83       	std	Y+1, r24	; 0x01
    150c:	38 c0       	rjmp	.+112    	; 0x157e <DIO_GetPinValue+0xf6>
			case PORTB_DIO: u8ResultLocal= GET_BIT(PINB_Register,u8PinIdCopy); break;
    150e:	e6 e3       	ldi	r30, 0x36	; 54
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	88 2f       	mov	r24, r24
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	a9 01       	movw	r20, r18
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <DIO_GetPinValue+0x9e>
    1522:	55 95       	asr	r21
    1524:	47 95       	ror	r20
    1526:	8a 95       	dec	r24
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <DIO_GetPinValue+0x9a>
    152a:	ca 01       	movw	r24, r20
    152c:	81 70       	andi	r24, 0x01	; 1
    152e:	89 83       	std	Y+1, r24	; 0x01
    1530:	26 c0       	rjmp	.+76     	; 0x157e <DIO_GetPinValue+0xf6>
			case PORTC_DIO: u8ResultLocal= GET_BIT(PINC_Register,u8PinIdCopy); break;
    1532:	e3 e3       	ldi	r30, 0x33	; 51
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	88 2f       	mov	r24, r24
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	a9 01       	movw	r20, r18
    1544:	02 c0       	rjmp	.+4      	; 0x154a <DIO_GetPinValue+0xc2>
    1546:	55 95       	asr	r21
    1548:	47 95       	ror	r20
    154a:	8a 95       	dec	r24
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <DIO_GetPinValue+0xbe>
    154e:	ca 01       	movw	r24, r20
    1550:	81 70       	andi	r24, 0x01	; 1
    1552:	89 83       	std	Y+1, r24	; 0x01
    1554:	14 c0       	rjmp	.+40     	; 0x157e <DIO_GetPinValue+0xf6>
			case PORTD_DIO: u8ResultLocal= GET_BIT(PIND_Register,u8PinIdCopy); break;
    1556:	e0 e3       	ldi	r30, 0x30	; 48
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	88 2f       	mov	r24, r24
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	a9 01       	movw	r20, r18
    1568:	02 c0       	rjmp	.+4      	; 0x156e <DIO_GetPinValue+0xe6>
    156a:	55 95       	asr	r21
    156c:	47 95       	ror	r20
    156e:	8a 95       	dec	r24
    1570:	e2 f7       	brpl	.-8      	; 0x156a <DIO_GetPinValue+0xe2>
    1572:	ca 01       	movw	r24, r20
    1574:	81 70       	andi	r24, 0x01	; 1
    1576:	89 83       	std	Y+1, r24	; 0x01
    1578:	02 c0       	rjmp	.+4      	; 0x157e <DIO_GetPinValue+0xf6>
	}
	
	else
	{
		/* return 0xff in case of error in the Pin ID or PORT ID */
		u8ResultLocal = 0xFF;
    157a:	8f ef       	ldi	r24, 0xFF	; 255
    157c:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return u8ResultLocal;
    157e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <DIO_SetPinDirection>:

void DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	27 97       	sbiw	r28, 0x07	; 7
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	f8 94       	cli
    159e:	de bf       	out	0x3e, r29	; 62
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	cd bf       	out	0x3d, r28	; 61
    15a4:	89 83       	std	Y+1, r24	; 0x01
    15a6:	6a 83       	std	Y+2, r22	; 0x02
    15a8:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD_DIO) && (u8PinIdCopy <= PIN7))
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	84 30       	cpi	r24, 0x04	; 4
    15ae:	08 f0       	brcs	.+2      	; 0x15b2 <DIO_SetPinDirection+0x22>
    15b0:	ee c0       	rjmp	.+476    	; 0x178e <DIO_SetPinDirection+0x1fe>
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	88 30       	cpi	r24, 0x08	; 8
    15b6:	08 f0       	brcs	.+2      	; 0x15ba <DIO_SetPinDirection+0x2a>
    15b8:	ea c0       	rjmp	.+468    	; 0x178e <DIO_SetPinDirection+0x1fe>
	{
		if ( u8PinDirCopy == OUTPUT )
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	81 30       	cpi	r24, 0x01	; 1
    15be:	09 f0       	breq	.+2      	; 0x15c2 <DIO_SetPinDirection+0x32>
    15c0:	6f c0       	rjmp	.+222    	; 0x16a0 <DIO_SetPinDirection+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	3f 83       	std	Y+7, r19	; 0x07
    15ca:	2e 83       	std	Y+6, r18	; 0x06
    15cc:	8e 81       	ldd	r24, Y+6	; 0x06
    15ce:	9f 81       	ldd	r25, Y+7	; 0x07
    15d0:	81 30       	cpi	r24, 0x01	; 1
    15d2:	91 05       	cpc	r25, r1
    15d4:	49 f1       	breq	.+82     	; 0x1628 <DIO_SetPinDirection+0x98>
    15d6:	2e 81       	ldd	r18, Y+6	; 0x06
    15d8:	3f 81       	ldd	r19, Y+7	; 0x07
    15da:	22 30       	cpi	r18, 0x02	; 2
    15dc:	31 05       	cpc	r19, r1
    15de:	2c f4       	brge	.+10     	; 0x15ea <DIO_SetPinDirection+0x5a>
    15e0:	8e 81       	ldd	r24, Y+6	; 0x06
    15e2:	9f 81       	ldd	r25, Y+7	; 0x07
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	61 f0       	breq	.+24     	; 0x1600 <DIO_SetPinDirection+0x70>
    15e8:	d2 c0       	rjmp	.+420    	; 0x178e <DIO_SetPinDirection+0x1fe>
    15ea:	2e 81       	ldd	r18, Y+6	; 0x06
    15ec:	3f 81       	ldd	r19, Y+7	; 0x07
    15ee:	22 30       	cpi	r18, 0x02	; 2
    15f0:	31 05       	cpc	r19, r1
    15f2:	71 f1       	breq	.+92     	; 0x1650 <DIO_SetPinDirection+0xc0>
    15f4:	8e 81       	ldd	r24, Y+6	; 0x06
    15f6:	9f 81       	ldd	r25, Y+7	; 0x07
    15f8:	83 30       	cpi	r24, 0x03	; 3
    15fa:	91 05       	cpc	r25, r1
    15fc:	e9 f1       	breq	.+122    	; 0x1678 <DIO_SetPinDirection+0xe8>
    15fe:	c7 c0       	rjmp	.+398    	; 0x178e <DIO_SetPinDirection+0x1fe>
			{
				case PORTA_DIO: SET_BIT(DDRA_Register,u8PinIdCopy); break;
    1600:	aa e3       	ldi	r26, 0x3A	; 58
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	ea e3       	ldi	r30, 0x3A	; 58
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	48 2f       	mov	r20, r24
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	02 2e       	mov	r0, r18
    1618:	02 c0       	rjmp	.+4      	; 0x161e <DIO_SetPinDirection+0x8e>
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	0a 94       	dec	r0
    1620:	e2 f7       	brpl	.-8      	; 0x161a <DIO_SetPinDirection+0x8a>
    1622:	84 2b       	or	r24, r20
    1624:	8c 93       	st	X, r24
    1626:	b3 c0       	rjmp	.+358    	; 0x178e <DIO_SetPinDirection+0x1fe>
				case PORTB_DIO: SET_BIT(DDRB_Register,u8PinIdCopy); break;
    1628:	a7 e3       	ldi	r26, 0x37	; 55
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e7 e3       	ldi	r30, 0x37	; 55
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	48 2f       	mov	r20, r24
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	02 2e       	mov	r0, r18
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <DIO_SetPinDirection+0xb6>
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	0a 94       	dec	r0
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <DIO_SetPinDirection+0xb2>
    164a:	84 2b       	or	r24, r20
    164c:	8c 93       	st	X, r24
    164e:	9f c0       	rjmp	.+318    	; 0x178e <DIO_SetPinDirection+0x1fe>
				case PORTC_DIO: SET_BIT(DDRC_Register,u8PinIdCopy); break;
    1650:	a4 e3       	ldi	r26, 0x34	; 52
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e4 e3       	ldi	r30, 0x34	; 52
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	48 2f       	mov	r20, r24
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	02 2e       	mov	r0, r18
    1668:	02 c0       	rjmp	.+4      	; 0x166e <DIO_SetPinDirection+0xde>
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	0a 94       	dec	r0
    1670:	e2 f7       	brpl	.-8      	; 0x166a <DIO_SetPinDirection+0xda>
    1672:	84 2b       	or	r24, r20
    1674:	8c 93       	st	X, r24
    1676:	8b c0       	rjmp	.+278    	; 0x178e <DIO_SetPinDirection+0x1fe>
				case PORTD_DIO: SET_BIT(DDRD_Register,u8PinIdCopy); break;
    1678:	a1 e3       	ldi	r26, 0x31	; 49
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e1 e3       	ldi	r30, 0x31	; 49
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	48 2f       	mov	r20, r24
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	02 2e       	mov	r0, r18
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <DIO_SetPinDirection+0x106>
    1692:	88 0f       	add	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	0a 94       	dec	r0
    1698:	e2 f7       	brpl	.-8      	; 0x1692 <DIO_SetPinDirection+0x102>
    169a:	84 2b       	or	r24, r20
    169c:	8c 93       	st	X, r24
    169e:	77 c0       	rjmp	.+238    	; 0x178e <DIO_SetPinDirection+0x1fe>
			}
		}
		
		else if ( u8PinDirCopy == INPUT )
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	88 23       	and	r24, r24
    16a4:	09 f0       	breq	.+2      	; 0x16a8 <DIO_SetPinDirection+0x118>
    16a6:	73 c0       	rjmp	.+230    	; 0x178e <DIO_SetPinDirection+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	28 2f       	mov	r18, r24
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	3d 83       	std	Y+5, r19	; 0x05
    16b0:	2c 83       	std	Y+4, r18	; 0x04
    16b2:	8c 81       	ldd	r24, Y+4	; 0x04
    16b4:	9d 81       	ldd	r25, Y+5	; 0x05
    16b6:	81 30       	cpi	r24, 0x01	; 1
    16b8:	91 05       	cpc	r25, r1
    16ba:	59 f1       	breq	.+86     	; 0x1712 <DIO_SetPinDirection+0x182>
    16bc:	2c 81       	ldd	r18, Y+4	; 0x04
    16be:	3d 81       	ldd	r19, Y+5	; 0x05
    16c0:	22 30       	cpi	r18, 0x02	; 2
    16c2:	31 05       	cpc	r19, r1
    16c4:	2c f4       	brge	.+10     	; 0x16d0 <DIO_SetPinDirection+0x140>
    16c6:	8c 81       	ldd	r24, Y+4	; 0x04
    16c8:	9d 81       	ldd	r25, Y+5	; 0x05
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	69 f0       	breq	.+26     	; 0x16e8 <DIO_SetPinDirection+0x158>
    16ce:	5f c0       	rjmp	.+190    	; 0x178e <DIO_SetPinDirection+0x1fe>
    16d0:	2c 81       	ldd	r18, Y+4	; 0x04
    16d2:	3d 81       	ldd	r19, Y+5	; 0x05
    16d4:	22 30       	cpi	r18, 0x02	; 2
    16d6:	31 05       	cpc	r19, r1
    16d8:	89 f1       	breq	.+98     	; 0x173c <DIO_SetPinDirection+0x1ac>
    16da:	8c 81       	ldd	r24, Y+4	; 0x04
    16dc:	9d 81       	ldd	r25, Y+5	; 0x05
    16de:	83 30       	cpi	r24, 0x03	; 3
    16e0:	91 05       	cpc	r25, r1
    16e2:	09 f4       	brne	.+2      	; 0x16e6 <DIO_SetPinDirection+0x156>
    16e4:	40 c0       	rjmp	.+128    	; 0x1766 <DIO_SetPinDirection+0x1d6>
    16e6:	53 c0       	rjmp	.+166    	; 0x178e <DIO_SetPinDirection+0x1fe>
			{
				case PORTA_DIO: CLR_BIT(DDRA_Register,u8PinIdCopy); break;
    16e8:	aa e3       	ldi	r26, 0x3A	; 58
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	ea e3       	ldi	r30, 0x3A	; 58
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	48 2f       	mov	r20, r24
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	02 2e       	mov	r0, r18
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <DIO_SetPinDirection+0x176>
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	0a 94       	dec	r0
    1708:	e2 f7       	brpl	.-8      	; 0x1702 <DIO_SetPinDirection+0x172>
    170a:	80 95       	com	r24
    170c:	84 23       	and	r24, r20
    170e:	8c 93       	st	X, r24
    1710:	3e c0       	rjmp	.+124    	; 0x178e <DIO_SetPinDirection+0x1fe>
				case PORTB_DIO: CLR_BIT(DDRB_Register,u8PinIdCopy); break;
    1712:	a7 e3       	ldi	r26, 0x37	; 55
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e7 e3       	ldi	r30, 0x37	; 55
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	48 2f       	mov	r20, r24
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	02 2e       	mov	r0, r18
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <DIO_SetPinDirection+0x1a0>
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	0a 94       	dec	r0
    1732:	e2 f7       	brpl	.-8      	; 0x172c <DIO_SetPinDirection+0x19c>
    1734:	80 95       	com	r24
    1736:	84 23       	and	r24, r20
    1738:	8c 93       	st	X, r24
    173a:	29 c0       	rjmp	.+82     	; 0x178e <DIO_SetPinDirection+0x1fe>
				case PORTC_DIO: CLR_BIT(DDRC_Register,u8PinIdCopy); break;
    173c:	a4 e3       	ldi	r26, 0x34	; 52
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	e4 e3       	ldi	r30, 0x34	; 52
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	48 2f       	mov	r20, r24
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	02 2e       	mov	r0, r18
    1754:	02 c0       	rjmp	.+4      	; 0x175a <DIO_SetPinDirection+0x1ca>
    1756:	88 0f       	add	r24, r24
    1758:	99 1f       	adc	r25, r25
    175a:	0a 94       	dec	r0
    175c:	e2 f7       	brpl	.-8      	; 0x1756 <DIO_SetPinDirection+0x1c6>
    175e:	80 95       	com	r24
    1760:	84 23       	and	r24, r20
    1762:	8c 93       	st	X, r24
    1764:	14 c0       	rjmp	.+40     	; 0x178e <DIO_SetPinDirection+0x1fe>
				case PORTD_DIO: CLR_BIT(DDRD_Register,u8PinIdCopy); break;
    1766:	a1 e3       	ldi	r26, 0x31	; 49
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	e1 e3       	ldi	r30, 0x31	; 49
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	48 2f       	mov	r20, r24
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	02 2e       	mov	r0, r18
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <DIO_SetPinDirection+0x1f4>
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	0a 94       	dec	r0
    1786:	e2 f7       	brpl	.-8      	; 0x1780 <DIO_SetPinDirection+0x1f0>
    1788:	80 95       	com	r24
    178a:	84 23       	and	r24, r20
    178c:	8c 93       	st	X, r24
	
	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
    178e:	27 96       	adiw	r28, 0x07	; 7
    1790:	0f b6       	in	r0, 0x3f	; 63
    1792:	f8 94       	cli
    1794:	de bf       	out	0x3e, r29	; 62
    1796:	0f be       	out	0x3f, r0	; 63
    1798:	cd bf       	out	0x3d, r28	; 61
    179a:	cf 91       	pop	r28
    179c:	df 91       	pop	r29
    179e:	08 95       	ret

000017a0 <DIO_SetPortDirection>:


/* IO Ports */
void DIO_SetPortDirection (u8 u8PortId, u8 u8PortDir)
{
    17a0:	df 93       	push	r29
    17a2:	cf 93       	push	r28
    17a4:	00 d0       	rcall	.+0      	; 0x17a6 <DIO_SetPortDirection+0x6>
    17a6:	00 d0       	rcall	.+0      	; 0x17a8 <DIO_SetPortDirection+0x8>
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
    17ac:	89 83       	std	Y+1, r24	; 0x01
    17ae:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	28 2f       	mov	r18, r24
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	3c 83       	std	Y+4, r19	; 0x04
    17b8:	2b 83       	std	Y+3, r18	; 0x03
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	9c 81       	ldd	r25, Y+4	; 0x04
    17be:	81 30       	cpi	r24, 0x01	; 1
    17c0:	91 05       	cpc	r25, r1
    17c2:	d1 f0       	breq	.+52     	; 0x17f8 <DIO_SetPortDirection+0x58>
    17c4:	2b 81       	ldd	r18, Y+3	; 0x03
    17c6:	3c 81       	ldd	r19, Y+4	; 0x04
    17c8:	22 30       	cpi	r18, 0x02	; 2
    17ca:	31 05       	cpc	r19, r1
    17cc:	2c f4       	brge	.+10     	; 0x17d8 <DIO_SetPortDirection+0x38>
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	9c 81       	ldd	r25, Y+4	; 0x04
    17d2:	00 97       	sbiw	r24, 0x00	; 0
    17d4:	61 f0       	breq	.+24     	; 0x17ee <DIO_SetPortDirection+0x4e>
    17d6:	1e c0       	rjmp	.+60     	; 0x1814 <DIO_SetPortDirection+0x74>
    17d8:	2b 81       	ldd	r18, Y+3	; 0x03
    17da:	3c 81       	ldd	r19, Y+4	; 0x04
    17dc:	22 30       	cpi	r18, 0x02	; 2
    17de:	31 05       	cpc	r19, r1
    17e0:	81 f0       	breq	.+32     	; 0x1802 <DIO_SetPortDirection+0x62>
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	9c 81       	ldd	r25, Y+4	; 0x04
    17e6:	83 30       	cpi	r24, 0x03	; 3
    17e8:	91 05       	cpc	r25, r1
    17ea:	81 f0       	breq	.+32     	; 0x180c <DIO_SetPortDirection+0x6c>
    17ec:	13 c0       	rjmp	.+38     	; 0x1814 <DIO_SetPortDirection+0x74>
	{
			case PORTA_DIO: DDRA_Register = u8PortDir; break;
    17ee:	ea e3       	ldi	r30, 0x3A	; 58
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	80 83       	st	Z, r24
    17f6:	0e c0       	rjmp	.+28     	; 0x1814 <DIO_SetPortDirection+0x74>
			case PORTB_DIO: DDRB_Register = u8PortDir; break;
    17f8:	e7 e3       	ldi	r30, 0x37	; 55
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	80 83       	st	Z, r24
    1800:	09 c0       	rjmp	.+18     	; 0x1814 <DIO_SetPortDirection+0x74>
			case PORTC_DIO: DDRC_Register = u8PortDir; break;
    1802:	e4 e3       	ldi	r30, 0x34	; 52
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	80 83       	st	Z, r24
    180a:	04 c0       	rjmp	.+8      	; 0x1814 <DIO_SetPortDirection+0x74>
			case PORTD_DIO: DDRD_Register = u8PortDir; break;
    180c:	e1 e3       	ldi	r30, 0x31	; 49
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	80 83       	st	Z, r24
		default: /* Wrong Port ID */       break;
	}
}
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	cf 91       	pop	r28
    181e:	df 91       	pop	r29
    1820:	08 95       	ret

00001822 <DIO_SetPortValue>:

void DIO_SetPortValue (u8 u8PortId, u8 u8PortVal)
{
    1822:	df 93       	push	r29
    1824:	cf 93       	push	r28
    1826:	00 d0       	rcall	.+0      	; 0x1828 <DIO_SetPortValue+0x6>
    1828:	00 d0       	rcall	.+0      	; 0x182a <DIO_SetPortValue+0x8>
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    182e:	89 83       	std	Y+1, r24	; 0x01
    1830:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
    1832:	89 81       	ldd	r24, Y+1	; 0x01
    1834:	28 2f       	mov	r18, r24
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	3c 83       	std	Y+4, r19	; 0x04
    183a:	2b 83       	std	Y+3, r18	; 0x03
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	9c 81       	ldd	r25, Y+4	; 0x04
    1840:	81 30       	cpi	r24, 0x01	; 1
    1842:	91 05       	cpc	r25, r1
    1844:	d1 f0       	breq	.+52     	; 0x187a <DIO_SetPortValue+0x58>
    1846:	2b 81       	ldd	r18, Y+3	; 0x03
    1848:	3c 81       	ldd	r19, Y+4	; 0x04
    184a:	22 30       	cpi	r18, 0x02	; 2
    184c:	31 05       	cpc	r19, r1
    184e:	2c f4       	brge	.+10     	; 0x185a <DIO_SetPortValue+0x38>
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	9c 81       	ldd	r25, Y+4	; 0x04
    1854:	00 97       	sbiw	r24, 0x00	; 0
    1856:	61 f0       	breq	.+24     	; 0x1870 <DIO_SetPortValue+0x4e>
    1858:	1e c0       	rjmp	.+60     	; 0x1896 <DIO_SetPortValue+0x74>
    185a:	2b 81       	ldd	r18, Y+3	; 0x03
    185c:	3c 81       	ldd	r19, Y+4	; 0x04
    185e:	22 30       	cpi	r18, 0x02	; 2
    1860:	31 05       	cpc	r19, r1
    1862:	81 f0       	breq	.+32     	; 0x1884 <DIO_SetPortValue+0x62>
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	9c 81       	ldd	r25, Y+4	; 0x04
    1868:	83 30       	cpi	r24, 0x03	; 3
    186a:	91 05       	cpc	r25, r1
    186c:	81 f0       	breq	.+32     	; 0x188e <DIO_SetPortValue+0x6c>
    186e:	13 c0       	rjmp	.+38     	; 0x1896 <DIO_SetPortValue+0x74>
	{
			case PORTA_DIO: PORTA_Register = u8PortVal; break;
    1870:	eb e3       	ldi	r30, 0x3B	; 59
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	80 83       	st	Z, r24
    1878:	0e c0       	rjmp	.+28     	; 0x1896 <DIO_SetPortValue+0x74>
			case PORTB_DIO: PORTB_Register = u8PortVal; break;
    187a:	e8 e3       	ldi	r30, 0x38	; 56
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	80 83       	st	Z, r24
    1882:	09 c0       	rjmp	.+18     	; 0x1896 <DIO_SetPortValue+0x74>
			case PORTC_DIO: PORTC_Register = u8PortVal; break;
    1884:	e5 e3       	ldi	r30, 0x35	; 53
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	80 83       	st	Z, r24
    188c:	04 c0       	rjmp	.+8      	; 0x1896 <DIO_SetPortValue+0x74>
			case PORTD_DIO: PORTD_Register = u8PortVal; break;
    188e:	e2 e3       	ldi	r30, 0x32	; 50
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	80 83       	st	Z, r24
		default: /* Wrong Port ID */        break;
	}
}
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <vid_ExtInt0_vid_InitializeExtInt>:
#include "Configuration.h"
#include "BIT_MATH.h"
#include "EXT_INT_INTERFACE.H"


void vid_ExtInt0_vid_InitializeExtInt (void) {
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(MCUCR_REG,0) ;
    18ac:	a5 e5       	ldi	r26, 0x55	; 85
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e5 e5       	ldi	r30, 0x55	; 85
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	81 60       	ori	r24, 0x01	; 1
    18b8:	8c 93       	st	X, r24
	CLR_BIT(MCUCR_REG,1) ;
    18ba:	a5 e5       	ldi	r26, 0x55	; 85
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e5 e5       	ldi	r30, 0x55	; 85
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	8d 7f       	andi	r24, 0xFD	; 253
    18c6:	8c 93       	st	X, r24

	 SET_BIT(GICR_REG,6) ;
    18c8:	ab e5       	ldi	r26, 0x5B	; 91
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	eb e5       	ldi	r30, 0x5B	; 91
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	80 64       	ori	r24, 0x40	; 64
    18d4:	8c 93       	st	X, r24

   // SET_BIT (SREG_REG,7) ;

	 asm ("SEI") ;   //ENABLE GLOBAL INTERRUPT
    18d6:	78 94       	sei

}
    18d8:	cf 91       	pop	r28
    18da:	df 91       	pop	r29
    18dc:	08 95       	ret

000018de <vid_ExtInt1_vid_InitializeExtInt>:


void vid_ExtInt1_vid_InitializeExtInt (void) {
    18de:	df 93       	push	r29
    18e0:	cf 93       	push	r28
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(MCUCR_REG,2) ;
    18e6:	a5 e5       	ldi	r26, 0x55	; 85
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e5 e5       	ldi	r30, 0x55	; 85
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	84 60       	ori	r24, 0x04	; 4
    18f2:	8c 93       	st	X, r24
	CLR_BIT(MCUCR_REG,3) ;
    18f4:	a5 e5       	ldi	r26, 0x55	; 85
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e5 e5       	ldi	r30, 0x55	; 85
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	87 7f       	andi	r24, 0xF7	; 247
    1900:	8c 93       	st	X, r24

	 SET_BIT(GICR_REG,7) ;
    1902:	ab e5       	ldi	r26, 0x5B	; 91
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	eb e5       	ldi	r30, 0x5B	; 91
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	80 68       	ori	r24, 0x80	; 128
    190e:	8c 93       	st	X, r24


	 asm ("SEI") ;   //ENABLE GLOBAL INTERRUPT
    1910:	78 94       	sei

}
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	08 95       	ret

00001918 <__vector_1>:
extern u8 u8PeopleExit  ;

/**************************************************************************/


ISR(INT0_vect) {
    1918:	1f 92       	push	r1
    191a:	0f 92       	push	r0
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	0f 92       	push	r0
    1920:	11 24       	eor	r1, r1
    1922:	2f 93       	push	r18
    1924:	3f 93       	push	r19
    1926:	4f 93       	push	r20
    1928:	5f 93       	push	r21
    192a:	6f 93       	push	r22
    192c:	7f 93       	push	r23
    192e:	8f 93       	push	r24
    1930:	9f 93       	push	r25
    1932:	af 93       	push	r26
    1934:	bf 93       	push	r27
    1936:	ef 93       	push	r30
    1938:	ff 93       	push	r31
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    1942:	6c 97       	sbiw	r28, 0x1c	; 28
    1944:	de bf       	out	0x3e, r29	; 62
    1946:	cd bf       	out	0x3d, r28	; 61

	DIO_SetPinValue(PORTB_DIO, DOOR1 , HIGH);       // OPEN DOOR
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	60 e0       	ldi	r22, 0x00	; 0
    194c:	41 e0       	ldi	r20, 0x01	; 1
    194e:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_SetPinValue>
	DIO_SetPinValue(PORTB_DIO, DOOR2, LOW);
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	61 e0       	ldi	r22, 0x01	; 1
    1956:	40 e0       	ldi	r20, 0x00	; 0
    1958:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_SetPinValue>
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	90 e8       	ldi	r25, 0x80	; 128
    1960:	ab e3       	ldi	r26, 0x3B	; 59
    1962:	b5 e4       	ldi	r27, 0x45	; 69
    1964:	89 8f       	std	Y+25, r24	; 0x19
    1966:	9a 8f       	std	Y+26, r25	; 0x1a
    1968:	ab 8f       	std	Y+27, r26	; 0x1b
    196a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    196c:	69 8d       	ldd	r22, Y+25	; 0x19
    196e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1970:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1972:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	46 e9       	ldi	r20, 0x96	; 150
    197a:	53 e4       	ldi	r21, 0x43	; 67
    197c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	8d 8b       	std	Y+21, r24	; 0x15
    1986:	9e 8b       	std	Y+22, r25	; 0x16
    1988:	af 8b       	std	Y+23, r26	; 0x17
    198a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    198c:	6d 89       	ldd	r22, Y+21	; 0x15
    198e:	7e 89       	ldd	r23, Y+22	; 0x16
    1990:	8f 89       	ldd	r24, Y+23	; 0x17
    1992:	98 8d       	ldd	r25, Y+24	; 0x18
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	40 e8       	ldi	r20, 0x80	; 128
    199a:	5f e3       	ldi	r21, 0x3F	; 63
    199c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19a0:	88 23       	and	r24, r24
    19a2:	2c f4       	brge	.+10     	; 0x19ae <__vector_1+0x96>
		__ticks = 1;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	9c 8b       	std	Y+20, r25	; 0x14
    19aa:	8b 8b       	std	Y+19, r24	; 0x13
    19ac:	3f c0       	rjmp	.+126    	; 0x1a2c <__vector_1+0x114>
	else if (__tmp > 65535)
    19ae:	6d 89       	ldd	r22, Y+21	; 0x15
    19b0:	7e 89       	ldd	r23, Y+22	; 0x16
    19b2:	8f 89       	ldd	r24, Y+23	; 0x17
    19b4:	98 8d       	ldd	r25, Y+24	; 0x18
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	3f ef       	ldi	r19, 0xFF	; 255
    19ba:	4f e7       	ldi	r20, 0x7F	; 127
    19bc:	57 e4       	ldi	r21, 0x47	; 71
    19be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19c2:	18 16       	cp	r1, r24
    19c4:	4c f5       	brge	.+82     	; 0x1a18 <__vector_1+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c6:	69 8d       	ldd	r22, Y+25	; 0x19
    19c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	40 e2       	ldi	r20, 0x20	; 32
    19d4:	51 e4       	ldi	r21, 0x41	; 65
    19d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	bc 01       	movw	r22, r24
    19e0:	cd 01       	movw	r24, r26
    19e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	9c 8b       	std	Y+20, r25	; 0x14
    19ec:	8b 8b       	std	Y+19, r24	; 0x13
    19ee:	0f c0       	rjmp	.+30     	; 0x1a0e <__vector_1+0xf6>
    19f0:	8e e1       	ldi	r24, 0x1E	; 30
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	9a 8b       	std	Y+18, r25	; 0x12
    19f6:	89 8b       	std	Y+17, r24	; 0x11
    19f8:	89 89       	ldd	r24, Y+17	; 0x11
    19fa:	9a 89       	ldd	r25, Y+18	; 0x12
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	f1 f7       	brne	.-4      	; 0x19fc <__vector_1+0xe4>
    1a00:	9a 8b       	std	Y+18, r25	; 0x12
    1a02:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a04:	8b 89       	ldd	r24, Y+19	; 0x13
    1a06:	9c 89       	ldd	r25, Y+20	; 0x14
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	9c 8b       	std	Y+20, r25	; 0x14
    1a0c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a10:	9c 89       	ldd	r25, Y+20	; 0x14
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	69 f7       	brne	.-38     	; 0x19f0 <__vector_1+0xd8>
    1a16:	14 c0       	rjmp	.+40     	; 0x1a40 <__vector_1+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a18:	6d 89       	ldd	r22, Y+21	; 0x15
    1a1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	9c 8b       	std	Y+20, r25	; 0x14
    1a2a:	8b 8b       	std	Y+19, r24	; 0x13
    1a2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a30:	98 8b       	std	Y+16, r25	; 0x10
    1a32:	8f 87       	std	Y+15, r24	; 0x0f
    1a34:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a36:	98 89       	ldd	r25, Y+16	; 0x10
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	f1 f7       	brne	.-4      	; 0x1a38 <__vector_1+0x120>
    1a3c:	98 8b       	std	Y+16, r25	; 0x10
    1a3e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms (3000) ;


	DIO_SetPinValue(PORTB_DIO, DOOR1, LOW);           // CLOSE DOOR
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	60 e0       	ldi	r22, 0x00	; 0
    1a44:	40 e0       	ldi	r20, 0x00	; 0
    1a46:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_SetPinValue>
	DIO_SetPinValue(PORTB_DIO, DOOR2, HIGH);
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	61 e0       	ldi	r22, 0x01	; 1
    1a4e:	41 e0       	ldi	r20, 0x01	; 1
    1a50:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_SetPinValue>
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	90 e8       	ldi	r25, 0x80	; 128
    1a58:	ab e3       	ldi	r26, 0x3B	; 59
    1a5a:	b5 e4       	ldi	r27, 0x45	; 69
    1a5c:	8b 87       	std	Y+11, r24	; 0x0b
    1a5e:	9c 87       	std	Y+12, r25	; 0x0c
    1a60:	ad 87       	std	Y+13, r26	; 0x0d
    1a62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a64:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a66:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	46 e9       	ldi	r20, 0x96	; 150
    1a72:	53 e4       	ldi	r21, 0x43	; 67
    1a74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	8f 83       	std	Y+7, r24	; 0x07
    1a7e:	98 87       	std	Y+8, r25	; 0x08
    1a80:	a9 87       	std	Y+9, r26	; 0x09
    1a82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a84:	6f 81       	ldd	r22, Y+7	; 0x07
    1a86:	78 85       	ldd	r23, Y+8	; 0x08
    1a88:	89 85       	ldd	r24, Y+9	; 0x09
    1a8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	40 e8       	ldi	r20, 0x80	; 128
    1a92:	5f e3       	ldi	r21, 0x3F	; 63
    1a94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a98:	88 23       	and	r24, r24
    1a9a:	2c f4       	brge	.+10     	; 0x1aa6 <__vector_1+0x18e>
		__ticks = 1;
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	9e 83       	std	Y+6, r25	; 0x06
    1aa2:	8d 83       	std	Y+5, r24	; 0x05
    1aa4:	3f c0       	rjmp	.+126    	; 0x1b24 <__vector_1+0x20c>
	else if (__tmp > 65535)
    1aa6:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa8:	78 85       	ldd	r23, Y+8	; 0x08
    1aaa:	89 85       	ldd	r24, Y+9	; 0x09
    1aac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	3f ef       	ldi	r19, 0xFF	; 255
    1ab2:	4f e7       	ldi	r20, 0x7F	; 127
    1ab4:	57 e4       	ldi	r21, 0x47	; 71
    1ab6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aba:	18 16       	cp	r1, r24
    1abc:	4c f5       	brge	.+82     	; 0x1b10 <__vector_1+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1abe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ac0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ac2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	40 e2       	ldi	r20, 0x20	; 32
    1acc:	51 e4       	ldi	r21, 0x41	; 65
    1ace:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	bc 01       	movw	r22, r24
    1ad8:	cd 01       	movw	r24, r26
    1ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	9e 83       	std	Y+6, r25	; 0x06
    1ae4:	8d 83       	std	Y+5, r24	; 0x05
    1ae6:	0f c0       	rjmp	.+30     	; 0x1b06 <__vector_1+0x1ee>
    1ae8:	8e e1       	ldi	r24, 0x1E	; 30
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	9c 83       	std	Y+4, r25	; 0x04
    1aee:	8b 83       	std	Y+3, r24	; 0x03
    1af0:	8b 81       	ldd	r24, Y+3	; 0x03
    1af2:	9c 81       	ldd	r25, Y+4	; 0x04
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	f1 f7       	brne	.-4      	; 0x1af4 <__vector_1+0x1dc>
    1af8:	9c 83       	std	Y+4, r25	; 0x04
    1afa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afc:	8d 81       	ldd	r24, Y+5	; 0x05
    1afe:	9e 81       	ldd	r25, Y+6	; 0x06
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	9e 83       	std	Y+6, r25	; 0x06
    1b04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b06:	8d 81       	ldd	r24, Y+5	; 0x05
    1b08:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0a:	00 97       	sbiw	r24, 0x00	; 0
    1b0c:	69 f7       	brne	.-38     	; 0x1ae8 <__vector_1+0x1d0>
    1b0e:	14 c0       	rjmp	.+40     	; 0x1b38 <__vector_1+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b10:	6f 81       	ldd	r22, Y+7	; 0x07
    1b12:	78 85       	ldd	r23, Y+8	; 0x08
    1b14:	89 85       	ldd	r24, Y+9	; 0x09
    1b16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	9e 83       	std	Y+6, r25	; 0x06
    1b22:	8d 83       	std	Y+5, r24	; 0x05
    1b24:	8d 81       	ldd	r24, Y+5	; 0x05
    1b26:	9e 81       	ldd	r25, Y+6	; 0x06
    1b28:	9a 83       	std	Y+2, r25	; 0x02
    1b2a:	89 83       	std	Y+1, r24	; 0x01
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b30:	01 97       	sbiw	r24, 0x01	; 1
    1b32:	f1 f7       	brne	.-4      	; 0x1b30 <__vector_1+0x218>
    1b34:	9a 83       	std	Y+2, r25	; 0x02
    1b36:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (3000) ;


	DIO_SetPinValue(PORTB_DIO, DOOR1, LOW);          // IDLE
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	60 e0       	ldi	r22, 0x00	; 0
    1b3c:	40 e0       	ldi	r20, 0x00	; 0
    1b3e:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_SetPinValue>
	DIO_SetPinValue(PORTB_DIO, DOOR2, LOW);
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	61 e0       	ldi	r22, 0x01	; 1
    1b46:	40 e0       	ldi	r20, 0x00	; 0
    1b48:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_SetPinValue>

	 u8PeopleEnter ++ ;
    1b4c:	80 91 6b 00 	lds	r24, 0x006B
    1b50:	8f 5f       	subi	r24, 0xFF	; 255
    1b52:	80 93 6b 00 	sts	0x006B, r24

}
    1b56:	6c 96       	adiw	r28, 0x1c	; 28
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	ff 91       	pop	r31
    1b62:	ef 91       	pop	r30
    1b64:	bf 91       	pop	r27
    1b66:	af 91       	pop	r26
    1b68:	9f 91       	pop	r25
    1b6a:	8f 91       	pop	r24
    1b6c:	7f 91       	pop	r23
    1b6e:	6f 91       	pop	r22
    1b70:	5f 91       	pop	r21
    1b72:	4f 91       	pop	r20
    1b74:	3f 91       	pop	r19
    1b76:	2f 91       	pop	r18
    1b78:	0f 90       	pop	r0
    1b7a:	0f be       	out	0x3f, r0	; 63
    1b7c:	0f 90       	pop	r0
    1b7e:	1f 90       	pop	r1
    1b80:	18 95       	reti

00001b82 <__vector_2>:

/**************************************************************************/

ISR(INT1_vect) {
    1b82:	1f 92       	push	r1
    1b84:	0f 92       	push	r0
    1b86:	0f b6       	in	r0, 0x3f	; 63
    1b88:	0f 92       	push	r0
    1b8a:	11 24       	eor	r1, r1
    1b8c:	2f 93       	push	r18
    1b8e:	3f 93       	push	r19
    1b90:	4f 93       	push	r20
    1b92:	5f 93       	push	r21
    1b94:	6f 93       	push	r22
    1b96:	7f 93       	push	r23
    1b98:	8f 93       	push	r24
    1b9a:	9f 93       	push	r25
    1b9c:	af 93       	push	r26
    1b9e:	bf 93       	push	r27
    1ba0:	ef 93       	push	r30
    1ba2:	ff 93       	push	r31
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	cd b7       	in	r28, 0x3d	; 61
    1baa:	de b7       	in	r29, 0x3e	; 62
    1bac:	6c 97       	sbiw	r28, 0x1c	; 28
    1bae:	de bf       	out	0x3e, r29	; 62
    1bb0:	cd bf       	out	0x3d, r28	; 61

	DIO_SetPinValue(PORTB_DIO, DOOR1 , HIGH);       // OPEN DOOR
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	60 e0       	ldi	r22, 0x00	; 0
    1bb6:	41 e0       	ldi	r20, 0x01	; 1
    1bb8:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_SetPinValue>
	DIO_SetPinValue(PORTB_DIO, DOOR2, LOW);
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	61 e0       	ldi	r22, 0x01	; 1
    1bc0:	40 e0       	ldi	r20, 0x00	; 0
    1bc2:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_SetPinValue>
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	90 e8       	ldi	r25, 0x80	; 128
    1bca:	ab e3       	ldi	r26, 0x3B	; 59
    1bcc:	b5 e4       	ldi	r27, 0x45	; 69
    1bce:	89 8f       	std	Y+25, r24	; 0x19
    1bd0:	9a 8f       	std	Y+26, r25	; 0x1a
    1bd2:	ab 8f       	std	Y+27, r26	; 0x1b
    1bd4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd6:	69 8d       	ldd	r22, Y+25	; 0x19
    1bd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	46 e9       	ldi	r20, 0x96	; 150
    1be4:	53 e4       	ldi	r21, 0x43	; 67
    1be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	8d 8b       	std	Y+21, r24	; 0x15
    1bf0:	9e 8b       	std	Y+22, r25	; 0x16
    1bf2:	af 8b       	std	Y+23, r26	; 0x17
    1bf4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bf6:	6d 89       	ldd	r22, Y+21	; 0x15
    1bf8:	7e 89       	ldd	r23, Y+22	; 0x16
    1bfa:	8f 89       	ldd	r24, Y+23	; 0x17
    1bfc:	98 8d       	ldd	r25, Y+24	; 0x18
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	40 e8       	ldi	r20, 0x80	; 128
    1c04:	5f e3       	ldi	r21, 0x3F	; 63
    1c06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c0a:	88 23       	and	r24, r24
    1c0c:	2c f4       	brge	.+10     	; 0x1c18 <__vector_2+0x96>
		__ticks = 1;
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	9c 8b       	std	Y+20, r25	; 0x14
    1c14:	8b 8b       	std	Y+19, r24	; 0x13
    1c16:	3f c0       	rjmp	.+126    	; 0x1c96 <__vector_2+0x114>
	else if (__tmp > 65535)
    1c18:	6d 89       	ldd	r22, Y+21	; 0x15
    1c1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	3f ef       	ldi	r19, 0xFF	; 255
    1c24:	4f e7       	ldi	r20, 0x7F	; 127
    1c26:	57 e4       	ldi	r21, 0x47	; 71
    1c28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c2c:	18 16       	cp	r1, r24
    1c2e:	4c f5       	brge	.+82     	; 0x1c82 <__vector_2+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c30:	69 8d       	ldd	r22, Y+25	; 0x19
    1c32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	40 e2       	ldi	r20, 0x20	; 32
    1c3e:	51 e4       	ldi	r21, 0x41	; 65
    1c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	bc 01       	movw	r22, r24
    1c4a:	cd 01       	movw	r24, r26
    1c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	9c 8b       	std	Y+20, r25	; 0x14
    1c56:	8b 8b       	std	Y+19, r24	; 0x13
    1c58:	0f c0       	rjmp	.+30     	; 0x1c78 <__vector_2+0xf6>
    1c5a:	8e e1       	ldi	r24, 0x1E	; 30
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	9a 8b       	std	Y+18, r25	; 0x12
    1c60:	89 8b       	std	Y+17, r24	; 0x11
    1c62:	89 89       	ldd	r24, Y+17	; 0x11
    1c64:	9a 89       	ldd	r25, Y+18	; 0x12
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	f1 f7       	brne	.-4      	; 0x1c66 <__vector_2+0xe4>
    1c6a:	9a 8b       	std	Y+18, r25	; 0x12
    1c6c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c70:	9c 89       	ldd	r25, Y+20	; 0x14
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	9c 8b       	std	Y+20, r25	; 0x14
    1c76:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c78:	8b 89       	ldd	r24, Y+19	; 0x13
    1c7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c7c:	00 97       	sbiw	r24, 0x00	; 0
    1c7e:	69 f7       	brne	.-38     	; 0x1c5a <__vector_2+0xd8>
    1c80:	14 c0       	rjmp	.+40     	; 0x1caa <__vector_2+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c82:	6d 89       	ldd	r22, Y+21	; 0x15
    1c84:	7e 89       	ldd	r23, Y+22	; 0x16
    1c86:	8f 89       	ldd	r24, Y+23	; 0x17
    1c88:	98 8d       	ldd	r25, Y+24	; 0x18
    1c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	9c 8b       	std	Y+20, r25	; 0x14
    1c94:	8b 8b       	std	Y+19, r24	; 0x13
    1c96:	8b 89       	ldd	r24, Y+19	; 0x13
    1c98:	9c 89       	ldd	r25, Y+20	; 0x14
    1c9a:	98 8b       	std	Y+16, r25	; 0x10
    1c9c:	8f 87       	std	Y+15, r24	; 0x0f
    1c9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ca0:	98 89       	ldd	r25, Y+16	; 0x10
    1ca2:	01 97       	sbiw	r24, 0x01	; 1
    1ca4:	f1 f7       	brne	.-4      	; 0x1ca2 <__vector_2+0x120>
    1ca6:	98 8b       	std	Y+16, r25	; 0x10
    1ca8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms (3000) ;


	DIO_SetPinValue(PORTB_DIO, DOOR1, LOW);           // CLOSE DOOR
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	60 e0       	ldi	r22, 0x00	; 0
    1cae:	40 e0       	ldi	r20, 0x00	; 0
    1cb0:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_SetPinValue>
	DIO_SetPinValue(PORTB_DIO, DOOR2, HIGH);
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	61 e0       	ldi	r22, 0x01	; 1
    1cb8:	41 e0       	ldi	r20, 0x01	; 1
    1cba:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_SetPinValue>
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	90 e8       	ldi	r25, 0x80	; 128
    1cc2:	ab e3       	ldi	r26, 0x3B	; 59
    1cc4:	b5 e4       	ldi	r27, 0x45	; 69
    1cc6:	8b 87       	std	Y+11, r24	; 0x0b
    1cc8:	9c 87       	std	Y+12, r25	; 0x0c
    1cca:	ad 87       	std	Y+13, r26	; 0x0d
    1ccc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cce:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	46 e9       	ldi	r20, 0x96	; 150
    1cdc:	53 e4       	ldi	r21, 0x43	; 67
    1cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	8f 83       	std	Y+7, r24	; 0x07
    1ce8:	98 87       	std	Y+8, r25	; 0x08
    1cea:	a9 87       	std	Y+9, r26	; 0x09
    1cec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cee:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf0:	78 85       	ldd	r23, Y+8	; 0x08
    1cf2:	89 85       	ldd	r24, Y+9	; 0x09
    1cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 e8       	ldi	r20, 0x80	; 128
    1cfc:	5f e3       	ldi	r21, 0x3F	; 63
    1cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d02:	88 23       	and	r24, r24
    1d04:	2c f4       	brge	.+10     	; 0x1d10 <__vector_2+0x18e>
		__ticks = 1;
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	9e 83       	std	Y+6, r25	; 0x06
    1d0c:	8d 83       	std	Y+5, r24	; 0x05
    1d0e:	3f c0       	rjmp	.+126    	; 0x1d8e <__vector_2+0x20c>
	else if (__tmp > 65535)
    1d10:	6f 81       	ldd	r22, Y+7	; 0x07
    1d12:	78 85       	ldd	r23, Y+8	; 0x08
    1d14:	89 85       	ldd	r24, Y+9	; 0x09
    1d16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	3f ef       	ldi	r19, 0xFF	; 255
    1d1c:	4f e7       	ldi	r20, 0x7F	; 127
    1d1e:	57 e4       	ldi	r21, 0x47	; 71
    1d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d24:	18 16       	cp	r1, r24
    1d26:	4c f5       	brge	.+82     	; 0x1d7a <__vector_2+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	40 e2       	ldi	r20, 0x20	; 32
    1d36:	51 e4       	ldi	r21, 0x41	; 65
    1d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	bc 01       	movw	r22, r24
    1d42:	cd 01       	movw	r24, r26
    1d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	9e 83       	std	Y+6, r25	; 0x06
    1d4e:	8d 83       	std	Y+5, r24	; 0x05
    1d50:	0f c0       	rjmp	.+30     	; 0x1d70 <__vector_2+0x1ee>
    1d52:	8e e1       	ldi	r24, 0x1E	; 30
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	9c 83       	std	Y+4, r25	; 0x04
    1d58:	8b 83       	std	Y+3, r24	; 0x03
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	f1 f7       	brne	.-4      	; 0x1d5e <__vector_2+0x1dc>
    1d62:	9c 83       	std	Y+4, r25	; 0x04
    1d64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d66:	8d 81       	ldd	r24, Y+5	; 0x05
    1d68:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	9e 83       	std	Y+6, r25	; 0x06
    1d6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d70:	8d 81       	ldd	r24, Y+5	; 0x05
    1d72:	9e 81       	ldd	r25, Y+6	; 0x06
    1d74:	00 97       	sbiw	r24, 0x00	; 0
    1d76:	69 f7       	brne	.-38     	; 0x1d52 <__vector_2+0x1d0>
    1d78:	14 c0       	rjmp	.+40     	; 0x1da2 <__vector_2+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d7c:	78 85       	ldd	r23, Y+8	; 0x08
    1d7e:	89 85       	ldd	r24, Y+9	; 0x09
    1d80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	9e 83       	std	Y+6, r25	; 0x06
    1d8c:	8d 83       	std	Y+5, r24	; 0x05
    1d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d90:	9e 81       	ldd	r25, Y+6	; 0x06
    1d92:	9a 83       	std	Y+2, r25	; 0x02
    1d94:	89 83       	std	Y+1, r24	; 0x01
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	f1 f7       	brne	.-4      	; 0x1d9a <__vector_2+0x218>
    1d9e:	9a 83       	std	Y+2, r25	; 0x02
    1da0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (3000) ;


	DIO_SetPinValue(PORTB_DIO, DOOR1, LOW);          // IDLE
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	60 e0       	ldi	r22, 0x00	; 0
    1da6:	40 e0       	ldi	r20, 0x00	; 0
    1da8:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_SetPinValue>
	DIO_SetPinValue(PORTB_DIO, DOOR2, LOW);
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	61 e0       	ldi	r22, 0x01	; 1
    1db0:	40 e0       	ldi	r20, 0x00	; 0
    1db2:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_SetPinValue>

	u8PeopleExit ++ ;
    1db6:	80 91 6c 00 	lds	r24, 0x006C
    1dba:	8f 5f       	subi	r24, 0xFF	; 255
    1dbc:	80 93 6c 00 	sts	0x006C, r24


}
    1dc0:	6c 96       	adiw	r28, 0x1c	; 28
    1dc2:	de bf       	out	0x3e, r29	; 62
    1dc4:	cd bf       	out	0x3d, r28	; 61
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	ff 91       	pop	r31
    1dcc:	ef 91       	pop	r30
    1dce:	bf 91       	pop	r27
    1dd0:	af 91       	pop	r26
    1dd2:	9f 91       	pop	r25
    1dd4:	8f 91       	pop	r24
    1dd6:	7f 91       	pop	r23
    1dd8:	6f 91       	pop	r22
    1dda:	5f 91       	pop	r21
    1ddc:	4f 91       	pop	r20
    1dde:	3f 91       	pop	r19
    1de0:	2f 91       	pop	r18
    1de2:	0f 90       	pop	r0
    1de4:	0f be       	out	0x3f, r0	; 63
    1de6:	0f 90       	pop	r0
    1de8:	1f 90       	pop	r1
    1dea:	18 95       	reti

00001dec <vid_DIO_vid_SetDioDirections>:
extern u8 u8Lumen ;

/************************************************************/


void vid_DIO_vid_SetDioDirections (void) {
    1dec:	df 93       	push	r29
    1dee:	cf 93       	push	r28
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62

/*********************** Analog Input *************************/
	DIO_SetPinDirection (PORTA_DIO,TEMP_SENSOR,INPUT) ;
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	60 e0       	ldi	r22, 0x00	; 0
    1df8:	40 e0       	ldi	r20, 0x00	; 0
    1dfa:	0e 94 c8 0a 	call	0x1590	; 0x1590 <DIO_SetPinDirection>
	DIO_SetPinDirection (PORTA_DIO,LDR,INPUT) ;
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	61 e0       	ldi	r22, 0x01	; 1
    1e02:	40 e0       	ldi	r20, 0x00	; 0
    1e04:	0e 94 c8 0a 	call	0x1590	; 0x1590 <DIO_SetPinDirection>

/******************** External Interrupt **********************/
	DIO_SetPinDirection (PORTD_DIO,PIR1,INPUT) ;
    1e08:	83 e0       	ldi	r24, 0x03	; 3
    1e0a:	62 e0       	ldi	r22, 0x02	; 2
    1e0c:	40 e0       	ldi	r20, 0x00	; 0
    1e0e:	0e 94 c8 0a 	call	0x1590	; 0x1590 <DIO_SetPinDirection>
	DIO_SetPinDirection (PORTD_DIO,PIR2,INPUT) ;
    1e12:	83 e0       	ldi	r24, 0x03	; 3
    1e14:	63 e0       	ldi	r22, 0x03	; 3
    1e16:	40 e0       	ldi	r20, 0x00	; 0
    1e18:	0e 94 c8 0a 	call	0x1590	; 0x1590 <DIO_SetPinDirection>


/********************** Digital Output ************************/
	DIO_SetPinDirection (PORTB_DIO,DOOR1,OUTPUT) ;
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	60 e0       	ldi	r22, 0x00	; 0
    1e20:	41 e0       	ldi	r20, 0x01	; 1
    1e22:	0e 94 c8 0a 	call	0x1590	; 0x1590 <DIO_SetPinDirection>
	DIO_SetPinDirection (PORTB_DIO,DOOR2,OUTPUT) ;
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	61 e0       	ldi	r22, 0x01	; 1
    1e2a:	41 e0       	ldi	r20, 0x01	; 1
    1e2c:	0e 94 c8 0a 	call	0x1590	; 0x1590 <DIO_SetPinDirection>

/************************ PWM Output *************************/
	DIO_SetPinDirection (PORTB_DIO,FAN,OUTPUT) ;
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	63 e0       	ldi	r22, 0x03	; 3
    1e34:	41 e0       	ldi	r20, 0x01	; 1
    1e36:	0e 94 c8 0a 	call	0x1590	; 0x1590 <DIO_SetPinDirection>
	DIO_SetPinDirection (PORTD_DIO,LIGHT,OUTPUT) ;
    1e3a:	83 e0       	ldi	r24, 0x03	; 3
    1e3c:	67 e0       	ldi	r22, 0x07	; 7
    1e3e:	41 e0       	ldi	r20, 0x01	; 1
    1e40:	0e 94 c8 0a 	call	0x1590	; 0x1590 <DIO_SetPinDirection>


/************************ PORTS INITIALIZATION *************************/

	//DIO_SetPinValue(PORTA_DIO , LDR, HIGH);       //connect A1 to pull up resistors
	DIO_SetPinValue(PORTD_DIO , PIR1, HIGH);
    1e44:	83 e0       	ldi	r24, 0x03	; 3
    1e46:	62 e0       	ldi	r22, 0x02	; 2
    1e48:	41 e0       	ldi	r20, 0x01	; 1
    1e4a:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_SetPinValue>
	DIO_SetPinValue(PORTD_DIO , PIR2, HIGH);
    1e4e:	83 e0       	ldi	r24, 0x03	; 3
    1e50:	63 e0       	ldi	r22, 0x03	; 3
    1e52:	41 e0       	ldi	r20, 0x01	; 1
    1e54:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_SetPinValue>

}
    1e58:	cf 91       	pop	r28
    1e5a:	df 91       	pop	r29
    1e5c:	08 95       	ret

00001e5e <UpdateFanSpeed>:


/************************************************************/

void UpdateFanSpeed (void) {
    1e5e:	df 93       	push	r29
    1e60:	cf 93       	push	r28
    1e62:	00 d0       	rcall	.+0      	; 0x1e64 <UpdateFanSpeed+0x6>
    1e64:	0f 92       	push	r0
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62

	u8 u8_ADC_Read = 0 ;
    1e6a:	1b 82       	std	Y+3, r1	; 0x03
	u16 u16Volt = 0 ;
    1e6c:	1a 82       	std	Y+2, r1	; 0x02
    1e6e:	19 82       	std	Y+1, r1	; 0x01


	u8_ADC_Read = U8_ADC_U8_Read(0) + ADC_Correction_Factor ;
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	0e 94 c2 05 	call	0xb84	; 0xb84 <U8_ADC_U8_Read>
    1e76:	82 5f       	subi	r24, 0xF2	; 242
    1e78:	8b 83       	std	Y+3, r24	; 0x03
	u16Volt =( ( ( (u32)u8_ADC_Read *  5000UL) ) / 1024UL ) + 10 ;
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	88 2f       	mov	r24, r24
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	a0 e0       	ldi	r26, 0x00	; 0
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	28 e8       	ldi	r18, 0x88	; 136
    1e86:	33 e1       	ldi	r19, 0x13	; 19
    1e88:	40 e0       	ldi	r20, 0x00	; 0
    1e8a:	50 e0       	ldi	r21, 0x00	; 0
    1e8c:	bc 01       	movw	r22, r24
    1e8e:	cd 01       	movw	r24, r26
    1e90:	0e 94 2a 10 	call	0x2054	; 0x2054 <__mulsi3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	07 2e       	mov	r0, r23
    1e9a:	7a e0       	ldi	r23, 0x0A	; 10
    1e9c:	b6 95       	lsr	r27
    1e9e:	a7 95       	ror	r26
    1ea0:	97 95       	ror	r25
    1ea2:	87 95       	ror	r24
    1ea4:	7a 95       	dec	r23
    1ea6:	d1 f7       	brne	.-12     	; 0x1e9c <UpdateFanSpeed+0x3e>
    1ea8:	70 2d       	mov	r23, r0
    1eaa:	0a 96       	adiw	r24, 0x0a	; 10
    1eac:	9a 83       	std	Y+2, r25	; 0x02
    1eae:	89 83       	std	Y+1, r24	; 0x01
	u16Temp = u16Volt/10 ;
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb4:	2a e0       	ldi	r18, 0x0A	; 10
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	b9 01       	movw	r22, r18
    1eba:	0e 94 49 10 	call	0x2092	; 0x2092 <__udivmodhi4>
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	90 93 69 00 	sts	0x0069, r25
    1ec4:	80 93 68 00 	sts	0x0068, r24



if      (u16Temp<=20)                  {OCR0_REG = 0 ; }
    1ec8:	80 91 68 00 	lds	r24, 0x0068
    1ecc:	90 91 69 00 	lds	r25, 0x0069
    1ed0:	85 31       	cpi	r24, 0x15	; 21
    1ed2:	91 05       	cpc	r25, r1
    1ed4:	20 f4       	brcc	.+8      	; 0x1ede <UpdateFanSpeed+0x80>
    1ed6:	ec e5       	ldi	r30, 0x5C	; 92
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	10 82       	st	Z, r1
    1edc:	2a c0       	rjmp	.+84     	; 0x1f32 <UpdateFanSpeed+0xd4>
else if ((u16Temp>20)&&(u16Temp<=27))  {OCR0_REG = 127 ; }
    1ede:	80 91 68 00 	lds	r24, 0x0068
    1ee2:	90 91 69 00 	lds	r25, 0x0069
    1ee6:	85 31       	cpi	r24, 0x15	; 21
    1ee8:	91 05       	cpc	r25, r1
    1eea:	60 f0       	brcs	.+24     	; 0x1f04 <UpdateFanSpeed+0xa6>
    1eec:	80 91 68 00 	lds	r24, 0x0068
    1ef0:	90 91 69 00 	lds	r25, 0x0069
    1ef4:	8c 31       	cpi	r24, 0x1C	; 28
    1ef6:	91 05       	cpc	r25, r1
    1ef8:	28 f4       	brcc	.+10     	; 0x1f04 <UpdateFanSpeed+0xa6>
    1efa:	ec e5       	ldi	r30, 0x5C	; 92
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	8f e7       	ldi	r24, 0x7F	; 127
    1f00:	80 83       	st	Z, r24
    1f02:	17 c0       	rjmp	.+46     	; 0x1f32 <UpdateFanSpeed+0xd4>
else if ((u16Temp>27)&&(u16Temp<=30))  {OCR0_REG = 200 ; }
    1f04:	80 91 68 00 	lds	r24, 0x0068
    1f08:	90 91 69 00 	lds	r25, 0x0069
    1f0c:	8c 31       	cpi	r24, 0x1C	; 28
    1f0e:	91 05       	cpc	r25, r1
    1f10:	60 f0       	brcs	.+24     	; 0x1f2a <UpdateFanSpeed+0xcc>
    1f12:	80 91 68 00 	lds	r24, 0x0068
    1f16:	90 91 69 00 	lds	r25, 0x0069
    1f1a:	8f 31       	cpi	r24, 0x1F	; 31
    1f1c:	91 05       	cpc	r25, r1
    1f1e:	28 f4       	brcc	.+10     	; 0x1f2a <UpdateFanSpeed+0xcc>
    1f20:	ec e5       	ldi	r30, 0x5C	; 92
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	88 ec       	ldi	r24, 0xC8	; 200
    1f26:	80 83       	st	Z, r24
    1f28:	04 c0       	rjmp	.+8      	; 0x1f32 <UpdateFanSpeed+0xd4>
else                                   { OCR0_REG=255 ; }
    1f2a:	ec e5       	ldi	r30, 0x5C	; 92
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	8f ef       	ldi	r24, 0xFF	; 255
    1f30:	80 83       	st	Z, r24

}
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	cf 91       	pop	r28
    1f3a:	df 91       	pop	r29
    1f3c:	08 95       	ret

00001f3e <UpdateLightIlluminance>:

/************************************************************/

void UpdateLightIlluminance (void) {
    1f3e:	df 93       	push	r29
    1f40:	cf 93       	push	r28
    1f42:	0f 92       	push	r0
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62

	u8 u8LDR_Read = U8_ADC_U8_Read(1)  ;
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	0e 94 c2 05 	call	0xb84	; 0xb84 <U8_ADC_U8_Read>
    1f4e:	89 83       	std	Y+1, r24	; 0x01

	u8Lumen  = u8LDR_Read ;
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
    1f52:	80 93 6a 00 	sts	0x006A, r24

	OCR2_REG = u8LDR_Read ;
    1f56:	e3 e4       	ldi	r30, 0x43	; 67
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	80 83       	st	Z, r24

	if (u8LDR_Read <= 64 )                      {OCR2_REG = 0 ;}
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	81 34       	cpi	r24, 0x41	; 65
    1f62:	20 f4       	brcc	.+8      	; 0x1f6c <UpdateLightIlluminance+0x2e>
    1f64:	e3 e4       	ldi	r30, 0x43	; 67
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	10 82       	st	Z, r1
    1f6a:	0f c0       	rjmp	.+30     	; 0x1f8a <UpdateLightIlluminance+0x4c>
	else if (u8LDR_Read >64 && u8LDR_Read<128 ) {OCR2_REG = 128  ; }
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	81 34       	cpi	r24, 0x41	; 65
    1f70:	40 f0       	brcs	.+16     	; 0x1f82 <UpdateLightIlluminance+0x44>
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	88 23       	and	r24, r24
    1f76:	2c f0       	brlt	.+10     	; 0x1f82 <UpdateLightIlluminance+0x44>
    1f78:	e3 e4       	ldi	r30, 0x43	; 67
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 e8       	ldi	r24, 0x80	; 128
    1f7e:	80 83       	st	Z, r24
    1f80:	04 c0       	rjmp	.+8      	; 0x1f8a <UpdateLightIlluminance+0x4c>
	else                                        {OCR2_REG = 255 ; }
    1f82:	e3 e4       	ldi	r30, 0x43	; 67
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	8f ef       	ldi	r24, 0xFF	; 255
    1f88:	80 83       	st	Z, r24
}
    1f8a:	0f 90       	pop	r0
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	08 95       	ret

00001f92 <vid_Timer0_vid_InitializePWM>:


#include "Timer0_interface.h"


void vid_Timer0_vid_InitializePWM (void)  {
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62

		TCCR0_REG=0b01100011 ;
    1f9a:	e3 e5       	ldi	r30, 0x53	; 83
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	83 e6       	ldi	r24, 0x63	; 99
    1fa0:	80 83       	st	Z, r24
		OCR0_REG = 0X00 ;
    1fa2:	ec e5       	ldi	r30, 0x5C	; 92
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	10 82       	st	Z, r1

}
    1fa8:	cf 91       	pop	r28
    1faa:	df 91       	pop	r29
    1fac:	08 95       	ret

00001fae <vid_Timer2_vid_InitializePWM>:


#include "Timer0_interface.h"


void vid_Timer2_vid_InitializePWM (void)  {
    1fae:	df 93       	push	r29
    1fb0:	cf 93       	push	r28
    1fb2:	cd b7       	in	r28, 0x3d	; 61
    1fb4:	de b7       	in	r29, 0x3e	; 62

		TCCR2_REG=0b01100011 ;
    1fb6:	e5 e4       	ldi	r30, 0x45	; 69
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	83 e6       	ldi	r24, 0x63	; 99
    1fbc:	80 83       	st	Z, r24

		OCR2_REG = 0X00 ;
    1fbe:	e3 e4       	ldi	r30, 0x43	; 67
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	10 82       	st	Z, r1

}
    1fc4:	cf 91       	pop	r28
    1fc6:	df 91       	pop	r29
    1fc8:	08 95       	ret

00001fca <vid_UART_vid_Initialize>:


/**************************************************************/

void vid_UART_vid_Initialize(void)
{
    1fca:	df 93       	push	r29
    1fcc:	cf 93       	push	r28
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62


  // Set BaudRate -> 9600/8MhZ
  UBRRL = 51;
    1fd2:	e9 e2       	ldi	r30, 0x29	; 41
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	83 e3       	ldi	r24, 0x33	; 51
    1fd8:	80 83       	st	Z, r24
  UBRRH = 0;
    1fda:	e0 e4       	ldi	r30, 0x40	; 64
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	10 82       	st	Z, r1
  // Set Frame Format -> 8 data, 1 stop, No Parity
  UCSRC = 0b10000110;
    1fe0:	e0 e4       	ldi	r30, 0x40	; 64
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	86 e8       	ldi	r24, 0x86	; 134
    1fe6:	80 83       	st	Z, r24
  // Enable RX and TX
  UCSRB = 0b00011000;
    1fe8:	ea e2       	ldi	r30, 0x2A	; 42
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	88 e1       	ldi	r24, 0x18	; 24
    1fee:	80 83       	st	Z, r24
}
    1ff0:	cf 91       	pop	r28
    1ff2:	df 91       	pop	r29
    1ff4:	08 95       	ret

00001ff6 <vid_UART_vid_SendChar>:

/**************************************************************/

void vid_UART_vid_SendChar(u8 data)
{
    1ff6:	df 93       	push	r29
    1ff8:	cf 93       	push	r28
    1ffa:	0f 92       	push	r0
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    2000:	89 83       	std	Y+1, r24	; 0x01
  // Wait until transmission Register Empty
  while(!(UCSRA&0b00100000));
    2002:	eb e2       	ldi	r30, 0x2B	; 43
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	88 2f       	mov	r24, r24
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	80 72       	andi	r24, 0x20	; 32
    200e:	90 70       	andi	r25, 0x00	; 0
    2010:	00 97       	sbiw	r24, 0x00	; 0
    2012:	b9 f3       	breq	.-18     	; 0x2002 <vid_UART_vid_SendChar+0xc>

  UDR = data;
    2014:	ec e2       	ldi	r30, 0x2C	; 44
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	80 83       	st	Z, r24

  // wait for transmit complete
  while(!(UCSRA&0b01000000));
    201c:	eb e2       	ldi	r30, 0x2B	; 43
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	88 2f       	mov	r24, r24
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	80 74       	andi	r24, 0x40	; 64
    2028:	90 70       	andi	r25, 0x00	; 0
    202a:	00 97       	sbiw	r24, 0x00	; 0
    202c:	b9 f3       	breq	.-18     	; 0x201c <vid_UART_vid_SendChar+0x26>
}
    202e:	0f 90       	pop	r0
    2030:	cf 91       	pop	r28
    2032:	df 91       	pop	r29
    2034:	08 95       	ret

00002036 <u8_UART_u8_GetChar>:

/**************************************************************/

u8 u8_UART_u8_GetChar(void)
{
    2036:	df 93       	push	r29
    2038:	cf 93       	push	r28
    203a:	cd b7       	in	r28, 0x3d	; 61
    203c:	de b7       	in	r29, 0x3e	; 62
  // Wait until Reception Complete
  while(!(UCSRA&0b10000000));
    203e:	eb e2       	ldi	r30, 0x2B	; 43
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	88 23       	and	r24, r24
    2046:	dc f7       	brge	.-10     	; 0x203e <u8_UART_u8_GetChar+0x8>

  return UDR;
    2048:	ec e2       	ldi	r30, 0x2C	; 44
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
}
    204e:	cf 91       	pop	r28
    2050:	df 91       	pop	r29
    2052:	08 95       	ret

00002054 <__mulsi3>:
    2054:	62 9f       	mul	r22, r18
    2056:	d0 01       	movw	r26, r0
    2058:	73 9f       	mul	r23, r19
    205a:	f0 01       	movw	r30, r0
    205c:	82 9f       	mul	r24, r18
    205e:	e0 0d       	add	r30, r0
    2060:	f1 1d       	adc	r31, r1
    2062:	64 9f       	mul	r22, r20
    2064:	e0 0d       	add	r30, r0
    2066:	f1 1d       	adc	r31, r1
    2068:	92 9f       	mul	r25, r18
    206a:	f0 0d       	add	r31, r0
    206c:	83 9f       	mul	r24, r19
    206e:	f0 0d       	add	r31, r0
    2070:	74 9f       	mul	r23, r20
    2072:	f0 0d       	add	r31, r0
    2074:	65 9f       	mul	r22, r21
    2076:	f0 0d       	add	r31, r0
    2078:	99 27       	eor	r25, r25
    207a:	72 9f       	mul	r23, r18
    207c:	b0 0d       	add	r27, r0
    207e:	e1 1d       	adc	r30, r1
    2080:	f9 1f       	adc	r31, r25
    2082:	63 9f       	mul	r22, r19
    2084:	b0 0d       	add	r27, r0
    2086:	e1 1d       	adc	r30, r1
    2088:	f9 1f       	adc	r31, r25
    208a:	bd 01       	movw	r22, r26
    208c:	cf 01       	movw	r24, r30
    208e:	11 24       	eor	r1, r1
    2090:	08 95       	ret

00002092 <__udivmodhi4>:
    2092:	aa 1b       	sub	r26, r26
    2094:	bb 1b       	sub	r27, r27
    2096:	51 e1       	ldi	r21, 0x11	; 17
    2098:	07 c0       	rjmp	.+14     	; 0x20a8 <__udivmodhi4_ep>

0000209a <__udivmodhi4_loop>:
    209a:	aa 1f       	adc	r26, r26
    209c:	bb 1f       	adc	r27, r27
    209e:	a6 17       	cp	r26, r22
    20a0:	b7 07       	cpc	r27, r23
    20a2:	10 f0       	brcs	.+4      	; 0x20a8 <__udivmodhi4_ep>
    20a4:	a6 1b       	sub	r26, r22
    20a6:	b7 0b       	sbc	r27, r23

000020a8 <__udivmodhi4_ep>:
    20a8:	88 1f       	adc	r24, r24
    20aa:	99 1f       	adc	r25, r25
    20ac:	5a 95       	dec	r21
    20ae:	a9 f7       	brne	.-22     	; 0x209a <__udivmodhi4_loop>
    20b0:	80 95       	com	r24
    20b2:	90 95       	com	r25
    20b4:	bc 01       	movw	r22, r24
    20b6:	cd 01       	movw	r24, r26
    20b8:	08 95       	ret

000020ba <__prologue_saves__>:
    20ba:	2f 92       	push	r2
    20bc:	3f 92       	push	r3
    20be:	4f 92       	push	r4
    20c0:	5f 92       	push	r5
    20c2:	6f 92       	push	r6
    20c4:	7f 92       	push	r7
    20c6:	8f 92       	push	r8
    20c8:	9f 92       	push	r9
    20ca:	af 92       	push	r10
    20cc:	bf 92       	push	r11
    20ce:	cf 92       	push	r12
    20d0:	df 92       	push	r13
    20d2:	ef 92       	push	r14
    20d4:	ff 92       	push	r15
    20d6:	0f 93       	push	r16
    20d8:	1f 93       	push	r17
    20da:	cf 93       	push	r28
    20dc:	df 93       	push	r29
    20de:	cd b7       	in	r28, 0x3d	; 61
    20e0:	de b7       	in	r29, 0x3e	; 62
    20e2:	ca 1b       	sub	r28, r26
    20e4:	db 0b       	sbc	r29, r27
    20e6:	0f b6       	in	r0, 0x3f	; 63
    20e8:	f8 94       	cli
    20ea:	de bf       	out	0x3e, r29	; 62
    20ec:	0f be       	out	0x3f, r0	; 63
    20ee:	cd bf       	out	0x3d, r28	; 61
    20f0:	09 94       	ijmp

000020f2 <__epilogue_restores__>:
    20f2:	2a 88       	ldd	r2, Y+18	; 0x12
    20f4:	39 88       	ldd	r3, Y+17	; 0x11
    20f6:	48 88       	ldd	r4, Y+16	; 0x10
    20f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    20fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    20fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    20fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    2100:	9b 84       	ldd	r9, Y+11	; 0x0b
    2102:	aa 84       	ldd	r10, Y+10	; 0x0a
    2104:	b9 84       	ldd	r11, Y+9	; 0x09
    2106:	c8 84       	ldd	r12, Y+8	; 0x08
    2108:	df 80       	ldd	r13, Y+7	; 0x07
    210a:	ee 80       	ldd	r14, Y+6	; 0x06
    210c:	fd 80       	ldd	r15, Y+5	; 0x05
    210e:	0c 81       	ldd	r16, Y+4	; 0x04
    2110:	1b 81       	ldd	r17, Y+3	; 0x03
    2112:	aa 81       	ldd	r26, Y+2	; 0x02
    2114:	b9 81       	ldd	r27, Y+1	; 0x01
    2116:	ce 0f       	add	r28, r30
    2118:	d1 1d       	adc	r29, r1
    211a:	0f b6       	in	r0, 0x3f	; 63
    211c:	f8 94       	cli
    211e:	de bf       	out	0x3e, r29	; 62
    2120:	0f be       	out	0x3f, r0	; 63
    2122:	cd bf       	out	0x3d, r28	; 61
    2124:	ed 01       	movw	r28, r26
    2126:	08 95       	ret

00002128 <_exit>:
    2128:	f8 94       	cli

0000212a <__stop_program>:
    212a:	ff cf       	rjmp	.-2      	; 0x212a <__stop_program>
