
Smart_Home_C1_V3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000024ce  00002562  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800068  00800068  0000256a  2**0
                  ALLOC
  3 .stab         00002028  00000000  00000000  0000256c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c45  00000000  00000000  00004594  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000051d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005319  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005489  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000070d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008d6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009159  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009927  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <__vector_1>
       8:	0c 94 3f 0f 	jmp	0x1e7e	; 0x1e7e <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a0 37       	cpi	r26, 0x70	; 112
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ee ec       	ldi	r30, 0xCE	; 206
      78:	f4 e2       	ldi	r31, 0x24	; 36
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 12 06 	call	0xc24	; 0xc24 <main>
      8a:	0c 94 65 12 	jmp	0x24ca	; 0x24ca <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2e 12 	jmp	0x245c	; 0x245c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4a 12 	jmp	0x2494	; 0x2494 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3a 12 	jmp	0x2474	; 0x2474 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3a 12 	jmp	0x2474	; 0x2474 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2e 12 	jmp	0x245c	; 0x245c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4a 12 	jmp	0x2494	; 0x2494 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3a 12 	jmp	0x2474	; 0x2474 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3a 12 	jmp	0x2474	; 0x2474 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3a 12 	jmp	0x2474	; 0x2474 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 3e 12 	jmp	0x247c	; 0x247c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 5a 12 	jmp	0x24b4	; 0x24b4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_16>:
extern u8 u8_TMP_Read ;
extern u8 u8_LDR_Read ;



ISR(ADC_vect){
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	8f 93       	push	r24
     b52:	ef 93       	push	r30
     b54:	ff 93       	push	r31
     b56:	df 93       	push	r29
     b58:	cf 93       	push	r28
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62

	if (u8AdcChannel == TEMPERATURE_SENSOR ) {
     b5e:	80 91 68 00 	lds	r24, 0x0068
     b62:	88 23       	and	r24, r24
     b64:	31 f4       	brne	.+12     	; 0xb72 <__vector_16+0x2c>
		u8_TMP_Read = ADCH_REG ;
     b66:	e5 e2       	ldi	r30, 0x25	; 37
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	80 93 69 00 	sts	0x0069, r24
     b70:	09 c0       	rjmp	.+18     	; 0xb84 <__vector_16+0x3e>
	}
	else if (u8AdcChannel == LDR_SENSOR) {
     b72:	80 91 68 00 	lds	r24, 0x0068
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	29 f4       	brne	.+10     	; 0xb84 <__vector_16+0x3e>
		u8_LDR_Read = ADCH_REG ;
     b7a:	e5 e2       	ldi	r30, 0x25	; 37
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	80 93 6a 00 	sts	0x006A, r24
	}
	else {

	}

}
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	ff 91       	pop	r31
     b8a:	ef 91       	pop	r30
     b8c:	8f 91       	pop	r24
     b8e:	0f 90       	pop	r0
     b90:	0f be       	out	0x3f, r0	; 63
     b92:	0f 90       	pop	r0
     b94:	1f 90       	pop	r1
     b96:	18 95       	reti

00000b98 <vid_ADC_vid_Initialize>:
/************************************************************/

extern u8 u8AdcChannel  ;


void vid_ADC_vid_Initialize (void) {
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62

	ADMUX_REG =  0b01100000 ;     // VR : AVCC , LEFT SHIFT
     ba0:	e7 e2       	ldi	r30, 0x27	; 39
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 e6       	ldi	r24, 0x60	; 96
     ba6:	80 83       	st	Z, r24

	SET_BIT(ADCSRA_REG,ADEN)  ;    // ENABLE ADC ,
     ba8:	a6 e2       	ldi	r26, 0x26	; 38
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	e6 e2       	ldi	r30, 0x26	; 38
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	80 68       	ori	r24, 0x80	; 128
     bb4:	8c 93       	st	X, r24
	(ADCSRA_REG) &= ~((1 << (0))|(1 << (1))|(1 << (2)) ) ; // PRESCALER = 2
     bb6:	a6 e2       	ldi	r26, 0x26	; 38
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	e6 e2       	ldi	r30, 0x26	; 38
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	88 7f       	andi	r24, 0xF8	; 248
     bc2:	8c 93       	st	X, r24

	SET_BIT(ADCSRA_REG,ADIE)  ;    // ENABLE ADC INTERRUPT ,
     bc4:	a6 e2       	ldi	r26, 0x26	; 38
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	e6 e2       	ldi	r30, 0x26	; 38
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	88 60       	ori	r24, 0x08	; 8
     bd0:	8c 93       	st	X, r24

}
     bd2:	cf 91       	pop	r28
     bd4:	df 91       	pop	r29
     bd6:	08 95       	ret

00000bd8 <U8_ADC_U8_Read>:

/************************************************************/

void U8_ADC_U8_Read (u8 channel) {
     bd8:	df 93       	push	r29
     bda:	cf 93       	push	r28
     bdc:	0f 92       	push	r0
     bde:	cd b7       	in	r28, 0x3d	; 61
     be0:	de b7       	in	r29, 0x3e	; 62
     be2:	89 83       	std	Y+1, r24	; 0x01

		u8AdcChannel = channel ;
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	80 93 68 00 	sts	0x0068, r24

		channel &= 0b00000111;        // channel from 0 : 7(0b111)  ,& to neglect any bit more than 7
     bea:	89 81       	ldd	r24, Y+1	; 0x01
     bec:	87 70       	andi	r24, 0x07	; 7
     bee:	89 83       	std	Y+1, r24	; 0x01
		ADMUX_REG &= 0b11100000;      // to save higher 3 bits as they are and set the rest to 0
     bf0:	a7 e2       	ldi	r26, 0x27	; 39
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	e7 e2       	ldi	r30, 0x27	; 39
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	80 7e       	andi	r24, 0xE0	; 224
     bfc:	8c 93       	st	X, r24
		ADMUX_REG |= channel;         // Take the target channel
     bfe:	a7 e2       	ldi	r26, 0x27	; 39
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e7 e2       	ldi	r30, 0x27	; 39
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	90 81       	ld	r25, Z
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	89 2b       	or	r24, r25
     c0c:	8c 93       	st	X, r24

		SET_BIT(ADCSRA_REG,ADSC)  ;     // start conversion
     c0e:	a6 e2       	ldi	r26, 0x26	; 38
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e6 e2       	ldi	r30, 0x26	; 38
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	80 64       	ori	r24, 0x40	; 64
     c1a:	8c 93       	st	X, r24

}
     c1c:	0f 90       	pop	r0
     c1e:	cf 91       	pop	r28
     c20:	df 91       	pop	r29
     c22:	08 95       	ret

00000c24 <main>:
/****************************************************************/




void main (void) {
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
     c30:	c0 57       	subi	r28, 0x70	; 112
     c32:	d0 40       	sbci	r29, 0x00	; 0
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	de bf       	out	0x3e, r29	; 62
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	cd bf       	out	0x3d, r28	; 61


	vid_DIO_vid_SetDioDirections () ;
     c3e:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <vid_DIO_vid_SetDioDirections>

	vid_ADC_vid_Initialize () ;
     c42:	0e 94 cc 05 	call	0xb98	; 0xb98 <vid_ADC_vid_Initialize>

	vid_Timer0_vid_InitializePWM () ;
     c46:	0e 94 78 11 	call	0x22f0	; 0x22f0 <vid_Timer0_vid_InitializePWM>

	vid_Timer2_vid_InitializePWM () ;
     c4a:	0e 94 86 11 	call	0x230c	; 0x230c <vid_Timer2_vid_InitializePWM>

	vid_ExtInt0_vid_InitializeExtInt () ;
     c4e:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <vid_ExtInt0_vid_InitializeExtInt>

	vid_ExtInt1_vid_InitializeExtInt () ;
     c52:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <vid_ExtInt1_vid_InitializeExtInt>

	vid_UART_vid_Initialize();
     c56:	0e 94 94 11 	call	0x2328	; 0x2328 <vid_UART_vid_Initialize>

	while (1) {



    UpdateFanSpeed () ;
     c5a:	0e 94 c8 10 	call	0x2190	; 0x2190 <UpdateFanSpeed>
    UpdateLightIlluminance () ;
     c5e:	0e 94 34 11 	call	0x2268	; 0x2268 <UpdateLightIlluminance>
    UpdateAlertStatus () ;
     c62:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <UpdateAlertStatus>




    asm ("CLI") ;       //disable global interrupt
     c66:	f8 94       	cli




    vid_UART_vid_SendChar('a') ;    // alert 2nd uc to recieve Temp
     c68:	81 e6       	ldi	r24, 0x61	; 97
     c6a:	0e 94 aa 11 	call	0x2354	; 0x2354 <vid_UART_vid_SendChar>
     c6e:	fe 01       	movw	r30, r28
     c70:	e3 59       	subi	r30, 0x93	; 147
     c72:	ff 4f       	sbci	r31, 0xFF	; 255
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	aa e7       	ldi	r26, 0x7A	; 122
     c7a:	b3 e4       	ldi	r27, 0x43	; 67
     c7c:	80 83       	st	Z, r24
     c7e:	91 83       	std	Z+1, r25	; 0x01
     c80:	a2 83       	std	Z+2, r26	; 0x02
     c82:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c84:	8e 01       	movw	r16, r28
     c86:	07 59       	subi	r16, 0x97	; 151
     c88:	1f 4f       	sbci	r17, 0xFF	; 255
     c8a:	fe 01       	movw	r30, r28
     c8c:	e3 59       	subi	r30, 0x93	; 147
     c8e:	ff 4f       	sbci	r31, 0xFF	; 255
     c90:	60 81       	ld	r22, Z
     c92:	71 81       	ldd	r23, Z+1	; 0x01
     c94:	82 81       	ldd	r24, Z+2	; 0x02
     c96:	93 81       	ldd	r25, Z+3	; 0x03
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	48 e4       	ldi	r20, 0x48	; 72
     c9e:	53 e4       	ldi	r21, 0x43	; 67
     ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ca4:	dc 01       	movw	r26, r24
     ca6:	cb 01       	movw	r24, r22
     ca8:	f8 01       	movw	r30, r16
     caa:	80 83       	st	Z, r24
     cac:	91 83       	std	Z+1, r25	; 0x01
     cae:	a2 83       	std	Z+2, r26	; 0x02
     cb0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     cb2:	fe 01       	movw	r30, r28
     cb4:	e7 59       	subi	r30, 0x97	; 151
     cb6:	ff 4f       	sbci	r31, 0xFF	; 255
     cb8:	60 81       	ld	r22, Z
     cba:	71 81       	ldd	r23, Z+1	; 0x01
     cbc:	82 81       	ldd	r24, Z+2	; 0x02
     cbe:	93 81       	ldd	r25, Z+3	; 0x03
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	40 e8       	ldi	r20, 0x80	; 128
     cc6:	5f e3       	ldi	r21, 0x3F	; 63
     cc8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ccc:	88 23       	and	r24, r24
     cce:	44 f4       	brge	.+16     	; 0xce0 <main+0xbc>
		__ticks = 1;
     cd0:	fe 01       	movw	r30, r28
     cd2:	e9 59       	subi	r30, 0x99	; 153
     cd4:	ff 4f       	sbci	r31, 0xFF	; 255
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	91 83       	std	Z+1, r25	; 0x01
     cdc:	80 83       	st	Z, r24
     cde:	64 c0       	rjmp	.+200    	; 0xda8 <main+0x184>
	else if (__tmp > 65535)
     ce0:	fe 01       	movw	r30, r28
     ce2:	e7 59       	subi	r30, 0x97	; 151
     ce4:	ff 4f       	sbci	r31, 0xFF	; 255
     ce6:	60 81       	ld	r22, Z
     ce8:	71 81       	ldd	r23, Z+1	; 0x01
     cea:	82 81       	ldd	r24, Z+2	; 0x02
     cec:	93 81       	ldd	r25, Z+3	; 0x03
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	3f ef       	ldi	r19, 0xFF	; 255
     cf2:	4f e7       	ldi	r20, 0x7F	; 127
     cf4:	57 e4       	ldi	r21, 0x47	; 71
     cf6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cfa:	18 16       	cp	r1, r24
     cfc:	0c f0       	brlt	.+2      	; 0xd00 <main+0xdc>
     cfe:	43 c0       	rjmp	.+134    	; 0xd86 <main+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d00:	fe 01       	movw	r30, r28
     d02:	e3 59       	subi	r30, 0x93	; 147
     d04:	ff 4f       	sbci	r31, 0xFF	; 255
     d06:	60 81       	ld	r22, Z
     d08:	71 81       	ldd	r23, Z+1	; 0x01
     d0a:	82 81       	ldd	r24, Z+2	; 0x02
     d0c:	93 81       	ldd	r25, Z+3	; 0x03
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	40 e2       	ldi	r20, 0x20	; 32
     d14:	51 e4       	ldi	r21, 0x41	; 65
     d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d1a:	dc 01       	movw	r26, r24
     d1c:	cb 01       	movw	r24, r22
     d1e:	8e 01       	movw	r16, r28
     d20:	09 59       	subi	r16, 0x99	; 153
     d22:	1f 4f       	sbci	r17, 0xFF	; 255
     d24:	bc 01       	movw	r22, r24
     d26:	cd 01       	movw	r24, r26
     d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	f8 01       	movw	r30, r16
     d32:	91 83       	std	Z+1, r25	; 0x01
     d34:	80 83       	st	Z, r24
     d36:	1f c0       	rjmp	.+62     	; 0xd76 <main+0x152>
     d38:	fe 01       	movw	r30, r28
     d3a:	eb 59       	subi	r30, 0x9B	; 155
     d3c:	ff 4f       	sbci	r31, 0xFF	; 255
     d3e:	84 e1       	ldi	r24, 0x14	; 20
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	91 83       	std	Z+1, r25	; 0x01
     d44:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d46:	fe 01       	movw	r30, r28
     d48:	eb 59       	subi	r30, 0x9B	; 155
     d4a:	ff 4f       	sbci	r31, 0xFF	; 255
     d4c:	80 81       	ld	r24, Z
     d4e:	91 81       	ldd	r25, Z+1	; 0x01
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	f1 f7       	brne	.-4      	; 0xd50 <main+0x12c>
     d54:	fe 01       	movw	r30, r28
     d56:	eb 59       	subi	r30, 0x9B	; 155
     d58:	ff 4f       	sbci	r31, 0xFF	; 255
     d5a:	91 83       	std	Z+1, r25	; 0x01
     d5c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d5e:	de 01       	movw	r26, r28
     d60:	a9 59       	subi	r26, 0x99	; 153
     d62:	bf 4f       	sbci	r27, 0xFF	; 255
     d64:	fe 01       	movw	r30, r28
     d66:	e9 59       	subi	r30, 0x99	; 153
     d68:	ff 4f       	sbci	r31, 0xFF	; 255
     d6a:	80 81       	ld	r24, Z
     d6c:	91 81       	ldd	r25, Z+1	; 0x01
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d76:	fe 01       	movw	r30, r28
     d78:	e9 59       	subi	r30, 0x99	; 153
     d7a:	ff 4f       	sbci	r31, 0xFF	; 255
     d7c:	80 81       	ld	r24, Z
     d7e:	91 81       	ldd	r25, Z+1	; 0x01
     d80:	00 97       	sbiw	r24, 0x00	; 0
     d82:	d1 f6       	brne	.-76     	; 0xd38 <main+0x114>
     d84:	27 c0       	rjmp	.+78     	; 0xdd4 <main+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d86:	8e 01       	movw	r16, r28
     d88:	09 59       	subi	r16, 0x99	; 153
     d8a:	1f 4f       	sbci	r17, 0xFF	; 255
     d8c:	fe 01       	movw	r30, r28
     d8e:	e7 59       	subi	r30, 0x97	; 151
     d90:	ff 4f       	sbci	r31, 0xFF	; 255
     d92:	60 81       	ld	r22, Z
     d94:	71 81       	ldd	r23, Z+1	; 0x01
     d96:	82 81       	ldd	r24, Z+2	; 0x02
     d98:	93 81       	ldd	r25, Z+3	; 0x03
     d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d9e:	dc 01       	movw	r26, r24
     da0:	cb 01       	movw	r24, r22
     da2:	f8 01       	movw	r30, r16
     da4:	91 83       	std	Z+1, r25	; 0x01
     da6:	80 83       	st	Z, r24
     da8:	de 01       	movw	r26, r28
     daa:	ad 59       	subi	r26, 0x9D	; 157
     dac:	bf 4f       	sbci	r27, 0xFF	; 255
     dae:	fe 01       	movw	r30, r28
     db0:	e9 59       	subi	r30, 0x99	; 153
     db2:	ff 4f       	sbci	r31, 0xFF	; 255
     db4:	80 81       	ld	r24, Z
     db6:	91 81       	ldd	r25, Z+1	; 0x01
     db8:	8d 93       	st	X+, r24
     dba:	9c 93       	st	X, r25
     dbc:	fe 01       	movw	r30, r28
     dbe:	ed 59       	subi	r30, 0x9D	; 157
     dc0:	ff 4f       	sbci	r31, 0xFF	; 255
     dc2:	80 81       	ld	r24, Z
     dc4:	91 81       	ldd	r25, Z+1	; 0x01
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	f1 f7       	brne	.-4      	; 0xdc6 <main+0x1a2>
     dca:	fe 01       	movw	r30, r28
     dcc:	ed 59       	subi	r30, 0x9D	; 157
     dce:	ff 4f       	sbci	r31, 0xFF	; 255
     dd0:	91 83       	std	Z+1, r25	; 0x01
     dd2:	80 83       	st	Z, r24
    _delay_ms(250) ;
    vid_UART_vid_SendChar((u8)u16Temp);
     dd4:	80 91 6b 00 	lds	r24, 0x006B
     dd8:	90 91 6c 00 	lds	r25, 0x006C
     ddc:	0e 94 aa 11 	call	0x2354	; 0x2354 <vid_UART_vid_SendChar>
     de0:	fe 01       	movw	r30, r28
     de2:	e1 5a       	subi	r30, 0xA1	; 161
     de4:	ff 4f       	sbci	r31, 0xFF	; 255
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	aa e7       	ldi	r26, 0x7A	; 122
     dec:	b3 e4       	ldi	r27, 0x43	; 67
     dee:	80 83       	st	Z, r24
     df0:	91 83       	std	Z+1, r25	; 0x01
     df2:	a2 83       	std	Z+2, r26	; 0x02
     df4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     df6:	8e 01       	movw	r16, r28
     df8:	05 5a       	subi	r16, 0xA5	; 165
     dfa:	1f 4f       	sbci	r17, 0xFF	; 255
     dfc:	fe 01       	movw	r30, r28
     dfe:	e1 5a       	subi	r30, 0xA1	; 161
     e00:	ff 4f       	sbci	r31, 0xFF	; 255
     e02:	60 81       	ld	r22, Z
     e04:	71 81       	ldd	r23, Z+1	; 0x01
     e06:	82 81       	ldd	r24, Z+2	; 0x02
     e08:	93 81       	ldd	r25, Z+3	; 0x03
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	48 e4       	ldi	r20, 0x48	; 72
     e10:	53 e4       	ldi	r21, 0x43	; 67
     e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e16:	dc 01       	movw	r26, r24
     e18:	cb 01       	movw	r24, r22
     e1a:	f8 01       	movw	r30, r16
     e1c:	80 83       	st	Z, r24
     e1e:	91 83       	std	Z+1, r25	; 0x01
     e20:	a2 83       	std	Z+2, r26	; 0x02
     e22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e24:	fe 01       	movw	r30, r28
     e26:	e5 5a       	subi	r30, 0xA5	; 165
     e28:	ff 4f       	sbci	r31, 0xFF	; 255
     e2a:	60 81       	ld	r22, Z
     e2c:	71 81       	ldd	r23, Z+1	; 0x01
     e2e:	82 81       	ldd	r24, Z+2	; 0x02
     e30:	93 81       	ldd	r25, Z+3	; 0x03
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	40 e8       	ldi	r20, 0x80	; 128
     e38:	5f e3       	ldi	r21, 0x3F	; 63
     e3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e3e:	88 23       	and	r24, r24
     e40:	44 f4       	brge	.+16     	; 0xe52 <main+0x22e>
		__ticks = 1;
     e42:	fe 01       	movw	r30, r28
     e44:	e7 5a       	subi	r30, 0xA7	; 167
     e46:	ff 4f       	sbci	r31, 0xFF	; 255
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	91 83       	std	Z+1, r25	; 0x01
     e4e:	80 83       	st	Z, r24
     e50:	64 c0       	rjmp	.+200    	; 0xf1a <main+0x2f6>
	else if (__tmp > 65535)
     e52:	fe 01       	movw	r30, r28
     e54:	e5 5a       	subi	r30, 0xA5	; 165
     e56:	ff 4f       	sbci	r31, 0xFF	; 255
     e58:	60 81       	ld	r22, Z
     e5a:	71 81       	ldd	r23, Z+1	; 0x01
     e5c:	82 81       	ldd	r24, Z+2	; 0x02
     e5e:	93 81       	ldd	r25, Z+3	; 0x03
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	3f ef       	ldi	r19, 0xFF	; 255
     e64:	4f e7       	ldi	r20, 0x7F	; 127
     e66:	57 e4       	ldi	r21, 0x47	; 71
     e68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e6c:	18 16       	cp	r1, r24
     e6e:	0c f0       	brlt	.+2      	; 0xe72 <main+0x24e>
     e70:	43 c0       	rjmp	.+134    	; 0xef8 <main+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e72:	fe 01       	movw	r30, r28
     e74:	e1 5a       	subi	r30, 0xA1	; 161
     e76:	ff 4f       	sbci	r31, 0xFF	; 255
     e78:	60 81       	ld	r22, Z
     e7a:	71 81       	ldd	r23, Z+1	; 0x01
     e7c:	82 81       	ldd	r24, Z+2	; 0x02
     e7e:	93 81       	ldd	r25, Z+3	; 0x03
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	40 e2       	ldi	r20, 0x20	; 32
     e86:	51 e4       	ldi	r21, 0x41	; 65
     e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e8c:	dc 01       	movw	r26, r24
     e8e:	cb 01       	movw	r24, r22
     e90:	8e 01       	movw	r16, r28
     e92:	07 5a       	subi	r16, 0xA7	; 167
     e94:	1f 4f       	sbci	r17, 0xFF	; 255
     e96:	bc 01       	movw	r22, r24
     e98:	cd 01       	movw	r24, r26
     e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9e:	dc 01       	movw	r26, r24
     ea0:	cb 01       	movw	r24, r22
     ea2:	f8 01       	movw	r30, r16
     ea4:	91 83       	std	Z+1, r25	; 0x01
     ea6:	80 83       	st	Z, r24
     ea8:	1f c0       	rjmp	.+62     	; 0xee8 <main+0x2c4>
     eaa:	fe 01       	movw	r30, r28
     eac:	e9 5a       	subi	r30, 0xA9	; 169
     eae:	ff 4f       	sbci	r31, 0xFF	; 255
     eb0:	84 e1       	ldi	r24, 0x14	; 20
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	91 83       	std	Z+1, r25	; 0x01
     eb6:	80 83       	st	Z, r24
     eb8:	fe 01       	movw	r30, r28
     eba:	e9 5a       	subi	r30, 0xA9	; 169
     ebc:	ff 4f       	sbci	r31, 0xFF	; 255
     ebe:	80 81       	ld	r24, Z
     ec0:	91 81       	ldd	r25, Z+1	; 0x01
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	f1 f7       	brne	.-4      	; 0xec2 <main+0x29e>
     ec6:	fe 01       	movw	r30, r28
     ec8:	e9 5a       	subi	r30, 0xA9	; 169
     eca:	ff 4f       	sbci	r31, 0xFF	; 255
     ecc:	91 83       	std	Z+1, r25	; 0x01
     ece:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed0:	de 01       	movw	r26, r28
     ed2:	a7 5a       	subi	r26, 0xA7	; 167
     ed4:	bf 4f       	sbci	r27, 0xFF	; 255
     ed6:	fe 01       	movw	r30, r28
     ed8:	e7 5a       	subi	r30, 0xA7	; 167
     eda:	ff 4f       	sbci	r31, 0xFF	; 255
     edc:	80 81       	ld	r24, Z
     ede:	91 81       	ldd	r25, Z+1	; 0x01
     ee0:	01 97       	sbiw	r24, 0x01	; 1
     ee2:	11 96       	adiw	r26, 0x01	; 1
     ee4:	9c 93       	st	X, r25
     ee6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee8:	fe 01       	movw	r30, r28
     eea:	e7 5a       	subi	r30, 0xA7	; 167
     eec:	ff 4f       	sbci	r31, 0xFF	; 255
     eee:	80 81       	ld	r24, Z
     ef0:	91 81       	ldd	r25, Z+1	; 0x01
     ef2:	00 97       	sbiw	r24, 0x00	; 0
     ef4:	d1 f6       	brne	.-76     	; 0xeaa <main+0x286>
     ef6:	27 c0       	rjmp	.+78     	; 0xf46 <main+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef8:	8e 01       	movw	r16, r28
     efa:	07 5a       	subi	r16, 0xA7	; 167
     efc:	1f 4f       	sbci	r17, 0xFF	; 255
     efe:	fe 01       	movw	r30, r28
     f00:	e5 5a       	subi	r30, 0xA5	; 165
     f02:	ff 4f       	sbci	r31, 0xFF	; 255
     f04:	60 81       	ld	r22, Z
     f06:	71 81       	ldd	r23, Z+1	; 0x01
     f08:	82 81       	ldd	r24, Z+2	; 0x02
     f0a:	93 81       	ldd	r25, Z+3	; 0x03
     f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f10:	dc 01       	movw	r26, r24
     f12:	cb 01       	movw	r24, r22
     f14:	f8 01       	movw	r30, r16
     f16:	91 83       	std	Z+1, r25	; 0x01
     f18:	80 83       	st	Z, r24
     f1a:	de 01       	movw	r26, r28
     f1c:	ab 5a       	subi	r26, 0xAB	; 171
     f1e:	bf 4f       	sbci	r27, 0xFF	; 255
     f20:	fe 01       	movw	r30, r28
     f22:	e7 5a       	subi	r30, 0xA7	; 167
     f24:	ff 4f       	sbci	r31, 0xFF	; 255
     f26:	80 81       	ld	r24, Z
     f28:	91 81       	ldd	r25, Z+1	; 0x01
     f2a:	8d 93       	st	X+, r24
     f2c:	9c 93       	st	X, r25
     f2e:	fe 01       	movw	r30, r28
     f30:	eb 5a       	subi	r30, 0xAB	; 171
     f32:	ff 4f       	sbci	r31, 0xFF	; 255
     f34:	80 81       	ld	r24, Z
     f36:	91 81       	ldd	r25, Z+1	; 0x01
     f38:	01 97       	sbiw	r24, 0x01	; 1
     f3a:	f1 f7       	brne	.-4      	; 0xf38 <main+0x314>
     f3c:	fe 01       	movw	r30, r28
     f3e:	eb 5a       	subi	r30, 0xAB	; 171
     f40:	ff 4f       	sbci	r31, 0xFF	; 255
     f42:	91 83       	std	Z+1, r25	; 0x01
     f44:	80 83       	st	Z, r24
    _delay_ms(250) ;

    vid_UART_vid_SendChar('b') ;      // alert 2nd uc to recieve lamp Lumen
     f46:	82 e6       	ldi	r24, 0x62	; 98
     f48:	0e 94 aa 11 	call	0x2354	; 0x2354 <vid_UART_vid_SendChar>
     f4c:	fe 01       	movw	r30, r28
     f4e:	ef 5a       	subi	r30, 0xAF	; 175
     f50:	ff 4f       	sbci	r31, 0xFF	; 255
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	aa e7       	ldi	r26, 0x7A	; 122
     f58:	b3 e4       	ldi	r27, 0x43	; 67
     f5a:	80 83       	st	Z, r24
     f5c:	91 83       	std	Z+1, r25	; 0x01
     f5e:	a2 83       	std	Z+2, r26	; 0x02
     f60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f62:	8e 01       	movw	r16, r28
     f64:	03 5b       	subi	r16, 0xB3	; 179
     f66:	1f 4f       	sbci	r17, 0xFF	; 255
     f68:	fe 01       	movw	r30, r28
     f6a:	ef 5a       	subi	r30, 0xAF	; 175
     f6c:	ff 4f       	sbci	r31, 0xFF	; 255
     f6e:	60 81       	ld	r22, Z
     f70:	71 81       	ldd	r23, Z+1	; 0x01
     f72:	82 81       	ldd	r24, Z+2	; 0x02
     f74:	93 81       	ldd	r25, Z+3	; 0x03
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	48 e4       	ldi	r20, 0x48	; 72
     f7c:	53 e4       	ldi	r21, 0x43	; 67
     f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	f8 01       	movw	r30, r16
     f88:	80 83       	st	Z, r24
     f8a:	91 83       	std	Z+1, r25	; 0x01
     f8c:	a2 83       	std	Z+2, r26	; 0x02
     f8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f90:	fe 01       	movw	r30, r28
     f92:	e3 5b       	subi	r30, 0xB3	; 179
     f94:	ff 4f       	sbci	r31, 0xFF	; 255
     f96:	60 81       	ld	r22, Z
     f98:	71 81       	ldd	r23, Z+1	; 0x01
     f9a:	82 81       	ldd	r24, Z+2	; 0x02
     f9c:	93 81       	ldd	r25, Z+3	; 0x03
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	40 e8       	ldi	r20, 0x80	; 128
     fa4:	5f e3       	ldi	r21, 0x3F	; 63
     fa6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     faa:	88 23       	and	r24, r24
     fac:	44 f4       	brge	.+16     	; 0xfbe <main+0x39a>
		__ticks = 1;
     fae:	fe 01       	movw	r30, r28
     fb0:	e5 5b       	subi	r30, 0xB5	; 181
     fb2:	ff 4f       	sbci	r31, 0xFF	; 255
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	91 83       	std	Z+1, r25	; 0x01
     fba:	80 83       	st	Z, r24
     fbc:	64 c0       	rjmp	.+200    	; 0x1086 <main+0x462>
	else if (__tmp > 65535)
     fbe:	fe 01       	movw	r30, r28
     fc0:	e3 5b       	subi	r30, 0xB3	; 179
     fc2:	ff 4f       	sbci	r31, 0xFF	; 255
     fc4:	60 81       	ld	r22, Z
     fc6:	71 81       	ldd	r23, Z+1	; 0x01
     fc8:	82 81       	ldd	r24, Z+2	; 0x02
     fca:	93 81       	ldd	r25, Z+3	; 0x03
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	3f ef       	ldi	r19, 0xFF	; 255
     fd0:	4f e7       	ldi	r20, 0x7F	; 127
     fd2:	57 e4       	ldi	r21, 0x47	; 71
     fd4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fd8:	18 16       	cp	r1, r24
     fda:	0c f0       	brlt	.+2      	; 0xfde <main+0x3ba>
     fdc:	43 c0       	rjmp	.+134    	; 0x1064 <main+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fde:	fe 01       	movw	r30, r28
     fe0:	ef 5a       	subi	r30, 0xAF	; 175
     fe2:	ff 4f       	sbci	r31, 0xFF	; 255
     fe4:	60 81       	ld	r22, Z
     fe6:	71 81       	ldd	r23, Z+1	; 0x01
     fe8:	82 81       	ldd	r24, Z+2	; 0x02
     fea:	93 81       	ldd	r25, Z+3	; 0x03
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	40 e2       	ldi	r20, 0x20	; 32
     ff2:	51 e4       	ldi	r21, 0x41	; 65
     ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	8e 01       	movw	r16, r28
     ffe:	05 5b       	subi	r16, 0xB5	; 181
    1000:	1f 4f       	sbci	r17, 0xFF	; 255
    1002:	bc 01       	movw	r22, r24
    1004:	cd 01       	movw	r24, r26
    1006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	f8 01       	movw	r30, r16
    1010:	91 83       	std	Z+1, r25	; 0x01
    1012:	80 83       	st	Z, r24
    1014:	1f c0       	rjmp	.+62     	; 0x1054 <main+0x430>
    1016:	fe 01       	movw	r30, r28
    1018:	e7 5b       	subi	r30, 0xB7	; 183
    101a:	ff 4f       	sbci	r31, 0xFF	; 255
    101c:	84 e1       	ldi	r24, 0x14	; 20
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	91 83       	std	Z+1, r25	; 0x01
    1022:	80 83       	st	Z, r24
    1024:	fe 01       	movw	r30, r28
    1026:	e7 5b       	subi	r30, 0xB7	; 183
    1028:	ff 4f       	sbci	r31, 0xFF	; 255
    102a:	80 81       	ld	r24, Z
    102c:	91 81       	ldd	r25, Z+1	; 0x01
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	f1 f7       	brne	.-4      	; 0x102e <main+0x40a>
    1032:	fe 01       	movw	r30, r28
    1034:	e7 5b       	subi	r30, 0xB7	; 183
    1036:	ff 4f       	sbci	r31, 0xFF	; 255
    1038:	91 83       	std	Z+1, r25	; 0x01
    103a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    103c:	de 01       	movw	r26, r28
    103e:	a5 5b       	subi	r26, 0xB5	; 181
    1040:	bf 4f       	sbci	r27, 0xFF	; 255
    1042:	fe 01       	movw	r30, r28
    1044:	e5 5b       	subi	r30, 0xB5	; 181
    1046:	ff 4f       	sbci	r31, 0xFF	; 255
    1048:	80 81       	ld	r24, Z
    104a:	91 81       	ldd	r25, Z+1	; 0x01
    104c:	01 97       	sbiw	r24, 0x01	; 1
    104e:	11 96       	adiw	r26, 0x01	; 1
    1050:	9c 93       	st	X, r25
    1052:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1054:	fe 01       	movw	r30, r28
    1056:	e5 5b       	subi	r30, 0xB5	; 181
    1058:	ff 4f       	sbci	r31, 0xFF	; 255
    105a:	80 81       	ld	r24, Z
    105c:	91 81       	ldd	r25, Z+1	; 0x01
    105e:	00 97       	sbiw	r24, 0x00	; 0
    1060:	d1 f6       	brne	.-76     	; 0x1016 <main+0x3f2>
    1062:	27 c0       	rjmp	.+78     	; 0x10b2 <main+0x48e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1064:	8e 01       	movw	r16, r28
    1066:	05 5b       	subi	r16, 0xB5	; 181
    1068:	1f 4f       	sbci	r17, 0xFF	; 255
    106a:	fe 01       	movw	r30, r28
    106c:	e3 5b       	subi	r30, 0xB3	; 179
    106e:	ff 4f       	sbci	r31, 0xFF	; 255
    1070:	60 81       	ld	r22, Z
    1072:	71 81       	ldd	r23, Z+1	; 0x01
    1074:	82 81       	ldd	r24, Z+2	; 0x02
    1076:	93 81       	ldd	r25, Z+3	; 0x03
    1078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	f8 01       	movw	r30, r16
    1082:	91 83       	std	Z+1, r25	; 0x01
    1084:	80 83       	st	Z, r24
    1086:	de 01       	movw	r26, r28
    1088:	a9 5b       	subi	r26, 0xB9	; 185
    108a:	bf 4f       	sbci	r27, 0xFF	; 255
    108c:	fe 01       	movw	r30, r28
    108e:	e5 5b       	subi	r30, 0xB5	; 181
    1090:	ff 4f       	sbci	r31, 0xFF	; 255
    1092:	80 81       	ld	r24, Z
    1094:	91 81       	ldd	r25, Z+1	; 0x01
    1096:	8d 93       	st	X+, r24
    1098:	9c 93       	st	X, r25
    109a:	fe 01       	movw	r30, r28
    109c:	e9 5b       	subi	r30, 0xB9	; 185
    109e:	ff 4f       	sbci	r31, 0xFF	; 255
    10a0:	80 81       	ld	r24, Z
    10a2:	91 81       	ldd	r25, Z+1	; 0x01
    10a4:	01 97       	sbiw	r24, 0x01	; 1
    10a6:	f1 f7       	brne	.-4      	; 0x10a4 <main+0x480>
    10a8:	fe 01       	movw	r30, r28
    10aa:	e9 5b       	subi	r30, 0xB9	; 185
    10ac:	ff 4f       	sbci	r31, 0xFF	; 255
    10ae:	91 83       	std	Z+1, r25	; 0x01
    10b0:	80 83       	st	Z, r24
    _delay_ms(250) ;
    vid_UART_vid_SendChar(u8Lumen);
    10b2:	80 91 6d 00 	lds	r24, 0x006D
    10b6:	0e 94 aa 11 	call	0x2354	; 0x2354 <vid_UART_vid_SendChar>
    10ba:	fe 01       	movw	r30, r28
    10bc:	ed 5b       	subi	r30, 0xBD	; 189
    10be:	ff 4f       	sbci	r31, 0xFF	; 255
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	aa e7       	ldi	r26, 0x7A	; 122
    10c6:	b3 e4       	ldi	r27, 0x43	; 67
    10c8:	80 83       	st	Z, r24
    10ca:	91 83       	std	Z+1, r25	; 0x01
    10cc:	a2 83       	std	Z+2, r26	; 0x02
    10ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d0:	8e 01       	movw	r16, r28
    10d2:	01 5c       	subi	r16, 0xC1	; 193
    10d4:	1f 4f       	sbci	r17, 0xFF	; 255
    10d6:	fe 01       	movw	r30, r28
    10d8:	ed 5b       	subi	r30, 0xBD	; 189
    10da:	ff 4f       	sbci	r31, 0xFF	; 255
    10dc:	60 81       	ld	r22, Z
    10de:	71 81       	ldd	r23, Z+1	; 0x01
    10e0:	82 81       	ldd	r24, Z+2	; 0x02
    10e2:	93 81       	ldd	r25, Z+3	; 0x03
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	48 e4       	ldi	r20, 0x48	; 72
    10ea:	53 e4       	ldi	r21, 0x43	; 67
    10ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f0:	dc 01       	movw	r26, r24
    10f2:	cb 01       	movw	r24, r22
    10f4:	f8 01       	movw	r30, r16
    10f6:	80 83       	st	Z, r24
    10f8:	91 83       	std	Z+1, r25	; 0x01
    10fa:	a2 83       	std	Z+2, r26	; 0x02
    10fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10fe:	fe 01       	movw	r30, r28
    1100:	ff 96       	adiw	r30, 0x3f	; 63
    1102:	60 81       	ld	r22, Z
    1104:	71 81       	ldd	r23, Z+1	; 0x01
    1106:	82 81       	ldd	r24, Z+2	; 0x02
    1108:	93 81       	ldd	r25, Z+3	; 0x03
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	40 e8       	ldi	r20, 0x80	; 128
    1110:	5f e3       	ldi	r21, 0x3F	; 63
    1112:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1116:	88 23       	and	r24, r24
    1118:	2c f4       	brge	.+10     	; 0x1124 <main+0x500>
		__ticks = 1;
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	9e af       	std	Y+62, r25	; 0x3e
    1120:	8d af       	std	Y+61, r24	; 0x3d
    1122:	46 c0       	rjmp	.+140    	; 0x11b0 <main+0x58c>
	else if (__tmp > 65535)
    1124:	fe 01       	movw	r30, r28
    1126:	ff 96       	adiw	r30, 0x3f	; 63
    1128:	60 81       	ld	r22, Z
    112a:	71 81       	ldd	r23, Z+1	; 0x01
    112c:	82 81       	ldd	r24, Z+2	; 0x02
    112e:	93 81       	ldd	r25, Z+3	; 0x03
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	3f ef       	ldi	r19, 0xFF	; 255
    1134:	4f e7       	ldi	r20, 0x7F	; 127
    1136:	57 e4       	ldi	r21, 0x47	; 71
    1138:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    113c:	18 16       	cp	r1, r24
    113e:	64 f5       	brge	.+88     	; 0x1198 <main+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1140:	fe 01       	movw	r30, r28
    1142:	ed 5b       	subi	r30, 0xBD	; 189
    1144:	ff 4f       	sbci	r31, 0xFF	; 255
    1146:	60 81       	ld	r22, Z
    1148:	71 81       	ldd	r23, Z+1	; 0x01
    114a:	82 81       	ldd	r24, Z+2	; 0x02
    114c:	93 81       	ldd	r25, Z+3	; 0x03
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	40 e2       	ldi	r20, 0x20	; 32
    1154:	51 e4       	ldi	r21, 0x41	; 65
    1156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	bc 01       	movw	r22, r24
    1160:	cd 01       	movw	r24, r26
    1162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	9e af       	std	Y+62, r25	; 0x3e
    116c:	8d af       	std	Y+61, r24	; 0x3d
    116e:	0f c0       	rjmp	.+30     	; 0x118e <main+0x56a>
    1170:	84 e1       	ldi	r24, 0x14	; 20
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	9c af       	std	Y+60, r25	; 0x3c
    1176:	8b af       	std	Y+59, r24	; 0x3b
    1178:	8b ad       	ldd	r24, Y+59	; 0x3b
    117a:	9c ad       	ldd	r25, Y+60	; 0x3c
    117c:	01 97       	sbiw	r24, 0x01	; 1
    117e:	f1 f7       	brne	.-4      	; 0x117c <main+0x558>
    1180:	9c af       	std	Y+60, r25	; 0x3c
    1182:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1184:	8d ad       	ldd	r24, Y+61	; 0x3d
    1186:	9e ad       	ldd	r25, Y+62	; 0x3e
    1188:	01 97       	sbiw	r24, 0x01	; 1
    118a:	9e af       	std	Y+62, r25	; 0x3e
    118c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    118e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1190:	9e ad       	ldd	r25, Y+62	; 0x3e
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	69 f7       	brne	.-38     	; 0x1170 <main+0x54c>
    1196:	16 c0       	rjmp	.+44     	; 0x11c4 <main+0x5a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1198:	fe 01       	movw	r30, r28
    119a:	ff 96       	adiw	r30, 0x3f	; 63
    119c:	60 81       	ld	r22, Z
    119e:	71 81       	ldd	r23, Z+1	; 0x01
    11a0:	82 81       	ldd	r24, Z+2	; 0x02
    11a2:	93 81       	ldd	r25, Z+3	; 0x03
    11a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	9e af       	std	Y+62, r25	; 0x3e
    11ae:	8d af       	std	Y+61, r24	; 0x3d
    11b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    11b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    11b4:	9a af       	std	Y+58, r25	; 0x3a
    11b6:	89 af       	std	Y+57, r24	; 0x39
    11b8:	89 ad       	ldd	r24, Y+57	; 0x39
    11ba:	9a ad       	ldd	r25, Y+58	; 0x3a
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	f1 f7       	brne	.-4      	; 0x11bc <main+0x598>
    11c0:	9a af       	std	Y+58, r25	; 0x3a
    11c2:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(250) ;


   vid_UART_vid_SendChar('c') ;        // alert 2nd uc to recieve number of people inside
    11c4:	83 e6       	ldi	r24, 0x63	; 99
    11c6:	0e 94 aa 11 	call	0x2354	; 0x2354 <vid_UART_vid_SendChar>
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	aa e7       	ldi	r26, 0x7A	; 122
    11d0:	b3 e4       	ldi	r27, 0x43	; 67
    11d2:	8d ab       	std	Y+53, r24	; 0x35
    11d4:	9e ab       	std	Y+54, r25	; 0x36
    11d6:	af ab       	std	Y+55, r26	; 0x37
    11d8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11da:	6d a9       	ldd	r22, Y+53	; 0x35
    11dc:	7e a9       	ldd	r23, Y+54	; 0x36
    11de:	8f a9       	ldd	r24, Y+55	; 0x37
    11e0:	98 ad       	ldd	r25, Y+56	; 0x38
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	48 e4       	ldi	r20, 0x48	; 72
    11e8:	53 e4       	ldi	r21, 0x43	; 67
    11ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ee:	dc 01       	movw	r26, r24
    11f0:	cb 01       	movw	r24, r22
    11f2:	89 ab       	std	Y+49, r24	; 0x31
    11f4:	9a ab       	std	Y+50, r25	; 0x32
    11f6:	ab ab       	std	Y+51, r26	; 0x33
    11f8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11fa:	69 a9       	ldd	r22, Y+49	; 0x31
    11fc:	7a a9       	ldd	r23, Y+50	; 0x32
    11fe:	8b a9       	ldd	r24, Y+51	; 0x33
    1200:	9c a9       	ldd	r25, Y+52	; 0x34
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	40 e8       	ldi	r20, 0x80	; 128
    1208:	5f e3       	ldi	r21, 0x3F	; 63
    120a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    120e:	88 23       	and	r24, r24
    1210:	2c f4       	brge	.+10     	; 0x121c <main+0x5f8>
		__ticks = 1;
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	98 ab       	std	Y+48, r25	; 0x30
    1218:	8f a7       	std	Y+47, r24	; 0x2f
    121a:	3f c0       	rjmp	.+126    	; 0x129a <main+0x676>
	else if (__tmp > 65535)
    121c:	69 a9       	ldd	r22, Y+49	; 0x31
    121e:	7a a9       	ldd	r23, Y+50	; 0x32
    1220:	8b a9       	ldd	r24, Y+51	; 0x33
    1222:	9c a9       	ldd	r25, Y+52	; 0x34
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	3f ef       	ldi	r19, 0xFF	; 255
    1228:	4f e7       	ldi	r20, 0x7F	; 127
    122a:	57 e4       	ldi	r21, 0x47	; 71
    122c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1230:	18 16       	cp	r1, r24
    1232:	4c f5       	brge	.+82     	; 0x1286 <main+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1234:	6d a9       	ldd	r22, Y+53	; 0x35
    1236:	7e a9       	ldd	r23, Y+54	; 0x36
    1238:	8f a9       	ldd	r24, Y+55	; 0x37
    123a:	98 ad       	ldd	r25, Y+56	; 0x38
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	40 e2       	ldi	r20, 0x20	; 32
    1242:	51 e4       	ldi	r21, 0x41	; 65
    1244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1248:	dc 01       	movw	r26, r24
    124a:	cb 01       	movw	r24, r22
    124c:	bc 01       	movw	r22, r24
    124e:	cd 01       	movw	r24, r26
    1250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1254:	dc 01       	movw	r26, r24
    1256:	cb 01       	movw	r24, r22
    1258:	98 ab       	std	Y+48, r25	; 0x30
    125a:	8f a7       	std	Y+47, r24	; 0x2f
    125c:	0f c0       	rjmp	.+30     	; 0x127c <main+0x658>
    125e:	84 e1       	ldi	r24, 0x14	; 20
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	9e a7       	std	Y+46, r25	; 0x2e
    1264:	8d a7       	std	Y+45, r24	; 0x2d
    1266:	8d a5       	ldd	r24, Y+45	; 0x2d
    1268:	9e a5       	ldd	r25, Y+46	; 0x2e
    126a:	01 97       	sbiw	r24, 0x01	; 1
    126c:	f1 f7       	brne	.-4      	; 0x126a <main+0x646>
    126e:	9e a7       	std	Y+46, r25	; 0x2e
    1270:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1272:	8f a5       	ldd	r24, Y+47	; 0x2f
    1274:	98 a9       	ldd	r25, Y+48	; 0x30
    1276:	01 97       	sbiw	r24, 0x01	; 1
    1278:	98 ab       	std	Y+48, r25	; 0x30
    127a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    127c:	8f a5       	ldd	r24, Y+47	; 0x2f
    127e:	98 a9       	ldd	r25, Y+48	; 0x30
    1280:	00 97       	sbiw	r24, 0x00	; 0
    1282:	69 f7       	brne	.-38     	; 0x125e <main+0x63a>
    1284:	14 c0       	rjmp	.+40     	; 0x12ae <main+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1286:	69 a9       	ldd	r22, Y+49	; 0x31
    1288:	7a a9       	ldd	r23, Y+50	; 0x32
    128a:	8b a9       	ldd	r24, Y+51	; 0x33
    128c:	9c a9       	ldd	r25, Y+52	; 0x34
    128e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1292:	dc 01       	movw	r26, r24
    1294:	cb 01       	movw	r24, r22
    1296:	98 ab       	std	Y+48, r25	; 0x30
    1298:	8f a7       	std	Y+47, r24	; 0x2f
    129a:	8f a5       	ldd	r24, Y+47	; 0x2f
    129c:	98 a9       	ldd	r25, Y+48	; 0x30
    129e:	9c a7       	std	Y+44, r25	; 0x2c
    12a0:	8b a7       	std	Y+43, r24	; 0x2b
    12a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    12a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    12a6:	01 97       	sbiw	r24, 0x01	; 1
    12a8:	f1 f7       	brne	.-4      	; 0x12a6 <main+0x682>
    12aa:	9c a7       	std	Y+44, r25	; 0x2c
    12ac:	8b a7       	std	Y+43, r24	; 0x2b
   _delay_ms(250) ;
   vid_UART_vid_SendChar(u8PeopleInside);
    12ae:	80 91 6e 00 	lds	r24, 0x006E
    12b2:	0e 94 aa 11 	call	0x2354	; 0x2354 <vid_UART_vid_SendChar>
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	aa e7       	ldi	r26, 0x7A	; 122
    12bc:	b3 e4       	ldi	r27, 0x43	; 67
    12be:	8f a3       	std	Y+39, r24	; 0x27
    12c0:	98 a7       	std	Y+40, r25	; 0x28
    12c2:	a9 a7       	std	Y+41, r26	; 0x29
    12c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12c6:	6f a1       	ldd	r22, Y+39	; 0x27
    12c8:	78 a5       	ldd	r23, Y+40	; 0x28
    12ca:	89 a5       	ldd	r24, Y+41	; 0x29
    12cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	48 e4       	ldi	r20, 0x48	; 72
    12d4:	53 e4       	ldi	r21, 0x43	; 67
    12d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	8b a3       	std	Y+35, r24	; 0x23
    12e0:	9c a3       	std	Y+36, r25	; 0x24
    12e2:	ad a3       	std	Y+37, r26	; 0x25
    12e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12e6:	6b a1       	ldd	r22, Y+35	; 0x23
    12e8:	7c a1       	ldd	r23, Y+36	; 0x24
    12ea:	8d a1       	ldd	r24, Y+37	; 0x25
    12ec:	9e a1       	ldd	r25, Y+38	; 0x26
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	40 e8       	ldi	r20, 0x80	; 128
    12f4:	5f e3       	ldi	r21, 0x3F	; 63
    12f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12fa:	88 23       	and	r24, r24
    12fc:	2c f4       	brge	.+10     	; 0x1308 <main+0x6e4>
		__ticks = 1;
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	9a a3       	std	Y+34, r25	; 0x22
    1304:	89 a3       	std	Y+33, r24	; 0x21
    1306:	3f c0       	rjmp	.+126    	; 0x1386 <main+0x762>
	else if (__tmp > 65535)
    1308:	6b a1       	ldd	r22, Y+35	; 0x23
    130a:	7c a1       	ldd	r23, Y+36	; 0x24
    130c:	8d a1       	ldd	r24, Y+37	; 0x25
    130e:	9e a1       	ldd	r25, Y+38	; 0x26
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	3f ef       	ldi	r19, 0xFF	; 255
    1314:	4f e7       	ldi	r20, 0x7F	; 127
    1316:	57 e4       	ldi	r21, 0x47	; 71
    1318:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    131c:	18 16       	cp	r1, r24
    131e:	4c f5       	brge	.+82     	; 0x1372 <main+0x74e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1320:	6f a1       	ldd	r22, Y+39	; 0x27
    1322:	78 a5       	ldd	r23, Y+40	; 0x28
    1324:	89 a5       	ldd	r24, Y+41	; 0x29
    1326:	9a a5       	ldd	r25, Y+42	; 0x2a
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	40 e2       	ldi	r20, 0x20	; 32
    132e:	51 e4       	ldi	r21, 0x41	; 65
    1330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	bc 01       	movw	r22, r24
    133a:	cd 01       	movw	r24, r26
    133c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1340:	dc 01       	movw	r26, r24
    1342:	cb 01       	movw	r24, r22
    1344:	9a a3       	std	Y+34, r25	; 0x22
    1346:	89 a3       	std	Y+33, r24	; 0x21
    1348:	0f c0       	rjmp	.+30     	; 0x1368 <main+0x744>
    134a:	84 e1       	ldi	r24, 0x14	; 20
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	98 a3       	std	Y+32, r25	; 0x20
    1350:	8f 8f       	std	Y+31, r24	; 0x1f
    1352:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1354:	98 a1       	ldd	r25, Y+32	; 0x20
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	f1 f7       	brne	.-4      	; 0x1356 <main+0x732>
    135a:	98 a3       	std	Y+32, r25	; 0x20
    135c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    135e:	89 a1       	ldd	r24, Y+33	; 0x21
    1360:	9a a1       	ldd	r25, Y+34	; 0x22
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	9a a3       	std	Y+34, r25	; 0x22
    1366:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1368:	89 a1       	ldd	r24, Y+33	; 0x21
    136a:	9a a1       	ldd	r25, Y+34	; 0x22
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	69 f7       	brne	.-38     	; 0x134a <main+0x726>
    1370:	14 c0       	rjmp	.+40     	; 0x139a <main+0x776>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1372:	6b a1       	ldd	r22, Y+35	; 0x23
    1374:	7c a1       	ldd	r23, Y+36	; 0x24
    1376:	8d a1       	ldd	r24, Y+37	; 0x25
    1378:	9e a1       	ldd	r25, Y+38	; 0x26
    137a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    137e:	dc 01       	movw	r26, r24
    1380:	cb 01       	movw	r24, r22
    1382:	9a a3       	std	Y+34, r25	; 0x22
    1384:	89 a3       	std	Y+33, r24	; 0x21
    1386:	89 a1       	ldd	r24, Y+33	; 0x21
    1388:	9a a1       	ldd	r25, Y+34	; 0x22
    138a:	9e 8f       	std	Y+30, r25	; 0x1e
    138c:	8d 8f       	std	Y+29, r24	; 0x1d
    138e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1390:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1392:	01 97       	sbiw	r24, 0x01	; 1
    1394:	f1 f7       	brne	.-4      	; 0x1392 <main+0x76e>
    1396:	9e 8f       	std	Y+30, r25	; 0x1e
    1398:	8d 8f       	std	Y+29, r24	; 0x1d
   _delay_ms(250) ;


   vid_UART_vid_SendChar('d') ;        // alert 2nd uc to recieve alarm status
    139a:	84 e6       	ldi	r24, 0x64	; 100
    139c:	0e 94 aa 11 	call	0x2354	; 0x2354 <vid_UART_vid_SendChar>
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	aa e7       	ldi	r26, 0x7A	; 122
    13a6:	b3 e4       	ldi	r27, 0x43	; 67
    13a8:	89 8f       	std	Y+25, r24	; 0x19
    13aa:	9a 8f       	std	Y+26, r25	; 0x1a
    13ac:	ab 8f       	std	Y+27, r26	; 0x1b
    13ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b0:	69 8d       	ldd	r22, Y+25	; 0x19
    13b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	48 e4       	ldi	r20, 0x48	; 72
    13be:	53 e4       	ldi	r21, 0x43	; 67
    13c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c4:	dc 01       	movw	r26, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	8d 8b       	std	Y+21, r24	; 0x15
    13ca:	9e 8b       	std	Y+22, r25	; 0x16
    13cc:	af 8b       	std	Y+23, r26	; 0x17
    13ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13d0:	6d 89       	ldd	r22, Y+21	; 0x15
    13d2:	7e 89       	ldd	r23, Y+22	; 0x16
    13d4:	8f 89       	ldd	r24, Y+23	; 0x17
    13d6:	98 8d       	ldd	r25, Y+24	; 0x18
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	40 e8       	ldi	r20, 0x80	; 128
    13de:	5f e3       	ldi	r21, 0x3F	; 63
    13e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13e4:	88 23       	and	r24, r24
    13e6:	2c f4       	brge	.+10     	; 0x13f2 <main+0x7ce>
		__ticks = 1;
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	9c 8b       	std	Y+20, r25	; 0x14
    13ee:	8b 8b       	std	Y+19, r24	; 0x13
    13f0:	3f c0       	rjmp	.+126    	; 0x1470 <main+0x84c>
	else if (__tmp > 65535)
    13f2:	6d 89       	ldd	r22, Y+21	; 0x15
    13f4:	7e 89       	ldd	r23, Y+22	; 0x16
    13f6:	8f 89       	ldd	r24, Y+23	; 0x17
    13f8:	98 8d       	ldd	r25, Y+24	; 0x18
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	3f ef       	ldi	r19, 0xFF	; 255
    13fe:	4f e7       	ldi	r20, 0x7F	; 127
    1400:	57 e4       	ldi	r21, 0x47	; 71
    1402:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1406:	18 16       	cp	r1, r24
    1408:	4c f5       	brge	.+82     	; 0x145c <main+0x838>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    140a:	69 8d       	ldd	r22, Y+25	; 0x19
    140c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    140e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1410:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	40 e2       	ldi	r20, 0x20	; 32
    1418:	51 e4       	ldi	r21, 0x41	; 65
    141a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	bc 01       	movw	r22, r24
    1424:	cd 01       	movw	r24, r26
    1426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	9c 8b       	std	Y+20, r25	; 0x14
    1430:	8b 8b       	std	Y+19, r24	; 0x13
    1432:	0f c0       	rjmp	.+30     	; 0x1452 <main+0x82e>
    1434:	84 e1       	ldi	r24, 0x14	; 20
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	9a 8b       	std	Y+18, r25	; 0x12
    143a:	89 8b       	std	Y+17, r24	; 0x11
    143c:	89 89       	ldd	r24, Y+17	; 0x11
    143e:	9a 89       	ldd	r25, Y+18	; 0x12
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	f1 f7       	brne	.-4      	; 0x1440 <main+0x81c>
    1444:	9a 8b       	std	Y+18, r25	; 0x12
    1446:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1448:	8b 89       	ldd	r24, Y+19	; 0x13
    144a:	9c 89       	ldd	r25, Y+20	; 0x14
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	9c 8b       	std	Y+20, r25	; 0x14
    1450:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1452:	8b 89       	ldd	r24, Y+19	; 0x13
    1454:	9c 89       	ldd	r25, Y+20	; 0x14
    1456:	00 97       	sbiw	r24, 0x00	; 0
    1458:	69 f7       	brne	.-38     	; 0x1434 <main+0x810>
    145a:	14 c0       	rjmp	.+40     	; 0x1484 <main+0x860>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    145c:	6d 89       	ldd	r22, Y+21	; 0x15
    145e:	7e 89       	ldd	r23, Y+22	; 0x16
    1460:	8f 89       	ldd	r24, Y+23	; 0x17
    1462:	98 8d       	ldd	r25, Y+24	; 0x18
    1464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	9c 8b       	std	Y+20, r25	; 0x14
    146e:	8b 8b       	std	Y+19, r24	; 0x13
    1470:	8b 89       	ldd	r24, Y+19	; 0x13
    1472:	9c 89       	ldd	r25, Y+20	; 0x14
    1474:	98 8b       	std	Y+16, r25	; 0x10
    1476:	8f 87       	std	Y+15, r24	; 0x0f
    1478:	8f 85       	ldd	r24, Y+15	; 0x0f
    147a:	98 89       	ldd	r25, Y+16	; 0x10
    147c:	01 97       	sbiw	r24, 0x01	; 1
    147e:	f1 f7       	brne	.-4      	; 0x147c <main+0x858>
    1480:	98 8b       	std	Y+16, r25	; 0x10
    1482:	8f 87       	std	Y+15, r24	; 0x0f
   _delay_ms(250) ;
   vid_UART_vid_SendChar(u8AlarmStatus);
    1484:	80 91 6f 00 	lds	r24, 0x006F
    1488:	0e 94 aa 11 	call	0x2354	; 0x2354 <vid_UART_vid_SendChar>
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	aa e7       	ldi	r26, 0x7A	; 122
    1492:	b3 e4       	ldi	r27, 0x43	; 67
    1494:	8b 87       	std	Y+11, r24	; 0x0b
    1496:	9c 87       	std	Y+12, r25	; 0x0c
    1498:	ad 87       	std	Y+13, r26	; 0x0d
    149a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    149c:	6b 85       	ldd	r22, Y+11	; 0x0b
    149e:	7c 85       	ldd	r23, Y+12	; 0x0c
    14a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	48 e4       	ldi	r20, 0x48	; 72
    14aa:	53 e4       	ldi	r21, 0x43	; 67
    14ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	8f 83       	std	Y+7, r24	; 0x07
    14b6:	98 87       	std	Y+8, r25	; 0x08
    14b8:	a9 87       	std	Y+9, r26	; 0x09
    14ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14bc:	6f 81       	ldd	r22, Y+7	; 0x07
    14be:	78 85       	ldd	r23, Y+8	; 0x08
    14c0:	89 85       	ldd	r24, Y+9	; 0x09
    14c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	40 e8       	ldi	r20, 0x80	; 128
    14ca:	5f e3       	ldi	r21, 0x3F	; 63
    14cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14d0:	88 23       	and	r24, r24
    14d2:	2c f4       	brge	.+10     	; 0x14de <main+0x8ba>
		__ticks = 1;
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	9e 83       	std	Y+6, r25	; 0x06
    14da:	8d 83       	std	Y+5, r24	; 0x05
    14dc:	3f c0       	rjmp	.+126    	; 0x155c <main+0x938>
	else if (__tmp > 65535)
    14de:	6f 81       	ldd	r22, Y+7	; 0x07
    14e0:	78 85       	ldd	r23, Y+8	; 0x08
    14e2:	89 85       	ldd	r24, Y+9	; 0x09
    14e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	3f ef       	ldi	r19, 0xFF	; 255
    14ea:	4f e7       	ldi	r20, 0x7F	; 127
    14ec:	57 e4       	ldi	r21, 0x47	; 71
    14ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14f2:	18 16       	cp	r1, r24
    14f4:	4c f5       	brge	.+82     	; 0x1548 <main+0x924>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    14f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    14fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    14fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	40 e2       	ldi	r20, 0x20	; 32
    1504:	51 e4       	ldi	r21, 0x41	; 65
    1506:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	bc 01       	movw	r22, r24
    1510:	cd 01       	movw	r24, r26
    1512:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1516:	dc 01       	movw	r26, r24
    1518:	cb 01       	movw	r24, r22
    151a:	9e 83       	std	Y+6, r25	; 0x06
    151c:	8d 83       	std	Y+5, r24	; 0x05
    151e:	0f c0       	rjmp	.+30     	; 0x153e <main+0x91a>
    1520:	84 e1       	ldi	r24, 0x14	; 20
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	9c 83       	std	Y+4, r25	; 0x04
    1526:	8b 83       	std	Y+3, r24	; 0x03
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	9c 81       	ldd	r25, Y+4	; 0x04
    152c:	01 97       	sbiw	r24, 0x01	; 1
    152e:	f1 f7       	brne	.-4      	; 0x152c <main+0x908>
    1530:	9c 83       	std	Y+4, r25	; 0x04
    1532:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1534:	8d 81       	ldd	r24, Y+5	; 0x05
    1536:	9e 81       	ldd	r25, Y+6	; 0x06
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	9e 83       	std	Y+6, r25	; 0x06
    153c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    153e:	8d 81       	ldd	r24, Y+5	; 0x05
    1540:	9e 81       	ldd	r25, Y+6	; 0x06
    1542:	00 97       	sbiw	r24, 0x00	; 0
    1544:	69 f7       	brne	.-38     	; 0x1520 <main+0x8fc>
    1546:	14 c0       	rjmp	.+40     	; 0x1570 <main+0x94c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1548:	6f 81       	ldd	r22, Y+7	; 0x07
    154a:	78 85       	ldd	r23, Y+8	; 0x08
    154c:	89 85       	ldd	r24, Y+9	; 0x09
    154e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	9e 83       	std	Y+6, r25	; 0x06
    155a:	8d 83       	std	Y+5, r24	; 0x05
    155c:	8d 81       	ldd	r24, Y+5	; 0x05
    155e:	9e 81       	ldd	r25, Y+6	; 0x06
    1560:	9a 83       	std	Y+2, r25	; 0x02
    1562:	89 83       	std	Y+1, r24	; 0x01
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	9a 81       	ldd	r25, Y+2	; 0x02
    1568:	01 97       	sbiw	r24, 0x01	; 1
    156a:	f1 f7       	brne	.-4      	; 0x1568 <main+0x944>
    156c:	9a 83       	std	Y+2, r25	; 0x02
    156e:	89 83       	std	Y+1, r24	; 0x01
   _delay_ms(250) ;

    asm ("SEI") ;      // enable global interrupt
    1570:	78 94       	sei
    1572:	73 cb       	rjmp	.-2330   	; 0xc5a <main+0x36>

00001574 <DIO_SetPinValue>:
#include "DIO_reg.h"


/* IO Pins */
void DIO_SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy)
{
    1574:	df 93       	push	r29
    1576:	cf 93       	push	r28
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	27 97       	sbiw	r28, 0x07	; 7
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	f8 94       	cli
    1582:	de bf       	out	0x3e, r29	; 62
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	cd bf       	out	0x3d, r28	; 61
    1588:	89 83       	std	Y+1, r24	; 0x01
    158a:	6a 83       	std	Y+2, r22	; 0x02
    158c:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD_DIO) && (u8PinIdCopy <= PIN7))
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	84 30       	cpi	r24, 0x04	; 4
    1592:	08 f0       	brcs	.+2      	; 0x1596 <DIO_SetPinValue+0x22>
    1594:	ee c0       	rjmp	.+476    	; 0x1772 <DIO_SetPinValue+0x1fe>
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	88 30       	cpi	r24, 0x08	; 8
    159a:	08 f0       	brcs	.+2      	; 0x159e <DIO_SetPinValue+0x2a>
    159c:	ea c0       	rjmp	.+468    	; 0x1772 <DIO_SetPinValue+0x1fe>
	{
		if (u8PinValCopy == HIGH)
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	81 30       	cpi	r24, 0x01	; 1
    15a2:	09 f0       	breq	.+2      	; 0x15a6 <DIO_SetPinValue+0x32>
    15a4:	6f c0       	rjmp	.+222    	; 0x1684 <DIO_SetPinValue+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	3f 83       	std	Y+7, r19	; 0x07
    15ae:	2e 83       	std	Y+6, r18	; 0x06
    15b0:	8e 81       	ldd	r24, Y+6	; 0x06
    15b2:	9f 81       	ldd	r25, Y+7	; 0x07
    15b4:	81 30       	cpi	r24, 0x01	; 1
    15b6:	91 05       	cpc	r25, r1
    15b8:	49 f1       	breq	.+82     	; 0x160c <DIO_SetPinValue+0x98>
    15ba:	2e 81       	ldd	r18, Y+6	; 0x06
    15bc:	3f 81       	ldd	r19, Y+7	; 0x07
    15be:	22 30       	cpi	r18, 0x02	; 2
    15c0:	31 05       	cpc	r19, r1
    15c2:	2c f4       	brge	.+10     	; 0x15ce <DIO_SetPinValue+0x5a>
    15c4:	8e 81       	ldd	r24, Y+6	; 0x06
    15c6:	9f 81       	ldd	r25, Y+7	; 0x07
    15c8:	00 97       	sbiw	r24, 0x00	; 0
    15ca:	61 f0       	breq	.+24     	; 0x15e4 <DIO_SetPinValue+0x70>
    15cc:	d2 c0       	rjmp	.+420    	; 0x1772 <DIO_SetPinValue+0x1fe>
    15ce:	2e 81       	ldd	r18, Y+6	; 0x06
    15d0:	3f 81       	ldd	r19, Y+7	; 0x07
    15d2:	22 30       	cpi	r18, 0x02	; 2
    15d4:	31 05       	cpc	r19, r1
    15d6:	71 f1       	breq	.+92     	; 0x1634 <DIO_SetPinValue+0xc0>
    15d8:	8e 81       	ldd	r24, Y+6	; 0x06
    15da:	9f 81       	ldd	r25, Y+7	; 0x07
    15dc:	83 30       	cpi	r24, 0x03	; 3
    15de:	91 05       	cpc	r25, r1
    15e0:	e9 f1       	breq	.+122    	; 0x165c <DIO_SetPinValue+0xe8>
    15e2:	c7 c0       	rjmp	.+398    	; 0x1772 <DIO_SetPinValue+0x1fe>
			{
				case PORTA_DIO: SET_BIT(PORTA_Register,u8PinIdCopy); break;
    15e4:	ab e3       	ldi	r26, 0x3B	; 59
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	eb e3       	ldi	r30, 0x3B	; 59
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	48 2f       	mov	r20, r24
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	02 2e       	mov	r0, r18
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <DIO_SetPinValue+0x8e>
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	0a 94       	dec	r0
    1604:	e2 f7       	brpl	.-8      	; 0x15fe <DIO_SetPinValue+0x8a>
    1606:	84 2b       	or	r24, r20
    1608:	8c 93       	st	X, r24
    160a:	b3 c0       	rjmp	.+358    	; 0x1772 <DIO_SetPinValue+0x1fe>
				case PORTB_DIO: SET_BIT(PORTB_Register,u8PinIdCopy); break;
    160c:	a8 e3       	ldi	r26, 0x38	; 56
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e8 e3       	ldi	r30, 0x38	; 56
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	48 2f       	mov	r20, r24
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	02 2e       	mov	r0, r18
    1624:	02 c0       	rjmp	.+4      	; 0x162a <DIO_SetPinValue+0xb6>
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	0a 94       	dec	r0
    162c:	e2 f7       	brpl	.-8      	; 0x1626 <DIO_SetPinValue+0xb2>
    162e:	84 2b       	or	r24, r20
    1630:	8c 93       	st	X, r24
    1632:	9f c0       	rjmp	.+318    	; 0x1772 <DIO_SetPinValue+0x1fe>
				case PORTC_DIO: SET_BIT(PORTC_Register,u8PinIdCopy); break;
    1634:	a5 e3       	ldi	r26, 0x35	; 53
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	e5 e3       	ldi	r30, 0x35	; 53
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	48 2f       	mov	r20, r24
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	02 2e       	mov	r0, r18
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <DIO_SetPinValue+0xde>
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	0a 94       	dec	r0
    1654:	e2 f7       	brpl	.-8      	; 0x164e <DIO_SetPinValue+0xda>
    1656:	84 2b       	or	r24, r20
    1658:	8c 93       	st	X, r24
    165a:	8b c0       	rjmp	.+278    	; 0x1772 <DIO_SetPinValue+0x1fe>
				case PORTD_DIO: SET_BIT(PORTD_Register,u8PinIdCopy); break;
    165c:	a2 e3       	ldi	r26, 0x32	; 50
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e2 e3       	ldi	r30, 0x32	; 50
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	48 2f       	mov	r20, r24
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	02 2e       	mov	r0, r18
    1674:	02 c0       	rjmp	.+4      	; 0x167a <DIO_SetPinValue+0x106>
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	0a 94       	dec	r0
    167c:	e2 f7       	brpl	.-8      	; 0x1676 <DIO_SetPinValue+0x102>
    167e:	84 2b       	or	r24, r20
    1680:	8c 93       	st	X, r24
    1682:	77 c0       	rjmp	.+238    	; 0x1772 <DIO_SetPinValue+0x1fe>
			}
		
		}
		
		else if (u8PinValCopy == LOW)
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	88 23       	and	r24, r24
    1688:	09 f0       	breq	.+2      	; 0x168c <DIO_SetPinValue+0x118>
    168a:	73 c0       	rjmp	.+230    	; 0x1772 <DIO_SetPinValue+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	3d 83       	std	Y+5, r19	; 0x05
    1694:	2c 83       	std	Y+4, r18	; 0x04
    1696:	8c 81       	ldd	r24, Y+4	; 0x04
    1698:	9d 81       	ldd	r25, Y+5	; 0x05
    169a:	81 30       	cpi	r24, 0x01	; 1
    169c:	91 05       	cpc	r25, r1
    169e:	59 f1       	breq	.+86     	; 0x16f6 <DIO_SetPinValue+0x182>
    16a0:	2c 81       	ldd	r18, Y+4	; 0x04
    16a2:	3d 81       	ldd	r19, Y+5	; 0x05
    16a4:	22 30       	cpi	r18, 0x02	; 2
    16a6:	31 05       	cpc	r19, r1
    16a8:	2c f4       	brge	.+10     	; 0x16b4 <DIO_SetPinValue+0x140>
    16aa:	8c 81       	ldd	r24, Y+4	; 0x04
    16ac:	9d 81       	ldd	r25, Y+5	; 0x05
    16ae:	00 97       	sbiw	r24, 0x00	; 0
    16b0:	69 f0       	breq	.+26     	; 0x16cc <DIO_SetPinValue+0x158>
    16b2:	5f c0       	rjmp	.+190    	; 0x1772 <DIO_SetPinValue+0x1fe>
    16b4:	2c 81       	ldd	r18, Y+4	; 0x04
    16b6:	3d 81       	ldd	r19, Y+5	; 0x05
    16b8:	22 30       	cpi	r18, 0x02	; 2
    16ba:	31 05       	cpc	r19, r1
    16bc:	89 f1       	breq	.+98     	; 0x1720 <DIO_SetPinValue+0x1ac>
    16be:	8c 81       	ldd	r24, Y+4	; 0x04
    16c0:	9d 81       	ldd	r25, Y+5	; 0x05
    16c2:	83 30       	cpi	r24, 0x03	; 3
    16c4:	91 05       	cpc	r25, r1
    16c6:	09 f4       	brne	.+2      	; 0x16ca <DIO_SetPinValue+0x156>
    16c8:	40 c0       	rjmp	.+128    	; 0x174a <DIO_SetPinValue+0x1d6>
    16ca:	53 c0       	rjmp	.+166    	; 0x1772 <DIO_SetPinValue+0x1fe>
			{
				case PORTA_DIO: CLR_BIT(PORTA_Register,u8PinIdCopy); break;
    16cc:	ab e3       	ldi	r26, 0x3B	; 59
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	eb e3       	ldi	r30, 0x3B	; 59
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	48 2f       	mov	r20, r24
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	02 2e       	mov	r0, r18
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <DIO_SetPinValue+0x176>
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	0a 94       	dec	r0
    16ec:	e2 f7       	brpl	.-8      	; 0x16e6 <DIO_SetPinValue+0x172>
    16ee:	80 95       	com	r24
    16f0:	84 23       	and	r24, r20
    16f2:	8c 93       	st	X, r24
    16f4:	3e c0       	rjmp	.+124    	; 0x1772 <DIO_SetPinValue+0x1fe>
				case PORTB_DIO: CLR_BIT(PORTB_Register,u8PinIdCopy); break;
    16f6:	a8 e3       	ldi	r26, 0x38	; 56
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e8 e3       	ldi	r30, 0x38	; 56
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	48 2f       	mov	r20, r24
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	28 2f       	mov	r18, r24
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	02 2e       	mov	r0, r18
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <DIO_SetPinValue+0x1a0>
    1710:	88 0f       	add	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	0a 94       	dec	r0
    1716:	e2 f7       	brpl	.-8      	; 0x1710 <DIO_SetPinValue+0x19c>
    1718:	80 95       	com	r24
    171a:	84 23       	and	r24, r20
    171c:	8c 93       	st	X, r24
    171e:	29 c0       	rjmp	.+82     	; 0x1772 <DIO_SetPinValue+0x1fe>
				case PORTC_DIO: CLR_BIT(PORTC_Register,u8PinIdCopy); break;
    1720:	a5 e3       	ldi	r26, 0x35	; 53
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	e5 e3       	ldi	r30, 0x35	; 53
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	48 2f       	mov	r20, r24
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	02 2e       	mov	r0, r18
    1738:	02 c0       	rjmp	.+4      	; 0x173e <DIO_SetPinValue+0x1ca>
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	0a 94       	dec	r0
    1740:	e2 f7       	brpl	.-8      	; 0x173a <DIO_SetPinValue+0x1c6>
    1742:	80 95       	com	r24
    1744:	84 23       	and	r24, r20
    1746:	8c 93       	st	X, r24
    1748:	14 c0       	rjmp	.+40     	; 0x1772 <DIO_SetPinValue+0x1fe>
				case PORTD_DIO: CLR_BIT(PORTD_Register,u8PinIdCopy); break;
    174a:	a2 e3       	ldi	r26, 0x32	; 50
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	e2 e3       	ldi	r30, 0x32	; 50
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	48 2f       	mov	r20, r24
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	02 2e       	mov	r0, r18
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <DIO_SetPinValue+0x1f4>
    1764:	88 0f       	add	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	0a 94       	dec	r0
    176a:	e2 f7       	brpl	.-8      	; 0x1764 <DIO_SetPinValue+0x1f0>
    176c:	80 95       	com	r24
    176e:	84 23       	and	r24, r20
    1770:	8c 93       	st	X, r24
	
	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
    1772:	27 96       	adiw	r28, 0x07	; 7
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	08 95       	ret

00001784 <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy)
{
    1784:	df 93       	push	r29
    1786:	cf 93       	push	r28
    1788:	00 d0       	rcall	.+0      	; 0x178a <DIO_GetPinValue+0x6>
    178a:	00 d0       	rcall	.+0      	; 0x178c <DIO_GetPinValue+0x8>
    178c:	0f 92       	push	r0
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	8a 83       	std	Y+2, r24	; 0x02
    1794:	6b 83       	std	Y+3, r22	; 0x03
	/* Define Local Variable to get the BIT Value */
	u8 u8ResultLocal;
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD_DIO) && (u8PinIdCopy <= PIN7))
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	84 30       	cpi	r24, 0x04	; 4
    179a:	08 f0       	brcs	.+2      	; 0x179e <DIO_GetPinValue+0x1a>
    179c:	6c c0       	rjmp	.+216    	; 0x1876 <DIO_GetPinValue+0xf2>
    179e:	8b 81       	ldd	r24, Y+3	; 0x03
    17a0:	88 30       	cpi	r24, 0x08	; 8
    17a2:	08 f0       	brcs	.+2      	; 0x17a6 <DIO_GetPinValue+0x22>
    17a4:	68 c0       	rjmp	.+208    	; 0x1876 <DIO_GetPinValue+0xf2>
	{
		/* Check on the Required PORT Number */
		switch (u8PortIdCopy)
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	3d 83       	std	Y+5, r19	; 0x05
    17ae:	2c 83       	std	Y+4, r18	; 0x04
    17b0:	4c 81       	ldd	r20, Y+4	; 0x04
    17b2:	5d 81       	ldd	r21, Y+5	; 0x05
    17b4:	41 30       	cpi	r20, 0x01	; 1
    17b6:	51 05       	cpc	r21, r1
    17b8:	41 f1       	breq	.+80     	; 0x180a <DIO_GetPinValue+0x86>
    17ba:	8c 81       	ldd	r24, Y+4	; 0x04
    17bc:	9d 81       	ldd	r25, Y+5	; 0x05
    17be:	82 30       	cpi	r24, 0x02	; 2
    17c0:	91 05       	cpc	r25, r1
    17c2:	34 f4       	brge	.+12     	; 0x17d0 <DIO_GetPinValue+0x4c>
    17c4:	2c 81       	ldd	r18, Y+4	; 0x04
    17c6:	3d 81       	ldd	r19, Y+5	; 0x05
    17c8:	21 15       	cp	r18, r1
    17ca:	31 05       	cpc	r19, r1
    17cc:	61 f0       	breq	.+24     	; 0x17e6 <DIO_GetPinValue+0x62>
    17ce:	55 c0       	rjmp	.+170    	; 0x187a <DIO_GetPinValue+0xf6>
    17d0:	4c 81       	ldd	r20, Y+4	; 0x04
    17d2:	5d 81       	ldd	r21, Y+5	; 0x05
    17d4:	42 30       	cpi	r20, 0x02	; 2
    17d6:	51 05       	cpc	r21, r1
    17d8:	51 f1       	breq	.+84     	; 0x182e <DIO_GetPinValue+0xaa>
    17da:	8c 81       	ldd	r24, Y+4	; 0x04
    17dc:	9d 81       	ldd	r25, Y+5	; 0x05
    17de:	83 30       	cpi	r24, 0x03	; 3
    17e0:	91 05       	cpc	r25, r1
    17e2:	b9 f1       	breq	.+110    	; 0x1852 <DIO_GetPinValue+0xce>
    17e4:	4a c0       	rjmp	.+148    	; 0x187a <DIO_GetPinValue+0xf6>
		{
			case PORTA_DIO: u8ResultLocal= GET_BIT(PINA_Register,u8PinIdCopy); break;
    17e6:	e9 e3       	ldi	r30, 0x39	; 57
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	88 2f       	mov	r24, r24
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	a9 01       	movw	r20, r18
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <DIO_GetPinValue+0x7a>
    17fa:	55 95       	asr	r21
    17fc:	47 95       	ror	r20
    17fe:	8a 95       	dec	r24
    1800:	e2 f7       	brpl	.-8      	; 0x17fa <DIO_GetPinValue+0x76>
    1802:	ca 01       	movw	r24, r20
    1804:	81 70       	andi	r24, 0x01	; 1
    1806:	89 83       	std	Y+1, r24	; 0x01
    1808:	38 c0       	rjmp	.+112    	; 0x187a <DIO_GetPinValue+0xf6>
			case PORTB_DIO: u8ResultLocal= GET_BIT(PINB_Register,u8PinIdCopy); break;
    180a:	e6 e3       	ldi	r30, 0x36	; 54
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	88 2f       	mov	r24, r24
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	a9 01       	movw	r20, r18
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <DIO_GetPinValue+0x9e>
    181e:	55 95       	asr	r21
    1820:	47 95       	ror	r20
    1822:	8a 95       	dec	r24
    1824:	e2 f7       	brpl	.-8      	; 0x181e <DIO_GetPinValue+0x9a>
    1826:	ca 01       	movw	r24, r20
    1828:	81 70       	andi	r24, 0x01	; 1
    182a:	89 83       	std	Y+1, r24	; 0x01
    182c:	26 c0       	rjmp	.+76     	; 0x187a <DIO_GetPinValue+0xf6>
			case PORTC_DIO: u8ResultLocal= GET_BIT(PINC_Register,u8PinIdCopy); break;
    182e:	e3 e3       	ldi	r30, 0x33	; 51
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	28 2f       	mov	r18, r24
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	88 2f       	mov	r24, r24
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	a9 01       	movw	r20, r18
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <DIO_GetPinValue+0xc2>
    1842:	55 95       	asr	r21
    1844:	47 95       	ror	r20
    1846:	8a 95       	dec	r24
    1848:	e2 f7       	brpl	.-8      	; 0x1842 <DIO_GetPinValue+0xbe>
    184a:	ca 01       	movw	r24, r20
    184c:	81 70       	andi	r24, 0x01	; 1
    184e:	89 83       	std	Y+1, r24	; 0x01
    1850:	14 c0       	rjmp	.+40     	; 0x187a <DIO_GetPinValue+0xf6>
			case PORTD_DIO: u8ResultLocal= GET_BIT(PIND_Register,u8PinIdCopy); break;
    1852:	e0 e3       	ldi	r30, 0x30	; 48
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	28 2f       	mov	r18, r24
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	88 2f       	mov	r24, r24
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	a9 01       	movw	r20, r18
    1864:	02 c0       	rjmp	.+4      	; 0x186a <DIO_GetPinValue+0xe6>
    1866:	55 95       	asr	r21
    1868:	47 95       	ror	r20
    186a:	8a 95       	dec	r24
    186c:	e2 f7       	brpl	.-8      	; 0x1866 <DIO_GetPinValue+0xe2>
    186e:	ca 01       	movw	r24, r20
    1870:	81 70       	andi	r24, 0x01	; 1
    1872:	89 83       	std	Y+1, r24	; 0x01
    1874:	02 c0       	rjmp	.+4      	; 0x187a <DIO_GetPinValue+0xf6>
	}
	
	else
	{
		/* return 0xff in case of error in the Pin ID or PORT ID */
		u8ResultLocal = 0xFF;
    1876:	8f ef       	ldi	r24, 0xFF	; 255
    1878:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return u8ResultLocal;
    187a:	89 81       	ldd	r24, Y+1	; 0x01
}
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <DIO_SetPinDirection>:

void DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	27 97       	sbiw	r28, 0x07	; 7
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	f8 94       	cli
    189a:	de bf       	out	0x3e, r29	; 62
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	cd bf       	out	0x3d, r28	; 61
    18a0:	89 83       	std	Y+1, r24	; 0x01
    18a2:	6a 83       	std	Y+2, r22	; 0x02
    18a4:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD_DIO) && (u8PinIdCopy <= PIN7))
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	84 30       	cpi	r24, 0x04	; 4
    18aa:	08 f0       	brcs	.+2      	; 0x18ae <DIO_SetPinDirection+0x22>
    18ac:	ee c0       	rjmp	.+476    	; 0x1a8a <DIO_SetPinDirection+0x1fe>
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	88 30       	cpi	r24, 0x08	; 8
    18b2:	08 f0       	brcs	.+2      	; 0x18b6 <DIO_SetPinDirection+0x2a>
    18b4:	ea c0       	rjmp	.+468    	; 0x1a8a <DIO_SetPinDirection+0x1fe>
	{
		if ( u8PinDirCopy == OUTPUT )
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	81 30       	cpi	r24, 0x01	; 1
    18ba:	09 f0       	breq	.+2      	; 0x18be <DIO_SetPinDirection+0x32>
    18bc:	6f c0       	rjmp	.+222    	; 0x199c <DIO_SetPinDirection+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	28 2f       	mov	r18, r24
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	3f 83       	std	Y+7, r19	; 0x07
    18c6:	2e 83       	std	Y+6, r18	; 0x06
    18c8:	8e 81       	ldd	r24, Y+6	; 0x06
    18ca:	9f 81       	ldd	r25, Y+7	; 0x07
    18cc:	81 30       	cpi	r24, 0x01	; 1
    18ce:	91 05       	cpc	r25, r1
    18d0:	49 f1       	breq	.+82     	; 0x1924 <DIO_SetPinDirection+0x98>
    18d2:	2e 81       	ldd	r18, Y+6	; 0x06
    18d4:	3f 81       	ldd	r19, Y+7	; 0x07
    18d6:	22 30       	cpi	r18, 0x02	; 2
    18d8:	31 05       	cpc	r19, r1
    18da:	2c f4       	brge	.+10     	; 0x18e6 <DIO_SetPinDirection+0x5a>
    18dc:	8e 81       	ldd	r24, Y+6	; 0x06
    18de:	9f 81       	ldd	r25, Y+7	; 0x07
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	61 f0       	breq	.+24     	; 0x18fc <DIO_SetPinDirection+0x70>
    18e4:	d2 c0       	rjmp	.+420    	; 0x1a8a <DIO_SetPinDirection+0x1fe>
    18e6:	2e 81       	ldd	r18, Y+6	; 0x06
    18e8:	3f 81       	ldd	r19, Y+7	; 0x07
    18ea:	22 30       	cpi	r18, 0x02	; 2
    18ec:	31 05       	cpc	r19, r1
    18ee:	71 f1       	breq	.+92     	; 0x194c <DIO_SetPinDirection+0xc0>
    18f0:	8e 81       	ldd	r24, Y+6	; 0x06
    18f2:	9f 81       	ldd	r25, Y+7	; 0x07
    18f4:	83 30       	cpi	r24, 0x03	; 3
    18f6:	91 05       	cpc	r25, r1
    18f8:	e9 f1       	breq	.+122    	; 0x1974 <DIO_SetPinDirection+0xe8>
    18fa:	c7 c0       	rjmp	.+398    	; 0x1a8a <DIO_SetPinDirection+0x1fe>
			{
				case PORTA_DIO: SET_BIT(DDRA_Register,u8PinIdCopy); break;
    18fc:	aa e3       	ldi	r26, 0x3A	; 58
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	ea e3       	ldi	r30, 0x3A	; 58
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	48 2f       	mov	r20, r24
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	28 2f       	mov	r18, r24
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	02 2e       	mov	r0, r18
    1914:	02 c0       	rjmp	.+4      	; 0x191a <DIO_SetPinDirection+0x8e>
    1916:	88 0f       	add	r24, r24
    1918:	99 1f       	adc	r25, r25
    191a:	0a 94       	dec	r0
    191c:	e2 f7       	brpl	.-8      	; 0x1916 <DIO_SetPinDirection+0x8a>
    191e:	84 2b       	or	r24, r20
    1920:	8c 93       	st	X, r24
    1922:	b3 c0       	rjmp	.+358    	; 0x1a8a <DIO_SetPinDirection+0x1fe>
				case PORTB_DIO: SET_BIT(DDRB_Register,u8PinIdCopy); break;
    1924:	a7 e3       	ldi	r26, 0x37	; 55
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	e7 e3       	ldi	r30, 0x37	; 55
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	48 2f       	mov	r20, r24
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	28 2f       	mov	r18, r24
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	02 2e       	mov	r0, r18
    193c:	02 c0       	rjmp	.+4      	; 0x1942 <DIO_SetPinDirection+0xb6>
    193e:	88 0f       	add	r24, r24
    1940:	99 1f       	adc	r25, r25
    1942:	0a 94       	dec	r0
    1944:	e2 f7       	brpl	.-8      	; 0x193e <DIO_SetPinDirection+0xb2>
    1946:	84 2b       	or	r24, r20
    1948:	8c 93       	st	X, r24
    194a:	9f c0       	rjmp	.+318    	; 0x1a8a <DIO_SetPinDirection+0x1fe>
				case PORTC_DIO: SET_BIT(DDRC_Register,u8PinIdCopy); break;
    194c:	a4 e3       	ldi	r26, 0x34	; 52
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	e4 e3       	ldi	r30, 0x34	; 52
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	48 2f       	mov	r20, r24
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	02 2e       	mov	r0, r18
    1964:	02 c0       	rjmp	.+4      	; 0x196a <DIO_SetPinDirection+0xde>
    1966:	88 0f       	add	r24, r24
    1968:	99 1f       	adc	r25, r25
    196a:	0a 94       	dec	r0
    196c:	e2 f7       	brpl	.-8      	; 0x1966 <DIO_SetPinDirection+0xda>
    196e:	84 2b       	or	r24, r20
    1970:	8c 93       	st	X, r24
    1972:	8b c0       	rjmp	.+278    	; 0x1a8a <DIO_SetPinDirection+0x1fe>
				case PORTD_DIO: SET_BIT(DDRD_Register,u8PinIdCopy); break;
    1974:	a1 e3       	ldi	r26, 0x31	; 49
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	e1 e3       	ldi	r30, 0x31	; 49
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	48 2f       	mov	r20, r24
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	28 2f       	mov	r18, r24
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	02 2e       	mov	r0, r18
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <DIO_SetPinDirection+0x106>
    198e:	88 0f       	add	r24, r24
    1990:	99 1f       	adc	r25, r25
    1992:	0a 94       	dec	r0
    1994:	e2 f7       	brpl	.-8      	; 0x198e <DIO_SetPinDirection+0x102>
    1996:	84 2b       	or	r24, r20
    1998:	8c 93       	st	X, r24
    199a:	77 c0       	rjmp	.+238    	; 0x1a8a <DIO_SetPinDirection+0x1fe>
			}
		}
		
		else if ( u8PinDirCopy == INPUT )
    199c:	8b 81       	ldd	r24, Y+3	; 0x03
    199e:	88 23       	and	r24, r24
    19a0:	09 f0       	breq	.+2      	; 0x19a4 <DIO_SetPinDirection+0x118>
    19a2:	73 c0       	rjmp	.+230    	; 0x1a8a <DIO_SetPinDirection+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
    19a4:	89 81       	ldd	r24, Y+1	; 0x01
    19a6:	28 2f       	mov	r18, r24
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	3d 83       	std	Y+5, r19	; 0x05
    19ac:	2c 83       	std	Y+4, r18	; 0x04
    19ae:	8c 81       	ldd	r24, Y+4	; 0x04
    19b0:	9d 81       	ldd	r25, Y+5	; 0x05
    19b2:	81 30       	cpi	r24, 0x01	; 1
    19b4:	91 05       	cpc	r25, r1
    19b6:	59 f1       	breq	.+86     	; 0x1a0e <DIO_SetPinDirection+0x182>
    19b8:	2c 81       	ldd	r18, Y+4	; 0x04
    19ba:	3d 81       	ldd	r19, Y+5	; 0x05
    19bc:	22 30       	cpi	r18, 0x02	; 2
    19be:	31 05       	cpc	r19, r1
    19c0:	2c f4       	brge	.+10     	; 0x19cc <DIO_SetPinDirection+0x140>
    19c2:	8c 81       	ldd	r24, Y+4	; 0x04
    19c4:	9d 81       	ldd	r25, Y+5	; 0x05
    19c6:	00 97       	sbiw	r24, 0x00	; 0
    19c8:	69 f0       	breq	.+26     	; 0x19e4 <DIO_SetPinDirection+0x158>
    19ca:	5f c0       	rjmp	.+190    	; 0x1a8a <DIO_SetPinDirection+0x1fe>
    19cc:	2c 81       	ldd	r18, Y+4	; 0x04
    19ce:	3d 81       	ldd	r19, Y+5	; 0x05
    19d0:	22 30       	cpi	r18, 0x02	; 2
    19d2:	31 05       	cpc	r19, r1
    19d4:	89 f1       	breq	.+98     	; 0x1a38 <DIO_SetPinDirection+0x1ac>
    19d6:	8c 81       	ldd	r24, Y+4	; 0x04
    19d8:	9d 81       	ldd	r25, Y+5	; 0x05
    19da:	83 30       	cpi	r24, 0x03	; 3
    19dc:	91 05       	cpc	r25, r1
    19de:	09 f4       	brne	.+2      	; 0x19e2 <DIO_SetPinDirection+0x156>
    19e0:	40 c0       	rjmp	.+128    	; 0x1a62 <DIO_SetPinDirection+0x1d6>
    19e2:	53 c0       	rjmp	.+166    	; 0x1a8a <DIO_SetPinDirection+0x1fe>
			{
				case PORTA_DIO: CLR_BIT(DDRA_Register,u8PinIdCopy); break;
    19e4:	aa e3       	ldi	r26, 0x3A	; 58
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	ea e3       	ldi	r30, 0x3A	; 58
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	48 2f       	mov	r20, r24
    19f0:	8a 81       	ldd	r24, Y+2	; 0x02
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	02 2e       	mov	r0, r18
    19fc:	02 c0       	rjmp	.+4      	; 0x1a02 <DIO_SetPinDirection+0x176>
    19fe:	88 0f       	add	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	0a 94       	dec	r0
    1a04:	e2 f7       	brpl	.-8      	; 0x19fe <DIO_SetPinDirection+0x172>
    1a06:	80 95       	com	r24
    1a08:	84 23       	and	r24, r20
    1a0a:	8c 93       	st	X, r24
    1a0c:	3e c0       	rjmp	.+124    	; 0x1a8a <DIO_SetPinDirection+0x1fe>
				case PORTB_DIO: CLR_BIT(DDRB_Register,u8PinIdCopy); break;
    1a0e:	a7 e3       	ldi	r26, 0x37	; 55
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	e7 e3       	ldi	r30, 0x37	; 55
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	48 2f       	mov	r20, r24
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	28 2f       	mov	r18, r24
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	02 2e       	mov	r0, r18
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <DIO_SetPinDirection+0x1a0>
    1a28:	88 0f       	add	r24, r24
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	0a 94       	dec	r0
    1a2e:	e2 f7       	brpl	.-8      	; 0x1a28 <DIO_SetPinDirection+0x19c>
    1a30:	80 95       	com	r24
    1a32:	84 23       	and	r24, r20
    1a34:	8c 93       	st	X, r24
    1a36:	29 c0       	rjmp	.+82     	; 0x1a8a <DIO_SetPinDirection+0x1fe>
				case PORTC_DIO: CLR_BIT(DDRC_Register,u8PinIdCopy); break;
    1a38:	a4 e3       	ldi	r26, 0x34	; 52
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	e4 e3       	ldi	r30, 0x34	; 52
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	48 2f       	mov	r20, r24
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	28 2f       	mov	r18, r24
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	02 2e       	mov	r0, r18
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <DIO_SetPinDirection+0x1ca>
    1a52:	88 0f       	add	r24, r24
    1a54:	99 1f       	adc	r25, r25
    1a56:	0a 94       	dec	r0
    1a58:	e2 f7       	brpl	.-8      	; 0x1a52 <DIO_SetPinDirection+0x1c6>
    1a5a:	80 95       	com	r24
    1a5c:	84 23       	and	r24, r20
    1a5e:	8c 93       	st	X, r24
    1a60:	14 c0       	rjmp	.+40     	; 0x1a8a <DIO_SetPinDirection+0x1fe>
				case PORTD_DIO: CLR_BIT(DDRD_Register,u8PinIdCopy); break;
    1a62:	a1 e3       	ldi	r26, 0x31	; 49
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	e1 e3       	ldi	r30, 0x31	; 49
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	48 2f       	mov	r20, r24
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	28 2f       	mov	r18, r24
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	02 2e       	mov	r0, r18
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <DIO_SetPinDirection+0x1f4>
    1a7c:	88 0f       	add	r24, r24
    1a7e:	99 1f       	adc	r25, r25
    1a80:	0a 94       	dec	r0
    1a82:	e2 f7       	brpl	.-8      	; 0x1a7c <DIO_SetPinDirection+0x1f0>
    1a84:	80 95       	com	r24
    1a86:	84 23       	and	r24, r20
    1a88:	8c 93       	st	X, r24
	
	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
    1a8a:	27 96       	adiw	r28, 0x07	; 7
    1a8c:	0f b6       	in	r0, 0x3f	; 63
    1a8e:	f8 94       	cli
    1a90:	de bf       	out	0x3e, r29	; 62
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	cd bf       	out	0x3d, r28	; 61
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <DIO_SetPortDirection>:


/* IO Ports */
void DIO_SetPortDirection (u8 u8PortId, u8 u8PortDir)
{
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	00 d0       	rcall	.+0      	; 0x1aa2 <DIO_SetPortDirection+0x6>
    1aa2:	00 d0       	rcall	.+0      	; 0x1aa4 <DIO_SetPortDirection+0x8>
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
    1aa8:	89 83       	std	Y+1, r24	; 0x01
    1aaa:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
    1aac:	89 81       	ldd	r24, Y+1	; 0x01
    1aae:	28 2f       	mov	r18, r24
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	3c 83       	std	Y+4, r19	; 0x04
    1ab4:	2b 83       	std	Y+3, r18	; 0x03
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aba:	81 30       	cpi	r24, 0x01	; 1
    1abc:	91 05       	cpc	r25, r1
    1abe:	d1 f0       	breq	.+52     	; 0x1af4 <DIO_SetPortDirection+0x58>
    1ac0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac4:	22 30       	cpi	r18, 0x02	; 2
    1ac6:	31 05       	cpc	r19, r1
    1ac8:	2c f4       	brge	.+10     	; 0x1ad4 <DIO_SetPortDirection+0x38>
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ace:	00 97       	sbiw	r24, 0x00	; 0
    1ad0:	61 f0       	breq	.+24     	; 0x1aea <DIO_SetPortDirection+0x4e>
    1ad2:	1e c0       	rjmp	.+60     	; 0x1b10 <DIO_SetPortDirection+0x74>
    1ad4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad8:	22 30       	cpi	r18, 0x02	; 2
    1ada:	31 05       	cpc	r19, r1
    1adc:	81 f0       	breq	.+32     	; 0x1afe <DIO_SetPortDirection+0x62>
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae2:	83 30       	cpi	r24, 0x03	; 3
    1ae4:	91 05       	cpc	r25, r1
    1ae6:	81 f0       	breq	.+32     	; 0x1b08 <DIO_SetPortDirection+0x6c>
    1ae8:	13 c0       	rjmp	.+38     	; 0x1b10 <DIO_SetPortDirection+0x74>
	{
			case PORTA_DIO: DDRA_Register = u8PortDir; break;
    1aea:	ea e3       	ldi	r30, 0x3A	; 58
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	8a 81       	ldd	r24, Y+2	; 0x02
    1af0:	80 83       	st	Z, r24
    1af2:	0e c0       	rjmp	.+28     	; 0x1b10 <DIO_SetPortDirection+0x74>
			case PORTB_DIO: DDRB_Register = u8PortDir; break;
    1af4:	e7 e3       	ldi	r30, 0x37	; 55
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	80 83       	st	Z, r24
    1afc:	09 c0       	rjmp	.+18     	; 0x1b10 <DIO_SetPortDirection+0x74>
			case PORTC_DIO: DDRC_Register = u8PortDir; break;
    1afe:	e4 e3       	ldi	r30, 0x34	; 52
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	8a 81       	ldd	r24, Y+2	; 0x02
    1b04:	80 83       	st	Z, r24
    1b06:	04 c0       	rjmp	.+8      	; 0x1b10 <DIO_SetPortDirection+0x74>
			case PORTD_DIO: DDRD_Register = u8PortDir; break;
    1b08:	e1 e3       	ldi	r30, 0x31	; 49
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	80 83       	st	Z, r24
		default: /* Wrong Port ID */       break;
	}
}
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	cf 91       	pop	r28
    1b1a:	df 91       	pop	r29
    1b1c:	08 95       	ret

00001b1e <DIO_SetPortValue>:

void DIO_SetPortValue (u8 u8PortId, u8 u8PortVal)
{
    1b1e:	df 93       	push	r29
    1b20:	cf 93       	push	r28
    1b22:	00 d0       	rcall	.+0      	; 0x1b24 <DIO_SetPortValue+0x6>
    1b24:	00 d0       	rcall	.+0      	; 0x1b26 <DIO_SetPortValue+0x8>
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
    1b2a:	89 83       	std	Y+1, r24	; 0x01
    1b2c:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	28 2f       	mov	r18, r24
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	3c 83       	std	Y+4, r19	; 0x04
    1b36:	2b 83       	std	Y+3, r18	; 0x03
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3c:	81 30       	cpi	r24, 0x01	; 1
    1b3e:	91 05       	cpc	r25, r1
    1b40:	d1 f0       	breq	.+52     	; 0x1b76 <DIO_SetPortValue+0x58>
    1b42:	2b 81       	ldd	r18, Y+3	; 0x03
    1b44:	3c 81       	ldd	r19, Y+4	; 0x04
    1b46:	22 30       	cpi	r18, 0x02	; 2
    1b48:	31 05       	cpc	r19, r1
    1b4a:	2c f4       	brge	.+10     	; 0x1b56 <DIO_SetPortValue+0x38>
    1b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b50:	00 97       	sbiw	r24, 0x00	; 0
    1b52:	61 f0       	breq	.+24     	; 0x1b6c <DIO_SetPortValue+0x4e>
    1b54:	1e c0       	rjmp	.+60     	; 0x1b92 <DIO_SetPortValue+0x74>
    1b56:	2b 81       	ldd	r18, Y+3	; 0x03
    1b58:	3c 81       	ldd	r19, Y+4	; 0x04
    1b5a:	22 30       	cpi	r18, 0x02	; 2
    1b5c:	31 05       	cpc	r19, r1
    1b5e:	81 f0       	breq	.+32     	; 0x1b80 <DIO_SetPortValue+0x62>
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	9c 81       	ldd	r25, Y+4	; 0x04
    1b64:	83 30       	cpi	r24, 0x03	; 3
    1b66:	91 05       	cpc	r25, r1
    1b68:	81 f0       	breq	.+32     	; 0x1b8a <DIO_SetPortValue+0x6c>
    1b6a:	13 c0       	rjmp	.+38     	; 0x1b92 <DIO_SetPortValue+0x74>
	{
			case PORTA_DIO: PORTA_Register = u8PortVal; break;
    1b6c:	eb e3       	ldi	r30, 0x3B	; 59
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	80 83       	st	Z, r24
    1b74:	0e c0       	rjmp	.+28     	; 0x1b92 <DIO_SetPortValue+0x74>
			case PORTB_DIO: PORTB_Register = u8PortVal; break;
    1b76:	e8 e3       	ldi	r30, 0x38	; 56
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	80 83       	st	Z, r24
    1b7e:	09 c0       	rjmp	.+18     	; 0x1b92 <DIO_SetPortValue+0x74>
			case PORTC_DIO: PORTC_Register = u8PortVal; break;
    1b80:	e5 e3       	ldi	r30, 0x35	; 53
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	80 83       	st	Z, r24
    1b88:	04 c0       	rjmp	.+8      	; 0x1b92 <DIO_SetPortValue+0x74>
			case PORTD_DIO: PORTD_Register = u8PortVal; break;
    1b8a:	e2 e3       	ldi	r30, 0x32	; 50
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	80 83       	st	Z, r24
		default: /* Wrong Port ID */        break;
	}
}
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	cf 91       	pop	r28
    1b9c:	df 91       	pop	r29
    1b9e:	08 95       	ret

00001ba0 <vid_ExtInt0_vid_InitializeExtInt>:
#include "Configuration.h"
#include "BIT_MATH.h"
#include "EXT_INT_INTERFACE.H"


void vid_ExtInt0_vid_InitializeExtInt (void) {
    1ba0:	df 93       	push	r29
    1ba2:	cf 93       	push	r28
    1ba4:	cd b7       	in	r28, 0x3d	; 61
    1ba6:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(MCUCR_REG,0) ;        // falling edge generates an interrupt
    1ba8:	a5 e5       	ldi	r26, 0x55	; 85
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e5 e5       	ldi	r30, 0x55	; 85
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	8e 7f       	andi	r24, 0xFE	; 254
    1bb4:	8c 93       	st	X, r24
	SET_BIT(MCUCR_REG,1) ;
    1bb6:	a5 e5       	ldi	r26, 0x55	; 85
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	e5 e5       	ldi	r30, 0x55	; 85
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	82 60       	ori	r24, 0x02	; 2
    1bc2:	8c 93       	st	X, r24

	 SET_BIT(GICR_REG,6) ;         // enable INT 0
    1bc4:	ab e5       	ldi	r26, 0x5B	; 91
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	eb e5       	ldi	r30, 0x5B	; 91
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	80 64       	ori	r24, 0x40	; 64
    1bd0:	8c 93       	st	X, r24

   // SET_BIT (SREG_REG,7) ;

	 asm ("SEI") ;   //ENABLE GLOBAL INTERRUPT
    1bd2:	78 94       	sei

}
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	08 95       	ret

00001bda <vid_ExtInt1_vid_InitializeExtInt>:


void vid_ExtInt1_vid_InitializeExtInt (void) {
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(MCUCR_REG,2) ;
    1be2:	a5 e5       	ldi	r26, 0x55	; 85
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e5 e5       	ldi	r30, 0x55	; 85
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	8b 7f       	andi	r24, 0xFB	; 251
    1bee:	8c 93       	st	X, r24
	SET_BIT(MCUCR_REG,3) ;
    1bf0:	a5 e5       	ldi	r26, 0x55	; 85
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	e5 e5       	ldi	r30, 0x55	; 85
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	88 60       	ori	r24, 0x08	; 8
    1bfc:	8c 93       	st	X, r24

	 SET_BIT(GICR_REG,7) ;     // enable INT 1
    1bfe:	ab e5       	ldi	r26, 0x5B	; 91
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	eb e5       	ldi	r30, 0x5B	; 91
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	80 68       	ori	r24, 0x80	; 128
    1c0a:	8c 93       	st	X, r24


	 asm ("SEI") ;   //ENABLE GLOBAL INTERRUPT
    1c0c:	78 94       	sei

}
    1c0e:	cf 91       	pop	r28
    1c10:	df 91       	pop	r29
    1c12:	08 95       	ret

00001c14 <__vector_1>:
extern u8 u8PeopleInside ;

/**************************************************************************/


ISR(INT0_vect) {
    1c14:	1f 92       	push	r1
    1c16:	0f 92       	push	r0
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	0f 92       	push	r0
    1c1c:	11 24       	eor	r1, r1
    1c1e:	2f 93       	push	r18
    1c20:	3f 93       	push	r19
    1c22:	4f 93       	push	r20
    1c24:	5f 93       	push	r21
    1c26:	6f 93       	push	r22
    1c28:	7f 93       	push	r23
    1c2a:	8f 93       	push	r24
    1c2c:	9f 93       	push	r25
    1c2e:	af 93       	push	r26
    1c30:	bf 93       	push	r27
    1c32:	ef 93       	push	r30
    1c34:	ff 93       	push	r31
    1c36:	df 93       	push	r29
    1c38:	cf 93       	push	r28
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	6c 97       	sbiw	r28, 0x1c	; 28
    1c40:	de bf       	out	0x3e, r29	; 62
    1c42:	cd bf       	out	0x3d, r28	; 61

	DIO_SetPinValue(PORTB_DIO, DOOR1 , HIGH);       // OPEN DOOR
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	60 e0       	ldi	r22, 0x00	; 0
    1c48:	41 e0       	ldi	r20, 0x01	; 1
    1c4a:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_SetPinValue>
	DIO_SetPinValue(PORTB_DIO, DOOR2, LOW);
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	61 e0       	ldi	r22, 0x01	; 1
    1c52:	40 e0       	ldi	r20, 0x00	; 0
    1c54:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_SetPinValue>
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	90 e8       	ldi	r25, 0x80	; 128
    1c5c:	ab e3       	ldi	r26, 0x3B	; 59
    1c5e:	b5 e4       	ldi	r27, 0x45	; 69
    1c60:	89 8f       	std	Y+25, r24	; 0x19
    1c62:	9a 8f       	std	Y+26, r25	; 0x1a
    1c64:	ab 8f       	std	Y+27, r26	; 0x1b
    1c66:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c68:	69 8d       	ldd	r22, Y+25	; 0x19
    1c6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	48 e4       	ldi	r20, 0x48	; 72
    1c76:	53 e4       	ldi	r21, 0x43	; 67
    1c78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	8d 8b       	std	Y+21, r24	; 0x15
    1c82:	9e 8b       	std	Y+22, r25	; 0x16
    1c84:	af 8b       	std	Y+23, r26	; 0x17
    1c86:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c88:	6d 89       	ldd	r22, Y+21	; 0x15
    1c8a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c8c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c8e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	40 e8       	ldi	r20, 0x80	; 128
    1c96:	5f e3       	ldi	r21, 0x3F	; 63
    1c98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c9c:	88 23       	and	r24, r24
    1c9e:	2c f4       	brge	.+10     	; 0x1caa <__vector_1+0x96>
		__ticks = 1;
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	9c 8b       	std	Y+20, r25	; 0x14
    1ca6:	8b 8b       	std	Y+19, r24	; 0x13
    1ca8:	3f c0       	rjmp	.+126    	; 0x1d28 <__vector_1+0x114>
	else if (__tmp > 65535)
    1caa:	6d 89       	ldd	r22, Y+21	; 0x15
    1cac:	7e 89       	ldd	r23, Y+22	; 0x16
    1cae:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb0:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	3f ef       	ldi	r19, 0xFF	; 255
    1cb6:	4f e7       	ldi	r20, 0x7F	; 127
    1cb8:	57 e4       	ldi	r21, 0x47	; 71
    1cba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cbe:	18 16       	cp	r1, r24
    1cc0:	4c f5       	brge	.+82     	; 0x1d14 <__vector_1+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc2:	69 8d       	ldd	r22, Y+25	; 0x19
    1cc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	40 e2       	ldi	r20, 0x20	; 32
    1cd0:	51 e4       	ldi	r21, 0x41	; 65
    1cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	bc 01       	movw	r22, r24
    1cdc:	cd 01       	movw	r24, r26
    1cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	9c 8b       	std	Y+20, r25	; 0x14
    1ce8:	8b 8b       	std	Y+19, r24	; 0x13
    1cea:	0f c0       	rjmp	.+30     	; 0x1d0a <__vector_1+0xf6>
    1cec:	84 e1       	ldi	r24, 0x14	; 20
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	9a 8b       	std	Y+18, r25	; 0x12
    1cf2:	89 8b       	std	Y+17, r24	; 0x11
    1cf4:	89 89       	ldd	r24, Y+17	; 0x11
    1cf6:	9a 89       	ldd	r25, Y+18	; 0x12
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	f1 f7       	brne	.-4      	; 0x1cf8 <__vector_1+0xe4>
    1cfc:	9a 8b       	std	Y+18, r25	; 0x12
    1cfe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d00:	8b 89       	ldd	r24, Y+19	; 0x13
    1d02:	9c 89       	ldd	r25, Y+20	; 0x14
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	9c 8b       	std	Y+20, r25	; 0x14
    1d08:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	69 f7       	brne	.-38     	; 0x1cec <__vector_1+0xd8>
    1d12:	14 c0       	rjmp	.+40     	; 0x1d3c <__vector_1+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d14:	6d 89       	ldd	r22, Y+21	; 0x15
    1d16:	7e 89       	ldd	r23, Y+22	; 0x16
    1d18:	8f 89       	ldd	r24, Y+23	; 0x17
    1d1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	9c 8b       	std	Y+20, r25	; 0x14
    1d26:	8b 8b       	std	Y+19, r24	; 0x13
    1d28:	8b 89       	ldd	r24, Y+19	; 0x13
    1d2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d2c:	98 8b       	std	Y+16, r25	; 0x10
    1d2e:	8f 87       	std	Y+15, r24	; 0x0f
    1d30:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d32:	98 89       	ldd	r25, Y+16	; 0x10
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	f1 f7       	brne	.-4      	; 0x1d34 <__vector_1+0x120>
    1d38:	98 8b       	std	Y+16, r25	; 0x10
    1d3a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms (3000) ;


	DIO_SetPinValue(PORTB_DIO, DOOR1, LOW);           // CLOSE DOOR
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	60 e0       	ldi	r22, 0x00	; 0
    1d40:	40 e0       	ldi	r20, 0x00	; 0
    1d42:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_SetPinValue>
	DIO_SetPinValue(PORTB_DIO, DOOR2, HIGH);
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	61 e0       	ldi	r22, 0x01	; 1
    1d4a:	41 e0       	ldi	r20, 0x01	; 1
    1d4c:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_SetPinValue>
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	90 e8       	ldi	r25, 0x80	; 128
    1d54:	ab e3       	ldi	r26, 0x3B	; 59
    1d56:	b5 e4       	ldi	r27, 0x45	; 69
    1d58:	8b 87       	std	Y+11, r24	; 0x0b
    1d5a:	9c 87       	std	Y+12, r25	; 0x0c
    1d5c:	ad 87       	std	Y+13, r26	; 0x0d
    1d5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	48 e4       	ldi	r20, 0x48	; 72
    1d6e:	53 e4       	ldi	r21, 0x43	; 67
    1d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	8f 83       	std	Y+7, r24	; 0x07
    1d7a:	98 87       	std	Y+8, r25	; 0x08
    1d7c:	a9 87       	std	Y+9, r26	; 0x09
    1d7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d80:	6f 81       	ldd	r22, Y+7	; 0x07
    1d82:	78 85       	ldd	r23, Y+8	; 0x08
    1d84:	89 85       	ldd	r24, Y+9	; 0x09
    1d86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	40 e8       	ldi	r20, 0x80	; 128
    1d8e:	5f e3       	ldi	r21, 0x3F	; 63
    1d90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d94:	88 23       	and	r24, r24
    1d96:	2c f4       	brge	.+10     	; 0x1da2 <__vector_1+0x18e>
		__ticks = 1;
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	9e 83       	std	Y+6, r25	; 0x06
    1d9e:	8d 83       	std	Y+5, r24	; 0x05
    1da0:	3f c0       	rjmp	.+126    	; 0x1e20 <__vector_1+0x20c>
	else if (__tmp > 65535)
    1da2:	6f 81       	ldd	r22, Y+7	; 0x07
    1da4:	78 85       	ldd	r23, Y+8	; 0x08
    1da6:	89 85       	ldd	r24, Y+9	; 0x09
    1da8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	3f ef       	ldi	r19, 0xFF	; 255
    1dae:	4f e7       	ldi	r20, 0x7F	; 127
    1db0:	57 e4       	ldi	r21, 0x47	; 71
    1db2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1db6:	18 16       	cp	r1, r24
    1db8:	4c f5       	brge	.+82     	; 0x1e0c <__vector_1+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	40 e2       	ldi	r20, 0x20	; 32
    1dc8:	51 e4       	ldi	r21, 0x41	; 65
    1dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	bc 01       	movw	r22, r24
    1dd4:	cd 01       	movw	r24, r26
    1dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	9e 83       	std	Y+6, r25	; 0x06
    1de0:	8d 83       	std	Y+5, r24	; 0x05
    1de2:	0f c0       	rjmp	.+30     	; 0x1e02 <__vector_1+0x1ee>
    1de4:	84 e1       	ldi	r24, 0x14	; 20
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	9c 83       	std	Y+4, r25	; 0x04
    1dea:	8b 83       	std	Y+3, r24	; 0x03
    1dec:	8b 81       	ldd	r24, Y+3	; 0x03
    1dee:	9c 81       	ldd	r25, Y+4	; 0x04
    1df0:	01 97       	sbiw	r24, 0x01	; 1
    1df2:	f1 f7       	brne	.-4      	; 0x1df0 <__vector_1+0x1dc>
    1df4:	9c 83       	std	Y+4, r25	; 0x04
    1df6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	9e 83       	std	Y+6, r25	; 0x06
    1e00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e02:	8d 81       	ldd	r24, Y+5	; 0x05
    1e04:	9e 81       	ldd	r25, Y+6	; 0x06
    1e06:	00 97       	sbiw	r24, 0x00	; 0
    1e08:	69 f7       	brne	.-38     	; 0x1de4 <__vector_1+0x1d0>
    1e0a:	14 c0       	rjmp	.+40     	; 0x1e34 <__vector_1+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e0e:	78 85       	ldd	r23, Y+8	; 0x08
    1e10:	89 85       	ldd	r24, Y+9	; 0x09
    1e12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	9e 83       	std	Y+6, r25	; 0x06
    1e1e:	8d 83       	std	Y+5, r24	; 0x05
    1e20:	8d 81       	ldd	r24, Y+5	; 0x05
    1e22:	9e 81       	ldd	r25, Y+6	; 0x06
    1e24:	9a 83       	std	Y+2, r25	; 0x02
    1e26:	89 83       	std	Y+1, r24	; 0x01
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	f1 f7       	brne	.-4      	; 0x1e2c <__vector_1+0x218>
    1e30:	9a 83       	std	Y+2, r25	; 0x02
    1e32:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (3000) ;


	DIO_SetPinValue(PORTB_DIO, DOOR1, LOW);          // IDLE
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	60 e0       	ldi	r22, 0x00	; 0
    1e38:	40 e0       	ldi	r20, 0x00	; 0
    1e3a:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_SetPinValue>
	DIO_SetPinValue(PORTB_DIO, DOOR2, LOW);
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	61 e0       	ldi	r22, 0x01	; 1
    1e42:	40 e0       	ldi	r20, 0x00	; 0
    1e44:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_SetPinValue>

	u8PeopleInside ++ ;
    1e48:	80 91 6e 00 	lds	r24, 0x006E
    1e4c:	8f 5f       	subi	r24, 0xFF	; 255
    1e4e:	80 93 6e 00 	sts	0x006E, r24

}
    1e52:	6c 96       	adiw	r28, 0x1c	; 28
    1e54:	de bf       	out	0x3e, r29	; 62
    1e56:	cd bf       	out	0x3d, r28	; 61
    1e58:	cf 91       	pop	r28
    1e5a:	df 91       	pop	r29
    1e5c:	ff 91       	pop	r31
    1e5e:	ef 91       	pop	r30
    1e60:	bf 91       	pop	r27
    1e62:	af 91       	pop	r26
    1e64:	9f 91       	pop	r25
    1e66:	8f 91       	pop	r24
    1e68:	7f 91       	pop	r23
    1e6a:	6f 91       	pop	r22
    1e6c:	5f 91       	pop	r21
    1e6e:	4f 91       	pop	r20
    1e70:	3f 91       	pop	r19
    1e72:	2f 91       	pop	r18
    1e74:	0f 90       	pop	r0
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	0f 90       	pop	r0
    1e7a:	1f 90       	pop	r1
    1e7c:	18 95       	reti

00001e7e <__vector_2>:

/**************************************************************************/

ISR(INT1_vect) {
    1e7e:	1f 92       	push	r1
    1e80:	0f 92       	push	r0
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	0f 92       	push	r0
    1e86:	11 24       	eor	r1, r1
    1e88:	2f 93       	push	r18
    1e8a:	3f 93       	push	r19
    1e8c:	4f 93       	push	r20
    1e8e:	5f 93       	push	r21
    1e90:	6f 93       	push	r22
    1e92:	7f 93       	push	r23
    1e94:	8f 93       	push	r24
    1e96:	9f 93       	push	r25
    1e98:	af 93       	push	r26
    1e9a:	bf 93       	push	r27
    1e9c:	ef 93       	push	r30
    1e9e:	ff 93       	push	r31
    1ea0:	df 93       	push	r29
    1ea2:	cf 93       	push	r28
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
    1ea8:	6c 97       	sbiw	r28, 0x1c	; 28
    1eaa:	de bf       	out	0x3e, r29	; 62
    1eac:	cd bf       	out	0x3d, r28	; 61

	DIO_SetPinValue(PORTB_DIO, DOOR1 , HIGH);       // OPEN DOOR
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	60 e0       	ldi	r22, 0x00	; 0
    1eb2:	41 e0       	ldi	r20, 0x01	; 1
    1eb4:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_SetPinValue>
	DIO_SetPinValue(PORTB_DIO, DOOR2, LOW);
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	61 e0       	ldi	r22, 0x01	; 1
    1ebc:	40 e0       	ldi	r20, 0x00	; 0
    1ebe:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_SetPinValue>
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	90 e8       	ldi	r25, 0x80	; 128
    1ec6:	ab e3       	ldi	r26, 0x3B	; 59
    1ec8:	b5 e4       	ldi	r27, 0x45	; 69
    1eca:	89 8f       	std	Y+25, r24	; 0x19
    1ecc:	9a 8f       	std	Y+26, r25	; 0x1a
    1ece:	ab 8f       	std	Y+27, r26	; 0x1b
    1ed0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ed4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ed6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ed8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	48 e4       	ldi	r20, 0x48	; 72
    1ee0:	53 e4       	ldi	r21, 0x43	; 67
    1ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	8d 8b       	std	Y+21, r24	; 0x15
    1eec:	9e 8b       	std	Y+22, r25	; 0x16
    1eee:	af 8b       	std	Y+23, r26	; 0x17
    1ef0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ef2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ef4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ef6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ef8:	98 8d       	ldd	r25, Y+24	; 0x18
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	40 e8       	ldi	r20, 0x80	; 128
    1f00:	5f e3       	ldi	r21, 0x3F	; 63
    1f02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f06:	88 23       	and	r24, r24
    1f08:	2c f4       	brge	.+10     	; 0x1f14 <__vector_2+0x96>
		__ticks = 1;
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	9c 8b       	std	Y+20, r25	; 0x14
    1f10:	8b 8b       	std	Y+19, r24	; 0x13
    1f12:	3f c0       	rjmp	.+126    	; 0x1f92 <__vector_2+0x114>
	else if (__tmp > 65535)
    1f14:	6d 89       	ldd	r22, Y+21	; 0x15
    1f16:	7e 89       	ldd	r23, Y+22	; 0x16
    1f18:	8f 89       	ldd	r24, Y+23	; 0x17
    1f1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	3f ef       	ldi	r19, 0xFF	; 255
    1f20:	4f e7       	ldi	r20, 0x7F	; 127
    1f22:	57 e4       	ldi	r21, 0x47	; 71
    1f24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f28:	18 16       	cp	r1, r24
    1f2a:	4c f5       	brge	.+82     	; 0x1f7e <__vector_2+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f2c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	40 e2       	ldi	r20, 0x20	; 32
    1f3a:	51 e4       	ldi	r21, 0x41	; 65
    1f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	bc 01       	movw	r22, r24
    1f46:	cd 01       	movw	r24, r26
    1f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	9c 8b       	std	Y+20, r25	; 0x14
    1f52:	8b 8b       	std	Y+19, r24	; 0x13
    1f54:	0f c0       	rjmp	.+30     	; 0x1f74 <__vector_2+0xf6>
    1f56:	84 e1       	ldi	r24, 0x14	; 20
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	9a 8b       	std	Y+18, r25	; 0x12
    1f5c:	89 8b       	std	Y+17, r24	; 0x11
    1f5e:	89 89       	ldd	r24, Y+17	; 0x11
    1f60:	9a 89       	ldd	r25, Y+18	; 0x12
    1f62:	01 97       	sbiw	r24, 0x01	; 1
    1f64:	f1 f7       	brne	.-4      	; 0x1f62 <__vector_2+0xe4>
    1f66:	9a 8b       	std	Y+18, r25	; 0x12
    1f68:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	9c 8b       	std	Y+20, r25	; 0x14
    1f72:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f74:	8b 89       	ldd	r24, Y+19	; 0x13
    1f76:	9c 89       	ldd	r25, Y+20	; 0x14
    1f78:	00 97       	sbiw	r24, 0x00	; 0
    1f7a:	69 f7       	brne	.-38     	; 0x1f56 <__vector_2+0xd8>
    1f7c:	14 c0       	rjmp	.+40     	; 0x1fa6 <__vector_2+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f80:	7e 89       	ldd	r23, Y+22	; 0x16
    1f82:	8f 89       	ldd	r24, Y+23	; 0x17
    1f84:	98 8d       	ldd	r25, Y+24	; 0x18
    1f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	9c 8b       	std	Y+20, r25	; 0x14
    1f90:	8b 8b       	std	Y+19, r24	; 0x13
    1f92:	8b 89       	ldd	r24, Y+19	; 0x13
    1f94:	9c 89       	ldd	r25, Y+20	; 0x14
    1f96:	98 8b       	std	Y+16, r25	; 0x10
    1f98:	8f 87       	std	Y+15, r24	; 0x0f
    1f9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f9c:	98 89       	ldd	r25, Y+16	; 0x10
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	f1 f7       	brne	.-4      	; 0x1f9e <__vector_2+0x120>
    1fa2:	98 8b       	std	Y+16, r25	; 0x10
    1fa4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms (3000) ;


	DIO_SetPinValue(PORTB_DIO, DOOR1, LOW);           // CLOSE DOOR
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	60 e0       	ldi	r22, 0x00	; 0
    1faa:	40 e0       	ldi	r20, 0x00	; 0
    1fac:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_SetPinValue>
	DIO_SetPinValue(PORTB_DIO, DOOR2, HIGH);
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	61 e0       	ldi	r22, 0x01	; 1
    1fb4:	41 e0       	ldi	r20, 0x01	; 1
    1fb6:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_SetPinValue>
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	90 e8       	ldi	r25, 0x80	; 128
    1fbe:	ab e3       	ldi	r26, 0x3B	; 59
    1fc0:	b5 e4       	ldi	r27, 0x45	; 69
    1fc2:	8b 87       	std	Y+11, r24	; 0x0b
    1fc4:	9c 87       	std	Y+12, r25	; 0x0c
    1fc6:	ad 87       	std	Y+13, r26	; 0x0d
    1fc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	48 e4       	ldi	r20, 0x48	; 72
    1fd8:	53 e4       	ldi	r21, 0x43	; 67
    1fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	8f 83       	std	Y+7, r24	; 0x07
    1fe4:	98 87       	std	Y+8, r25	; 0x08
    1fe6:	a9 87       	std	Y+9, r26	; 0x09
    1fe8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fea:	6f 81       	ldd	r22, Y+7	; 0x07
    1fec:	78 85       	ldd	r23, Y+8	; 0x08
    1fee:	89 85       	ldd	r24, Y+9	; 0x09
    1ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	40 e8       	ldi	r20, 0x80	; 128
    1ff8:	5f e3       	ldi	r21, 0x3F	; 63
    1ffa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ffe:	88 23       	and	r24, r24
    2000:	2c f4       	brge	.+10     	; 0x200c <__vector_2+0x18e>
		__ticks = 1;
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	9e 83       	std	Y+6, r25	; 0x06
    2008:	8d 83       	std	Y+5, r24	; 0x05
    200a:	3f c0       	rjmp	.+126    	; 0x208a <__vector_2+0x20c>
	else if (__tmp > 65535)
    200c:	6f 81       	ldd	r22, Y+7	; 0x07
    200e:	78 85       	ldd	r23, Y+8	; 0x08
    2010:	89 85       	ldd	r24, Y+9	; 0x09
    2012:	9a 85       	ldd	r25, Y+10	; 0x0a
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	3f ef       	ldi	r19, 0xFF	; 255
    2018:	4f e7       	ldi	r20, 0x7F	; 127
    201a:	57 e4       	ldi	r21, 0x47	; 71
    201c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2020:	18 16       	cp	r1, r24
    2022:	4c f5       	brge	.+82     	; 0x2076 <__vector_2+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2024:	6b 85       	ldd	r22, Y+11	; 0x0b
    2026:	7c 85       	ldd	r23, Y+12	; 0x0c
    2028:	8d 85       	ldd	r24, Y+13	; 0x0d
    202a:	9e 85       	ldd	r25, Y+14	; 0x0e
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	40 e2       	ldi	r20, 0x20	; 32
    2032:	51 e4       	ldi	r21, 0x41	; 65
    2034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	bc 01       	movw	r22, r24
    203e:	cd 01       	movw	r24, r26
    2040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	9e 83       	std	Y+6, r25	; 0x06
    204a:	8d 83       	std	Y+5, r24	; 0x05
    204c:	0f c0       	rjmp	.+30     	; 0x206c <__vector_2+0x1ee>
    204e:	84 e1       	ldi	r24, 0x14	; 20
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	9c 83       	std	Y+4, r25	; 0x04
    2054:	8b 83       	std	Y+3, r24	; 0x03
    2056:	8b 81       	ldd	r24, Y+3	; 0x03
    2058:	9c 81       	ldd	r25, Y+4	; 0x04
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	f1 f7       	brne	.-4      	; 0x205a <__vector_2+0x1dc>
    205e:	9c 83       	std	Y+4, r25	; 0x04
    2060:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2062:	8d 81       	ldd	r24, Y+5	; 0x05
    2064:	9e 81       	ldd	r25, Y+6	; 0x06
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	9e 83       	std	Y+6, r25	; 0x06
    206a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    206c:	8d 81       	ldd	r24, Y+5	; 0x05
    206e:	9e 81       	ldd	r25, Y+6	; 0x06
    2070:	00 97       	sbiw	r24, 0x00	; 0
    2072:	69 f7       	brne	.-38     	; 0x204e <__vector_2+0x1d0>
    2074:	14 c0       	rjmp	.+40     	; 0x209e <__vector_2+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2076:	6f 81       	ldd	r22, Y+7	; 0x07
    2078:	78 85       	ldd	r23, Y+8	; 0x08
    207a:	89 85       	ldd	r24, Y+9	; 0x09
    207c:	9a 85       	ldd	r25, Y+10	; 0x0a
    207e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	9e 83       	std	Y+6, r25	; 0x06
    2088:	8d 83       	std	Y+5, r24	; 0x05
    208a:	8d 81       	ldd	r24, Y+5	; 0x05
    208c:	9e 81       	ldd	r25, Y+6	; 0x06
    208e:	9a 83       	std	Y+2, r25	; 0x02
    2090:	89 83       	std	Y+1, r24	; 0x01
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	9a 81       	ldd	r25, Y+2	; 0x02
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	f1 f7       	brne	.-4      	; 0x2096 <__vector_2+0x218>
    209a:	9a 83       	std	Y+2, r25	; 0x02
    209c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (3000) ;


	DIO_SetPinValue(PORTB_DIO, DOOR1, LOW);          // IDLE
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	60 e0       	ldi	r22, 0x00	; 0
    20a2:	40 e0       	ldi	r20, 0x00	; 0
    20a4:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_SetPinValue>
	DIO_SetPinValue(PORTB_DIO, DOOR2, LOW);
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	61 e0       	ldi	r22, 0x01	; 1
    20ac:	40 e0       	ldi	r20, 0x00	; 0
    20ae:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_SetPinValue>


	if (u8PeopleInside!=0) {
    20b2:	80 91 6e 00 	lds	r24, 0x006E
    20b6:	88 23       	and	r24, r24
    20b8:	31 f0       	breq	.+12     	; 0x20c6 <__vector_2+0x248>
	u8PeopleInside -- ;
    20ba:	80 91 6e 00 	lds	r24, 0x006E
    20be:	81 50       	subi	r24, 0x01	; 1
    20c0:	80 93 6e 00 	sts	0x006E, r24
    20c4:	02 c0       	rjmp	.+4      	; 0x20ca <__vector_2+0x24c>
	}

	else {
		u8PeopleInside = 0 ;
    20c6:	10 92 6e 00 	sts	0x006E, r1
	}

}
    20ca:	6c 96       	adiw	r28, 0x1c	; 28
    20cc:	de bf       	out	0x3e, r29	; 62
    20ce:	cd bf       	out	0x3d, r28	; 61
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	ff 91       	pop	r31
    20d6:	ef 91       	pop	r30
    20d8:	bf 91       	pop	r27
    20da:	af 91       	pop	r26
    20dc:	9f 91       	pop	r25
    20de:	8f 91       	pop	r24
    20e0:	7f 91       	pop	r23
    20e2:	6f 91       	pop	r22
    20e4:	5f 91       	pop	r21
    20e6:	4f 91       	pop	r20
    20e8:	3f 91       	pop	r19
    20ea:	2f 91       	pop	r18
    20ec:	0f 90       	pop	r0
    20ee:	0f be       	out	0x3f, r0	; 63
    20f0:	0f 90       	pop	r0
    20f2:	1f 90       	pop	r1
    20f4:	18 95       	reti

000020f6 <vid_DIO_vid_SetDioDirections>:
extern u8 u8AlarmStatus ;

/************************************************************/


void vid_DIO_vid_SetDioDirections (void) {
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62

/*********************** Analog Input *************************/
	DIO_SetPinDirection (PORTA_DIO,TEMP_SENSOR,INPUT) ;
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	60 e0       	ldi	r22, 0x00	; 0
    2102:	40 e0       	ldi	r20, 0x00	; 0
    2104:	0e 94 46 0c 	call	0x188c	; 0x188c <DIO_SetPinDirection>
	DIO_SetPinDirection (PORTA_DIO,LDR,INPUT) ;
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	61 e0       	ldi	r22, 0x01	; 1
    210c:	40 e0       	ldi	r20, 0x00	; 0
    210e:	0e 94 46 0c 	call	0x188c	; 0x188c <DIO_SetPinDirection>

/******************** Input External Interrupt **********************/
	DIO_SetPinDirection (PORTD_DIO,PIR1,INPUT) ;
    2112:	83 e0       	ldi	r24, 0x03	; 3
    2114:	62 e0       	ldi	r22, 0x02	; 2
    2116:	40 e0       	ldi	r20, 0x00	; 0
    2118:	0e 94 46 0c 	call	0x188c	; 0x188c <DIO_SetPinDirection>
	DIO_SetPinDirection (PORTD_DIO,PIR2,INPUT) ;
    211c:	83 e0       	ldi	r24, 0x03	; 3
    211e:	63 e0       	ldi	r22, 0x03	; 3
    2120:	40 e0       	ldi	r20, 0x00	; 0
    2122:	0e 94 46 0c 	call	0x188c	; 0x188c <DIO_SetPinDirection>

/*********************** Digital Input *************************/

	DIO_SetPinDirection (PORTB_DIO,GAS,INPUT) ;
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	65 e0       	ldi	r22, 0x05	; 5
    212a:	40 e0       	ldi	r20, 0x00	; 0
    212c:	0e 94 46 0c 	call	0x188c	; 0x188c <DIO_SetPinDirection>


/********************** Digital Output ************************/
	DIO_SetPinDirection (PORTB_DIO,DOOR1,OUTPUT) ;
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	60 e0       	ldi	r22, 0x00	; 0
    2134:	41 e0       	ldi	r20, 0x01	; 1
    2136:	0e 94 46 0c 	call	0x188c	; 0x188c <DIO_SetPinDirection>
	DIO_SetPinDirection (PORTB_DIO,DOOR2,OUTPUT) ;
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	61 e0       	ldi	r22, 0x01	; 1
    213e:	41 e0       	ldi	r20, 0x01	; 1
    2140:	0e 94 46 0c 	call	0x188c	; 0x188c <DIO_SetPinDirection>
	DIO_SetPinDirection (PORTB_DIO,LED,OUTPUT) ;
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	66 e0       	ldi	r22, 0x06	; 6
    2148:	41 e0       	ldi	r20, 0x01	; 1
    214a:	0e 94 46 0c 	call	0x188c	; 0x188c <DIO_SetPinDirection>
//	DIO_SetPinDirection (PORTB_DIO,BUZZ,OUTPUT) ;


/************************ PWM Output *************************/
	DIO_SetPinDirection (PORTB_DIO,FAN,OUTPUT) ;
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	63 e0       	ldi	r22, 0x03	; 3
    2152:	41 e0       	ldi	r20, 0x01	; 1
    2154:	0e 94 46 0c 	call	0x188c	; 0x188c <DIO_SetPinDirection>
	DIO_SetPinDirection (PORTD_DIO,LIGHT,OUTPUT) ;
    2158:	83 e0       	ldi	r24, 0x03	; 3
    215a:	67 e0       	ldi	r22, 0x07	; 7
    215c:	41 e0       	ldi	r20, 0x01	; 1
    215e:	0e 94 46 0c 	call	0x188c	; 0x188c <DIO_SetPinDirection>


/************************ PORTS INITIALIZATION *************************/

	DIO_SetPinValue(PORTD_DIO , PIR1 , HIGH);
    2162:	83 e0       	ldi	r24, 0x03	; 3
    2164:	62 e0       	ldi	r22, 0x02	; 2
    2166:	41 e0       	ldi	r20, 0x01	; 1
    2168:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_SetPinValue>
	DIO_SetPinValue(PORTD_DIO , PIR2 , HIGH);
    216c:	83 e0       	ldi	r24, 0x03	; 3
    216e:	63 e0       	ldi	r22, 0x03	; 3
    2170:	41 e0       	ldi	r20, 0x01	; 1
    2172:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_SetPinValue>
	DIO_SetPinValue(PORTB_DIO , GAS , HIGH) ;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	65 e0       	ldi	r22, 0x05	; 5
    217a:	41 e0       	ldi	r20, 0x01	; 1
    217c:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_SetPinValue>
	DIO_SetPinValue(PORTB_DIO , LED , LOW) ;
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	66 e0       	ldi	r22, 0x06	; 6
    2184:	40 e0       	ldi	r20, 0x00	; 0
    2186:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_SetPinValue>
//	DIO_SetPinValue(PORTB_DIO , BUZZ , LOW) ;

}
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	08 95       	ret

00002190 <UpdateFanSpeed>:


/************************************************************/

void UpdateFanSpeed (void) {
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	00 d0       	rcall	.+0      	; 0x2196 <UpdateFanSpeed+0x6>
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62

	u16 u16Volt = 0 ;
    219a:	1a 82       	std	Y+2, r1	; 0x02
    219c:	19 82       	std	Y+1, r1	; 0x01

	U8_ADC_U8_Read(TEMPERATURE_SENSOR)  ;
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <U8_ADC_U8_Read>
	// analog = ((digital * V ref )/2^resolution)
	u16Volt =( ( ( (u32)u8_TMP_Read *  1500UL) ) / 255UL )  ;
    21a4:	80 91 69 00 	lds	r24, 0x0069
    21a8:	88 2f       	mov	r24, r24
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	a0 e0       	ldi	r26, 0x00	; 0
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	2c ed       	ldi	r18, 0xDC	; 220
    21b2:	35 e0       	ldi	r19, 0x05	; 5
    21b4:	40 e0       	ldi	r20, 0x00	; 0
    21b6:	50 e0       	ldi	r21, 0x00	; 0
    21b8:	bc 01       	movw	r22, r24
    21ba:	cd 01       	movw	r24, r26
    21bc:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <__mulsi3>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	2f ef       	ldi	r18, 0xFF	; 255
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	40 e0       	ldi	r20, 0x00	; 0
    21ca:	50 e0       	ldi	r21, 0x00	; 0
    21cc:	bc 01       	movw	r22, r24
    21ce:	cd 01       	movw	r24, r26
    21d0:	0e 94 0c 12 	call	0x2418	; 0x2418 <__udivmodsi4>
    21d4:	da 01       	movw	r26, r20
    21d6:	c9 01       	movw	r24, r18
    21d8:	9a 83       	std	Y+2, r25	; 0x02
    21da:	89 83       	std	Y+1, r24	; 0x01
	u16Temp = u16Volt/10 ;
    21dc:	89 81       	ldd	r24, Y+1	; 0x01
    21de:	9a 81       	ldd	r25, Y+2	; 0x02
    21e0:	2a e0       	ldi	r18, 0x0A	; 10
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	b9 01       	movw	r22, r18
    21e6:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <__udivmodhi4>
    21ea:	cb 01       	movw	r24, r22
    21ec:	90 93 6c 00 	sts	0x006C, r25
    21f0:	80 93 6b 00 	sts	0x006B, r24



if      (u16Temp<=20)                  {OCR0_REG = 0 ; }
    21f4:	80 91 6b 00 	lds	r24, 0x006B
    21f8:	90 91 6c 00 	lds	r25, 0x006C
    21fc:	85 31       	cpi	r24, 0x15	; 21
    21fe:	91 05       	cpc	r25, r1
    2200:	20 f4       	brcc	.+8      	; 0x220a <UpdateFanSpeed+0x7a>
    2202:	ec e5       	ldi	r30, 0x5C	; 92
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	10 82       	st	Z, r1
    2208:	2a c0       	rjmp	.+84     	; 0x225e <UpdateFanSpeed+0xce>
else if ((u16Temp>20)&&(u16Temp<=27))  {OCR0_REG = 127 ; }
    220a:	80 91 6b 00 	lds	r24, 0x006B
    220e:	90 91 6c 00 	lds	r25, 0x006C
    2212:	85 31       	cpi	r24, 0x15	; 21
    2214:	91 05       	cpc	r25, r1
    2216:	60 f0       	brcs	.+24     	; 0x2230 <UpdateFanSpeed+0xa0>
    2218:	80 91 6b 00 	lds	r24, 0x006B
    221c:	90 91 6c 00 	lds	r25, 0x006C
    2220:	8c 31       	cpi	r24, 0x1C	; 28
    2222:	91 05       	cpc	r25, r1
    2224:	28 f4       	brcc	.+10     	; 0x2230 <UpdateFanSpeed+0xa0>
    2226:	ec e5       	ldi	r30, 0x5C	; 92
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	8f e7       	ldi	r24, 0x7F	; 127
    222c:	80 83       	st	Z, r24
    222e:	17 c0       	rjmp	.+46     	; 0x225e <UpdateFanSpeed+0xce>
else if ((u16Temp>27)&&(u16Temp<=30))  {OCR0_REG = 200 ; }
    2230:	80 91 6b 00 	lds	r24, 0x006B
    2234:	90 91 6c 00 	lds	r25, 0x006C
    2238:	8c 31       	cpi	r24, 0x1C	; 28
    223a:	91 05       	cpc	r25, r1
    223c:	60 f0       	brcs	.+24     	; 0x2256 <UpdateFanSpeed+0xc6>
    223e:	80 91 6b 00 	lds	r24, 0x006B
    2242:	90 91 6c 00 	lds	r25, 0x006C
    2246:	8f 31       	cpi	r24, 0x1F	; 31
    2248:	91 05       	cpc	r25, r1
    224a:	28 f4       	brcc	.+10     	; 0x2256 <UpdateFanSpeed+0xc6>
    224c:	ec e5       	ldi	r30, 0x5C	; 92
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	88 ec       	ldi	r24, 0xC8	; 200
    2252:	80 83       	st	Z, r24
    2254:	04 c0       	rjmp	.+8      	; 0x225e <UpdateFanSpeed+0xce>
else                                   { OCR0_REG=255 ; }
    2256:	ec e5       	ldi	r30, 0x5C	; 92
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	8f ef       	ldi	r24, 0xFF	; 255
    225c:	80 83       	st	Z, r24

}
    225e:	0f 90       	pop	r0
    2260:	0f 90       	pop	r0
    2262:	cf 91       	pop	r28
    2264:	df 91       	pop	r29
    2266:	08 95       	ret

00002268 <UpdateLightIlluminance>:

/************************************************************/

void UpdateLightIlluminance (void) {
    2268:	df 93       	push	r29
    226a:	cf 93       	push	r28
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62

	U8_ADC_U8_Read(LDR_SENSOR)  ;
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <U8_ADC_U8_Read>

	u8Lumen  = u8_LDR_Read ;
    2276:	80 91 6a 00 	lds	r24, 0x006A
    227a:	80 93 6d 00 	sts	0x006D, r24


	if (u8_LDR_Read <= 64 )                       {OCR2_REG = 0 ;}    // bulb off
    227e:	80 91 6a 00 	lds	r24, 0x006A
    2282:	81 34       	cpi	r24, 0x41	; 65
    2284:	20 f4       	brcc	.+8      	; 0x228e <UpdateLightIlluminance+0x26>
    2286:	e3 e4       	ldi	r30, 0x43	; 67
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	10 82       	st	Z, r1
    228c:	11 c0       	rjmp	.+34     	; 0x22b0 <UpdateLightIlluminance+0x48>
	else if (u8_LDR_Read >64 && u8_LDR_Read<128 ) {OCR2_REG = 128  ; }    // half max bulb lighting
    228e:	80 91 6a 00 	lds	r24, 0x006A
    2292:	81 34       	cpi	r24, 0x41	; 65
    2294:	48 f0       	brcs	.+18     	; 0x22a8 <UpdateLightIlluminance+0x40>
    2296:	80 91 6a 00 	lds	r24, 0x006A
    229a:	88 23       	and	r24, r24
    229c:	2c f0       	brlt	.+10     	; 0x22a8 <UpdateLightIlluminance+0x40>
    229e:	e3 e4       	ldi	r30, 0x43	; 67
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	80 e8       	ldi	r24, 0x80	; 128
    22a4:	80 83       	st	Z, r24
    22a6:	04 c0       	rjmp	.+8      	; 0x22b0 <UpdateLightIlluminance+0x48>
	else                                          {OCR2_REG = 255 ; }   // max bulb lighting
    22a8:	e3 e4       	ldi	r30, 0x43	; 67
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	8f ef       	ldi	r24, 0xFF	; 255
    22ae:	80 83       	st	Z, r24

}
    22b0:	cf 91       	pop	r28
    22b2:	df 91       	pop	r29
    22b4:	08 95       	ret

000022b6 <UpdateAlertStatus>:


/************************************************************/

void UpdateAlertStatus (void) {
    22b6:	df 93       	push	r29
    22b8:	cf 93       	push	r28
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62


if (DIO_GetPinValue(PORTB_DIO,GAS)) {
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	65 e0       	ldi	r22, 0x05	; 5
    22c2:	0e 94 c2 0b 	call	0x1784	; 0x1784 <DIO_GetPinValue>
    22c6:	88 23       	and	r24, r24
    22c8:	49 f0       	breq	.+18     	; 0x22dc <UpdateAlertStatus+0x26>
	DIO_SetPinValue(PORTB_DIO , LED , HIGH) ;        // led ON
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	66 e0       	ldi	r22, 0x06	; 6
    22ce:	41 e0       	ldi	r20, 0x01	; 1
    22d0:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_SetPinValue>
	u8AlarmStatus = 1 ;
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	80 93 6f 00 	sts	0x006F, r24
    22da:	07 c0       	rjmp	.+14     	; 0x22ea <UpdateAlertStatus+0x34>

}
else {
	DIO_SetPinValue(PORTB_DIO , LED , LOW) ;       // led OFF
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	66 e0       	ldi	r22, 0x06	; 6
    22e0:	40 e0       	ldi	r20, 0x00	; 0
    22e2:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_SetPinValue>
	u8AlarmStatus = 0 ;
    22e6:	10 92 6f 00 	sts	0x006F, r1

}



}
    22ea:	cf 91       	pop	r28
    22ec:	df 91       	pop	r29
    22ee:	08 95       	ret

000022f0 <vid_Timer0_vid_InitializePWM>:


#include "Timer0_interface.h"


void vid_Timer0_vid_InitializePWM (void)  {
    22f0:	df 93       	push	r29
    22f2:	cf 93       	push	r28
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62

		TCCR0_REG=0b01100011 ;
    22f8:	e3 e5       	ldi	r30, 0x53	; 83
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	83 e6       	ldi	r24, 0x63	; 99
    22fe:	80 83       	st	Z, r24
		OCR0_REG = 0X00 ;
    2300:	ec e5       	ldi	r30, 0x5C	; 92
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	10 82       	st	Z, r1

}
    2306:	cf 91       	pop	r28
    2308:	df 91       	pop	r29
    230a:	08 95       	ret

0000230c <vid_Timer2_vid_InitializePWM>:
#include "registers.h"

#include "Timer2_interface.h"


void vid_Timer2_vid_InitializePWM (void)  {
    230c:	df 93       	push	r29
    230e:	cf 93       	push	r28
    2310:	cd b7       	in	r28, 0x3d	; 61
    2312:	de b7       	in	r29, 0x3e	; 62

		TCCR2_REG=0b01100011 ;
    2314:	e5 e4       	ldi	r30, 0x45	; 69
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	83 e6       	ldi	r24, 0x63	; 99
    231a:	80 83       	st	Z, r24

		OCR2_REG = 0X00 ;
    231c:	e3 e4       	ldi	r30, 0x43	; 67
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	10 82       	st	Z, r1

}
    2322:	cf 91       	pop	r28
    2324:	df 91       	pop	r29
    2326:	08 95       	ret

00002328 <vid_UART_vid_Initialize>:


/**************************************************************/

void vid_UART_vid_Initialize(void)
{
    2328:	df 93       	push	r29
    232a:	cf 93       	push	r28
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62


  // Set BaudRate -> 9600/8MhZ
  UBRRL = 51;
    2330:	e9 e2       	ldi	r30, 0x29	; 41
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	83 e3       	ldi	r24, 0x33	; 51
    2336:	80 83       	st	Z, r24
  UBRRH = 0;
    2338:	e0 e4       	ldi	r30, 0x40	; 64
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	10 82       	st	Z, r1
  // Set Frame Format -> 8 data, 1 stop, No Parity
  UCSRC = 0b10000110;
    233e:	e0 e4       	ldi	r30, 0x40	; 64
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	86 e8       	ldi	r24, 0x86	; 134
    2344:	80 83       	st	Z, r24
  // Enable RX and TX
  UCSRB = 0b00011000;
    2346:	ea e2       	ldi	r30, 0x2A	; 42
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	88 e1       	ldi	r24, 0x18	; 24
    234c:	80 83       	st	Z, r24
}
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	08 95       	ret

00002354 <vid_UART_vid_SendChar>:

/**************************************************************/

void vid_UART_vid_SendChar(u8 data)
{
    2354:	df 93       	push	r29
    2356:	cf 93       	push	r28
    2358:	0f 92       	push	r0
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
    235e:	89 83       	std	Y+1, r24	; 0x01
  // Wait until transmission Register Empty
  while(!(UCSRA&0b00100000));
    2360:	eb e2       	ldi	r30, 0x2B	; 43
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 81       	ld	r24, Z
    2366:	88 2f       	mov	r24, r24
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	80 72       	andi	r24, 0x20	; 32
    236c:	90 70       	andi	r25, 0x00	; 0
    236e:	00 97       	sbiw	r24, 0x00	; 0
    2370:	b9 f3       	breq	.-18     	; 0x2360 <vid_UART_vid_SendChar+0xc>

  UDR = data;
    2372:	ec e2       	ldi	r30, 0x2C	; 44
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	89 81       	ldd	r24, Y+1	; 0x01
    2378:	80 83       	st	Z, r24

  // wait for transmit complete
  while(!(UCSRA&0b01000000));
    237a:	eb e2       	ldi	r30, 0x2B	; 43
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	80 81       	ld	r24, Z
    2380:	88 2f       	mov	r24, r24
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	80 74       	andi	r24, 0x40	; 64
    2386:	90 70       	andi	r25, 0x00	; 0
    2388:	00 97       	sbiw	r24, 0x00	; 0
    238a:	b9 f3       	breq	.-18     	; 0x237a <vid_UART_vid_SendChar+0x26>
}
    238c:	0f 90       	pop	r0
    238e:	cf 91       	pop	r28
    2390:	df 91       	pop	r29
    2392:	08 95       	ret

00002394 <u8_UART_u8_GetChar>:

/**************************************************************/

u8 u8_UART_u8_GetChar(void)
{
    2394:	df 93       	push	r29
    2396:	cf 93       	push	r28
    2398:	cd b7       	in	r28, 0x3d	; 61
    239a:	de b7       	in	r29, 0x3e	; 62
  // Wait until Reception Complete
  while(!(UCSRA&0b10000000));
    239c:	eb e2       	ldi	r30, 0x2B	; 43
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	88 23       	and	r24, r24
    23a4:	dc f7       	brge	.-10     	; 0x239c <u8_UART_u8_GetChar+0x8>

  return UDR;
    23a6:	ec e2       	ldi	r30, 0x2C	; 44
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	80 81       	ld	r24, Z
}
    23ac:	cf 91       	pop	r28
    23ae:	df 91       	pop	r29
    23b0:	08 95       	ret

000023b2 <__mulsi3>:
    23b2:	62 9f       	mul	r22, r18
    23b4:	d0 01       	movw	r26, r0
    23b6:	73 9f       	mul	r23, r19
    23b8:	f0 01       	movw	r30, r0
    23ba:	82 9f       	mul	r24, r18
    23bc:	e0 0d       	add	r30, r0
    23be:	f1 1d       	adc	r31, r1
    23c0:	64 9f       	mul	r22, r20
    23c2:	e0 0d       	add	r30, r0
    23c4:	f1 1d       	adc	r31, r1
    23c6:	92 9f       	mul	r25, r18
    23c8:	f0 0d       	add	r31, r0
    23ca:	83 9f       	mul	r24, r19
    23cc:	f0 0d       	add	r31, r0
    23ce:	74 9f       	mul	r23, r20
    23d0:	f0 0d       	add	r31, r0
    23d2:	65 9f       	mul	r22, r21
    23d4:	f0 0d       	add	r31, r0
    23d6:	99 27       	eor	r25, r25
    23d8:	72 9f       	mul	r23, r18
    23da:	b0 0d       	add	r27, r0
    23dc:	e1 1d       	adc	r30, r1
    23de:	f9 1f       	adc	r31, r25
    23e0:	63 9f       	mul	r22, r19
    23e2:	b0 0d       	add	r27, r0
    23e4:	e1 1d       	adc	r30, r1
    23e6:	f9 1f       	adc	r31, r25
    23e8:	bd 01       	movw	r22, r26
    23ea:	cf 01       	movw	r24, r30
    23ec:	11 24       	eor	r1, r1
    23ee:	08 95       	ret

000023f0 <__udivmodhi4>:
    23f0:	aa 1b       	sub	r26, r26
    23f2:	bb 1b       	sub	r27, r27
    23f4:	51 e1       	ldi	r21, 0x11	; 17
    23f6:	07 c0       	rjmp	.+14     	; 0x2406 <__udivmodhi4_ep>

000023f8 <__udivmodhi4_loop>:
    23f8:	aa 1f       	adc	r26, r26
    23fa:	bb 1f       	adc	r27, r27
    23fc:	a6 17       	cp	r26, r22
    23fe:	b7 07       	cpc	r27, r23
    2400:	10 f0       	brcs	.+4      	; 0x2406 <__udivmodhi4_ep>
    2402:	a6 1b       	sub	r26, r22
    2404:	b7 0b       	sbc	r27, r23

00002406 <__udivmodhi4_ep>:
    2406:	88 1f       	adc	r24, r24
    2408:	99 1f       	adc	r25, r25
    240a:	5a 95       	dec	r21
    240c:	a9 f7       	brne	.-22     	; 0x23f8 <__udivmodhi4_loop>
    240e:	80 95       	com	r24
    2410:	90 95       	com	r25
    2412:	bc 01       	movw	r22, r24
    2414:	cd 01       	movw	r24, r26
    2416:	08 95       	ret

00002418 <__udivmodsi4>:
    2418:	a1 e2       	ldi	r26, 0x21	; 33
    241a:	1a 2e       	mov	r1, r26
    241c:	aa 1b       	sub	r26, r26
    241e:	bb 1b       	sub	r27, r27
    2420:	fd 01       	movw	r30, r26
    2422:	0d c0       	rjmp	.+26     	; 0x243e <__udivmodsi4_ep>

00002424 <__udivmodsi4_loop>:
    2424:	aa 1f       	adc	r26, r26
    2426:	bb 1f       	adc	r27, r27
    2428:	ee 1f       	adc	r30, r30
    242a:	ff 1f       	adc	r31, r31
    242c:	a2 17       	cp	r26, r18
    242e:	b3 07       	cpc	r27, r19
    2430:	e4 07       	cpc	r30, r20
    2432:	f5 07       	cpc	r31, r21
    2434:	20 f0       	brcs	.+8      	; 0x243e <__udivmodsi4_ep>
    2436:	a2 1b       	sub	r26, r18
    2438:	b3 0b       	sbc	r27, r19
    243a:	e4 0b       	sbc	r30, r20
    243c:	f5 0b       	sbc	r31, r21

0000243e <__udivmodsi4_ep>:
    243e:	66 1f       	adc	r22, r22
    2440:	77 1f       	adc	r23, r23
    2442:	88 1f       	adc	r24, r24
    2444:	99 1f       	adc	r25, r25
    2446:	1a 94       	dec	r1
    2448:	69 f7       	brne	.-38     	; 0x2424 <__udivmodsi4_loop>
    244a:	60 95       	com	r22
    244c:	70 95       	com	r23
    244e:	80 95       	com	r24
    2450:	90 95       	com	r25
    2452:	9b 01       	movw	r18, r22
    2454:	ac 01       	movw	r20, r24
    2456:	bd 01       	movw	r22, r26
    2458:	cf 01       	movw	r24, r30
    245a:	08 95       	ret

0000245c <__prologue_saves__>:
    245c:	2f 92       	push	r2
    245e:	3f 92       	push	r3
    2460:	4f 92       	push	r4
    2462:	5f 92       	push	r5
    2464:	6f 92       	push	r6
    2466:	7f 92       	push	r7
    2468:	8f 92       	push	r8
    246a:	9f 92       	push	r9
    246c:	af 92       	push	r10
    246e:	bf 92       	push	r11
    2470:	cf 92       	push	r12
    2472:	df 92       	push	r13
    2474:	ef 92       	push	r14
    2476:	ff 92       	push	r15
    2478:	0f 93       	push	r16
    247a:	1f 93       	push	r17
    247c:	cf 93       	push	r28
    247e:	df 93       	push	r29
    2480:	cd b7       	in	r28, 0x3d	; 61
    2482:	de b7       	in	r29, 0x3e	; 62
    2484:	ca 1b       	sub	r28, r26
    2486:	db 0b       	sbc	r29, r27
    2488:	0f b6       	in	r0, 0x3f	; 63
    248a:	f8 94       	cli
    248c:	de bf       	out	0x3e, r29	; 62
    248e:	0f be       	out	0x3f, r0	; 63
    2490:	cd bf       	out	0x3d, r28	; 61
    2492:	09 94       	ijmp

00002494 <__epilogue_restores__>:
    2494:	2a 88       	ldd	r2, Y+18	; 0x12
    2496:	39 88       	ldd	r3, Y+17	; 0x11
    2498:	48 88       	ldd	r4, Y+16	; 0x10
    249a:	5f 84       	ldd	r5, Y+15	; 0x0f
    249c:	6e 84       	ldd	r6, Y+14	; 0x0e
    249e:	7d 84       	ldd	r7, Y+13	; 0x0d
    24a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    24a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    24a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    24a6:	b9 84       	ldd	r11, Y+9	; 0x09
    24a8:	c8 84       	ldd	r12, Y+8	; 0x08
    24aa:	df 80       	ldd	r13, Y+7	; 0x07
    24ac:	ee 80       	ldd	r14, Y+6	; 0x06
    24ae:	fd 80       	ldd	r15, Y+5	; 0x05
    24b0:	0c 81       	ldd	r16, Y+4	; 0x04
    24b2:	1b 81       	ldd	r17, Y+3	; 0x03
    24b4:	aa 81       	ldd	r26, Y+2	; 0x02
    24b6:	b9 81       	ldd	r27, Y+1	; 0x01
    24b8:	ce 0f       	add	r28, r30
    24ba:	d1 1d       	adc	r29, r1
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	f8 94       	cli
    24c0:	de bf       	out	0x3e, r29	; 62
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	cd bf       	out	0x3d, r28	; 61
    24c6:	ed 01       	movw	r28, r26
    24c8:	08 95       	ret

000024ca <_exit>:
    24ca:	f8 94       	cli

000024cc <__stop_program>:
    24cc:	ff cf       	rjmp	.-2      	; 0x24cc <__stop_program>
