
Smart_Home_C1_V2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000021c0  00002254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800068  00800068  0000225c  2**0
                  ALLOC
  3 .stab         00001e60  00000000  00000000  0000225c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c18  00000000  00000000  000040bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008868  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000089c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008c55  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009423  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__vector_1>
       8:	0c 94 bb 0d 	jmp	0x1b76	; 0x1b76 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ac 36       	cpi	r26, 0x6C	; 108
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e0 ec       	ldi	r30, 0xC0	; 192
      78:	f1 e2       	ldi	r31, 0x21	; 33
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <main>
      8a:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b3 10 	jmp	0x2166	; 0x2166 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cf 10 	jmp	0x219e	; 0x219e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b3 10 	jmp	0x2166	; 0x2166 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cf 10 	jmp	0x219e	; 0x219e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b3 10 	jmp	0x2166	; 0x2166 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 cf 10 	jmp	0x219e	; 0x219e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b3 10 	jmp	0x2166	; 0x2166 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 cf 10 	jmp	0x219e	; 0x219e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b3 10 	jmp	0x2166	; 0x2166 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 cf 10 	jmp	0x219e	; 0x219e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b7 10 	jmp	0x216e	; 0x216e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_16>:

#include <avr/interrupt.h>
#include "registers.h"


ISR(ADC_vect){
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	df 93       	push	r29
     b52:	cf 93       	push	r28
     b54:	cd b7       	in	r28, 0x3d	; 61
     b56:	de b7       	in	r29, 0x3e	; 62
	else {

	}

*/
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	0f 90       	pop	r0
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	0f 90       	pop	r0
     b62:	1f 90       	pop	r1
     b64:	18 95       	reti

00000b66 <vid_ADC_vid_Initialize>:


/************************************************************/


void vid_ADC_vid_Initialize (void) {
     b66:	df 93       	push	r29
     b68:	cf 93       	push	r28
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62

	ADMUX_REG =  0b01100000 ;     // VR : AVCC , LEFT SHIFT
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 e6       	ldi	r24, 0x60	; 96
     b74:	80 83       	st	Z, r24

	SET_BIT(ADCSRA_REG,ADEN)  ;     // ENABLE ADC ,
     b76:	a6 e2       	ldi	r26, 0x26	; 38
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	e6 e2       	ldi	r30, 0x26	; 38
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	80 68       	ori	r24, 0x80	; 128
     b82:	8c 93       	st	X, r24
	(ADCSRA_REG) &= ~((1 << (0))|(1 << (1))|(1 << (2)) ) ; // PRESCALER = 2
     b84:	a6 e2       	ldi	r26, 0x26	; 38
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e6 e2       	ldi	r30, 0x26	; 38
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	88 7f       	andi	r24, 0xF8	; 248
     b90:	8c 93       	st	X, r24
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <U8_ADC_U8_Read>:

/************************************************************/

u8 U8_ADC_U8_Read (u8 channel) {
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	0f 92       	push	r0
     b9e:	cd b7       	in	r28, 0x3d	; 61
     ba0:	de b7       	in	r29, 0x3e	; 62
     ba2:	89 83       	std	Y+1, r24	; 0x01

		channel &= 0b00000111;        // channel from 0 : 7(0b111)  ,& to neglect any bit more than 7
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	87 70       	andi	r24, 0x07	; 7
     ba8:	89 83       	std	Y+1, r24	; 0x01
		ADMUX_REG &= 0b11100000;      // to save higher 3 bits as they are and set the rest to 0
     baa:	a7 e2       	ldi	r26, 0x27	; 39
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	e7 e2       	ldi	r30, 0x27	; 39
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	80 7e       	andi	r24, 0xE0	; 224
     bb6:	8c 93       	st	X, r24
		ADMUX_REG |= channel;         // Take the target channel
     bb8:	a7 e2       	ldi	r26, 0x27	; 39
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	e7 e2       	ldi	r30, 0x27	; 39
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	90 81       	ld	r25, Z
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	89 2b       	or	r24, r25
     bc6:	8c 93       	st	X, r24

		SET_BIT(ADCSRA_REG,ADSC)  ;     // start conversion
     bc8:	a6 e2       	ldi	r26, 0x26	; 38
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	e6 e2       	ldi	r30, 0x26	; 38
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	80 64       	ori	r24, 0x40	; 64
     bd4:	8c 93       	st	X, r24

		while(!(ADCSRA_REG & (1<<4)));  //POLLING TO WAIT CONVERSION
     bd6:	e6 e2       	ldi	r30, 0x26	; 38
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	88 2f       	mov	r24, r24
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	80 71       	andi	r24, 0x10	; 16
     be2:	90 70       	andi	r25, 0x00	; 0
     be4:	00 97       	sbiw	r24, 0x00	; 0
     be6:	b9 f3       	breq	.-18     	; 0xbd6 <U8_ADC_U8_Read+0x3e>

		return ADCH_REG;
     be8:	e5 e2       	ldi	r30, 0x25	; 37
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z

}
     bee:	0f 90       	pop	r0
     bf0:	cf 91       	pop	r28
     bf2:	df 91       	pop	r29
     bf4:	08 95       	ret

00000bf6 <main>:
/****************************************************************/




void main (void) {
     bf6:	0f 93       	push	r16
     bf8:	1f 93       	push	r17
     bfa:	df 93       	push	r29
     bfc:	cf 93       	push	r28
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	c4 55       	subi	r28, 0x54	; 84
     c04:	d0 40       	sbci	r29, 0x00	; 0
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	f8 94       	cli
     c0a:	de bf       	out	0x3e, r29	; 62
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	cd bf       	out	0x3d, r28	; 61


	vid_DIO_vid_SetDioDirections () ;
     c10:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <vid_DIO_vid_SetDioDirections>

	vid_ADC_vid_Initialize () ;
     c14:	0e 94 b3 05 	call	0xb66	; 0xb66 <vid_ADC_vid_Initialize>

	vid_Timer0_vid_InitializePWM () ;
     c18:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <vid_Timer0_vid_InitializePWM>

	vid_Timer2_vid_InitializePWM () ;
     c1c:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <vid_Timer2_vid_InitializePWM>

	vid_ExtInt0_vid_InitializeExtInt () ;
     c20:	0e 94 4c 0c 	call	0x1898	; 0x1898 <vid_ExtInt0_vid_InitializeExtInt>

	vid_ExtInt1_vid_InitializeExtInt () ;
     c24:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <vid_ExtInt1_vid_InitializeExtInt>

	vid_UART_vid_Initialize();
     c28:	0e 94 0d 10 	call	0x201a	; 0x201a <vid_UART_vid_Initialize>

	while (1) {



    UpdateFanSpeed () ;
     c2c:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <UpdateFanSpeed>
    UpdateLightIlluminance () ;
     c30:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <UpdateLightIlluminance>
    UpdateAlertStatus () ;
     c34:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <UpdateAlertStatus>




    asm ("CLI") ;       //disable global interrupt
     c38:	f8 94       	cli




    vid_UART_vid_SendChar('a') ;
     c3a:	81 e6       	ldi	r24, 0x61	; 97
     c3c:	0e 94 23 10 	call	0x2046	; 0x2046 <vid_UART_vid_SendChar>
     c40:	fe 01       	movw	r30, r28
     c42:	ef 5a       	subi	r30, 0xAF	; 175
     c44:	ff 4f       	sbci	r31, 0xFF	; 255
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	aa e7       	ldi	r26, 0x7A	; 122
     c4c:	b3 e4       	ldi	r27, 0x43	; 67
     c4e:	80 83       	st	Z, r24
     c50:	91 83       	std	Z+1, r25	; 0x01
     c52:	a2 83       	std	Z+2, r26	; 0x02
     c54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c56:	8e 01       	movw	r16, r28
     c58:	03 5b       	subi	r16, 0xB3	; 179
     c5a:	1f 4f       	sbci	r17, 0xFF	; 255
     c5c:	fe 01       	movw	r30, r28
     c5e:	ef 5a       	subi	r30, 0xAF	; 175
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	60 81       	ld	r22, Z
     c64:	71 81       	ldd	r23, Z+1	; 0x01
     c66:	82 81       	ldd	r24, Z+2	; 0x02
     c68:	93 81       	ldd	r25, Z+3	; 0x03
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	48 e4       	ldi	r20, 0x48	; 72
     c70:	53 e4       	ldi	r21, 0x43	; 67
     c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c76:	dc 01       	movw	r26, r24
     c78:	cb 01       	movw	r24, r22
     c7a:	f8 01       	movw	r30, r16
     c7c:	80 83       	st	Z, r24
     c7e:	91 83       	std	Z+1, r25	; 0x01
     c80:	a2 83       	std	Z+2, r26	; 0x02
     c82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c84:	fe 01       	movw	r30, r28
     c86:	e3 5b       	subi	r30, 0xB3	; 179
     c88:	ff 4f       	sbci	r31, 0xFF	; 255
     c8a:	60 81       	ld	r22, Z
     c8c:	71 81       	ldd	r23, Z+1	; 0x01
     c8e:	82 81       	ldd	r24, Z+2	; 0x02
     c90:	93 81       	ldd	r25, Z+3	; 0x03
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	40 e8       	ldi	r20, 0x80	; 128
     c98:	5f e3       	ldi	r21, 0x3F	; 63
     c9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c9e:	88 23       	and	r24, r24
     ca0:	44 f4       	brge	.+16     	; 0xcb2 <main+0xbc>
		__ticks = 1;
     ca2:	fe 01       	movw	r30, r28
     ca4:	e5 5b       	subi	r30, 0xB5	; 181
     ca6:	ff 4f       	sbci	r31, 0xFF	; 255
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	91 83       	std	Z+1, r25	; 0x01
     cae:	80 83       	st	Z, r24
     cb0:	64 c0       	rjmp	.+200    	; 0xd7a <main+0x184>
	else if (__tmp > 65535)
     cb2:	fe 01       	movw	r30, r28
     cb4:	e3 5b       	subi	r30, 0xB3	; 179
     cb6:	ff 4f       	sbci	r31, 0xFF	; 255
     cb8:	60 81       	ld	r22, Z
     cba:	71 81       	ldd	r23, Z+1	; 0x01
     cbc:	82 81       	ldd	r24, Z+2	; 0x02
     cbe:	93 81       	ldd	r25, Z+3	; 0x03
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	3f ef       	ldi	r19, 0xFF	; 255
     cc4:	4f e7       	ldi	r20, 0x7F	; 127
     cc6:	57 e4       	ldi	r21, 0x47	; 71
     cc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ccc:	18 16       	cp	r1, r24
     cce:	0c f0       	brlt	.+2      	; 0xcd2 <main+0xdc>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <main+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cd2:	fe 01       	movw	r30, r28
     cd4:	ef 5a       	subi	r30, 0xAF	; 175
     cd6:	ff 4f       	sbci	r31, 0xFF	; 255
     cd8:	60 81       	ld	r22, Z
     cda:	71 81       	ldd	r23, Z+1	; 0x01
     cdc:	82 81       	ldd	r24, Z+2	; 0x02
     cde:	93 81       	ldd	r25, Z+3	; 0x03
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	40 e2       	ldi	r20, 0x20	; 32
     ce6:	51 e4       	ldi	r21, 0x41	; 65
     ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cec:	dc 01       	movw	r26, r24
     cee:	cb 01       	movw	r24, r22
     cf0:	8e 01       	movw	r16, r28
     cf2:	05 5b       	subi	r16, 0xB5	; 181
     cf4:	1f 4f       	sbci	r17, 0xFF	; 255
     cf6:	bc 01       	movw	r22, r24
     cf8:	cd 01       	movw	r24, r26
     cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
     d02:	f8 01       	movw	r30, r16
     d04:	91 83       	std	Z+1, r25	; 0x01
     d06:	80 83       	st	Z, r24
     d08:	1f c0       	rjmp	.+62     	; 0xd48 <main+0x152>
     d0a:	fe 01       	movw	r30, r28
     d0c:	e7 5b       	subi	r30, 0xB7	; 183
     d0e:	ff 4f       	sbci	r31, 0xFF	; 255
     d10:	84 e1       	ldi	r24, 0x14	; 20
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	91 83       	std	Z+1, r25	; 0x01
     d16:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d18:	fe 01       	movw	r30, r28
     d1a:	e7 5b       	subi	r30, 0xB7	; 183
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	80 81       	ld	r24, Z
     d20:	91 81       	ldd	r25, Z+1	; 0x01
     d22:	01 97       	sbiw	r24, 0x01	; 1
     d24:	f1 f7       	brne	.-4      	; 0xd22 <main+0x12c>
     d26:	fe 01       	movw	r30, r28
     d28:	e7 5b       	subi	r30, 0xB7	; 183
     d2a:	ff 4f       	sbci	r31, 0xFF	; 255
     d2c:	91 83       	std	Z+1, r25	; 0x01
     d2e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d30:	de 01       	movw	r26, r28
     d32:	a5 5b       	subi	r26, 0xB5	; 181
     d34:	bf 4f       	sbci	r27, 0xFF	; 255
     d36:	fe 01       	movw	r30, r28
     d38:	e5 5b       	subi	r30, 0xB5	; 181
     d3a:	ff 4f       	sbci	r31, 0xFF	; 255
     d3c:	80 81       	ld	r24, Z
     d3e:	91 81       	ldd	r25, Z+1	; 0x01
     d40:	01 97       	sbiw	r24, 0x01	; 1
     d42:	11 96       	adiw	r26, 0x01	; 1
     d44:	9c 93       	st	X, r25
     d46:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d48:	fe 01       	movw	r30, r28
     d4a:	e5 5b       	subi	r30, 0xB5	; 181
     d4c:	ff 4f       	sbci	r31, 0xFF	; 255
     d4e:	80 81       	ld	r24, Z
     d50:	91 81       	ldd	r25, Z+1	; 0x01
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	d1 f6       	brne	.-76     	; 0xd0a <main+0x114>
     d56:	27 c0       	rjmp	.+78     	; 0xda6 <main+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d58:	8e 01       	movw	r16, r28
     d5a:	05 5b       	subi	r16, 0xB5	; 181
     d5c:	1f 4f       	sbci	r17, 0xFF	; 255
     d5e:	fe 01       	movw	r30, r28
     d60:	e3 5b       	subi	r30, 0xB3	; 179
     d62:	ff 4f       	sbci	r31, 0xFF	; 255
     d64:	60 81       	ld	r22, Z
     d66:	71 81       	ldd	r23, Z+1	; 0x01
     d68:	82 81       	ldd	r24, Z+2	; 0x02
     d6a:	93 81       	ldd	r25, Z+3	; 0x03
     d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d70:	dc 01       	movw	r26, r24
     d72:	cb 01       	movw	r24, r22
     d74:	f8 01       	movw	r30, r16
     d76:	91 83       	std	Z+1, r25	; 0x01
     d78:	80 83       	st	Z, r24
     d7a:	de 01       	movw	r26, r28
     d7c:	a9 5b       	subi	r26, 0xB9	; 185
     d7e:	bf 4f       	sbci	r27, 0xFF	; 255
     d80:	fe 01       	movw	r30, r28
     d82:	e5 5b       	subi	r30, 0xB5	; 181
     d84:	ff 4f       	sbci	r31, 0xFF	; 255
     d86:	80 81       	ld	r24, Z
     d88:	91 81       	ldd	r25, Z+1	; 0x01
     d8a:	8d 93       	st	X+, r24
     d8c:	9c 93       	st	X, r25
     d8e:	fe 01       	movw	r30, r28
     d90:	e9 5b       	subi	r30, 0xB9	; 185
     d92:	ff 4f       	sbci	r31, 0xFF	; 255
     d94:	80 81       	ld	r24, Z
     d96:	91 81       	ldd	r25, Z+1	; 0x01
     d98:	01 97       	sbiw	r24, 0x01	; 1
     d9a:	f1 f7       	brne	.-4      	; 0xd98 <main+0x1a2>
     d9c:	fe 01       	movw	r30, r28
     d9e:	e9 5b       	subi	r30, 0xB9	; 185
     da0:	ff 4f       	sbci	r31, 0xFF	; 255
     da2:	91 83       	std	Z+1, r25	; 0x01
     da4:	80 83       	st	Z, r24
    _delay_ms(250) ;
    vid_UART_vid_SendChar((u8)u16Temp);
     da6:	80 91 68 00 	lds	r24, 0x0068
     daa:	90 91 69 00 	lds	r25, 0x0069
     dae:	0e 94 23 10 	call	0x2046	; 0x2046 <vid_UART_vid_SendChar>
     db2:	fe 01       	movw	r30, r28
     db4:	ed 5b       	subi	r30, 0xBD	; 189
     db6:	ff 4f       	sbci	r31, 0xFF	; 255
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	aa e7       	ldi	r26, 0x7A	; 122
     dbe:	b3 e4       	ldi	r27, 0x43	; 67
     dc0:	80 83       	st	Z, r24
     dc2:	91 83       	std	Z+1, r25	; 0x01
     dc4:	a2 83       	std	Z+2, r26	; 0x02
     dc6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dc8:	8e 01       	movw	r16, r28
     dca:	01 5c       	subi	r16, 0xC1	; 193
     dcc:	1f 4f       	sbci	r17, 0xFF	; 255
     dce:	fe 01       	movw	r30, r28
     dd0:	ed 5b       	subi	r30, 0xBD	; 189
     dd2:	ff 4f       	sbci	r31, 0xFF	; 255
     dd4:	60 81       	ld	r22, Z
     dd6:	71 81       	ldd	r23, Z+1	; 0x01
     dd8:	82 81       	ldd	r24, Z+2	; 0x02
     dda:	93 81       	ldd	r25, Z+3	; 0x03
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	48 e4       	ldi	r20, 0x48	; 72
     de2:	53 e4       	ldi	r21, 0x43	; 67
     de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     de8:	dc 01       	movw	r26, r24
     dea:	cb 01       	movw	r24, r22
     dec:	f8 01       	movw	r30, r16
     dee:	80 83       	st	Z, r24
     df0:	91 83       	std	Z+1, r25	; 0x01
     df2:	a2 83       	std	Z+2, r26	; 0x02
     df4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     df6:	fe 01       	movw	r30, r28
     df8:	ff 96       	adiw	r30, 0x3f	; 63
     dfa:	60 81       	ld	r22, Z
     dfc:	71 81       	ldd	r23, Z+1	; 0x01
     dfe:	82 81       	ldd	r24, Z+2	; 0x02
     e00:	93 81       	ldd	r25, Z+3	; 0x03
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	40 e8       	ldi	r20, 0x80	; 128
     e08:	5f e3       	ldi	r21, 0x3F	; 63
     e0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e0e:	88 23       	and	r24, r24
     e10:	2c f4       	brge	.+10     	; 0xe1c <main+0x226>
		__ticks = 1;
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	9e af       	std	Y+62, r25	; 0x3e
     e18:	8d af       	std	Y+61, r24	; 0x3d
     e1a:	46 c0       	rjmp	.+140    	; 0xea8 <main+0x2b2>
	else if (__tmp > 65535)
     e1c:	fe 01       	movw	r30, r28
     e1e:	ff 96       	adiw	r30, 0x3f	; 63
     e20:	60 81       	ld	r22, Z
     e22:	71 81       	ldd	r23, Z+1	; 0x01
     e24:	82 81       	ldd	r24, Z+2	; 0x02
     e26:	93 81       	ldd	r25, Z+3	; 0x03
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	3f ef       	ldi	r19, 0xFF	; 255
     e2c:	4f e7       	ldi	r20, 0x7F	; 127
     e2e:	57 e4       	ldi	r21, 0x47	; 71
     e30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e34:	18 16       	cp	r1, r24
     e36:	64 f5       	brge	.+88     	; 0xe90 <main+0x29a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e38:	fe 01       	movw	r30, r28
     e3a:	ed 5b       	subi	r30, 0xBD	; 189
     e3c:	ff 4f       	sbci	r31, 0xFF	; 255
     e3e:	60 81       	ld	r22, Z
     e40:	71 81       	ldd	r23, Z+1	; 0x01
     e42:	82 81       	ldd	r24, Z+2	; 0x02
     e44:	93 81       	ldd	r25, Z+3	; 0x03
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	40 e2       	ldi	r20, 0x20	; 32
     e4c:	51 e4       	ldi	r21, 0x41	; 65
     e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	bc 01       	movw	r22, r24
     e58:	cd 01       	movw	r24, r26
     e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5e:	dc 01       	movw	r26, r24
     e60:	cb 01       	movw	r24, r22
     e62:	9e af       	std	Y+62, r25	; 0x3e
     e64:	8d af       	std	Y+61, r24	; 0x3d
     e66:	0f c0       	rjmp	.+30     	; 0xe86 <main+0x290>
     e68:	84 e1       	ldi	r24, 0x14	; 20
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	9c af       	std	Y+60, r25	; 0x3c
     e6e:	8b af       	std	Y+59, r24	; 0x3b
     e70:	8b ad       	ldd	r24, Y+59	; 0x3b
     e72:	9c ad       	ldd	r25, Y+60	; 0x3c
     e74:	01 97       	sbiw	r24, 0x01	; 1
     e76:	f1 f7       	brne	.-4      	; 0xe74 <main+0x27e>
     e78:	9c af       	std	Y+60, r25	; 0x3c
     e7a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7c:	8d ad       	ldd	r24, Y+61	; 0x3d
     e7e:	9e ad       	ldd	r25, Y+62	; 0x3e
     e80:	01 97       	sbiw	r24, 0x01	; 1
     e82:	9e af       	std	Y+62, r25	; 0x3e
     e84:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e86:	8d ad       	ldd	r24, Y+61	; 0x3d
     e88:	9e ad       	ldd	r25, Y+62	; 0x3e
     e8a:	00 97       	sbiw	r24, 0x00	; 0
     e8c:	69 f7       	brne	.-38     	; 0xe68 <main+0x272>
     e8e:	16 c0       	rjmp	.+44     	; 0xebc <main+0x2c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e90:	fe 01       	movw	r30, r28
     e92:	ff 96       	adiw	r30, 0x3f	; 63
     e94:	60 81       	ld	r22, Z
     e96:	71 81       	ldd	r23, Z+1	; 0x01
     e98:	82 81       	ldd	r24, Z+2	; 0x02
     e9a:	93 81       	ldd	r25, Z+3	; 0x03
     e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ea0:	dc 01       	movw	r26, r24
     ea2:	cb 01       	movw	r24, r22
     ea4:	9e af       	std	Y+62, r25	; 0x3e
     ea6:	8d af       	std	Y+61, r24	; 0x3d
     ea8:	8d ad       	ldd	r24, Y+61	; 0x3d
     eaa:	9e ad       	ldd	r25, Y+62	; 0x3e
     eac:	9a af       	std	Y+58, r25	; 0x3a
     eae:	89 af       	std	Y+57, r24	; 0x39
     eb0:	89 ad       	ldd	r24, Y+57	; 0x39
     eb2:	9a ad       	ldd	r25, Y+58	; 0x3a
     eb4:	01 97       	sbiw	r24, 0x01	; 1
     eb6:	f1 f7       	brne	.-4      	; 0xeb4 <main+0x2be>
     eb8:	9a af       	std	Y+58, r25	; 0x3a
     eba:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(250) ;

    vid_UART_vid_SendChar('b') ;
     ebc:	82 e6       	ldi	r24, 0x62	; 98
     ebe:	0e 94 23 10 	call	0x2046	; 0x2046 <vid_UART_vid_SendChar>
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	aa e7       	ldi	r26, 0x7A	; 122
     ec8:	b3 e4       	ldi	r27, 0x43	; 67
     eca:	8d ab       	std	Y+53, r24	; 0x35
     ecc:	9e ab       	std	Y+54, r25	; 0x36
     ece:	af ab       	std	Y+55, r26	; 0x37
     ed0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ed2:	6d a9       	ldd	r22, Y+53	; 0x35
     ed4:	7e a9       	ldd	r23, Y+54	; 0x36
     ed6:	8f a9       	ldd	r24, Y+55	; 0x37
     ed8:	98 ad       	ldd	r25, Y+56	; 0x38
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	48 e4       	ldi	r20, 0x48	; 72
     ee0:	53 e4       	ldi	r21, 0x43	; 67
     ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee6:	dc 01       	movw	r26, r24
     ee8:	cb 01       	movw	r24, r22
     eea:	89 ab       	std	Y+49, r24	; 0x31
     eec:	9a ab       	std	Y+50, r25	; 0x32
     eee:	ab ab       	std	Y+51, r26	; 0x33
     ef0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     ef2:	69 a9       	ldd	r22, Y+49	; 0x31
     ef4:	7a a9       	ldd	r23, Y+50	; 0x32
     ef6:	8b a9       	ldd	r24, Y+51	; 0x33
     ef8:	9c a9       	ldd	r25, Y+52	; 0x34
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	40 e8       	ldi	r20, 0x80	; 128
     f00:	5f e3       	ldi	r21, 0x3F	; 63
     f02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f06:	88 23       	and	r24, r24
     f08:	2c f4       	brge	.+10     	; 0xf14 <main+0x31e>
		__ticks = 1;
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	98 ab       	std	Y+48, r25	; 0x30
     f10:	8f a7       	std	Y+47, r24	; 0x2f
     f12:	3f c0       	rjmp	.+126    	; 0xf92 <main+0x39c>
	else if (__tmp > 65535)
     f14:	69 a9       	ldd	r22, Y+49	; 0x31
     f16:	7a a9       	ldd	r23, Y+50	; 0x32
     f18:	8b a9       	ldd	r24, Y+51	; 0x33
     f1a:	9c a9       	ldd	r25, Y+52	; 0x34
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	3f ef       	ldi	r19, 0xFF	; 255
     f20:	4f e7       	ldi	r20, 0x7F	; 127
     f22:	57 e4       	ldi	r21, 0x47	; 71
     f24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f28:	18 16       	cp	r1, r24
     f2a:	4c f5       	brge	.+82     	; 0xf7e <main+0x388>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f2c:	6d a9       	ldd	r22, Y+53	; 0x35
     f2e:	7e a9       	ldd	r23, Y+54	; 0x36
     f30:	8f a9       	ldd	r24, Y+55	; 0x37
     f32:	98 ad       	ldd	r25, Y+56	; 0x38
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	40 e2       	ldi	r20, 0x20	; 32
     f3a:	51 e4       	ldi	r21, 0x41	; 65
     f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	bc 01       	movw	r22, r24
     f46:	cd 01       	movw	r24, r26
     f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	98 ab       	std	Y+48, r25	; 0x30
     f52:	8f a7       	std	Y+47, r24	; 0x2f
     f54:	0f c0       	rjmp	.+30     	; 0xf74 <main+0x37e>
     f56:	84 e1       	ldi	r24, 0x14	; 20
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	9e a7       	std	Y+46, r25	; 0x2e
     f5c:	8d a7       	std	Y+45, r24	; 0x2d
     f5e:	8d a5       	ldd	r24, Y+45	; 0x2d
     f60:	9e a5       	ldd	r25, Y+46	; 0x2e
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	f1 f7       	brne	.-4      	; 0xf62 <main+0x36c>
     f66:	9e a7       	std	Y+46, r25	; 0x2e
     f68:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f6a:	8f a5       	ldd	r24, Y+47	; 0x2f
     f6c:	98 a9       	ldd	r25, Y+48	; 0x30
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	98 ab       	std	Y+48, r25	; 0x30
     f72:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f74:	8f a5       	ldd	r24, Y+47	; 0x2f
     f76:	98 a9       	ldd	r25, Y+48	; 0x30
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	69 f7       	brne	.-38     	; 0xf56 <main+0x360>
     f7c:	14 c0       	rjmp	.+40     	; 0xfa6 <main+0x3b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f7e:	69 a9       	ldd	r22, Y+49	; 0x31
     f80:	7a a9       	ldd	r23, Y+50	; 0x32
     f82:	8b a9       	ldd	r24, Y+51	; 0x33
     f84:	9c a9       	ldd	r25, Y+52	; 0x34
     f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	98 ab       	std	Y+48, r25	; 0x30
     f90:	8f a7       	std	Y+47, r24	; 0x2f
     f92:	8f a5       	ldd	r24, Y+47	; 0x2f
     f94:	98 a9       	ldd	r25, Y+48	; 0x30
     f96:	9c a7       	std	Y+44, r25	; 0x2c
     f98:	8b a7       	std	Y+43, r24	; 0x2b
     f9a:	8b a5       	ldd	r24, Y+43	; 0x2b
     f9c:	9c a5       	ldd	r25, Y+44	; 0x2c
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	f1 f7       	brne	.-4      	; 0xf9e <main+0x3a8>
     fa2:	9c a7       	std	Y+44, r25	; 0x2c
     fa4:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(250) ;
    vid_UART_vid_SendChar(u8Lumen);
     fa6:	80 91 6a 00 	lds	r24, 0x006A
     faa:	0e 94 23 10 	call	0x2046	; 0x2046 <vid_UART_vid_SendChar>
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	aa e7       	ldi	r26, 0x7A	; 122
     fb4:	b3 e4       	ldi	r27, 0x43	; 67
     fb6:	8f a3       	std	Y+39, r24	; 0x27
     fb8:	98 a7       	std	Y+40, r25	; 0x28
     fba:	a9 a7       	std	Y+41, r26	; 0x29
     fbc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fbe:	6f a1       	ldd	r22, Y+39	; 0x27
     fc0:	78 a5       	ldd	r23, Y+40	; 0x28
     fc2:	89 a5       	ldd	r24, Y+41	; 0x29
     fc4:	9a a5       	ldd	r25, Y+42	; 0x2a
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	48 e4       	ldi	r20, 0x48	; 72
     fcc:	53 e4       	ldi	r21, 0x43	; 67
     fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	8b a3       	std	Y+35, r24	; 0x23
     fd8:	9c a3       	std	Y+36, r25	; 0x24
     fda:	ad a3       	std	Y+37, r26	; 0x25
     fdc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     fde:	6b a1       	ldd	r22, Y+35	; 0x23
     fe0:	7c a1       	ldd	r23, Y+36	; 0x24
     fe2:	8d a1       	ldd	r24, Y+37	; 0x25
     fe4:	9e a1       	ldd	r25, Y+38	; 0x26
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	40 e8       	ldi	r20, 0x80	; 128
     fec:	5f e3       	ldi	r21, 0x3F	; 63
     fee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ff2:	88 23       	and	r24, r24
     ff4:	2c f4       	brge	.+10     	; 0x1000 <main+0x40a>
		__ticks = 1;
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	9a a3       	std	Y+34, r25	; 0x22
     ffc:	89 a3       	std	Y+33, r24	; 0x21
     ffe:	3f c0       	rjmp	.+126    	; 0x107e <main+0x488>
	else if (__tmp > 65535)
    1000:	6b a1       	ldd	r22, Y+35	; 0x23
    1002:	7c a1       	ldd	r23, Y+36	; 0x24
    1004:	8d a1       	ldd	r24, Y+37	; 0x25
    1006:	9e a1       	ldd	r25, Y+38	; 0x26
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	3f ef       	ldi	r19, 0xFF	; 255
    100c:	4f e7       	ldi	r20, 0x7F	; 127
    100e:	57 e4       	ldi	r21, 0x47	; 71
    1010:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1014:	18 16       	cp	r1, r24
    1016:	4c f5       	brge	.+82     	; 0x106a <main+0x474>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1018:	6f a1       	ldd	r22, Y+39	; 0x27
    101a:	78 a5       	ldd	r23, Y+40	; 0x28
    101c:	89 a5       	ldd	r24, Y+41	; 0x29
    101e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	40 e2       	ldi	r20, 0x20	; 32
    1026:	51 e4       	ldi	r21, 0x41	; 65
    1028:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    102c:	dc 01       	movw	r26, r24
    102e:	cb 01       	movw	r24, r22
    1030:	bc 01       	movw	r22, r24
    1032:	cd 01       	movw	r24, r26
    1034:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	9a a3       	std	Y+34, r25	; 0x22
    103e:	89 a3       	std	Y+33, r24	; 0x21
    1040:	0f c0       	rjmp	.+30     	; 0x1060 <main+0x46a>
    1042:	84 e1       	ldi	r24, 0x14	; 20
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	98 a3       	std	Y+32, r25	; 0x20
    1048:	8f 8f       	std	Y+31, r24	; 0x1f
    104a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    104c:	98 a1       	ldd	r25, Y+32	; 0x20
    104e:	01 97       	sbiw	r24, 0x01	; 1
    1050:	f1 f7       	brne	.-4      	; 0x104e <main+0x458>
    1052:	98 a3       	std	Y+32, r25	; 0x20
    1054:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1056:	89 a1       	ldd	r24, Y+33	; 0x21
    1058:	9a a1       	ldd	r25, Y+34	; 0x22
    105a:	01 97       	sbiw	r24, 0x01	; 1
    105c:	9a a3       	std	Y+34, r25	; 0x22
    105e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1060:	89 a1       	ldd	r24, Y+33	; 0x21
    1062:	9a a1       	ldd	r25, Y+34	; 0x22
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	69 f7       	brne	.-38     	; 0x1042 <main+0x44c>
    1068:	14 c0       	rjmp	.+40     	; 0x1092 <main+0x49c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    106a:	6b a1       	ldd	r22, Y+35	; 0x23
    106c:	7c a1       	ldd	r23, Y+36	; 0x24
    106e:	8d a1       	ldd	r24, Y+37	; 0x25
    1070:	9e a1       	ldd	r25, Y+38	; 0x26
    1072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	9a a3       	std	Y+34, r25	; 0x22
    107c:	89 a3       	std	Y+33, r24	; 0x21
    107e:	89 a1       	ldd	r24, Y+33	; 0x21
    1080:	9a a1       	ldd	r25, Y+34	; 0x22
    1082:	9e 8f       	std	Y+30, r25	; 0x1e
    1084:	8d 8f       	std	Y+29, r24	; 0x1d
    1086:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1088:	9e 8d       	ldd	r25, Y+30	; 0x1e
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	f1 f7       	brne	.-4      	; 0x108a <main+0x494>
    108e:	9e 8f       	std	Y+30, r25	; 0x1e
    1090:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(250) ;


   vid_UART_vid_SendChar('c') ;
    1092:	83 e6       	ldi	r24, 0x63	; 99
    1094:	0e 94 23 10 	call	0x2046	; 0x2046 <vid_UART_vid_SendChar>
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	aa e7       	ldi	r26, 0x7A	; 122
    109e:	b3 e4       	ldi	r27, 0x43	; 67
    10a0:	89 8f       	std	Y+25, r24	; 0x19
    10a2:	9a 8f       	std	Y+26, r25	; 0x1a
    10a4:	ab 8f       	std	Y+27, r26	; 0x1b
    10a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a8:	69 8d       	ldd	r22, Y+25	; 0x19
    10aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	48 e4       	ldi	r20, 0x48	; 72
    10b6:	53 e4       	ldi	r21, 0x43	; 67
    10b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10bc:	dc 01       	movw	r26, r24
    10be:	cb 01       	movw	r24, r22
    10c0:	8d 8b       	std	Y+21, r24	; 0x15
    10c2:	9e 8b       	std	Y+22, r25	; 0x16
    10c4:	af 8b       	std	Y+23, r26	; 0x17
    10c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    10c8:	6d 89       	ldd	r22, Y+21	; 0x15
    10ca:	7e 89       	ldd	r23, Y+22	; 0x16
    10cc:	8f 89       	ldd	r24, Y+23	; 0x17
    10ce:	98 8d       	ldd	r25, Y+24	; 0x18
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	40 e8       	ldi	r20, 0x80	; 128
    10d6:	5f e3       	ldi	r21, 0x3F	; 63
    10d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10dc:	88 23       	and	r24, r24
    10de:	2c f4       	brge	.+10     	; 0x10ea <main+0x4f4>
		__ticks = 1;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	9c 8b       	std	Y+20, r25	; 0x14
    10e6:	8b 8b       	std	Y+19, r24	; 0x13
    10e8:	3f c0       	rjmp	.+126    	; 0x1168 <main+0x572>
	else if (__tmp > 65535)
    10ea:	6d 89       	ldd	r22, Y+21	; 0x15
    10ec:	7e 89       	ldd	r23, Y+22	; 0x16
    10ee:	8f 89       	ldd	r24, Y+23	; 0x17
    10f0:	98 8d       	ldd	r25, Y+24	; 0x18
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	3f ef       	ldi	r19, 0xFF	; 255
    10f6:	4f e7       	ldi	r20, 0x7F	; 127
    10f8:	57 e4       	ldi	r21, 0x47	; 71
    10fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10fe:	18 16       	cp	r1, r24
    1100:	4c f5       	brge	.+82     	; 0x1154 <main+0x55e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1102:	69 8d       	ldd	r22, Y+25	; 0x19
    1104:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1106:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1108:	9c 8d       	ldd	r25, Y+28	; 0x1c
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	40 e2       	ldi	r20, 0x20	; 32
    1110:	51 e4       	ldi	r21, 0x41	; 65
    1112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	bc 01       	movw	r22, r24
    111c:	cd 01       	movw	r24, r26
    111e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1122:	dc 01       	movw	r26, r24
    1124:	cb 01       	movw	r24, r22
    1126:	9c 8b       	std	Y+20, r25	; 0x14
    1128:	8b 8b       	std	Y+19, r24	; 0x13
    112a:	0f c0       	rjmp	.+30     	; 0x114a <main+0x554>
    112c:	84 e1       	ldi	r24, 0x14	; 20
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	9a 8b       	std	Y+18, r25	; 0x12
    1132:	89 8b       	std	Y+17, r24	; 0x11
    1134:	89 89       	ldd	r24, Y+17	; 0x11
    1136:	9a 89       	ldd	r25, Y+18	; 0x12
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	f1 f7       	brne	.-4      	; 0x1138 <main+0x542>
    113c:	9a 8b       	std	Y+18, r25	; 0x12
    113e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1140:	8b 89       	ldd	r24, Y+19	; 0x13
    1142:	9c 89       	ldd	r25, Y+20	; 0x14
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	9c 8b       	std	Y+20, r25	; 0x14
    1148:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    114a:	8b 89       	ldd	r24, Y+19	; 0x13
    114c:	9c 89       	ldd	r25, Y+20	; 0x14
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	69 f7       	brne	.-38     	; 0x112c <main+0x536>
    1152:	14 c0       	rjmp	.+40     	; 0x117c <main+0x586>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1154:	6d 89       	ldd	r22, Y+21	; 0x15
    1156:	7e 89       	ldd	r23, Y+22	; 0x16
    1158:	8f 89       	ldd	r24, Y+23	; 0x17
    115a:	98 8d       	ldd	r25, Y+24	; 0x18
    115c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	9c 8b       	std	Y+20, r25	; 0x14
    1166:	8b 8b       	std	Y+19, r24	; 0x13
    1168:	8b 89       	ldd	r24, Y+19	; 0x13
    116a:	9c 89       	ldd	r25, Y+20	; 0x14
    116c:	98 8b       	std	Y+16, r25	; 0x10
    116e:	8f 87       	std	Y+15, r24	; 0x0f
    1170:	8f 85       	ldd	r24, Y+15	; 0x0f
    1172:	98 89       	ldd	r25, Y+16	; 0x10
    1174:	01 97       	sbiw	r24, 0x01	; 1
    1176:	f1 f7       	brne	.-4      	; 0x1174 <main+0x57e>
    1178:	98 8b       	std	Y+16, r25	; 0x10
    117a:	8f 87       	std	Y+15, r24	; 0x0f
   _delay_ms(250) ;
   vid_UART_vid_SendChar(u8PeopleInside);
    117c:	80 91 6b 00 	lds	r24, 0x006B
    1180:	0e 94 23 10 	call	0x2046	; 0x2046 <vid_UART_vid_SendChar>
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	aa e7       	ldi	r26, 0x7A	; 122
    118a:	b3 e4       	ldi	r27, 0x43	; 67
    118c:	8b 87       	std	Y+11, r24	; 0x0b
    118e:	9c 87       	std	Y+12, r25	; 0x0c
    1190:	ad 87       	std	Y+13, r26	; 0x0d
    1192:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1194:	6b 85       	ldd	r22, Y+11	; 0x0b
    1196:	7c 85       	ldd	r23, Y+12	; 0x0c
    1198:	8d 85       	ldd	r24, Y+13	; 0x0d
    119a:	9e 85       	ldd	r25, Y+14	; 0x0e
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	48 e4       	ldi	r20, 0x48	; 72
    11a2:	53 e4       	ldi	r21, 0x43	; 67
    11a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	8f 83       	std	Y+7, r24	; 0x07
    11ae:	98 87       	std	Y+8, r25	; 0x08
    11b0:	a9 87       	std	Y+9, r26	; 0x09
    11b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11b4:	6f 81       	ldd	r22, Y+7	; 0x07
    11b6:	78 85       	ldd	r23, Y+8	; 0x08
    11b8:	89 85       	ldd	r24, Y+9	; 0x09
    11ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	40 e8       	ldi	r20, 0x80	; 128
    11c2:	5f e3       	ldi	r21, 0x3F	; 63
    11c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11c8:	88 23       	and	r24, r24
    11ca:	2c f4       	brge	.+10     	; 0x11d6 <main+0x5e0>
		__ticks = 1;
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	9e 83       	std	Y+6, r25	; 0x06
    11d2:	8d 83       	std	Y+5, r24	; 0x05
    11d4:	3f c0       	rjmp	.+126    	; 0x1254 <main+0x65e>
	else if (__tmp > 65535)
    11d6:	6f 81       	ldd	r22, Y+7	; 0x07
    11d8:	78 85       	ldd	r23, Y+8	; 0x08
    11da:	89 85       	ldd	r24, Y+9	; 0x09
    11dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	3f ef       	ldi	r19, 0xFF	; 255
    11e2:	4f e7       	ldi	r20, 0x7F	; 127
    11e4:	57 e4       	ldi	r21, 0x47	; 71
    11e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11ea:	18 16       	cp	r1, r24
    11ec:	4c f5       	brge	.+82     	; 0x1240 <main+0x64a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    11f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    11f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	40 e2       	ldi	r20, 0x20	; 32
    11fc:	51 e4       	ldi	r21, 0x41	; 65
    11fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1202:	dc 01       	movw	r26, r24
    1204:	cb 01       	movw	r24, r22
    1206:	bc 01       	movw	r22, r24
    1208:	cd 01       	movw	r24, r26
    120a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	9e 83       	std	Y+6, r25	; 0x06
    1214:	8d 83       	std	Y+5, r24	; 0x05
    1216:	0f c0       	rjmp	.+30     	; 0x1236 <main+0x640>
    1218:	84 e1       	ldi	r24, 0x14	; 20
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	9c 83       	std	Y+4, r25	; 0x04
    121e:	8b 83       	std	Y+3, r24	; 0x03
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	01 97       	sbiw	r24, 0x01	; 1
    1226:	f1 f7       	brne	.-4      	; 0x1224 <main+0x62e>
    1228:	9c 83       	std	Y+4, r25	; 0x04
    122a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    122c:	8d 81       	ldd	r24, Y+5	; 0x05
    122e:	9e 81       	ldd	r25, Y+6	; 0x06
    1230:	01 97       	sbiw	r24, 0x01	; 1
    1232:	9e 83       	std	Y+6, r25	; 0x06
    1234:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1236:	8d 81       	ldd	r24, Y+5	; 0x05
    1238:	9e 81       	ldd	r25, Y+6	; 0x06
    123a:	00 97       	sbiw	r24, 0x00	; 0
    123c:	69 f7       	brne	.-38     	; 0x1218 <main+0x622>
    123e:	14 c0       	rjmp	.+40     	; 0x1268 <main+0x672>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1240:	6f 81       	ldd	r22, Y+7	; 0x07
    1242:	78 85       	ldd	r23, Y+8	; 0x08
    1244:	89 85       	ldd	r24, Y+9	; 0x09
    1246:	9a 85       	ldd	r25, Y+10	; 0x0a
    1248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124c:	dc 01       	movw	r26, r24
    124e:	cb 01       	movw	r24, r22
    1250:	9e 83       	std	Y+6, r25	; 0x06
    1252:	8d 83       	std	Y+5, r24	; 0x05
    1254:	8d 81       	ldd	r24, Y+5	; 0x05
    1256:	9e 81       	ldd	r25, Y+6	; 0x06
    1258:	9a 83       	std	Y+2, r25	; 0x02
    125a:	89 83       	std	Y+1, r24	; 0x01
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	9a 81       	ldd	r25, Y+2	; 0x02
    1260:	01 97       	sbiw	r24, 0x01	; 1
    1262:	f1 f7       	brne	.-4      	; 0x1260 <main+0x66a>
    1264:	9a 83       	std	Y+2, r25	; 0x02
    1266:	89 83       	std	Y+1, r24	; 0x01
   _delay_ms(250) ;



    asm ("SEI") ;      // enable global interrupt
    1268:	78 94       	sei
    126a:	e0 cc       	rjmp	.-1600   	; 0xc2c <main+0x36>

0000126c <DIO_SetPinValue>:
#include "DIO_reg.h"


/* IO Pins */
void DIO_SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy)
{
    126c:	df 93       	push	r29
    126e:	cf 93       	push	r28
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	27 97       	sbiw	r28, 0x07	; 7
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	cd bf       	out	0x3d, r28	; 61
    1280:	89 83       	std	Y+1, r24	; 0x01
    1282:	6a 83       	std	Y+2, r22	; 0x02
    1284:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD_DIO) && (u8PinIdCopy <= PIN7))
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	84 30       	cpi	r24, 0x04	; 4
    128a:	08 f0       	brcs	.+2      	; 0x128e <DIO_SetPinValue+0x22>
    128c:	ee c0       	rjmp	.+476    	; 0x146a <DIO_SetPinValue+0x1fe>
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	88 30       	cpi	r24, 0x08	; 8
    1292:	08 f0       	brcs	.+2      	; 0x1296 <DIO_SetPinValue+0x2a>
    1294:	ea c0       	rjmp	.+468    	; 0x146a <DIO_SetPinValue+0x1fe>
	{
		if (u8PinValCopy == HIGH)
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	81 30       	cpi	r24, 0x01	; 1
    129a:	09 f0       	breq	.+2      	; 0x129e <DIO_SetPinValue+0x32>
    129c:	6f c0       	rjmp	.+222    	; 0x137c <DIO_SetPinValue+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	3f 83       	std	Y+7, r19	; 0x07
    12a6:	2e 83       	std	Y+6, r18	; 0x06
    12a8:	8e 81       	ldd	r24, Y+6	; 0x06
    12aa:	9f 81       	ldd	r25, Y+7	; 0x07
    12ac:	81 30       	cpi	r24, 0x01	; 1
    12ae:	91 05       	cpc	r25, r1
    12b0:	49 f1       	breq	.+82     	; 0x1304 <DIO_SetPinValue+0x98>
    12b2:	2e 81       	ldd	r18, Y+6	; 0x06
    12b4:	3f 81       	ldd	r19, Y+7	; 0x07
    12b6:	22 30       	cpi	r18, 0x02	; 2
    12b8:	31 05       	cpc	r19, r1
    12ba:	2c f4       	brge	.+10     	; 0x12c6 <DIO_SetPinValue+0x5a>
    12bc:	8e 81       	ldd	r24, Y+6	; 0x06
    12be:	9f 81       	ldd	r25, Y+7	; 0x07
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	61 f0       	breq	.+24     	; 0x12dc <DIO_SetPinValue+0x70>
    12c4:	d2 c0       	rjmp	.+420    	; 0x146a <DIO_SetPinValue+0x1fe>
    12c6:	2e 81       	ldd	r18, Y+6	; 0x06
    12c8:	3f 81       	ldd	r19, Y+7	; 0x07
    12ca:	22 30       	cpi	r18, 0x02	; 2
    12cc:	31 05       	cpc	r19, r1
    12ce:	71 f1       	breq	.+92     	; 0x132c <DIO_SetPinValue+0xc0>
    12d0:	8e 81       	ldd	r24, Y+6	; 0x06
    12d2:	9f 81       	ldd	r25, Y+7	; 0x07
    12d4:	83 30       	cpi	r24, 0x03	; 3
    12d6:	91 05       	cpc	r25, r1
    12d8:	e9 f1       	breq	.+122    	; 0x1354 <DIO_SetPinValue+0xe8>
    12da:	c7 c0       	rjmp	.+398    	; 0x146a <DIO_SetPinValue+0x1fe>
			{
				case PORTA_DIO: SET_BIT(PORTA_Register,u8PinIdCopy); break;
    12dc:	ab e3       	ldi	r26, 0x3B	; 59
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	eb e3       	ldi	r30, 0x3B	; 59
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <DIO_SetPinValue+0x8e>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <DIO_SetPinValue+0x8a>
    12fe:	84 2b       	or	r24, r20
    1300:	8c 93       	st	X, r24
    1302:	b3 c0       	rjmp	.+358    	; 0x146a <DIO_SetPinValue+0x1fe>
				case PORTB_DIO: SET_BIT(PORTB_Register,u8PinIdCopy); break;
    1304:	a8 e3       	ldi	r26, 0x38	; 56
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e8 e3       	ldi	r30, 0x38	; 56
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	48 2f       	mov	r20, r24
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	02 2e       	mov	r0, r18
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <DIO_SetPinValue+0xb6>
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	0a 94       	dec	r0
    1324:	e2 f7       	brpl	.-8      	; 0x131e <DIO_SetPinValue+0xb2>
    1326:	84 2b       	or	r24, r20
    1328:	8c 93       	st	X, r24
    132a:	9f c0       	rjmp	.+318    	; 0x146a <DIO_SetPinValue+0x1fe>
				case PORTC_DIO: SET_BIT(PORTC_Register,u8PinIdCopy); break;
    132c:	a5 e3       	ldi	r26, 0x35	; 53
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e5 e3       	ldi	r30, 0x35	; 53
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	48 2f       	mov	r20, r24
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	02 2e       	mov	r0, r18
    1344:	02 c0       	rjmp	.+4      	; 0x134a <DIO_SetPinValue+0xde>
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	0a 94       	dec	r0
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <DIO_SetPinValue+0xda>
    134e:	84 2b       	or	r24, r20
    1350:	8c 93       	st	X, r24
    1352:	8b c0       	rjmp	.+278    	; 0x146a <DIO_SetPinValue+0x1fe>
				case PORTD_DIO: SET_BIT(PORTD_Register,u8PinIdCopy); break;
    1354:	a2 e3       	ldi	r26, 0x32	; 50
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	e2 e3       	ldi	r30, 0x32	; 50
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	48 2f       	mov	r20, r24
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	02 2e       	mov	r0, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <DIO_SetPinValue+0x106>
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	0a 94       	dec	r0
    1374:	e2 f7       	brpl	.-8      	; 0x136e <DIO_SetPinValue+0x102>
    1376:	84 2b       	or	r24, r20
    1378:	8c 93       	st	X, r24
    137a:	77 c0       	rjmp	.+238    	; 0x146a <DIO_SetPinValue+0x1fe>
			}
		
		}
		
		else if (u8PinValCopy == LOW)
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	88 23       	and	r24, r24
    1380:	09 f0       	breq	.+2      	; 0x1384 <DIO_SetPinValue+0x118>
    1382:	73 c0       	rjmp	.+230    	; 0x146a <DIO_SetPinValue+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	3d 83       	std	Y+5, r19	; 0x05
    138c:	2c 83       	std	Y+4, r18	; 0x04
    138e:	8c 81       	ldd	r24, Y+4	; 0x04
    1390:	9d 81       	ldd	r25, Y+5	; 0x05
    1392:	81 30       	cpi	r24, 0x01	; 1
    1394:	91 05       	cpc	r25, r1
    1396:	59 f1       	breq	.+86     	; 0x13ee <DIO_SetPinValue+0x182>
    1398:	2c 81       	ldd	r18, Y+4	; 0x04
    139a:	3d 81       	ldd	r19, Y+5	; 0x05
    139c:	22 30       	cpi	r18, 0x02	; 2
    139e:	31 05       	cpc	r19, r1
    13a0:	2c f4       	brge	.+10     	; 0x13ac <DIO_SetPinValue+0x140>
    13a2:	8c 81       	ldd	r24, Y+4	; 0x04
    13a4:	9d 81       	ldd	r25, Y+5	; 0x05
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	69 f0       	breq	.+26     	; 0x13c4 <DIO_SetPinValue+0x158>
    13aa:	5f c0       	rjmp	.+190    	; 0x146a <DIO_SetPinValue+0x1fe>
    13ac:	2c 81       	ldd	r18, Y+4	; 0x04
    13ae:	3d 81       	ldd	r19, Y+5	; 0x05
    13b0:	22 30       	cpi	r18, 0x02	; 2
    13b2:	31 05       	cpc	r19, r1
    13b4:	89 f1       	breq	.+98     	; 0x1418 <DIO_SetPinValue+0x1ac>
    13b6:	8c 81       	ldd	r24, Y+4	; 0x04
    13b8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ba:	83 30       	cpi	r24, 0x03	; 3
    13bc:	91 05       	cpc	r25, r1
    13be:	09 f4       	brne	.+2      	; 0x13c2 <DIO_SetPinValue+0x156>
    13c0:	40 c0       	rjmp	.+128    	; 0x1442 <DIO_SetPinValue+0x1d6>
    13c2:	53 c0       	rjmp	.+166    	; 0x146a <DIO_SetPinValue+0x1fe>
			{
				case PORTA_DIO: CLR_BIT(PORTA_Register,u8PinIdCopy); break;
    13c4:	ab e3       	ldi	r26, 0x3B	; 59
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	eb e3       	ldi	r30, 0x3B	; 59
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	48 2f       	mov	r20, r24
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	02 2e       	mov	r0, r18
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <DIO_SetPinValue+0x176>
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	0a 94       	dec	r0
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <DIO_SetPinValue+0x172>
    13e6:	80 95       	com	r24
    13e8:	84 23       	and	r24, r20
    13ea:	8c 93       	st	X, r24
    13ec:	3e c0       	rjmp	.+124    	; 0x146a <DIO_SetPinValue+0x1fe>
				case PORTB_DIO: CLR_BIT(PORTB_Register,u8PinIdCopy); break;
    13ee:	a8 e3       	ldi	r26, 0x38	; 56
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e8 e3       	ldi	r30, 0x38	; 56
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	48 2f       	mov	r20, r24
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	02 2e       	mov	r0, r18
    1406:	02 c0       	rjmp	.+4      	; 0x140c <DIO_SetPinValue+0x1a0>
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	0a 94       	dec	r0
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <DIO_SetPinValue+0x19c>
    1410:	80 95       	com	r24
    1412:	84 23       	and	r24, r20
    1414:	8c 93       	st	X, r24
    1416:	29 c0       	rjmp	.+82     	; 0x146a <DIO_SetPinValue+0x1fe>
				case PORTC_DIO: CLR_BIT(PORTC_Register,u8PinIdCopy); break;
    1418:	a5 e3       	ldi	r26, 0x35	; 53
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e5 e3       	ldi	r30, 0x35	; 53
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	48 2f       	mov	r20, r24
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 2e       	mov	r0, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <DIO_SetPinValue+0x1ca>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <DIO_SetPinValue+0x1c6>
    143a:	80 95       	com	r24
    143c:	84 23       	and	r24, r20
    143e:	8c 93       	st	X, r24
    1440:	14 c0       	rjmp	.+40     	; 0x146a <DIO_SetPinValue+0x1fe>
				case PORTD_DIO: CLR_BIT(PORTD_Register,u8PinIdCopy); break;
    1442:	a2 e3       	ldi	r26, 0x32	; 50
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e2 e3       	ldi	r30, 0x32	; 50
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	48 2f       	mov	r20, r24
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	02 2e       	mov	r0, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <DIO_SetPinValue+0x1f4>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	0a 94       	dec	r0
    1462:	e2 f7       	brpl	.-8      	; 0x145c <DIO_SetPinValue+0x1f0>
    1464:	80 95       	com	r24
    1466:	84 23       	and	r24, r20
    1468:	8c 93       	st	X, r24
	
	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
    146a:	27 96       	adiw	r28, 0x07	; 7
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	f8 94       	cli
    1470:	de bf       	out	0x3e, r29	; 62
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	cd bf       	out	0x3d, r28	; 61
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy)
{
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	00 d0       	rcall	.+0      	; 0x1482 <DIO_GetPinValue+0x6>
    1482:	00 d0       	rcall	.+0      	; 0x1484 <DIO_GetPinValue+0x8>
    1484:	0f 92       	push	r0
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	8a 83       	std	Y+2, r24	; 0x02
    148c:	6b 83       	std	Y+3, r22	; 0x03
	/* Define Local Variable to get the BIT Value */
	u8 u8ResultLocal;
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD_DIO) && (u8PinIdCopy <= PIN7))
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	84 30       	cpi	r24, 0x04	; 4
    1492:	08 f0       	brcs	.+2      	; 0x1496 <DIO_GetPinValue+0x1a>
    1494:	6c c0       	rjmp	.+216    	; 0x156e <DIO_GetPinValue+0xf2>
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	88 30       	cpi	r24, 0x08	; 8
    149a:	08 f0       	brcs	.+2      	; 0x149e <DIO_GetPinValue+0x22>
    149c:	68 c0       	rjmp	.+208    	; 0x156e <DIO_GetPinValue+0xf2>
	{
		/* Check on the Required PORT Number */
		switch (u8PortIdCopy)
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	3d 83       	std	Y+5, r19	; 0x05
    14a6:	2c 83       	std	Y+4, r18	; 0x04
    14a8:	4c 81       	ldd	r20, Y+4	; 0x04
    14aa:	5d 81       	ldd	r21, Y+5	; 0x05
    14ac:	41 30       	cpi	r20, 0x01	; 1
    14ae:	51 05       	cpc	r21, r1
    14b0:	41 f1       	breq	.+80     	; 0x1502 <DIO_GetPinValue+0x86>
    14b2:	8c 81       	ldd	r24, Y+4	; 0x04
    14b4:	9d 81       	ldd	r25, Y+5	; 0x05
    14b6:	82 30       	cpi	r24, 0x02	; 2
    14b8:	91 05       	cpc	r25, r1
    14ba:	34 f4       	brge	.+12     	; 0x14c8 <DIO_GetPinValue+0x4c>
    14bc:	2c 81       	ldd	r18, Y+4	; 0x04
    14be:	3d 81       	ldd	r19, Y+5	; 0x05
    14c0:	21 15       	cp	r18, r1
    14c2:	31 05       	cpc	r19, r1
    14c4:	61 f0       	breq	.+24     	; 0x14de <DIO_GetPinValue+0x62>
    14c6:	55 c0       	rjmp	.+170    	; 0x1572 <DIO_GetPinValue+0xf6>
    14c8:	4c 81       	ldd	r20, Y+4	; 0x04
    14ca:	5d 81       	ldd	r21, Y+5	; 0x05
    14cc:	42 30       	cpi	r20, 0x02	; 2
    14ce:	51 05       	cpc	r21, r1
    14d0:	51 f1       	breq	.+84     	; 0x1526 <DIO_GetPinValue+0xaa>
    14d2:	8c 81       	ldd	r24, Y+4	; 0x04
    14d4:	9d 81       	ldd	r25, Y+5	; 0x05
    14d6:	83 30       	cpi	r24, 0x03	; 3
    14d8:	91 05       	cpc	r25, r1
    14da:	b9 f1       	breq	.+110    	; 0x154a <DIO_GetPinValue+0xce>
    14dc:	4a c0       	rjmp	.+148    	; 0x1572 <DIO_GetPinValue+0xf6>
		{
			case PORTA_DIO: u8ResultLocal= GET_BIT(PINA_Register,u8PinIdCopy); break;
    14de:	e9 e3       	ldi	r30, 0x39	; 57
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	88 2f       	mov	r24, r24
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	a9 01       	movw	r20, r18
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <DIO_GetPinValue+0x7a>
    14f2:	55 95       	asr	r21
    14f4:	47 95       	ror	r20
    14f6:	8a 95       	dec	r24
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <DIO_GetPinValue+0x76>
    14fa:	ca 01       	movw	r24, r20
    14fc:	81 70       	andi	r24, 0x01	; 1
    14fe:	89 83       	std	Y+1, r24	; 0x01
    1500:	38 c0       	rjmp	.+112    	; 0x1572 <DIO_GetPinValue+0xf6>
			case PORTB_DIO: u8ResultLocal= GET_BIT(PINB_Register,u8PinIdCopy); break;
    1502:	e6 e3       	ldi	r30, 0x36	; 54
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	88 2f       	mov	r24, r24
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	a9 01       	movw	r20, r18
    1514:	02 c0       	rjmp	.+4      	; 0x151a <DIO_GetPinValue+0x9e>
    1516:	55 95       	asr	r21
    1518:	47 95       	ror	r20
    151a:	8a 95       	dec	r24
    151c:	e2 f7       	brpl	.-8      	; 0x1516 <DIO_GetPinValue+0x9a>
    151e:	ca 01       	movw	r24, r20
    1520:	81 70       	andi	r24, 0x01	; 1
    1522:	89 83       	std	Y+1, r24	; 0x01
    1524:	26 c0       	rjmp	.+76     	; 0x1572 <DIO_GetPinValue+0xf6>
			case PORTC_DIO: u8ResultLocal= GET_BIT(PINC_Register,u8PinIdCopy); break;
    1526:	e3 e3       	ldi	r30, 0x33	; 51
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	88 2f       	mov	r24, r24
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	a9 01       	movw	r20, r18
    1538:	02 c0       	rjmp	.+4      	; 0x153e <DIO_GetPinValue+0xc2>
    153a:	55 95       	asr	r21
    153c:	47 95       	ror	r20
    153e:	8a 95       	dec	r24
    1540:	e2 f7       	brpl	.-8      	; 0x153a <DIO_GetPinValue+0xbe>
    1542:	ca 01       	movw	r24, r20
    1544:	81 70       	andi	r24, 0x01	; 1
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	14 c0       	rjmp	.+40     	; 0x1572 <DIO_GetPinValue+0xf6>
			case PORTD_DIO: u8ResultLocal= GET_BIT(PIND_Register,u8PinIdCopy); break;
    154a:	e0 e3       	ldi	r30, 0x30	; 48
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	88 2f       	mov	r24, r24
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	a9 01       	movw	r20, r18
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <DIO_GetPinValue+0xe6>
    155e:	55 95       	asr	r21
    1560:	47 95       	ror	r20
    1562:	8a 95       	dec	r24
    1564:	e2 f7       	brpl	.-8      	; 0x155e <DIO_GetPinValue+0xe2>
    1566:	ca 01       	movw	r24, r20
    1568:	81 70       	andi	r24, 0x01	; 1
    156a:	89 83       	std	Y+1, r24	; 0x01
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <DIO_GetPinValue+0xf6>
	}
	
	else
	{
		/* return 0xff in case of error in the Pin ID or PORT ID */
		u8ResultLocal = 0xFF;
    156e:	8f ef       	ldi	r24, 0xFF	; 255
    1570:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return u8ResultLocal;
    1572:	89 81       	ldd	r24, Y+1	; 0x01
}
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	08 95       	ret

00001584 <DIO_SetPinDirection>:

void DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
    158c:	27 97       	sbiw	r28, 0x07	; 7
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	89 83       	std	Y+1, r24	; 0x01
    159a:	6a 83       	std	Y+2, r22	; 0x02
    159c:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD_DIO) && (u8PinIdCopy <= PIN7))
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	84 30       	cpi	r24, 0x04	; 4
    15a2:	08 f0       	brcs	.+2      	; 0x15a6 <DIO_SetPinDirection+0x22>
    15a4:	ee c0       	rjmp	.+476    	; 0x1782 <DIO_SetPinDirection+0x1fe>
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	88 30       	cpi	r24, 0x08	; 8
    15aa:	08 f0       	brcs	.+2      	; 0x15ae <DIO_SetPinDirection+0x2a>
    15ac:	ea c0       	rjmp	.+468    	; 0x1782 <DIO_SetPinDirection+0x1fe>
	{
		if ( u8PinDirCopy == OUTPUT )
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	81 30       	cpi	r24, 0x01	; 1
    15b2:	09 f0       	breq	.+2      	; 0x15b6 <DIO_SetPinDirection+0x32>
    15b4:	6f c0       	rjmp	.+222    	; 0x1694 <DIO_SetPinDirection+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	3f 83       	std	Y+7, r19	; 0x07
    15be:	2e 83       	std	Y+6, r18	; 0x06
    15c0:	8e 81       	ldd	r24, Y+6	; 0x06
    15c2:	9f 81       	ldd	r25, Y+7	; 0x07
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	91 05       	cpc	r25, r1
    15c8:	49 f1       	breq	.+82     	; 0x161c <DIO_SetPinDirection+0x98>
    15ca:	2e 81       	ldd	r18, Y+6	; 0x06
    15cc:	3f 81       	ldd	r19, Y+7	; 0x07
    15ce:	22 30       	cpi	r18, 0x02	; 2
    15d0:	31 05       	cpc	r19, r1
    15d2:	2c f4       	brge	.+10     	; 0x15de <DIO_SetPinDirection+0x5a>
    15d4:	8e 81       	ldd	r24, Y+6	; 0x06
    15d6:	9f 81       	ldd	r25, Y+7	; 0x07
    15d8:	00 97       	sbiw	r24, 0x00	; 0
    15da:	61 f0       	breq	.+24     	; 0x15f4 <DIO_SetPinDirection+0x70>
    15dc:	d2 c0       	rjmp	.+420    	; 0x1782 <DIO_SetPinDirection+0x1fe>
    15de:	2e 81       	ldd	r18, Y+6	; 0x06
    15e0:	3f 81       	ldd	r19, Y+7	; 0x07
    15e2:	22 30       	cpi	r18, 0x02	; 2
    15e4:	31 05       	cpc	r19, r1
    15e6:	71 f1       	breq	.+92     	; 0x1644 <DIO_SetPinDirection+0xc0>
    15e8:	8e 81       	ldd	r24, Y+6	; 0x06
    15ea:	9f 81       	ldd	r25, Y+7	; 0x07
    15ec:	83 30       	cpi	r24, 0x03	; 3
    15ee:	91 05       	cpc	r25, r1
    15f0:	e9 f1       	breq	.+122    	; 0x166c <DIO_SetPinDirection+0xe8>
    15f2:	c7 c0       	rjmp	.+398    	; 0x1782 <DIO_SetPinDirection+0x1fe>
			{
				case PORTA_DIO: SET_BIT(DDRA_Register,u8PinIdCopy); break;
    15f4:	aa e3       	ldi	r26, 0x3A	; 58
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	ea e3       	ldi	r30, 0x3A	; 58
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	48 2f       	mov	r20, r24
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	02 2e       	mov	r0, r18
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <DIO_SetPinDirection+0x8e>
    160e:	88 0f       	add	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	0a 94       	dec	r0
    1614:	e2 f7       	brpl	.-8      	; 0x160e <DIO_SetPinDirection+0x8a>
    1616:	84 2b       	or	r24, r20
    1618:	8c 93       	st	X, r24
    161a:	b3 c0       	rjmp	.+358    	; 0x1782 <DIO_SetPinDirection+0x1fe>
				case PORTB_DIO: SET_BIT(DDRB_Register,u8PinIdCopy); break;
    161c:	a7 e3       	ldi	r26, 0x37	; 55
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e7 e3       	ldi	r30, 0x37	; 55
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	48 2f       	mov	r20, r24
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	02 2e       	mov	r0, r18
    1634:	02 c0       	rjmp	.+4      	; 0x163a <DIO_SetPinDirection+0xb6>
    1636:	88 0f       	add	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	0a 94       	dec	r0
    163c:	e2 f7       	brpl	.-8      	; 0x1636 <DIO_SetPinDirection+0xb2>
    163e:	84 2b       	or	r24, r20
    1640:	8c 93       	st	X, r24
    1642:	9f c0       	rjmp	.+318    	; 0x1782 <DIO_SetPinDirection+0x1fe>
				case PORTC_DIO: SET_BIT(DDRC_Register,u8PinIdCopy); break;
    1644:	a4 e3       	ldi	r26, 0x34	; 52
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	e4 e3       	ldi	r30, 0x34	; 52
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	48 2f       	mov	r20, r24
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	02 2e       	mov	r0, r18
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <DIO_SetPinDirection+0xde>
    165e:	88 0f       	add	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	0a 94       	dec	r0
    1664:	e2 f7       	brpl	.-8      	; 0x165e <DIO_SetPinDirection+0xda>
    1666:	84 2b       	or	r24, r20
    1668:	8c 93       	st	X, r24
    166a:	8b c0       	rjmp	.+278    	; 0x1782 <DIO_SetPinDirection+0x1fe>
				case PORTD_DIO: SET_BIT(DDRD_Register,u8PinIdCopy); break;
    166c:	a1 e3       	ldi	r26, 0x31	; 49
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	e1 e3       	ldi	r30, 0x31	; 49
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	48 2f       	mov	r20, r24
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	02 2e       	mov	r0, r18
    1684:	02 c0       	rjmp	.+4      	; 0x168a <DIO_SetPinDirection+0x106>
    1686:	88 0f       	add	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	0a 94       	dec	r0
    168c:	e2 f7       	brpl	.-8      	; 0x1686 <DIO_SetPinDirection+0x102>
    168e:	84 2b       	or	r24, r20
    1690:	8c 93       	st	X, r24
    1692:	77 c0       	rjmp	.+238    	; 0x1782 <DIO_SetPinDirection+0x1fe>
			}
		}
		
		else if ( u8PinDirCopy == INPUT )
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	88 23       	and	r24, r24
    1698:	09 f0       	breq	.+2      	; 0x169c <DIO_SetPinDirection+0x118>
    169a:	73 c0       	rjmp	.+230    	; 0x1782 <DIO_SetPinDirection+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	3d 83       	std	Y+5, r19	; 0x05
    16a4:	2c 83       	std	Y+4, r18	; 0x04
    16a6:	8c 81       	ldd	r24, Y+4	; 0x04
    16a8:	9d 81       	ldd	r25, Y+5	; 0x05
    16aa:	81 30       	cpi	r24, 0x01	; 1
    16ac:	91 05       	cpc	r25, r1
    16ae:	59 f1       	breq	.+86     	; 0x1706 <DIO_SetPinDirection+0x182>
    16b0:	2c 81       	ldd	r18, Y+4	; 0x04
    16b2:	3d 81       	ldd	r19, Y+5	; 0x05
    16b4:	22 30       	cpi	r18, 0x02	; 2
    16b6:	31 05       	cpc	r19, r1
    16b8:	2c f4       	brge	.+10     	; 0x16c4 <DIO_SetPinDirection+0x140>
    16ba:	8c 81       	ldd	r24, Y+4	; 0x04
    16bc:	9d 81       	ldd	r25, Y+5	; 0x05
    16be:	00 97       	sbiw	r24, 0x00	; 0
    16c0:	69 f0       	breq	.+26     	; 0x16dc <DIO_SetPinDirection+0x158>
    16c2:	5f c0       	rjmp	.+190    	; 0x1782 <DIO_SetPinDirection+0x1fe>
    16c4:	2c 81       	ldd	r18, Y+4	; 0x04
    16c6:	3d 81       	ldd	r19, Y+5	; 0x05
    16c8:	22 30       	cpi	r18, 0x02	; 2
    16ca:	31 05       	cpc	r19, r1
    16cc:	89 f1       	breq	.+98     	; 0x1730 <DIO_SetPinDirection+0x1ac>
    16ce:	8c 81       	ldd	r24, Y+4	; 0x04
    16d0:	9d 81       	ldd	r25, Y+5	; 0x05
    16d2:	83 30       	cpi	r24, 0x03	; 3
    16d4:	91 05       	cpc	r25, r1
    16d6:	09 f4       	brne	.+2      	; 0x16da <DIO_SetPinDirection+0x156>
    16d8:	40 c0       	rjmp	.+128    	; 0x175a <DIO_SetPinDirection+0x1d6>
    16da:	53 c0       	rjmp	.+166    	; 0x1782 <DIO_SetPinDirection+0x1fe>
			{
				case PORTA_DIO: CLR_BIT(DDRA_Register,u8PinIdCopy); break;
    16dc:	aa e3       	ldi	r26, 0x3A	; 58
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	ea e3       	ldi	r30, 0x3A	; 58
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	48 2f       	mov	r20, r24
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	02 2e       	mov	r0, r18
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <DIO_SetPinDirection+0x176>
    16f6:	88 0f       	add	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	0a 94       	dec	r0
    16fc:	e2 f7       	brpl	.-8      	; 0x16f6 <DIO_SetPinDirection+0x172>
    16fe:	80 95       	com	r24
    1700:	84 23       	and	r24, r20
    1702:	8c 93       	st	X, r24
    1704:	3e c0       	rjmp	.+124    	; 0x1782 <DIO_SetPinDirection+0x1fe>
				case PORTB_DIO: CLR_BIT(DDRB_Register,u8PinIdCopy); break;
    1706:	a7 e3       	ldi	r26, 0x37	; 55
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e7 e3       	ldi	r30, 0x37	; 55
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	48 2f       	mov	r20, r24
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	02 2e       	mov	r0, r18
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <DIO_SetPinDirection+0x1a0>
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	0a 94       	dec	r0
    1726:	e2 f7       	brpl	.-8      	; 0x1720 <DIO_SetPinDirection+0x19c>
    1728:	80 95       	com	r24
    172a:	84 23       	and	r24, r20
    172c:	8c 93       	st	X, r24
    172e:	29 c0       	rjmp	.+82     	; 0x1782 <DIO_SetPinDirection+0x1fe>
				case PORTC_DIO: CLR_BIT(DDRC_Register,u8PinIdCopy); break;
    1730:	a4 e3       	ldi	r26, 0x34	; 52
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e4 e3       	ldi	r30, 0x34	; 52
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	48 2f       	mov	r20, r24
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	02 2e       	mov	r0, r18
    1748:	02 c0       	rjmp	.+4      	; 0x174e <DIO_SetPinDirection+0x1ca>
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	0a 94       	dec	r0
    1750:	e2 f7       	brpl	.-8      	; 0x174a <DIO_SetPinDirection+0x1c6>
    1752:	80 95       	com	r24
    1754:	84 23       	and	r24, r20
    1756:	8c 93       	st	X, r24
    1758:	14 c0       	rjmp	.+40     	; 0x1782 <DIO_SetPinDirection+0x1fe>
				case PORTD_DIO: CLR_BIT(DDRD_Register,u8PinIdCopy); break;
    175a:	a1 e3       	ldi	r26, 0x31	; 49
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e1 e3       	ldi	r30, 0x31	; 49
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	48 2f       	mov	r20, r24
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	02 2e       	mov	r0, r18
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <DIO_SetPinDirection+0x1f4>
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	0a 94       	dec	r0
    177a:	e2 f7       	brpl	.-8      	; 0x1774 <DIO_SetPinDirection+0x1f0>
    177c:	80 95       	com	r24
    177e:	84 23       	and	r24, r20
    1780:	8c 93       	st	X, r24
	
	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
    1782:	27 96       	adiw	r28, 0x07	; 7
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	de bf       	out	0x3e, r29	; 62
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	cd bf       	out	0x3d, r28	; 61
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <DIO_SetPortDirection>:


/* IO Ports */
void DIO_SetPortDirection (u8 u8PortId, u8 u8PortDir)
{
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	00 d0       	rcall	.+0      	; 0x179a <DIO_SetPortDirection+0x6>
    179a:	00 d0       	rcall	.+0      	; 0x179c <DIO_SetPortDirection+0x8>
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
    17a0:	89 83       	std	Y+1, r24	; 0x01
    17a2:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	3c 83       	std	Y+4, r19	; 0x04
    17ac:	2b 83       	std	Y+3, r18	; 0x03
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	9c 81       	ldd	r25, Y+4	; 0x04
    17b2:	81 30       	cpi	r24, 0x01	; 1
    17b4:	91 05       	cpc	r25, r1
    17b6:	d1 f0       	breq	.+52     	; 0x17ec <DIO_SetPortDirection+0x58>
    17b8:	2b 81       	ldd	r18, Y+3	; 0x03
    17ba:	3c 81       	ldd	r19, Y+4	; 0x04
    17bc:	22 30       	cpi	r18, 0x02	; 2
    17be:	31 05       	cpc	r19, r1
    17c0:	2c f4       	brge	.+10     	; 0x17cc <DIO_SetPortDirection+0x38>
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	9c 81       	ldd	r25, Y+4	; 0x04
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	61 f0       	breq	.+24     	; 0x17e2 <DIO_SetPortDirection+0x4e>
    17ca:	1e c0       	rjmp	.+60     	; 0x1808 <DIO_SetPortDirection+0x74>
    17cc:	2b 81       	ldd	r18, Y+3	; 0x03
    17ce:	3c 81       	ldd	r19, Y+4	; 0x04
    17d0:	22 30       	cpi	r18, 0x02	; 2
    17d2:	31 05       	cpc	r19, r1
    17d4:	81 f0       	breq	.+32     	; 0x17f6 <DIO_SetPortDirection+0x62>
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	9c 81       	ldd	r25, Y+4	; 0x04
    17da:	83 30       	cpi	r24, 0x03	; 3
    17dc:	91 05       	cpc	r25, r1
    17de:	81 f0       	breq	.+32     	; 0x1800 <DIO_SetPortDirection+0x6c>
    17e0:	13 c0       	rjmp	.+38     	; 0x1808 <DIO_SetPortDirection+0x74>
	{
			case PORTA_DIO: DDRA_Register = u8PortDir; break;
    17e2:	ea e3       	ldi	r30, 0x3A	; 58
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	80 83       	st	Z, r24
    17ea:	0e c0       	rjmp	.+28     	; 0x1808 <DIO_SetPortDirection+0x74>
			case PORTB_DIO: DDRB_Register = u8PortDir; break;
    17ec:	e7 e3       	ldi	r30, 0x37	; 55
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	80 83       	st	Z, r24
    17f4:	09 c0       	rjmp	.+18     	; 0x1808 <DIO_SetPortDirection+0x74>
			case PORTC_DIO: DDRC_Register = u8PortDir; break;
    17f6:	e4 e3       	ldi	r30, 0x34	; 52
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	80 83       	st	Z, r24
    17fe:	04 c0       	rjmp	.+8      	; 0x1808 <DIO_SetPortDirection+0x74>
			case PORTD_DIO: DDRD_Register = u8PortDir; break;
    1800:	e1 e3       	ldi	r30, 0x31	; 49
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	80 83       	st	Z, r24
		default: /* Wrong Port ID */       break;
	}
}
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <DIO_SetPortValue>:

void DIO_SetPortValue (u8 u8PortId, u8 u8PortVal)
{
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	00 d0       	rcall	.+0      	; 0x181c <DIO_SetPortValue+0x6>
    181c:	00 d0       	rcall	.+0      	; 0x181e <DIO_SetPortValue+0x8>
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	89 83       	std	Y+1, r24	; 0x01
    1824:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	3c 83       	std	Y+4, r19	; 0x04
    182e:	2b 83       	std	Y+3, r18	; 0x03
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	9c 81       	ldd	r25, Y+4	; 0x04
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	91 05       	cpc	r25, r1
    1838:	d1 f0       	breq	.+52     	; 0x186e <DIO_SetPortValue+0x58>
    183a:	2b 81       	ldd	r18, Y+3	; 0x03
    183c:	3c 81       	ldd	r19, Y+4	; 0x04
    183e:	22 30       	cpi	r18, 0x02	; 2
    1840:	31 05       	cpc	r19, r1
    1842:	2c f4       	brge	.+10     	; 0x184e <DIO_SetPortValue+0x38>
    1844:	8b 81       	ldd	r24, Y+3	; 0x03
    1846:	9c 81       	ldd	r25, Y+4	; 0x04
    1848:	00 97       	sbiw	r24, 0x00	; 0
    184a:	61 f0       	breq	.+24     	; 0x1864 <DIO_SetPortValue+0x4e>
    184c:	1e c0       	rjmp	.+60     	; 0x188a <DIO_SetPortValue+0x74>
    184e:	2b 81       	ldd	r18, Y+3	; 0x03
    1850:	3c 81       	ldd	r19, Y+4	; 0x04
    1852:	22 30       	cpi	r18, 0x02	; 2
    1854:	31 05       	cpc	r19, r1
    1856:	81 f0       	breq	.+32     	; 0x1878 <DIO_SetPortValue+0x62>
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	9c 81       	ldd	r25, Y+4	; 0x04
    185c:	83 30       	cpi	r24, 0x03	; 3
    185e:	91 05       	cpc	r25, r1
    1860:	81 f0       	breq	.+32     	; 0x1882 <DIO_SetPortValue+0x6c>
    1862:	13 c0       	rjmp	.+38     	; 0x188a <DIO_SetPortValue+0x74>
	{
			case PORTA_DIO: PORTA_Register = u8PortVal; break;
    1864:	eb e3       	ldi	r30, 0x3B	; 59
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	80 83       	st	Z, r24
    186c:	0e c0       	rjmp	.+28     	; 0x188a <DIO_SetPortValue+0x74>
			case PORTB_DIO: PORTB_Register = u8PortVal; break;
    186e:	e8 e3       	ldi	r30, 0x38	; 56
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	80 83       	st	Z, r24
    1876:	09 c0       	rjmp	.+18     	; 0x188a <DIO_SetPortValue+0x74>
			case PORTC_DIO: PORTC_Register = u8PortVal; break;
    1878:	e5 e3       	ldi	r30, 0x35	; 53
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	80 83       	st	Z, r24
    1880:	04 c0       	rjmp	.+8      	; 0x188a <DIO_SetPortValue+0x74>
			case PORTD_DIO: PORTD_Register = u8PortVal; break;
    1882:	e2 e3       	ldi	r30, 0x32	; 50
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	80 83       	st	Z, r24
		default: /* Wrong Port ID */        break;
	}
}
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	08 95       	ret

00001898 <vid_ExtInt0_vid_InitializeExtInt>:
#include "Configuration.h"
#include "BIT_MATH.h"
#include "EXT_INT_INTERFACE.H"


void vid_ExtInt0_vid_InitializeExtInt (void) {
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(MCUCR_REG,0) ;        // falling edge generates an interrupt
    18a0:	a5 e5       	ldi	r26, 0x55	; 85
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	e5 e5       	ldi	r30, 0x55	; 85
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	8e 7f       	andi	r24, 0xFE	; 254
    18ac:	8c 93       	st	X, r24
	SET_BIT(MCUCR_REG,1) ;
    18ae:	a5 e5       	ldi	r26, 0x55	; 85
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	e5 e5       	ldi	r30, 0x55	; 85
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	82 60       	ori	r24, 0x02	; 2
    18ba:	8c 93       	st	X, r24

	 SET_BIT(GICR_REG,6) ;         // enable INT 0
    18bc:	ab e5       	ldi	r26, 0x5B	; 91
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	eb e5       	ldi	r30, 0x5B	; 91
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	80 64       	ori	r24, 0x40	; 64
    18c8:	8c 93       	st	X, r24

   // SET_BIT (SREG_REG,7) ;

	 asm ("SEI") ;   //ENABLE GLOBAL INTERRUPT
    18ca:	78 94       	sei

}
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	08 95       	ret

000018d2 <vid_ExtInt1_vid_InitializeExtInt>:


void vid_ExtInt1_vid_InitializeExtInt (void) {
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(MCUCR_REG,2) ;
    18da:	a5 e5       	ldi	r26, 0x55	; 85
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e5 e5       	ldi	r30, 0x55	; 85
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	8b 7f       	andi	r24, 0xFB	; 251
    18e6:	8c 93       	st	X, r24
	SET_BIT(MCUCR_REG,3) ;
    18e8:	a5 e5       	ldi	r26, 0x55	; 85
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	e5 e5       	ldi	r30, 0x55	; 85
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	88 60       	ori	r24, 0x08	; 8
    18f4:	8c 93       	st	X, r24

	 SET_BIT(GICR_REG,7) ;     // enable INT 1
    18f6:	ab e5       	ldi	r26, 0x5B	; 91
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	eb e5       	ldi	r30, 0x5B	; 91
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	80 68       	ori	r24, 0x80	; 128
    1902:	8c 93       	st	X, r24


	 asm ("SEI") ;   //ENABLE GLOBAL INTERRUPT
    1904:	78 94       	sei

}
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	08 95       	ret

0000190c <__vector_1>:
extern u8 u8PeopleInside ;

/**************************************************************************/


ISR(INT0_vect) {
    190c:	1f 92       	push	r1
    190e:	0f 92       	push	r0
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	0f 92       	push	r0
    1914:	11 24       	eor	r1, r1
    1916:	2f 93       	push	r18
    1918:	3f 93       	push	r19
    191a:	4f 93       	push	r20
    191c:	5f 93       	push	r21
    191e:	6f 93       	push	r22
    1920:	7f 93       	push	r23
    1922:	8f 93       	push	r24
    1924:	9f 93       	push	r25
    1926:	af 93       	push	r26
    1928:	bf 93       	push	r27
    192a:	ef 93       	push	r30
    192c:	ff 93       	push	r31
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
    1936:	6c 97       	sbiw	r28, 0x1c	; 28
    1938:	de bf       	out	0x3e, r29	; 62
    193a:	cd bf       	out	0x3d, r28	; 61

	DIO_SetPinValue(PORTB_DIO, DOOR1 , HIGH);       // OPEN DOOR
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	60 e0       	ldi	r22, 0x00	; 0
    1940:	41 e0       	ldi	r20, 0x01	; 1
    1942:	0e 94 36 09 	call	0x126c	; 0x126c <DIO_SetPinValue>
	DIO_SetPinValue(PORTB_DIO, DOOR2, LOW);
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	61 e0       	ldi	r22, 0x01	; 1
    194a:	40 e0       	ldi	r20, 0x00	; 0
    194c:	0e 94 36 09 	call	0x126c	; 0x126c <DIO_SetPinValue>
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	90 e8       	ldi	r25, 0x80	; 128
    1954:	ab e3       	ldi	r26, 0x3B	; 59
    1956:	b5 e4       	ldi	r27, 0x45	; 69
    1958:	89 8f       	std	Y+25, r24	; 0x19
    195a:	9a 8f       	std	Y+26, r25	; 0x1a
    195c:	ab 8f       	std	Y+27, r26	; 0x1b
    195e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1960:	69 8d       	ldd	r22, Y+25	; 0x19
    1962:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1964:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1966:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	48 e4       	ldi	r20, 0x48	; 72
    196e:	53 e4       	ldi	r21, 0x43	; 67
    1970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	8d 8b       	std	Y+21, r24	; 0x15
    197a:	9e 8b       	std	Y+22, r25	; 0x16
    197c:	af 8b       	std	Y+23, r26	; 0x17
    197e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1980:	6d 89       	ldd	r22, Y+21	; 0x15
    1982:	7e 89       	ldd	r23, Y+22	; 0x16
    1984:	8f 89       	ldd	r24, Y+23	; 0x17
    1986:	98 8d       	ldd	r25, Y+24	; 0x18
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	40 e8       	ldi	r20, 0x80	; 128
    198e:	5f e3       	ldi	r21, 0x3F	; 63
    1990:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1994:	88 23       	and	r24, r24
    1996:	2c f4       	brge	.+10     	; 0x19a2 <__vector_1+0x96>
		__ticks = 1;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	9c 8b       	std	Y+20, r25	; 0x14
    199e:	8b 8b       	std	Y+19, r24	; 0x13
    19a0:	3f c0       	rjmp	.+126    	; 0x1a20 <__vector_1+0x114>
	else if (__tmp > 65535)
    19a2:	6d 89       	ldd	r22, Y+21	; 0x15
    19a4:	7e 89       	ldd	r23, Y+22	; 0x16
    19a6:	8f 89       	ldd	r24, Y+23	; 0x17
    19a8:	98 8d       	ldd	r25, Y+24	; 0x18
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	3f ef       	ldi	r19, 0xFF	; 255
    19ae:	4f e7       	ldi	r20, 0x7F	; 127
    19b0:	57 e4       	ldi	r21, 0x47	; 71
    19b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19b6:	18 16       	cp	r1, r24
    19b8:	4c f5       	brge	.+82     	; 0x1a0c <__vector_1+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ba:	69 8d       	ldd	r22, Y+25	; 0x19
    19bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	40 e2       	ldi	r20, 0x20	; 32
    19c8:	51 e4       	ldi	r21, 0x41	; 65
    19ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	bc 01       	movw	r22, r24
    19d4:	cd 01       	movw	r24, r26
    19d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	9c 8b       	std	Y+20, r25	; 0x14
    19e0:	8b 8b       	std	Y+19, r24	; 0x13
    19e2:	0f c0       	rjmp	.+30     	; 0x1a02 <__vector_1+0xf6>
    19e4:	84 e1       	ldi	r24, 0x14	; 20
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	9a 8b       	std	Y+18, r25	; 0x12
    19ea:	89 8b       	std	Y+17, r24	; 0x11
    19ec:	89 89       	ldd	r24, Y+17	; 0x11
    19ee:	9a 89       	ldd	r25, Y+18	; 0x12
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	f1 f7       	brne	.-4      	; 0x19f0 <__vector_1+0xe4>
    19f4:	9a 8b       	std	Y+18, r25	; 0x12
    19f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f8:	8b 89       	ldd	r24, Y+19	; 0x13
    19fa:	9c 89       	ldd	r25, Y+20	; 0x14
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	9c 8b       	std	Y+20, r25	; 0x14
    1a00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a02:	8b 89       	ldd	r24, Y+19	; 0x13
    1a04:	9c 89       	ldd	r25, Y+20	; 0x14
    1a06:	00 97       	sbiw	r24, 0x00	; 0
    1a08:	69 f7       	brne	.-38     	; 0x19e4 <__vector_1+0xd8>
    1a0a:	14 c0       	rjmp	.+40     	; 0x1a34 <__vector_1+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a10:	8f 89       	ldd	r24, Y+23	; 0x17
    1a12:	98 8d       	ldd	r25, Y+24	; 0x18
    1a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	9c 8b       	std	Y+20, r25	; 0x14
    1a1e:	8b 8b       	std	Y+19, r24	; 0x13
    1a20:	8b 89       	ldd	r24, Y+19	; 0x13
    1a22:	9c 89       	ldd	r25, Y+20	; 0x14
    1a24:	98 8b       	std	Y+16, r25	; 0x10
    1a26:	8f 87       	std	Y+15, r24	; 0x0f
    1a28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a2a:	98 89       	ldd	r25, Y+16	; 0x10
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	f1 f7       	brne	.-4      	; 0x1a2c <__vector_1+0x120>
    1a30:	98 8b       	std	Y+16, r25	; 0x10
    1a32:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms (3000) ;


	DIO_SetPinValue(PORTB_DIO, DOOR1, LOW);           // CLOSE DOOR
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	60 e0       	ldi	r22, 0x00	; 0
    1a38:	40 e0       	ldi	r20, 0x00	; 0
    1a3a:	0e 94 36 09 	call	0x126c	; 0x126c <DIO_SetPinValue>
	DIO_SetPinValue(PORTB_DIO, DOOR2, HIGH);
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	61 e0       	ldi	r22, 0x01	; 1
    1a42:	41 e0       	ldi	r20, 0x01	; 1
    1a44:	0e 94 36 09 	call	0x126c	; 0x126c <DIO_SetPinValue>
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	90 e8       	ldi	r25, 0x80	; 128
    1a4c:	ab e3       	ldi	r26, 0x3B	; 59
    1a4e:	b5 e4       	ldi	r27, 0x45	; 69
    1a50:	8b 87       	std	Y+11, r24	; 0x0b
    1a52:	9c 87       	std	Y+12, r25	; 0x0c
    1a54:	ad 87       	std	Y+13, r26	; 0x0d
    1a56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	48 e4       	ldi	r20, 0x48	; 72
    1a66:	53 e4       	ldi	r21, 0x43	; 67
    1a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	8f 83       	std	Y+7, r24	; 0x07
    1a72:	98 87       	std	Y+8, r25	; 0x08
    1a74:	a9 87       	std	Y+9, r26	; 0x09
    1a76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a78:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7a:	78 85       	ldd	r23, Y+8	; 0x08
    1a7c:	89 85       	ldd	r24, Y+9	; 0x09
    1a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	40 e8       	ldi	r20, 0x80	; 128
    1a86:	5f e3       	ldi	r21, 0x3F	; 63
    1a88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a8c:	88 23       	and	r24, r24
    1a8e:	2c f4       	brge	.+10     	; 0x1a9a <__vector_1+0x18e>
		__ticks = 1;
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	9e 83       	std	Y+6, r25	; 0x06
    1a96:	8d 83       	std	Y+5, r24	; 0x05
    1a98:	3f c0       	rjmp	.+126    	; 0x1b18 <__vector_1+0x20c>
	else if (__tmp > 65535)
    1a9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9c:	78 85       	ldd	r23, Y+8	; 0x08
    1a9e:	89 85       	ldd	r24, Y+9	; 0x09
    1aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	3f ef       	ldi	r19, 0xFF	; 255
    1aa6:	4f e7       	ldi	r20, 0x7F	; 127
    1aa8:	57 e4       	ldi	r21, 0x47	; 71
    1aaa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aae:	18 16       	cp	r1, r24
    1ab0:	4c f5       	brge	.+82     	; 0x1b04 <__vector_1+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	40 e2       	ldi	r20, 0x20	; 32
    1ac0:	51 e4       	ldi	r21, 0x41	; 65
    1ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	bc 01       	movw	r22, r24
    1acc:	cd 01       	movw	r24, r26
    1ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	9e 83       	std	Y+6, r25	; 0x06
    1ad8:	8d 83       	std	Y+5, r24	; 0x05
    1ada:	0f c0       	rjmp	.+30     	; 0x1afa <__vector_1+0x1ee>
    1adc:	84 e1       	ldi	r24, 0x14	; 20
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	9c 83       	std	Y+4, r25	; 0x04
    1ae2:	8b 83       	std	Y+3, r24	; 0x03
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae8:	01 97       	sbiw	r24, 0x01	; 1
    1aea:	f1 f7       	brne	.-4      	; 0x1ae8 <__vector_1+0x1dc>
    1aec:	9c 83       	std	Y+4, r25	; 0x04
    1aee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af0:	8d 81       	ldd	r24, Y+5	; 0x05
    1af2:	9e 81       	ldd	r25, Y+6	; 0x06
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	9e 83       	std	Y+6, r25	; 0x06
    1af8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1afa:	8d 81       	ldd	r24, Y+5	; 0x05
    1afc:	9e 81       	ldd	r25, Y+6	; 0x06
    1afe:	00 97       	sbiw	r24, 0x00	; 0
    1b00:	69 f7       	brne	.-38     	; 0x1adc <__vector_1+0x1d0>
    1b02:	14 c0       	rjmp	.+40     	; 0x1b2c <__vector_1+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b04:	6f 81       	ldd	r22, Y+7	; 0x07
    1b06:	78 85       	ldd	r23, Y+8	; 0x08
    1b08:	89 85       	ldd	r24, Y+9	; 0x09
    1b0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	9e 83       	std	Y+6, r25	; 0x06
    1b16:	8d 83       	std	Y+5, r24	; 0x05
    1b18:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1c:	9a 83       	std	Y+2, r25	; 0x02
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	9a 81       	ldd	r25, Y+2	; 0x02
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	f1 f7       	brne	.-4      	; 0x1b24 <__vector_1+0x218>
    1b28:	9a 83       	std	Y+2, r25	; 0x02
    1b2a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (3000) ;


	DIO_SetPinValue(PORTB_DIO, DOOR1, LOW);          // IDLE
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	60 e0       	ldi	r22, 0x00	; 0
    1b30:	40 e0       	ldi	r20, 0x00	; 0
    1b32:	0e 94 36 09 	call	0x126c	; 0x126c <DIO_SetPinValue>
	DIO_SetPinValue(PORTB_DIO, DOOR2, LOW);
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	61 e0       	ldi	r22, 0x01	; 1
    1b3a:	40 e0       	ldi	r20, 0x00	; 0
    1b3c:	0e 94 36 09 	call	0x126c	; 0x126c <DIO_SetPinValue>

	u8PeopleInside ++ ;
    1b40:	80 91 6b 00 	lds	r24, 0x006B
    1b44:	8f 5f       	subi	r24, 0xFF	; 255
    1b46:	80 93 6b 00 	sts	0x006B, r24

}
    1b4a:	6c 96       	adiw	r28, 0x1c	; 28
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	cd bf       	out	0x3d, r28	; 61
    1b50:	cf 91       	pop	r28
    1b52:	df 91       	pop	r29
    1b54:	ff 91       	pop	r31
    1b56:	ef 91       	pop	r30
    1b58:	bf 91       	pop	r27
    1b5a:	af 91       	pop	r26
    1b5c:	9f 91       	pop	r25
    1b5e:	8f 91       	pop	r24
    1b60:	7f 91       	pop	r23
    1b62:	6f 91       	pop	r22
    1b64:	5f 91       	pop	r21
    1b66:	4f 91       	pop	r20
    1b68:	3f 91       	pop	r19
    1b6a:	2f 91       	pop	r18
    1b6c:	0f 90       	pop	r0
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	0f 90       	pop	r0
    1b72:	1f 90       	pop	r1
    1b74:	18 95       	reti

00001b76 <__vector_2>:

/**************************************************************************/

ISR(INT1_vect) {
    1b76:	1f 92       	push	r1
    1b78:	0f 92       	push	r0
    1b7a:	0f b6       	in	r0, 0x3f	; 63
    1b7c:	0f 92       	push	r0
    1b7e:	11 24       	eor	r1, r1
    1b80:	2f 93       	push	r18
    1b82:	3f 93       	push	r19
    1b84:	4f 93       	push	r20
    1b86:	5f 93       	push	r21
    1b88:	6f 93       	push	r22
    1b8a:	7f 93       	push	r23
    1b8c:	8f 93       	push	r24
    1b8e:	9f 93       	push	r25
    1b90:	af 93       	push	r26
    1b92:	bf 93       	push	r27
    1b94:	ef 93       	push	r30
    1b96:	ff 93       	push	r31
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	6c 97       	sbiw	r28, 0x1c	; 28
    1ba2:	de bf       	out	0x3e, r29	; 62
    1ba4:	cd bf       	out	0x3d, r28	; 61

	DIO_SetPinValue(PORTB_DIO, DOOR1 , HIGH);       // OPEN DOOR
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	60 e0       	ldi	r22, 0x00	; 0
    1baa:	41 e0       	ldi	r20, 0x01	; 1
    1bac:	0e 94 36 09 	call	0x126c	; 0x126c <DIO_SetPinValue>
	DIO_SetPinValue(PORTB_DIO, DOOR2, LOW);
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	61 e0       	ldi	r22, 0x01	; 1
    1bb4:	40 e0       	ldi	r20, 0x00	; 0
    1bb6:	0e 94 36 09 	call	0x126c	; 0x126c <DIO_SetPinValue>
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	90 e8       	ldi	r25, 0x80	; 128
    1bbe:	ab e3       	ldi	r26, 0x3B	; 59
    1bc0:	b5 e4       	ldi	r27, 0x45	; 69
    1bc2:	89 8f       	std	Y+25, r24	; 0x19
    1bc4:	9a 8f       	std	Y+26, r25	; 0x1a
    1bc6:	ab 8f       	std	Y+27, r26	; 0x1b
    1bc8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bca:	69 8d       	ldd	r22, Y+25	; 0x19
    1bcc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	48 e4       	ldi	r20, 0x48	; 72
    1bd8:	53 e4       	ldi	r21, 0x43	; 67
    1bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	8d 8b       	std	Y+21, r24	; 0x15
    1be4:	9e 8b       	std	Y+22, r25	; 0x16
    1be6:	af 8b       	std	Y+23, r26	; 0x17
    1be8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bea:	6d 89       	ldd	r22, Y+21	; 0x15
    1bec:	7e 89       	ldd	r23, Y+22	; 0x16
    1bee:	8f 89       	ldd	r24, Y+23	; 0x17
    1bf0:	98 8d       	ldd	r25, Y+24	; 0x18
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e8       	ldi	r20, 0x80	; 128
    1bf8:	5f e3       	ldi	r21, 0x3F	; 63
    1bfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bfe:	88 23       	and	r24, r24
    1c00:	2c f4       	brge	.+10     	; 0x1c0c <__vector_2+0x96>
		__ticks = 1;
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	9c 8b       	std	Y+20, r25	; 0x14
    1c08:	8b 8b       	std	Y+19, r24	; 0x13
    1c0a:	3f c0       	rjmp	.+126    	; 0x1c8a <__vector_2+0x114>
	else if (__tmp > 65535)
    1c0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c10:	8f 89       	ldd	r24, Y+23	; 0x17
    1c12:	98 8d       	ldd	r25, Y+24	; 0x18
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	3f ef       	ldi	r19, 0xFF	; 255
    1c18:	4f e7       	ldi	r20, 0x7F	; 127
    1c1a:	57 e4       	ldi	r21, 0x47	; 71
    1c1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c20:	18 16       	cp	r1, r24
    1c22:	4c f5       	brge	.+82     	; 0x1c76 <__vector_2+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c24:	69 8d       	ldd	r22, Y+25	; 0x19
    1c26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	40 e2       	ldi	r20, 0x20	; 32
    1c32:	51 e4       	ldi	r21, 0x41	; 65
    1c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	bc 01       	movw	r22, r24
    1c3e:	cd 01       	movw	r24, r26
    1c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	9c 8b       	std	Y+20, r25	; 0x14
    1c4a:	8b 8b       	std	Y+19, r24	; 0x13
    1c4c:	0f c0       	rjmp	.+30     	; 0x1c6c <__vector_2+0xf6>
    1c4e:	84 e1       	ldi	r24, 0x14	; 20
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	9a 8b       	std	Y+18, r25	; 0x12
    1c54:	89 8b       	std	Y+17, r24	; 0x11
    1c56:	89 89       	ldd	r24, Y+17	; 0x11
    1c58:	9a 89       	ldd	r25, Y+18	; 0x12
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <__vector_2+0xe4>
    1c5e:	9a 8b       	std	Y+18, r25	; 0x12
    1c60:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c62:	8b 89       	ldd	r24, Y+19	; 0x13
    1c64:	9c 89       	ldd	r25, Y+20	; 0x14
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	9c 8b       	std	Y+20, r25	; 0x14
    1c6a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c70:	00 97       	sbiw	r24, 0x00	; 0
    1c72:	69 f7       	brne	.-38     	; 0x1c4e <__vector_2+0xd8>
    1c74:	14 c0       	rjmp	.+40     	; 0x1c9e <__vector_2+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c76:	6d 89       	ldd	r22, Y+21	; 0x15
    1c78:	7e 89       	ldd	r23, Y+22	; 0x16
    1c7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	9c 8b       	std	Y+20, r25	; 0x14
    1c88:	8b 8b       	std	Y+19, r24	; 0x13
    1c8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c8e:	98 8b       	std	Y+16, r25	; 0x10
    1c90:	8f 87       	std	Y+15, r24	; 0x0f
    1c92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c94:	98 89       	ldd	r25, Y+16	; 0x10
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <__vector_2+0x120>
    1c9a:	98 8b       	std	Y+16, r25	; 0x10
    1c9c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms (3000) ;


	DIO_SetPinValue(PORTB_DIO, DOOR1, LOW);           // CLOSE DOOR
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	60 e0       	ldi	r22, 0x00	; 0
    1ca2:	40 e0       	ldi	r20, 0x00	; 0
    1ca4:	0e 94 36 09 	call	0x126c	; 0x126c <DIO_SetPinValue>
	DIO_SetPinValue(PORTB_DIO, DOOR2, HIGH);
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	61 e0       	ldi	r22, 0x01	; 1
    1cac:	41 e0       	ldi	r20, 0x01	; 1
    1cae:	0e 94 36 09 	call	0x126c	; 0x126c <DIO_SetPinValue>
    1cb2:	80 e0       	ldi	r24, 0x00	; 0
    1cb4:	90 e8       	ldi	r25, 0x80	; 128
    1cb6:	ab e3       	ldi	r26, 0x3B	; 59
    1cb8:	b5 e4       	ldi	r27, 0x45	; 69
    1cba:	8b 87       	std	Y+11, r24	; 0x0b
    1cbc:	9c 87       	std	Y+12, r25	; 0x0c
    1cbe:	ad 87       	std	Y+13, r26	; 0x0d
    1cc0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	48 e4       	ldi	r20, 0x48	; 72
    1cd0:	53 e4       	ldi	r21, 0x43	; 67
    1cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	8f 83       	std	Y+7, r24	; 0x07
    1cdc:	98 87       	std	Y+8, r25	; 0x08
    1cde:	a9 87       	std	Y+9, r26	; 0x09
    1ce0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ce2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce4:	78 85       	ldd	r23, Y+8	; 0x08
    1ce6:	89 85       	ldd	r24, Y+9	; 0x09
    1ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	40 e8       	ldi	r20, 0x80	; 128
    1cf0:	5f e3       	ldi	r21, 0x3F	; 63
    1cf2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cf6:	88 23       	and	r24, r24
    1cf8:	2c f4       	brge	.+10     	; 0x1d04 <__vector_2+0x18e>
		__ticks = 1;
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	9e 83       	std	Y+6, r25	; 0x06
    1d00:	8d 83       	std	Y+5, r24	; 0x05
    1d02:	3f c0       	rjmp	.+126    	; 0x1d82 <__vector_2+0x20c>
	else if (__tmp > 65535)
    1d04:	6f 81       	ldd	r22, Y+7	; 0x07
    1d06:	78 85       	ldd	r23, Y+8	; 0x08
    1d08:	89 85       	ldd	r24, Y+9	; 0x09
    1d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	3f ef       	ldi	r19, 0xFF	; 255
    1d10:	4f e7       	ldi	r20, 0x7F	; 127
    1d12:	57 e4       	ldi	r21, 0x47	; 71
    1d14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d18:	18 16       	cp	r1, r24
    1d1a:	4c f5       	brge	.+82     	; 0x1d6e <__vector_2+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	40 e2       	ldi	r20, 0x20	; 32
    1d2a:	51 e4       	ldi	r21, 0x41	; 65
    1d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	bc 01       	movw	r22, r24
    1d36:	cd 01       	movw	r24, r26
    1d38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	9e 83       	std	Y+6, r25	; 0x06
    1d42:	8d 83       	std	Y+5, r24	; 0x05
    1d44:	0f c0       	rjmp	.+30     	; 0x1d64 <__vector_2+0x1ee>
    1d46:	84 e1       	ldi	r24, 0x14	; 20
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	9c 83       	std	Y+4, r25	; 0x04
    1d4c:	8b 83       	std	Y+3, r24	; 0x03
    1d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d50:	9c 81       	ldd	r25, Y+4	; 0x04
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	f1 f7       	brne	.-4      	; 0x1d52 <__vector_2+0x1dc>
    1d56:	9c 83       	std	Y+4, r25	; 0x04
    1d58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	9e 83       	std	Y+6, r25	; 0x06
    1d62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d64:	8d 81       	ldd	r24, Y+5	; 0x05
    1d66:	9e 81       	ldd	r25, Y+6	; 0x06
    1d68:	00 97       	sbiw	r24, 0x00	; 0
    1d6a:	69 f7       	brne	.-38     	; 0x1d46 <__vector_2+0x1d0>
    1d6c:	14 c0       	rjmp	.+40     	; 0x1d96 <__vector_2+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d70:	78 85       	ldd	r23, Y+8	; 0x08
    1d72:	89 85       	ldd	r24, Y+9	; 0x09
    1d74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	9e 83       	std	Y+6, r25	; 0x06
    1d80:	8d 83       	std	Y+5, r24	; 0x05
    1d82:	8d 81       	ldd	r24, Y+5	; 0x05
    1d84:	9e 81       	ldd	r25, Y+6	; 0x06
    1d86:	9a 83       	std	Y+2, r25	; 0x02
    1d88:	89 83       	std	Y+1, r24	; 0x01
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	f1 f7       	brne	.-4      	; 0x1d8e <__vector_2+0x218>
    1d92:	9a 83       	std	Y+2, r25	; 0x02
    1d94:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (3000) ;


	DIO_SetPinValue(PORTB_DIO, DOOR1, LOW);          // IDLE
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	60 e0       	ldi	r22, 0x00	; 0
    1d9a:	40 e0       	ldi	r20, 0x00	; 0
    1d9c:	0e 94 36 09 	call	0x126c	; 0x126c <DIO_SetPinValue>
	DIO_SetPinValue(PORTB_DIO, DOOR2, LOW);
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	61 e0       	ldi	r22, 0x01	; 1
    1da4:	40 e0       	ldi	r20, 0x00	; 0
    1da6:	0e 94 36 09 	call	0x126c	; 0x126c <DIO_SetPinValue>


	if (u8PeopleInside!=0) {
    1daa:	80 91 6b 00 	lds	r24, 0x006B
    1dae:	88 23       	and	r24, r24
    1db0:	31 f0       	breq	.+12     	; 0x1dbe <__vector_2+0x248>
	u8PeopleInside -- ;
    1db2:	80 91 6b 00 	lds	r24, 0x006B
    1db6:	81 50       	subi	r24, 0x01	; 1
    1db8:	80 93 6b 00 	sts	0x006B, r24
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <__vector_2+0x24c>
	}

	else {
		u8PeopleInside = 0 ;
    1dbe:	10 92 6b 00 	sts	0x006B, r1
	}

}
    1dc2:	6c 96       	adiw	r28, 0x1c	; 28
    1dc4:	de bf       	out	0x3e, r29	; 62
    1dc6:	cd bf       	out	0x3d, r28	; 61
    1dc8:	cf 91       	pop	r28
    1dca:	df 91       	pop	r29
    1dcc:	ff 91       	pop	r31
    1dce:	ef 91       	pop	r30
    1dd0:	bf 91       	pop	r27
    1dd2:	af 91       	pop	r26
    1dd4:	9f 91       	pop	r25
    1dd6:	8f 91       	pop	r24
    1dd8:	7f 91       	pop	r23
    1dda:	6f 91       	pop	r22
    1ddc:	5f 91       	pop	r21
    1dde:	4f 91       	pop	r20
    1de0:	3f 91       	pop	r19
    1de2:	2f 91       	pop	r18
    1de4:	0f 90       	pop	r0
    1de6:	0f be       	out	0x3f, r0	; 63
    1de8:	0f 90       	pop	r0
    1dea:	1f 90       	pop	r1
    1dec:	18 95       	reti

00001dee <vid_DIO_vid_SetDioDirections>:
extern u8 u8Lumen ;

/************************************************************/


void vid_DIO_vid_SetDioDirections (void) {
    1dee:	df 93       	push	r29
    1df0:	cf 93       	push	r28
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62

/*********************** Analog Input *************************/
	DIO_SetPinDirection (PORTA_DIO,TEMP_SENSOR,INPUT) ;
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	60 e0       	ldi	r22, 0x00	; 0
    1dfa:	40 e0       	ldi	r20, 0x00	; 0
    1dfc:	0e 94 c2 0a 	call	0x1584	; 0x1584 <DIO_SetPinDirection>
	DIO_SetPinDirection (PORTA_DIO,LDR,INPUT) ;
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	61 e0       	ldi	r22, 0x01	; 1
    1e04:	40 e0       	ldi	r20, 0x00	; 0
    1e06:	0e 94 c2 0a 	call	0x1584	; 0x1584 <DIO_SetPinDirection>

/******************** Input External Interrupt **********************/
	DIO_SetPinDirection (PORTD_DIO,PIR1,INPUT) ;
    1e0a:	83 e0       	ldi	r24, 0x03	; 3
    1e0c:	62 e0       	ldi	r22, 0x02	; 2
    1e0e:	40 e0       	ldi	r20, 0x00	; 0
    1e10:	0e 94 c2 0a 	call	0x1584	; 0x1584 <DIO_SetPinDirection>
	DIO_SetPinDirection (PORTD_DIO,PIR2,INPUT) ;
    1e14:	83 e0       	ldi	r24, 0x03	; 3
    1e16:	63 e0       	ldi	r22, 0x03	; 3
    1e18:	40 e0       	ldi	r20, 0x00	; 0
    1e1a:	0e 94 c2 0a 	call	0x1584	; 0x1584 <DIO_SetPinDirection>

/*********************** Digital Input *************************/

	DIO_SetPinDirection (PORTB_DIO,GAS,INPUT) ;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	65 e0       	ldi	r22, 0x05	; 5
    1e22:	40 e0       	ldi	r20, 0x00	; 0
    1e24:	0e 94 c2 0a 	call	0x1584	; 0x1584 <DIO_SetPinDirection>


/********************** Digital Output ************************/
	DIO_SetPinDirection (PORTB_DIO,DOOR1,OUTPUT) ;
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	60 e0       	ldi	r22, 0x00	; 0
    1e2c:	41 e0       	ldi	r20, 0x01	; 1
    1e2e:	0e 94 c2 0a 	call	0x1584	; 0x1584 <DIO_SetPinDirection>
	DIO_SetPinDirection (PORTB_DIO,DOOR2,OUTPUT) ;
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	61 e0       	ldi	r22, 0x01	; 1
    1e36:	41 e0       	ldi	r20, 0x01	; 1
    1e38:	0e 94 c2 0a 	call	0x1584	; 0x1584 <DIO_SetPinDirection>
	DIO_SetPinDirection (PORTB_DIO,LED,OUTPUT) ;
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	66 e0       	ldi	r22, 0x06	; 6
    1e40:	41 e0       	ldi	r20, 0x01	; 1
    1e42:	0e 94 c2 0a 	call	0x1584	; 0x1584 <DIO_SetPinDirection>
//	DIO_SetPinDirection (PORTB_DIO,BUZZ,OUTPUT) ;


/************************ PWM Output *************************/
	DIO_SetPinDirection (PORTB_DIO,FAN,OUTPUT) ;
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	63 e0       	ldi	r22, 0x03	; 3
    1e4a:	41 e0       	ldi	r20, 0x01	; 1
    1e4c:	0e 94 c2 0a 	call	0x1584	; 0x1584 <DIO_SetPinDirection>
	DIO_SetPinDirection (PORTD_DIO,LIGHT,OUTPUT) ;
    1e50:	83 e0       	ldi	r24, 0x03	; 3
    1e52:	67 e0       	ldi	r22, 0x07	; 7
    1e54:	41 e0       	ldi	r20, 0x01	; 1
    1e56:	0e 94 c2 0a 	call	0x1584	; 0x1584 <DIO_SetPinDirection>


/************************ PORTS INITIALIZATION *************************/

	DIO_SetPinValue(PORTD_DIO , PIR1 , HIGH);
    1e5a:	83 e0       	ldi	r24, 0x03	; 3
    1e5c:	62 e0       	ldi	r22, 0x02	; 2
    1e5e:	41 e0       	ldi	r20, 0x01	; 1
    1e60:	0e 94 36 09 	call	0x126c	; 0x126c <DIO_SetPinValue>
	DIO_SetPinValue(PORTD_DIO , PIR2 , HIGH);
    1e64:	83 e0       	ldi	r24, 0x03	; 3
    1e66:	63 e0       	ldi	r22, 0x03	; 3
    1e68:	41 e0       	ldi	r20, 0x01	; 1
    1e6a:	0e 94 36 09 	call	0x126c	; 0x126c <DIO_SetPinValue>
	DIO_SetPinValue(PORTB_DIO , GAS , HIGH) ;
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	65 e0       	ldi	r22, 0x05	; 5
    1e72:	41 e0       	ldi	r20, 0x01	; 1
    1e74:	0e 94 36 09 	call	0x126c	; 0x126c <DIO_SetPinValue>
	DIO_SetPinValue(PORTB_DIO , LED , LOW) ;
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	66 e0       	ldi	r22, 0x06	; 6
    1e7c:	40 e0       	ldi	r20, 0x00	; 0
    1e7e:	0e 94 36 09 	call	0x126c	; 0x126c <DIO_SetPinValue>
//	DIO_SetPinValue(PORTB_DIO , BUZZ , LOW) ;

}
    1e82:	cf 91       	pop	r28
    1e84:	df 91       	pop	r29
    1e86:	08 95       	ret

00001e88 <UpdateFanSpeed>:


/************************************************************/

void UpdateFanSpeed (void) {
    1e88:	df 93       	push	r29
    1e8a:	cf 93       	push	r28
    1e8c:	00 d0       	rcall	.+0      	; 0x1e8e <UpdateFanSpeed+0x6>
    1e8e:	0f 92       	push	r0
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62

	u8 u8_ADC_Read = 0 ;
    1e94:	1b 82       	std	Y+3, r1	; 0x03
	u16 u16Volt = 0 ;
    1e96:	1a 82       	std	Y+2, r1	; 0x02
    1e98:	19 82       	std	Y+1, r1	; 0x01


	u8_ADC_Read = U8_ADC_U8_Read(0)  ;
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	0e 94 cc 05 	call	0xb98	; 0xb98 <U8_ADC_U8_Read>
    1ea0:	8b 83       	std	Y+3, r24	; 0x03
	u16Volt =( ( ( (u32)u8_ADC_Read *  1500UL) ) / 255UL )  ;
    1ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea4:	88 2f       	mov	r24, r24
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	a0 e0       	ldi	r26, 0x00	; 0
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	2c ed       	ldi	r18, 0xDC	; 220
    1eae:	35 e0       	ldi	r19, 0x05	; 5
    1eb0:	40 e0       	ldi	r20, 0x00	; 0
    1eb2:	50 e0       	ldi	r21, 0x00	; 0
    1eb4:	bc 01       	movw	r22, r24
    1eb6:	cd 01       	movw	r24, r26
    1eb8:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__mulsi3>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	2f ef       	ldi	r18, 0xFF	; 255
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	40 e0       	ldi	r20, 0x00	; 0
    1ec6:	50 e0       	ldi	r21, 0x00	; 0
    1ec8:	bc 01       	movw	r22, r24
    1eca:	cd 01       	movw	r24, r26
    1ecc:	0e 94 85 10 	call	0x210a	; 0x210a <__udivmodsi4>
    1ed0:	da 01       	movw	r26, r20
    1ed2:	c9 01       	movw	r24, r18
    1ed4:	9a 83       	std	Y+2, r25	; 0x02
    1ed6:	89 83       	std	Y+1, r24	; 0x01
	u16Temp = u16Volt/10 ;
    1ed8:	89 81       	ldd	r24, Y+1	; 0x01
    1eda:	9a 81       	ldd	r25, Y+2	; 0x02
    1edc:	2a e0       	ldi	r18, 0x0A	; 10
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	b9 01       	movw	r22, r18
    1ee2:	0e 94 71 10 	call	0x20e2	; 0x20e2 <__udivmodhi4>
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	90 93 69 00 	sts	0x0069, r25
    1eec:	80 93 68 00 	sts	0x0068, r24



if      (u16Temp<=20)                  {OCR0_REG = 0 ; }
    1ef0:	80 91 68 00 	lds	r24, 0x0068
    1ef4:	90 91 69 00 	lds	r25, 0x0069
    1ef8:	85 31       	cpi	r24, 0x15	; 21
    1efa:	91 05       	cpc	r25, r1
    1efc:	20 f4       	brcc	.+8      	; 0x1f06 <UpdateFanSpeed+0x7e>
    1efe:	ec e5       	ldi	r30, 0x5C	; 92
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	10 82       	st	Z, r1
    1f04:	2a c0       	rjmp	.+84     	; 0x1f5a <UpdateFanSpeed+0xd2>
else if ((u16Temp>20)&&(u16Temp<=27))  {OCR0_REG = 127 ; }
    1f06:	80 91 68 00 	lds	r24, 0x0068
    1f0a:	90 91 69 00 	lds	r25, 0x0069
    1f0e:	85 31       	cpi	r24, 0x15	; 21
    1f10:	91 05       	cpc	r25, r1
    1f12:	60 f0       	brcs	.+24     	; 0x1f2c <UpdateFanSpeed+0xa4>
    1f14:	80 91 68 00 	lds	r24, 0x0068
    1f18:	90 91 69 00 	lds	r25, 0x0069
    1f1c:	8c 31       	cpi	r24, 0x1C	; 28
    1f1e:	91 05       	cpc	r25, r1
    1f20:	28 f4       	brcc	.+10     	; 0x1f2c <UpdateFanSpeed+0xa4>
    1f22:	ec e5       	ldi	r30, 0x5C	; 92
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	8f e7       	ldi	r24, 0x7F	; 127
    1f28:	80 83       	st	Z, r24
    1f2a:	17 c0       	rjmp	.+46     	; 0x1f5a <UpdateFanSpeed+0xd2>
else if ((u16Temp>27)&&(u16Temp<=30))  {OCR0_REG = 200 ; }
    1f2c:	80 91 68 00 	lds	r24, 0x0068
    1f30:	90 91 69 00 	lds	r25, 0x0069
    1f34:	8c 31       	cpi	r24, 0x1C	; 28
    1f36:	91 05       	cpc	r25, r1
    1f38:	60 f0       	brcs	.+24     	; 0x1f52 <UpdateFanSpeed+0xca>
    1f3a:	80 91 68 00 	lds	r24, 0x0068
    1f3e:	90 91 69 00 	lds	r25, 0x0069
    1f42:	8f 31       	cpi	r24, 0x1F	; 31
    1f44:	91 05       	cpc	r25, r1
    1f46:	28 f4       	brcc	.+10     	; 0x1f52 <UpdateFanSpeed+0xca>
    1f48:	ec e5       	ldi	r30, 0x5C	; 92
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	88 ec       	ldi	r24, 0xC8	; 200
    1f4e:	80 83       	st	Z, r24
    1f50:	04 c0       	rjmp	.+8      	; 0x1f5a <UpdateFanSpeed+0xd2>
else                                   { OCR0_REG=255 ; }
    1f52:	ec e5       	ldi	r30, 0x5C	; 92
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	8f ef       	ldi	r24, 0xFF	; 255
    1f58:	80 83       	st	Z, r24

}
    1f5a:	0f 90       	pop	r0
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	cf 91       	pop	r28
    1f62:	df 91       	pop	r29
    1f64:	08 95       	ret

00001f66 <UpdateLightIlluminance>:

/************************************************************/

void UpdateLightIlluminance (void) {
    1f66:	df 93       	push	r29
    1f68:	cf 93       	push	r28
    1f6a:	0f 92       	push	r0
    1f6c:	cd b7       	in	r28, 0x3d	; 61
    1f6e:	de b7       	in	r29, 0x3e	; 62

	u8 u8LDR_Read = U8_ADC_U8_Read(1)  ;
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	0e 94 cc 05 	call	0xb98	; 0xb98 <U8_ADC_U8_Read>
    1f76:	89 83       	std	Y+1, r24	; 0x01

	u8Lumen  = u8LDR_Read ;
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	80 93 6a 00 	sts	0x006A, r24


	if (u8LDR_Read <= 64 )                      {OCR2_REG = 0 ;}
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	81 34       	cpi	r24, 0x41	; 65
    1f82:	20 f4       	brcc	.+8      	; 0x1f8c <UpdateLightIlluminance+0x26>
    1f84:	e3 e4       	ldi	r30, 0x43	; 67
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	10 82       	st	Z, r1
    1f8a:	0f c0       	rjmp	.+30     	; 0x1faa <UpdateLightIlluminance+0x44>
	else if (u8LDR_Read >64 && u8LDR_Read<128 ) {OCR2_REG = 128  ; }
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	81 34       	cpi	r24, 0x41	; 65
    1f90:	40 f0       	brcs	.+16     	; 0x1fa2 <UpdateLightIlluminance+0x3c>
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	88 23       	and	r24, r24
    1f96:	2c f0       	brlt	.+10     	; 0x1fa2 <UpdateLightIlluminance+0x3c>
    1f98:	e3 e4       	ldi	r30, 0x43	; 67
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 e8       	ldi	r24, 0x80	; 128
    1f9e:	80 83       	st	Z, r24
    1fa0:	04 c0       	rjmp	.+8      	; 0x1faa <UpdateLightIlluminance+0x44>
	else                                        {OCR2_REG = 255 ; }
    1fa2:	e3 e4       	ldi	r30, 0x43	; 67
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	8f ef       	ldi	r24, 0xFF	; 255
    1fa8:	80 83       	st	Z, r24
}
    1faa:	0f 90       	pop	r0
    1fac:	cf 91       	pop	r28
    1fae:	df 91       	pop	r29
    1fb0:	08 95       	ret

00001fb2 <UpdateAlertStatus>:


/************************************************************/

void UpdateAlertStatus (void) {
    1fb2:	df 93       	push	r29
    1fb4:	cf 93       	push	r28
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62


if (DIO_GetPinValue(PORTB_DIO,GAS)) {
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	65 e0       	ldi	r22, 0x05	; 5
    1fbe:	0e 94 3e 0a 	call	0x147c	; 0x147c <DIO_GetPinValue>
    1fc2:	88 23       	and	r24, r24
    1fc4:	31 f0       	breq	.+12     	; 0x1fd2 <UpdateAlertStatus+0x20>
	DIO_SetPinValue(PORTB_DIO , LED , HIGH) ;        // led ON
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	66 e0       	ldi	r22, 0x06	; 6
    1fca:	41 e0       	ldi	r20, 0x01	; 1
    1fcc:	0e 94 36 09 	call	0x126c	; 0x126c <DIO_SetPinValue>
    1fd0:	05 c0       	rjmp	.+10     	; 0x1fdc <UpdateAlertStatus+0x2a>
//	DIO_SetPinValue(PORTB_DIO , BUZZ , HIGH) ;       // BUZZ ON

}
else {
	DIO_SetPinValue(PORTB_DIO , LED , LOW) ;       // led OFF
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	66 e0       	ldi	r22, 0x06	; 6
    1fd6:	40 e0       	ldi	r20, 0x00	; 0
    1fd8:	0e 94 36 09 	call	0x126c	; 0x126c <DIO_SetPinValue>





}
    1fdc:	cf 91       	pop	r28
    1fde:	df 91       	pop	r29
    1fe0:	08 95       	ret

00001fe2 <vid_Timer0_vid_InitializePWM>:


#include "Timer0_interface.h"


void vid_Timer0_vid_InitializePWM (void)  {
    1fe2:	df 93       	push	r29
    1fe4:	cf 93       	push	r28
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62

		TCCR0_REG=0b01100011 ;
    1fea:	e3 e5       	ldi	r30, 0x53	; 83
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	83 e6       	ldi	r24, 0x63	; 99
    1ff0:	80 83       	st	Z, r24
		OCR0_REG = 0X00 ;
    1ff2:	ec e5       	ldi	r30, 0x5C	; 92
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	10 82       	st	Z, r1

}
    1ff8:	cf 91       	pop	r28
    1ffa:	df 91       	pop	r29
    1ffc:	08 95       	ret

00001ffe <vid_Timer2_vid_InitializePWM>:
#include "registers.h"

#include "Timer2_interface.h"


void vid_Timer2_vid_InitializePWM (void)  {
    1ffe:	df 93       	push	r29
    2000:	cf 93       	push	r28
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62

		TCCR2_REG=0b01100011 ;
    2006:	e5 e4       	ldi	r30, 0x45	; 69
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	83 e6       	ldi	r24, 0x63	; 99
    200c:	80 83       	st	Z, r24

		OCR2_REG = 0X00 ;
    200e:	e3 e4       	ldi	r30, 0x43	; 67
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	10 82       	st	Z, r1

}
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	08 95       	ret

0000201a <vid_UART_vid_Initialize>:


/**************************************************************/

void vid_UART_vid_Initialize(void)
{
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62


  // Set BaudRate -> 9600/8MhZ
  UBRRL = 51;
    2022:	e9 e2       	ldi	r30, 0x29	; 41
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	83 e3       	ldi	r24, 0x33	; 51
    2028:	80 83       	st	Z, r24
  UBRRH = 0;
    202a:	e0 e4       	ldi	r30, 0x40	; 64
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	10 82       	st	Z, r1
  // Set Frame Format -> 8 data, 1 stop, No Parity
  UCSRC = 0b10000110;
    2030:	e0 e4       	ldi	r30, 0x40	; 64
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	86 e8       	ldi	r24, 0x86	; 134
    2036:	80 83       	st	Z, r24
  // Enable RX and TX
  UCSRB = 0b00011000;
    2038:	ea e2       	ldi	r30, 0x2A	; 42
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	88 e1       	ldi	r24, 0x18	; 24
    203e:	80 83       	st	Z, r24
}
    2040:	cf 91       	pop	r28
    2042:	df 91       	pop	r29
    2044:	08 95       	ret

00002046 <vid_UART_vid_SendChar>:

/**************************************************************/

void vid_UART_vid_SendChar(u8 data)
{
    2046:	df 93       	push	r29
    2048:	cf 93       	push	r28
    204a:	0f 92       	push	r0
    204c:	cd b7       	in	r28, 0x3d	; 61
    204e:	de b7       	in	r29, 0x3e	; 62
    2050:	89 83       	std	Y+1, r24	; 0x01
  // Wait until transmission Register Empty
  while(!(UCSRA&0b00100000));
    2052:	eb e2       	ldi	r30, 0x2B	; 43
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	88 2f       	mov	r24, r24
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	80 72       	andi	r24, 0x20	; 32
    205e:	90 70       	andi	r25, 0x00	; 0
    2060:	00 97       	sbiw	r24, 0x00	; 0
    2062:	b9 f3       	breq	.-18     	; 0x2052 <vid_UART_vid_SendChar+0xc>

  UDR = data;
    2064:	ec e2       	ldi	r30, 0x2C	; 44
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	89 81       	ldd	r24, Y+1	; 0x01
    206a:	80 83       	st	Z, r24

  // wait for transmit complete
  while(!(UCSRA&0b01000000));
    206c:	eb e2       	ldi	r30, 0x2B	; 43
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	88 2f       	mov	r24, r24
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	80 74       	andi	r24, 0x40	; 64
    2078:	90 70       	andi	r25, 0x00	; 0
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	b9 f3       	breq	.-18     	; 0x206c <vid_UART_vid_SendChar+0x26>
}
    207e:	0f 90       	pop	r0
    2080:	cf 91       	pop	r28
    2082:	df 91       	pop	r29
    2084:	08 95       	ret

00002086 <u8_UART_u8_GetChar>:

/**************************************************************/

u8 u8_UART_u8_GetChar(void)
{
    2086:	df 93       	push	r29
    2088:	cf 93       	push	r28
    208a:	cd b7       	in	r28, 0x3d	; 61
    208c:	de b7       	in	r29, 0x3e	; 62
  // Wait until Reception Complete
  while(!(UCSRA&0b10000000));
    208e:	eb e2       	ldi	r30, 0x2B	; 43
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	80 81       	ld	r24, Z
    2094:	88 23       	and	r24, r24
    2096:	dc f7       	brge	.-10     	; 0x208e <u8_UART_u8_GetChar+0x8>

  return UDR;
    2098:	ec e2       	ldi	r30, 0x2C	; 44
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
}
    209e:	cf 91       	pop	r28
    20a0:	df 91       	pop	r29
    20a2:	08 95       	ret

000020a4 <__mulsi3>:
    20a4:	62 9f       	mul	r22, r18
    20a6:	d0 01       	movw	r26, r0
    20a8:	73 9f       	mul	r23, r19
    20aa:	f0 01       	movw	r30, r0
    20ac:	82 9f       	mul	r24, r18
    20ae:	e0 0d       	add	r30, r0
    20b0:	f1 1d       	adc	r31, r1
    20b2:	64 9f       	mul	r22, r20
    20b4:	e0 0d       	add	r30, r0
    20b6:	f1 1d       	adc	r31, r1
    20b8:	92 9f       	mul	r25, r18
    20ba:	f0 0d       	add	r31, r0
    20bc:	83 9f       	mul	r24, r19
    20be:	f0 0d       	add	r31, r0
    20c0:	74 9f       	mul	r23, r20
    20c2:	f0 0d       	add	r31, r0
    20c4:	65 9f       	mul	r22, r21
    20c6:	f0 0d       	add	r31, r0
    20c8:	99 27       	eor	r25, r25
    20ca:	72 9f       	mul	r23, r18
    20cc:	b0 0d       	add	r27, r0
    20ce:	e1 1d       	adc	r30, r1
    20d0:	f9 1f       	adc	r31, r25
    20d2:	63 9f       	mul	r22, r19
    20d4:	b0 0d       	add	r27, r0
    20d6:	e1 1d       	adc	r30, r1
    20d8:	f9 1f       	adc	r31, r25
    20da:	bd 01       	movw	r22, r26
    20dc:	cf 01       	movw	r24, r30
    20de:	11 24       	eor	r1, r1
    20e0:	08 95       	ret

000020e2 <__udivmodhi4>:
    20e2:	aa 1b       	sub	r26, r26
    20e4:	bb 1b       	sub	r27, r27
    20e6:	51 e1       	ldi	r21, 0x11	; 17
    20e8:	07 c0       	rjmp	.+14     	; 0x20f8 <__udivmodhi4_ep>

000020ea <__udivmodhi4_loop>:
    20ea:	aa 1f       	adc	r26, r26
    20ec:	bb 1f       	adc	r27, r27
    20ee:	a6 17       	cp	r26, r22
    20f0:	b7 07       	cpc	r27, r23
    20f2:	10 f0       	brcs	.+4      	; 0x20f8 <__udivmodhi4_ep>
    20f4:	a6 1b       	sub	r26, r22
    20f6:	b7 0b       	sbc	r27, r23

000020f8 <__udivmodhi4_ep>:
    20f8:	88 1f       	adc	r24, r24
    20fa:	99 1f       	adc	r25, r25
    20fc:	5a 95       	dec	r21
    20fe:	a9 f7       	brne	.-22     	; 0x20ea <__udivmodhi4_loop>
    2100:	80 95       	com	r24
    2102:	90 95       	com	r25
    2104:	bc 01       	movw	r22, r24
    2106:	cd 01       	movw	r24, r26
    2108:	08 95       	ret

0000210a <__udivmodsi4>:
    210a:	a1 e2       	ldi	r26, 0x21	; 33
    210c:	1a 2e       	mov	r1, r26
    210e:	aa 1b       	sub	r26, r26
    2110:	bb 1b       	sub	r27, r27
    2112:	fd 01       	movw	r30, r26
    2114:	0d c0       	rjmp	.+26     	; 0x2130 <__udivmodsi4_ep>

00002116 <__udivmodsi4_loop>:
    2116:	aa 1f       	adc	r26, r26
    2118:	bb 1f       	adc	r27, r27
    211a:	ee 1f       	adc	r30, r30
    211c:	ff 1f       	adc	r31, r31
    211e:	a2 17       	cp	r26, r18
    2120:	b3 07       	cpc	r27, r19
    2122:	e4 07       	cpc	r30, r20
    2124:	f5 07       	cpc	r31, r21
    2126:	20 f0       	brcs	.+8      	; 0x2130 <__udivmodsi4_ep>
    2128:	a2 1b       	sub	r26, r18
    212a:	b3 0b       	sbc	r27, r19
    212c:	e4 0b       	sbc	r30, r20
    212e:	f5 0b       	sbc	r31, r21

00002130 <__udivmodsi4_ep>:
    2130:	66 1f       	adc	r22, r22
    2132:	77 1f       	adc	r23, r23
    2134:	88 1f       	adc	r24, r24
    2136:	99 1f       	adc	r25, r25
    2138:	1a 94       	dec	r1
    213a:	69 f7       	brne	.-38     	; 0x2116 <__udivmodsi4_loop>
    213c:	60 95       	com	r22
    213e:	70 95       	com	r23
    2140:	80 95       	com	r24
    2142:	90 95       	com	r25
    2144:	9b 01       	movw	r18, r22
    2146:	ac 01       	movw	r20, r24
    2148:	bd 01       	movw	r22, r26
    214a:	cf 01       	movw	r24, r30
    214c:	08 95       	ret

0000214e <__prologue_saves__>:
    214e:	2f 92       	push	r2
    2150:	3f 92       	push	r3
    2152:	4f 92       	push	r4
    2154:	5f 92       	push	r5
    2156:	6f 92       	push	r6
    2158:	7f 92       	push	r7
    215a:	8f 92       	push	r8
    215c:	9f 92       	push	r9
    215e:	af 92       	push	r10
    2160:	bf 92       	push	r11
    2162:	cf 92       	push	r12
    2164:	df 92       	push	r13
    2166:	ef 92       	push	r14
    2168:	ff 92       	push	r15
    216a:	0f 93       	push	r16
    216c:	1f 93       	push	r17
    216e:	cf 93       	push	r28
    2170:	df 93       	push	r29
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	ca 1b       	sub	r28, r26
    2178:	db 0b       	sbc	r29, r27
    217a:	0f b6       	in	r0, 0x3f	; 63
    217c:	f8 94       	cli
    217e:	de bf       	out	0x3e, r29	; 62
    2180:	0f be       	out	0x3f, r0	; 63
    2182:	cd bf       	out	0x3d, r28	; 61
    2184:	09 94       	ijmp

00002186 <__epilogue_restores__>:
    2186:	2a 88       	ldd	r2, Y+18	; 0x12
    2188:	39 88       	ldd	r3, Y+17	; 0x11
    218a:	48 88       	ldd	r4, Y+16	; 0x10
    218c:	5f 84       	ldd	r5, Y+15	; 0x0f
    218e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2190:	7d 84       	ldd	r7, Y+13	; 0x0d
    2192:	8c 84       	ldd	r8, Y+12	; 0x0c
    2194:	9b 84       	ldd	r9, Y+11	; 0x0b
    2196:	aa 84       	ldd	r10, Y+10	; 0x0a
    2198:	b9 84       	ldd	r11, Y+9	; 0x09
    219a:	c8 84       	ldd	r12, Y+8	; 0x08
    219c:	df 80       	ldd	r13, Y+7	; 0x07
    219e:	ee 80       	ldd	r14, Y+6	; 0x06
    21a0:	fd 80       	ldd	r15, Y+5	; 0x05
    21a2:	0c 81       	ldd	r16, Y+4	; 0x04
    21a4:	1b 81       	ldd	r17, Y+3	; 0x03
    21a6:	aa 81       	ldd	r26, Y+2	; 0x02
    21a8:	b9 81       	ldd	r27, Y+1	; 0x01
    21aa:	ce 0f       	add	r28, r30
    21ac:	d1 1d       	adc	r29, r1
    21ae:	0f b6       	in	r0, 0x3f	; 63
    21b0:	f8 94       	cli
    21b2:	de bf       	out	0x3e, r29	; 62
    21b4:	0f be       	out	0x3f, r0	; 63
    21b6:	cd bf       	out	0x3d, r28	; 61
    21b8:	ed 01       	movw	r28, r26
    21ba:	08 95       	ret

000021bc <_exit>:
    21bc:	f8 94       	cli

000021be <__stop_program>:
    21be:	ff cf       	rjmp	.-2      	; 0x21be <__stop_program>
