
TEMP_SENSOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002126  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00002126  0000219a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001680  00000000  00000000  000021b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a92  00000000  00000000  00003834  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000042c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004406  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004576  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000061bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000070aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00007e58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00007fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008245  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008a13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e2       	ldi	r30, 0x26	; 38
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <main>
      7a:	0c 94 91 10 	jmp	0x2122	; 0x2122 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 5a 10 	jmp	0x20b4	; 0x20b4 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a1 e7       	ldi	r26, 0x71	; 113
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 66 10 	jmp	0x20cc	; 0x20cc <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 82 10 	jmp	0x2104	; 0x2104 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 66 10 	jmp	0x20cc	; 0x20cc <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 82 10 	jmp	0x2104	; 0x2104 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 5a 10 	jmp	0x20b4	; 0x20b4 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	81 e7       	ldi	r24, 0x71	; 113
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 66 10 	jmp	0x20cc	; 0x20cc <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 82 10 	jmp	0x2104	; 0x2104 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 66 10 	jmp	0x20cc	; 0x20cc <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 82 10 	jmp	0x2104	; 0x2104 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 66 10 	jmp	0x20cc	; 0x20cc <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 82 10 	jmp	0x2104	; 0x2104 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 86 10 	jmp	0x210c	; 0x210c <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <vid_ADC_vid_Initialize>:


/************************************************************/


void vid_ADC_vid_Initialize (void) {
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62

	ADMUX_REG =  0b01100000 ;
     b3e:	e7 e2       	ldi	r30, 0x27	; 39
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	80 e6       	ldi	r24, 0x60	; 96
     b44:	80 83       	st	Z, r24
	ADCSRA_REG = 0b10001111 ;
     b46:	e6 e2       	ldi	r30, 0x26	; 38
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	8f e8       	ldi	r24, 0x8F	; 143
     b4c:	80 83       	st	Z, r24

}
     b4e:	cf 91       	pop	r28
     b50:	df 91       	pop	r29
     b52:	08 95       	ret

00000b54 <U8_ADC_U8_Read>:

/************************************************************/

u8 U8_ADC_U8_Read (u8 channel) {
     b54:	df 93       	push	r29
     b56:	cf 93       	push	r28
     b58:	0f 92       	push	r0
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62
     b5e:	89 83       	std	Y+1, r24	; 0x01

		channel &= 0x07;       // channel from 0 : 7  ,& to neglect any bit more than 7
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	87 70       	andi	r24, 0x07	; 7
     b64:	89 83       	std	Y+1, r24	; 0x01
		ADMUX_REG &= 0xE0;    // to save higher 3 bits as they are and set the rest to 0
     b66:	a7 e2       	ldi	r26, 0x27	; 39
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	e7 e2       	ldi	r30, 0x27	; 39
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	80 7e       	andi	r24, 0xE0	; 224
     b72:	8c 93       	st	X, r24
		ADMUX_REG |= channel;           // Take the target channel
     b74:	a7 e2       	ldi	r26, 0x27	; 39
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	e7 e2       	ldi	r30, 0x27	; 39
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	90 81       	ld	r25, Z
     b7e:	89 81       	ldd	r24, Y+1	; 0x01
     b80:	89 2b       	or	r24, r25
     b82:	8c 93       	st	X, r24

		SET_BIT(ADCSRA_REG,ADSC)  ;     // start conversion
     b84:	a6 e2       	ldi	r26, 0x26	; 38
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e6 e2       	ldi	r30, 0x26	; 38
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	80 64       	ori	r24, 0x40	; 64
     b90:	8c 93       	st	X, r24

		while(!(ADCSRA_REG & (1<<4)));  //POLLING TO WAIT CONVERSION
     b92:	e6 e2       	ldi	r30, 0x26	; 38
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	88 2f       	mov	r24, r24
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	80 71       	andi	r24, 0x10	; 16
     b9e:	90 70       	andi	r25, 0x00	; 0
     ba0:	00 97       	sbiw	r24, 0x00	; 0
     ba2:	b9 f3       	breq	.-18     	; 0xb92 <U8_ADC_U8_Read+0x3e>

		return ADCH_REG;
     ba4:	e5 e2       	ldi	r30, 0x25	; 37
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z

}
     baa:	0f 90       	pop	r0
     bac:	cf 91       	pop	r28
     bae:	df 91       	pop	r29
     bb0:	08 95       	ret

00000bb2 <DIO_SetPinValue>:
#include "DIO_reg.h"


/* IO Pins */
void DIO_SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy)
{
     bb2:	df 93       	push	r29
     bb4:	cf 93       	push	r28
     bb6:	cd b7       	in	r28, 0x3d	; 61
     bb8:	de b7       	in	r29, 0x3e	; 62
     bba:	27 97       	sbiw	r28, 0x07	; 7
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	f8 94       	cli
     bc0:	de bf       	out	0x3e, r29	; 62
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	cd bf       	out	0x3d, r28	; 61
     bc6:	89 83       	std	Y+1, r24	; 0x01
     bc8:	6a 83       	std	Y+2, r22	; 0x02
     bca:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD_DIO) && (u8PinIdCopy <= PIN7))
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	84 30       	cpi	r24, 0x04	; 4
     bd0:	08 f0       	brcs	.+2      	; 0xbd4 <DIO_SetPinValue+0x22>
     bd2:	ee c0       	rjmp	.+476    	; 0xdb0 <DIO_SetPinValue+0x1fe>
     bd4:	8a 81       	ldd	r24, Y+2	; 0x02
     bd6:	88 30       	cpi	r24, 0x08	; 8
     bd8:	08 f0       	brcs	.+2      	; 0xbdc <DIO_SetPinValue+0x2a>
     bda:	ea c0       	rjmp	.+468    	; 0xdb0 <DIO_SetPinValue+0x1fe>
	{
		if (u8PinValCopy == HIGH)
     bdc:	8b 81       	ldd	r24, Y+3	; 0x03
     bde:	81 30       	cpi	r24, 0x01	; 1
     be0:	09 f0       	breq	.+2      	; 0xbe4 <DIO_SetPinValue+0x32>
     be2:	6f c0       	rjmp	.+222    	; 0xcc2 <DIO_SetPinValue+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	28 2f       	mov	r18, r24
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	3f 83       	std	Y+7, r19	; 0x07
     bec:	2e 83       	std	Y+6, r18	; 0x06
     bee:	8e 81       	ldd	r24, Y+6	; 0x06
     bf0:	9f 81       	ldd	r25, Y+7	; 0x07
     bf2:	81 30       	cpi	r24, 0x01	; 1
     bf4:	91 05       	cpc	r25, r1
     bf6:	49 f1       	breq	.+82     	; 0xc4a <DIO_SetPinValue+0x98>
     bf8:	2e 81       	ldd	r18, Y+6	; 0x06
     bfa:	3f 81       	ldd	r19, Y+7	; 0x07
     bfc:	22 30       	cpi	r18, 0x02	; 2
     bfe:	31 05       	cpc	r19, r1
     c00:	2c f4       	brge	.+10     	; 0xc0c <DIO_SetPinValue+0x5a>
     c02:	8e 81       	ldd	r24, Y+6	; 0x06
     c04:	9f 81       	ldd	r25, Y+7	; 0x07
     c06:	00 97       	sbiw	r24, 0x00	; 0
     c08:	61 f0       	breq	.+24     	; 0xc22 <DIO_SetPinValue+0x70>
     c0a:	d2 c0       	rjmp	.+420    	; 0xdb0 <DIO_SetPinValue+0x1fe>
     c0c:	2e 81       	ldd	r18, Y+6	; 0x06
     c0e:	3f 81       	ldd	r19, Y+7	; 0x07
     c10:	22 30       	cpi	r18, 0x02	; 2
     c12:	31 05       	cpc	r19, r1
     c14:	71 f1       	breq	.+92     	; 0xc72 <DIO_SetPinValue+0xc0>
     c16:	8e 81       	ldd	r24, Y+6	; 0x06
     c18:	9f 81       	ldd	r25, Y+7	; 0x07
     c1a:	83 30       	cpi	r24, 0x03	; 3
     c1c:	91 05       	cpc	r25, r1
     c1e:	e9 f1       	breq	.+122    	; 0xc9a <DIO_SetPinValue+0xe8>
     c20:	c7 c0       	rjmp	.+398    	; 0xdb0 <DIO_SetPinValue+0x1fe>
			{
				case PORTA_DIO: SET_BIT(PORTA_Register,u8PinIdCopy); break;
     c22:	ab e3       	ldi	r26, 0x3B	; 59
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	eb e3       	ldi	r30, 0x3B	; 59
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	48 2f       	mov	r20, r24
     c2e:	8a 81       	ldd	r24, Y+2	; 0x02
     c30:	28 2f       	mov	r18, r24
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	02 2e       	mov	r0, r18
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <DIO_SetPinValue+0x8e>
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	0a 94       	dec	r0
     c42:	e2 f7       	brpl	.-8      	; 0xc3c <DIO_SetPinValue+0x8a>
     c44:	84 2b       	or	r24, r20
     c46:	8c 93       	st	X, r24
     c48:	b3 c0       	rjmp	.+358    	; 0xdb0 <DIO_SetPinValue+0x1fe>
				case PORTB_DIO: SET_BIT(PORTB_Register,u8PinIdCopy); break;
     c4a:	a8 e3       	ldi	r26, 0x38	; 56
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	e8 e3       	ldi	r30, 0x38	; 56
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	48 2f       	mov	r20, r24
     c56:	8a 81       	ldd	r24, Y+2	; 0x02
     c58:	28 2f       	mov	r18, r24
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	02 2e       	mov	r0, r18
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <DIO_SetPinValue+0xb6>
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	0a 94       	dec	r0
     c6a:	e2 f7       	brpl	.-8      	; 0xc64 <DIO_SetPinValue+0xb2>
     c6c:	84 2b       	or	r24, r20
     c6e:	8c 93       	st	X, r24
     c70:	9f c0       	rjmp	.+318    	; 0xdb0 <DIO_SetPinValue+0x1fe>
				case PORTC_DIO: SET_BIT(PORTC_Register,u8PinIdCopy); break;
     c72:	a5 e3       	ldi	r26, 0x35	; 53
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	e5 e3       	ldi	r30, 0x35	; 53
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	48 2f       	mov	r20, r24
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	28 2f       	mov	r18, r24
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	02 2e       	mov	r0, r18
     c8a:	02 c0       	rjmp	.+4      	; 0xc90 <DIO_SetPinValue+0xde>
     c8c:	88 0f       	add	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	0a 94       	dec	r0
     c92:	e2 f7       	brpl	.-8      	; 0xc8c <DIO_SetPinValue+0xda>
     c94:	84 2b       	or	r24, r20
     c96:	8c 93       	st	X, r24
     c98:	8b c0       	rjmp	.+278    	; 0xdb0 <DIO_SetPinValue+0x1fe>
				case PORTD_DIO: SET_BIT(PORTD_Register,u8PinIdCopy); break;
     c9a:	a2 e3       	ldi	r26, 0x32	; 50
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e2 e3       	ldi	r30, 0x32	; 50
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	48 2f       	mov	r20, r24
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	28 2f       	mov	r18, r24
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	02 2e       	mov	r0, r18
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <DIO_SetPinValue+0x106>
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	0a 94       	dec	r0
     cba:	e2 f7       	brpl	.-8      	; 0xcb4 <DIO_SetPinValue+0x102>
     cbc:	84 2b       	or	r24, r20
     cbe:	8c 93       	st	X, r24
     cc0:	77 c0       	rjmp	.+238    	; 0xdb0 <DIO_SetPinValue+0x1fe>
			}
		
		}
		
		else if (u8PinValCopy == LOW)
     cc2:	8b 81       	ldd	r24, Y+3	; 0x03
     cc4:	88 23       	and	r24, r24
     cc6:	09 f0       	breq	.+2      	; 0xcca <DIO_SetPinValue+0x118>
     cc8:	73 c0       	rjmp	.+230    	; 0xdb0 <DIO_SetPinValue+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	28 2f       	mov	r18, r24
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	3d 83       	std	Y+5, r19	; 0x05
     cd2:	2c 83       	std	Y+4, r18	; 0x04
     cd4:	8c 81       	ldd	r24, Y+4	; 0x04
     cd6:	9d 81       	ldd	r25, Y+5	; 0x05
     cd8:	81 30       	cpi	r24, 0x01	; 1
     cda:	91 05       	cpc	r25, r1
     cdc:	59 f1       	breq	.+86     	; 0xd34 <DIO_SetPinValue+0x182>
     cde:	2c 81       	ldd	r18, Y+4	; 0x04
     ce0:	3d 81       	ldd	r19, Y+5	; 0x05
     ce2:	22 30       	cpi	r18, 0x02	; 2
     ce4:	31 05       	cpc	r19, r1
     ce6:	2c f4       	brge	.+10     	; 0xcf2 <DIO_SetPinValue+0x140>
     ce8:	8c 81       	ldd	r24, Y+4	; 0x04
     cea:	9d 81       	ldd	r25, Y+5	; 0x05
     cec:	00 97       	sbiw	r24, 0x00	; 0
     cee:	69 f0       	breq	.+26     	; 0xd0a <DIO_SetPinValue+0x158>
     cf0:	5f c0       	rjmp	.+190    	; 0xdb0 <DIO_SetPinValue+0x1fe>
     cf2:	2c 81       	ldd	r18, Y+4	; 0x04
     cf4:	3d 81       	ldd	r19, Y+5	; 0x05
     cf6:	22 30       	cpi	r18, 0x02	; 2
     cf8:	31 05       	cpc	r19, r1
     cfa:	89 f1       	breq	.+98     	; 0xd5e <DIO_SetPinValue+0x1ac>
     cfc:	8c 81       	ldd	r24, Y+4	; 0x04
     cfe:	9d 81       	ldd	r25, Y+5	; 0x05
     d00:	83 30       	cpi	r24, 0x03	; 3
     d02:	91 05       	cpc	r25, r1
     d04:	09 f4       	brne	.+2      	; 0xd08 <DIO_SetPinValue+0x156>
     d06:	40 c0       	rjmp	.+128    	; 0xd88 <DIO_SetPinValue+0x1d6>
     d08:	53 c0       	rjmp	.+166    	; 0xdb0 <DIO_SetPinValue+0x1fe>
			{
				case PORTA_DIO: CLR_BIT(PORTA_Register,u8PinIdCopy); break;
     d0a:	ab e3       	ldi	r26, 0x3B	; 59
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	eb e3       	ldi	r30, 0x3B	; 59
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	48 2f       	mov	r20, r24
     d16:	8a 81       	ldd	r24, Y+2	; 0x02
     d18:	28 2f       	mov	r18, r24
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	02 2e       	mov	r0, r18
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <DIO_SetPinValue+0x176>
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	0a 94       	dec	r0
     d2a:	e2 f7       	brpl	.-8      	; 0xd24 <DIO_SetPinValue+0x172>
     d2c:	80 95       	com	r24
     d2e:	84 23       	and	r24, r20
     d30:	8c 93       	st	X, r24
     d32:	3e c0       	rjmp	.+124    	; 0xdb0 <DIO_SetPinValue+0x1fe>
				case PORTB_DIO: CLR_BIT(PORTB_Register,u8PinIdCopy); break;
     d34:	a8 e3       	ldi	r26, 0x38	; 56
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e8 e3       	ldi	r30, 0x38	; 56
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	48 2f       	mov	r20, r24
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	02 2e       	mov	r0, r18
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <DIO_SetPinValue+0x1a0>
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	0a 94       	dec	r0
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <DIO_SetPinValue+0x19c>
     d56:	80 95       	com	r24
     d58:	84 23       	and	r24, r20
     d5a:	8c 93       	st	X, r24
     d5c:	29 c0       	rjmp	.+82     	; 0xdb0 <DIO_SetPinValue+0x1fe>
				case PORTC_DIO: CLR_BIT(PORTC_Register,u8PinIdCopy); break;
     d5e:	a5 e3       	ldi	r26, 0x35	; 53
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e5 e3       	ldi	r30, 0x35	; 53
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	48 2f       	mov	r20, r24
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	02 2e       	mov	r0, r18
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <DIO_SetPinValue+0x1ca>
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	0a 94       	dec	r0
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <DIO_SetPinValue+0x1c6>
     d80:	80 95       	com	r24
     d82:	84 23       	and	r24, r20
     d84:	8c 93       	st	X, r24
     d86:	14 c0       	rjmp	.+40     	; 0xdb0 <DIO_SetPinValue+0x1fe>
				case PORTD_DIO: CLR_BIT(PORTD_Register,u8PinIdCopy); break;
     d88:	a2 e3       	ldi	r26, 0x32	; 50
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	e2 e3       	ldi	r30, 0x32	; 50
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	48 2f       	mov	r20, r24
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	02 2e       	mov	r0, r18
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <DIO_SetPinValue+0x1f4>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	0a 94       	dec	r0
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <DIO_SetPinValue+0x1f0>
     daa:	80 95       	com	r24
     dac:	84 23       	and	r24, r20
     dae:	8c 93       	st	X, r24
	
	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
     db0:	27 96       	adiw	r28, 0x07	; 7
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	cd bf       	out	0x3d, r28	; 61
     dbc:	cf 91       	pop	r28
     dbe:	df 91       	pop	r29
     dc0:	08 95       	ret

00000dc2 <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy)
{
     dc2:	df 93       	push	r29
     dc4:	cf 93       	push	r28
     dc6:	00 d0       	rcall	.+0      	; 0xdc8 <DIO_GetPinValue+0x6>
     dc8:	00 d0       	rcall	.+0      	; 0xdca <DIO_GetPinValue+0x8>
     dca:	0f 92       	push	r0
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	8a 83       	std	Y+2, r24	; 0x02
     dd2:	6b 83       	std	Y+3, r22	; 0x03
	/* Define Local Variable to get the BIT Value */
	u8 u8ResultLocal;
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD_DIO) && (u8PinIdCopy <= PIN7))
     dd4:	8a 81       	ldd	r24, Y+2	; 0x02
     dd6:	84 30       	cpi	r24, 0x04	; 4
     dd8:	08 f0       	brcs	.+2      	; 0xddc <DIO_GetPinValue+0x1a>
     dda:	6c c0       	rjmp	.+216    	; 0xeb4 <DIO_GetPinValue+0xf2>
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	88 30       	cpi	r24, 0x08	; 8
     de0:	08 f0       	brcs	.+2      	; 0xde4 <DIO_GetPinValue+0x22>
     de2:	68 c0       	rjmp	.+208    	; 0xeb4 <DIO_GetPinValue+0xf2>
	{
		/* Check on the Required PORT Number */
		switch (u8PortIdCopy)
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	3d 83       	std	Y+5, r19	; 0x05
     dec:	2c 83       	std	Y+4, r18	; 0x04
     dee:	4c 81       	ldd	r20, Y+4	; 0x04
     df0:	5d 81       	ldd	r21, Y+5	; 0x05
     df2:	41 30       	cpi	r20, 0x01	; 1
     df4:	51 05       	cpc	r21, r1
     df6:	41 f1       	breq	.+80     	; 0xe48 <DIO_GetPinValue+0x86>
     df8:	8c 81       	ldd	r24, Y+4	; 0x04
     dfa:	9d 81       	ldd	r25, Y+5	; 0x05
     dfc:	82 30       	cpi	r24, 0x02	; 2
     dfe:	91 05       	cpc	r25, r1
     e00:	34 f4       	brge	.+12     	; 0xe0e <DIO_GetPinValue+0x4c>
     e02:	2c 81       	ldd	r18, Y+4	; 0x04
     e04:	3d 81       	ldd	r19, Y+5	; 0x05
     e06:	21 15       	cp	r18, r1
     e08:	31 05       	cpc	r19, r1
     e0a:	61 f0       	breq	.+24     	; 0xe24 <DIO_GetPinValue+0x62>
     e0c:	55 c0       	rjmp	.+170    	; 0xeb8 <DIO_GetPinValue+0xf6>
     e0e:	4c 81       	ldd	r20, Y+4	; 0x04
     e10:	5d 81       	ldd	r21, Y+5	; 0x05
     e12:	42 30       	cpi	r20, 0x02	; 2
     e14:	51 05       	cpc	r21, r1
     e16:	51 f1       	breq	.+84     	; 0xe6c <DIO_GetPinValue+0xaa>
     e18:	8c 81       	ldd	r24, Y+4	; 0x04
     e1a:	9d 81       	ldd	r25, Y+5	; 0x05
     e1c:	83 30       	cpi	r24, 0x03	; 3
     e1e:	91 05       	cpc	r25, r1
     e20:	b9 f1       	breq	.+110    	; 0xe90 <DIO_GetPinValue+0xce>
     e22:	4a c0       	rjmp	.+148    	; 0xeb8 <DIO_GetPinValue+0xf6>
		{
			case PORTA_DIO: u8ResultLocal= GET_BIT(PINA_Register,u8PinIdCopy); break;
     e24:	e9 e3       	ldi	r30, 0x39	; 57
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	28 2f       	mov	r18, r24
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	88 2f       	mov	r24, r24
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	a9 01       	movw	r20, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_GetPinValue+0x7a>
     e38:	55 95       	asr	r21
     e3a:	47 95       	ror	r20
     e3c:	8a 95       	dec	r24
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_GetPinValue+0x76>
     e40:	ca 01       	movw	r24, r20
     e42:	81 70       	andi	r24, 0x01	; 1
     e44:	89 83       	std	Y+1, r24	; 0x01
     e46:	38 c0       	rjmp	.+112    	; 0xeb8 <DIO_GetPinValue+0xf6>
			case PORTB_DIO: u8ResultLocal= GET_BIT(PINB_Register,u8PinIdCopy); break;
     e48:	e6 e3       	ldi	r30, 0x36	; 54
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	8b 81       	ldd	r24, Y+3	; 0x03
     e54:	88 2f       	mov	r24, r24
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	a9 01       	movw	r20, r18
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <DIO_GetPinValue+0x9e>
     e5c:	55 95       	asr	r21
     e5e:	47 95       	ror	r20
     e60:	8a 95       	dec	r24
     e62:	e2 f7       	brpl	.-8      	; 0xe5c <DIO_GetPinValue+0x9a>
     e64:	ca 01       	movw	r24, r20
     e66:	81 70       	andi	r24, 0x01	; 1
     e68:	89 83       	std	Y+1, r24	; 0x01
     e6a:	26 c0       	rjmp	.+76     	; 0xeb8 <DIO_GetPinValue+0xf6>
			case PORTC_DIO: u8ResultLocal= GET_BIT(PINC_Register,u8PinIdCopy); break;
     e6c:	e3 e3       	ldi	r30, 0x33	; 51
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	88 2f       	mov	r24, r24
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	a9 01       	movw	r20, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_GetPinValue+0xc2>
     e80:	55 95       	asr	r21
     e82:	47 95       	ror	r20
     e84:	8a 95       	dec	r24
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <DIO_GetPinValue+0xbe>
     e88:	ca 01       	movw	r24, r20
     e8a:	81 70       	andi	r24, 0x01	; 1
     e8c:	89 83       	std	Y+1, r24	; 0x01
     e8e:	14 c0       	rjmp	.+40     	; 0xeb8 <DIO_GetPinValue+0xf6>
			case PORTD_DIO: u8ResultLocal= GET_BIT(PIND_Register,u8PinIdCopy); break;
     e90:	e0 e3       	ldi	r30, 0x30	; 48
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	28 2f       	mov	r18, r24
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	88 2f       	mov	r24, r24
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	a9 01       	movw	r20, r18
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <DIO_GetPinValue+0xe6>
     ea4:	55 95       	asr	r21
     ea6:	47 95       	ror	r20
     ea8:	8a 95       	dec	r24
     eaa:	e2 f7       	brpl	.-8      	; 0xea4 <DIO_GetPinValue+0xe2>
     eac:	ca 01       	movw	r24, r20
     eae:	81 70       	andi	r24, 0x01	; 1
     eb0:	89 83       	std	Y+1, r24	; 0x01
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <DIO_GetPinValue+0xf6>
	}
	
	else
	{
		/* return 0xff in case of error in the Pin ID or PORT ID */
		u8ResultLocal = 0xFF;
     eb4:	8f ef       	ldi	r24, 0xFF	; 255
     eb6:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return u8ResultLocal;
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
}
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	08 95       	ret

00000eca <DIO_SetPinDirection>:

void DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	27 97       	sbiw	r28, 0x07	; 7
     ed4:	0f b6       	in	r0, 0x3f	; 63
     ed6:	f8 94       	cli
     ed8:	de bf       	out	0x3e, r29	; 62
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	cd bf       	out	0x3d, r28	; 61
     ede:	89 83       	std	Y+1, r24	; 0x01
     ee0:	6a 83       	std	Y+2, r22	; 0x02
     ee2:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD_DIO) && (u8PinIdCopy <= PIN7))
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	84 30       	cpi	r24, 0x04	; 4
     ee8:	08 f0       	brcs	.+2      	; 0xeec <DIO_SetPinDirection+0x22>
     eea:	ee c0       	rjmp	.+476    	; 0x10c8 <DIO_SetPinDirection+0x1fe>
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	88 30       	cpi	r24, 0x08	; 8
     ef0:	08 f0       	brcs	.+2      	; 0xef4 <DIO_SetPinDirection+0x2a>
     ef2:	ea c0       	rjmp	.+468    	; 0x10c8 <DIO_SetPinDirection+0x1fe>
	{
		if ( u8PinDirCopy == OUTPUT )
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	81 30       	cpi	r24, 0x01	; 1
     ef8:	09 f0       	breq	.+2      	; 0xefc <DIO_SetPinDirection+0x32>
     efa:	6f c0       	rjmp	.+222    	; 0xfda <DIO_SetPinDirection+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	3f 83       	std	Y+7, r19	; 0x07
     f04:	2e 83       	std	Y+6, r18	; 0x06
     f06:	8e 81       	ldd	r24, Y+6	; 0x06
     f08:	9f 81       	ldd	r25, Y+7	; 0x07
     f0a:	81 30       	cpi	r24, 0x01	; 1
     f0c:	91 05       	cpc	r25, r1
     f0e:	49 f1       	breq	.+82     	; 0xf62 <DIO_SetPinDirection+0x98>
     f10:	2e 81       	ldd	r18, Y+6	; 0x06
     f12:	3f 81       	ldd	r19, Y+7	; 0x07
     f14:	22 30       	cpi	r18, 0x02	; 2
     f16:	31 05       	cpc	r19, r1
     f18:	2c f4       	brge	.+10     	; 0xf24 <DIO_SetPinDirection+0x5a>
     f1a:	8e 81       	ldd	r24, Y+6	; 0x06
     f1c:	9f 81       	ldd	r25, Y+7	; 0x07
     f1e:	00 97       	sbiw	r24, 0x00	; 0
     f20:	61 f0       	breq	.+24     	; 0xf3a <DIO_SetPinDirection+0x70>
     f22:	d2 c0       	rjmp	.+420    	; 0x10c8 <DIO_SetPinDirection+0x1fe>
     f24:	2e 81       	ldd	r18, Y+6	; 0x06
     f26:	3f 81       	ldd	r19, Y+7	; 0x07
     f28:	22 30       	cpi	r18, 0x02	; 2
     f2a:	31 05       	cpc	r19, r1
     f2c:	71 f1       	breq	.+92     	; 0xf8a <DIO_SetPinDirection+0xc0>
     f2e:	8e 81       	ldd	r24, Y+6	; 0x06
     f30:	9f 81       	ldd	r25, Y+7	; 0x07
     f32:	83 30       	cpi	r24, 0x03	; 3
     f34:	91 05       	cpc	r25, r1
     f36:	e9 f1       	breq	.+122    	; 0xfb2 <DIO_SetPinDirection+0xe8>
     f38:	c7 c0       	rjmp	.+398    	; 0x10c8 <DIO_SetPinDirection+0x1fe>
			{
				case PORTA_DIO: SET_BIT(DDRA_Register,u8PinIdCopy); break;
     f3a:	aa e3       	ldi	r26, 0x3A	; 58
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	ea e3       	ldi	r30, 0x3A	; 58
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	48 2f       	mov	r20, r24
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 2e       	mov	r0, r18
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <DIO_SetPinDirection+0x8e>
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	0a 94       	dec	r0
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <DIO_SetPinDirection+0x8a>
     f5c:	84 2b       	or	r24, r20
     f5e:	8c 93       	st	X, r24
     f60:	b3 c0       	rjmp	.+358    	; 0x10c8 <DIO_SetPinDirection+0x1fe>
				case PORTB_DIO: SET_BIT(DDRB_Register,u8PinIdCopy); break;
     f62:	a7 e3       	ldi	r26, 0x37	; 55
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e7 e3       	ldi	r30, 0x37	; 55
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	48 2f       	mov	r20, r24
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 2e       	mov	r0, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <DIO_SetPinDirection+0xb6>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	0a 94       	dec	r0
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <DIO_SetPinDirection+0xb2>
     f84:	84 2b       	or	r24, r20
     f86:	8c 93       	st	X, r24
     f88:	9f c0       	rjmp	.+318    	; 0x10c8 <DIO_SetPinDirection+0x1fe>
				case PORTC_DIO: SET_BIT(DDRC_Register,u8PinIdCopy); break;
     f8a:	a4 e3       	ldi	r26, 0x34	; 52
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e4 e3       	ldi	r30, 0x34	; 52
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	48 2f       	mov	r20, r24
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	02 2e       	mov	r0, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <DIO_SetPinDirection+0xde>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	0a 94       	dec	r0
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <DIO_SetPinDirection+0xda>
     fac:	84 2b       	or	r24, r20
     fae:	8c 93       	st	X, r24
     fb0:	8b c0       	rjmp	.+278    	; 0x10c8 <DIO_SetPinDirection+0x1fe>
				case PORTD_DIO: SET_BIT(DDRD_Register,u8PinIdCopy); break;
     fb2:	a1 e3       	ldi	r26, 0x31	; 49
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e1 e3       	ldi	r30, 0x31	; 49
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 2e       	mov	r0, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <DIO_SetPinDirection+0x106>
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	0a 94       	dec	r0
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <DIO_SetPinDirection+0x102>
     fd4:	84 2b       	or	r24, r20
     fd6:	8c 93       	st	X, r24
     fd8:	77 c0       	rjmp	.+238    	; 0x10c8 <DIO_SetPinDirection+0x1fe>
			}
		}
		
		else if ( u8PinDirCopy == INPUT )
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	88 23       	and	r24, r24
     fde:	09 f0       	breq	.+2      	; 0xfe2 <DIO_SetPinDirection+0x118>
     fe0:	73 c0       	rjmp	.+230    	; 0x10c8 <DIO_SetPinDirection+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	3d 83       	std	Y+5, r19	; 0x05
     fea:	2c 83       	std	Y+4, r18	; 0x04
     fec:	8c 81       	ldd	r24, Y+4	; 0x04
     fee:	9d 81       	ldd	r25, Y+5	; 0x05
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	91 05       	cpc	r25, r1
     ff4:	59 f1       	breq	.+86     	; 0x104c <DIO_SetPinDirection+0x182>
     ff6:	2c 81       	ldd	r18, Y+4	; 0x04
     ff8:	3d 81       	ldd	r19, Y+5	; 0x05
     ffa:	22 30       	cpi	r18, 0x02	; 2
     ffc:	31 05       	cpc	r19, r1
     ffe:	2c f4       	brge	.+10     	; 0x100a <DIO_SetPinDirection+0x140>
    1000:	8c 81       	ldd	r24, Y+4	; 0x04
    1002:	9d 81       	ldd	r25, Y+5	; 0x05
    1004:	00 97       	sbiw	r24, 0x00	; 0
    1006:	69 f0       	breq	.+26     	; 0x1022 <DIO_SetPinDirection+0x158>
    1008:	5f c0       	rjmp	.+190    	; 0x10c8 <DIO_SetPinDirection+0x1fe>
    100a:	2c 81       	ldd	r18, Y+4	; 0x04
    100c:	3d 81       	ldd	r19, Y+5	; 0x05
    100e:	22 30       	cpi	r18, 0x02	; 2
    1010:	31 05       	cpc	r19, r1
    1012:	89 f1       	breq	.+98     	; 0x1076 <DIO_SetPinDirection+0x1ac>
    1014:	8c 81       	ldd	r24, Y+4	; 0x04
    1016:	9d 81       	ldd	r25, Y+5	; 0x05
    1018:	83 30       	cpi	r24, 0x03	; 3
    101a:	91 05       	cpc	r25, r1
    101c:	09 f4       	brne	.+2      	; 0x1020 <DIO_SetPinDirection+0x156>
    101e:	40 c0       	rjmp	.+128    	; 0x10a0 <DIO_SetPinDirection+0x1d6>
    1020:	53 c0       	rjmp	.+166    	; 0x10c8 <DIO_SetPinDirection+0x1fe>
			{
				case PORTA_DIO: CLR_BIT(DDRA_Register,u8PinIdCopy); break;
    1022:	aa e3       	ldi	r26, 0x3A	; 58
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	ea e3       	ldi	r30, 0x3A	; 58
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	48 2f       	mov	r20, r24
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 2e       	mov	r0, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <DIO_SetPinDirection+0x176>
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	0a 94       	dec	r0
    1042:	e2 f7       	brpl	.-8      	; 0x103c <DIO_SetPinDirection+0x172>
    1044:	80 95       	com	r24
    1046:	84 23       	and	r24, r20
    1048:	8c 93       	st	X, r24
    104a:	3e c0       	rjmp	.+124    	; 0x10c8 <DIO_SetPinDirection+0x1fe>
				case PORTB_DIO: CLR_BIT(DDRB_Register,u8PinIdCopy); break;
    104c:	a7 e3       	ldi	r26, 0x37	; 55
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e7 e3       	ldi	r30, 0x37	; 55
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	48 2f       	mov	r20, r24
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 2e       	mov	r0, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DIO_SetPinDirection+0x1a0>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	0a 94       	dec	r0
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <DIO_SetPinDirection+0x19c>
    106e:	80 95       	com	r24
    1070:	84 23       	and	r24, r20
    1072:	8c 93       	st	X, r24
    1074:	29 c0       	rjmp	.+82     	; 0x10c8 <DIO_SetPinDirection+0x1fe>
				case PORTC_DIO: CLR_BIT(DDRC_Register,u8PinIdCopy); break;
    1076:	a4 e3       	ldi	r26, 0x34	; 52
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e4 e3       	ldi	r30, 0x34	; 52
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	48 2f       	mov	r20, r24
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	02 2e       	mov	r0, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <DIO_SetPinDirection+0x1ca>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	0a 94       	dec	r0
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <DIO_SetPinDirection+0x1c6>
    1098:	80 95       	com	r24
    109a:	84 23       	and	r24, r20
    109c:	8c 93       	st	X, r24
    109e:	14 c0       	rjmp	.+40     	; 0x10c8 <DIO_SetPinDirection+0x1fe>
				case PORTD_DIO: CLR_BIT(DDRD_Register,u8PinIdCopy); break;
    10a0:	a1 e3       	ldi	r26, 0x31	; 49
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e1 e3       	ldi	r30, 0x31	; 49
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	48 2f       	mov	r20, r24
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	02 2e       	mov	r0, r18
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <DIO_SetPinDirection+0x1f4>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	0a 94       	dec	r0
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <DIO_SetPinDirection+0x1f0>
    10c2:	80 95       	com	r24
    10c4:	84 23       	and	r24, r20
    10c6:	8c 93       	st	X, r24
	
	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
    10c8:	27 96       	adiw	r28, 0x07	; 7
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	f8 94       	cli
    10ce:	de bf       	out	0x3e, r29	; 62
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	cd bf       	out	0x3d, r28	; 61
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <DIO_SetPortDirection>:


/* IO Ports */
void DIO_SetPortDirection (u8 u8PortId, u8 u8PortDir)
{
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	00 d0       	rcall	.+0      	; 0x10e0 <DIO_SetPortDirection+0x6>
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <DIO_SetPortDirection+0x8>
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	89 83       	std	Y+1, r24	; 0x01
    10e8:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	3c 83       	std	Y+4, r19	; 0x04
    10f2:	2b 83       	std	Y+3, r18	; 0x03
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	9c 81       	ldd	r25, Y+4	; 0x04
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	91 05       	cpc	r25, r1
    10fc:	d1 f0       	breq	.+52     	; 0x1132 <DIO_SetPortDirection+0x58>
    10fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1100:	3c 81       	ldd	r19, Y+4	; 0x04
    1102:	22 30       	cpi	r18, 0x02	; 2
    1104:	31 05       	cpc	r19, r1
    1106:	2c f4       	brge	.+10     	; 0x1112 <DIO_SetPortDirection+0x38>
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	9c 81       	ldd	r25, Y+4	; 0x04
    110c:	00 97       	sbiw	r24, 0x00	; 0
    110e:	61 f0       	breq	.+24     	; 0x1128 <DIO_SetPortDirection+0x4e>
    1110:	1e c0       	rjmp	.+60     	; 0x114e <DIO_SetPortDirection+0x74>
    1112:	2b 81       	ldd	r18, Y+3	; 0x03
    1114:	3c 81       	ldd	r19, Y+4	; 0x04
    1116:	22 30       	cpi	r18, 0x02	; 2
    1118:	31 05       	cpc	r19, r1
    111a:	81 f0       	breq	.+32     	; 0x113c <DIO_SetPortDirection+0x62>
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	9c 81       	ldd	r25, Y+4	; 0x04
    1120:	83 30       	cpi	r24, 0x03	; 3
    1122:	91 05       	cpc	r25, r1
    1124:	81 f0       	breq	.+32     	; 0x1146 <DIO_SetPortDirection+0x6c>
    1126:	13 c0       	rjmp	.+38     	; 0x114e <DIO_SetPortDirection+0x74>
	{
			case PORTA_DIO: DDRA_Register = u8PortDir; break;
    1128:	ea e3       	ldi	r30, 0x3A	; 58
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	80 83       	st	Z, r24
    1130:	0e c0       	rjmp	.+28     	; 0x114e <DIO_SetPortDirection+0x74>
			case PORTB_DIO: DDRB_Register = u8PortDir; break;
    1132:	e7 e3       	ldi	r30, 0x37	; 55
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	80 83       	st	Z, r24
    113a:	09 c0       	rjmp	.+18     	; 0x114e <DIO_SetPortDirection+0x74>
			case PORTC_DIO: DDRC_Register = u8PortDir; break;
    113c:	e4 e3       	ldi	r30, 0x34	; 52
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	80 83       	st	Z, r24
    1144:	04 c0       	rjmp	.+8      	; 0x114e <DIO_SetPortDirection+0x74>
			case PORTD_DIO: DDRD_Register = u8PortDir; break;
    1146:	e1 e3       	ldi	r30, 0x31	; 49
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	80 83       	st	Z, r24
		default: /* Wrong Port ID */       break;
	}
}
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <DIO_SetPortValue>:

void DIO_SetPortValue (u8 u8PortId, u8 u8PortVal)
{
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	00 d0       	rcall	.+0      	; 0x1162 <DIO_SetPortValue+0x6>
    1162:	00 d0       	rcall	.+0      	; 0x1164 <DIO_SetPortValue+0x8>
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	89 83       	std	Y+1, r24	; 0x01
    116a:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	3c 83       	std	Y+4, r19	; 0x04
    1174:	2b 83       	std	Y+3, r18	; 0x03
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	9c 81       	ldd	r25, Y+4	; 0x04
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	91 05       	cpc	r25, r1
    117e:	d1 f0       	breq	.+52     	; 0x11b4 <DIO_SetPortValue+0x58>
    1180:	2b 81       	ldd	r18, Y+3	; 0x03
    1182:	3c 81       	ldd	r19, Y+4	; 0x04
    1184:	22 30       	cpi	r18, 0x02	; 2
    1186:	31 05       	cpc	r19, r1
    1188:	2c f4       	brge	.+10     	; 0x1194 <DIO_SetPortValue+0x38>
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	9c 81       	ldd	r25, Y+4	; 0x04
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	61 f0       	breq	.+24     	; 0x11aa <DIO_SetPortValue+0x4e>
    1192:	1e c0       	rjmp	.+60     	; 0x11d0 <DIO_SetPortValue+0x74>
    1194:	2b 81       	ldd	r18, Y+3	; 0x03
    1196:	3c 81       	ldd	r19, Y+4	; 0x04
    1198:	22 30       	cpi	r18, 0x02	; 2
    119a:	31 05       	cpc	r19, r1
    119c:	81 f0       	breq	.+32     	; 0x11be <DIO_SetPortValue+0x62>
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	9c 81       	ldd	r25, Y+4	; 0x04
    11a2:	83 30       	cpi	r24, 0x03	; 3
    11a4:	91 05       	cpc	r25, r1
    11a6:	81 f0       	breq	.+32     	; 0x11c8 <DIO_SetPortValue+0x6c>
    11a8:	13 c0       	rjmp	.+38     	; 0x11d0 <DIO_SetPortValue+0x74>
	{
			case PORTA_DIO: PORTA_Register = u8PortVal; break;
    11aa:	eb e3       	ldi	r30, 0x3B	; 59
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	80 83       	st	Z, r24
    11b2:	0e c0       	rjmp	.+28     	; 0x11d0 <DIO_SetPortValue+0x74>
			case PORTB_DIO: PORTB_Register = u8PortVal; break;
    11b4:	e8 e3       	ldi	r30, 0x38	; 56
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	80 83       	st	Z, r24
    11bc:	09 c0       	rjmp	.+18     	; 0x11d0 <DIO_SetPortValue+0x74>
			case PORTC_DIO: PORTC_Register = u8PortVal; break;
    11be:	e5 e3       	ldi	r30, 0x35	; 53
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	80 83       	st	Z, r24
    11c6:	04 c0       	rjmp	.+8      	; 0x11d0 <DIO_SetPortValue+0x74>
			case PORTD_DIO: PORTD_Register = u8PortVal; break;
    11c8:	e2 e3       	ldi	r30, 0x32	; 50
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	80 83       	st	Z, r24
		default: /* Wrong Port ID */        break;
	}
}
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <LCD_vidWriteCommand>:
#include "LCD_int.h"
#include "LCD_Config.h"


/****************************************************************/
void LCD_vidWriteCommand (u8 u8CmdCpy) {
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	2f 97       	sbiw	r28, 0x0f	; 15
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	de bf       	out	0x3e, r29	; 62
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	cd bf       	out	0x3d, r28	; 61
    11f2:	8f 87       	std	Y+15, r24	; 0x0f
	  // Set RS = 0
	  DIO_SetPinValue(Ctrl_PORT , RS, LOW);
    11f4:	83 e0       	ldi	r24, 0x03	; 3
    11f6:	61 e0       	ldi	r22, 0x01	; 1
    11f8:	40 e0       	ldi	r20, 0x00	; 0
    11fa:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <DIO_SetPinValue>

	  // Set R/W = 0
	  DIO_SetPinValue(Ctrl_PORT , RW, LOW);
    11fe:	83 e0       	ldi	r24, 0x03	; 3
    1200:	62 e0       	ldi	r22, 0x02	; 2
    1202:	40 e0       	ldi	r20, 0x00	; 0
    1204:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <DIO_SetPinValue>

	  // Set EN = 0
	  DIO_SetPinValue(Ctrl_PORT , E, HIGH);
    1208:	83 e0       	ldi	r24, 0x03	; 3
    120a:	63 e0       	ldi	r22, 0x03	; 3
    120c:	41 e0       	ldi	r20, 0x01	; 1
    120e:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <DIO_SetPinValue>

	  DIO_SetPortValue (Buff_PORT,u8CmdCpy);
    1212:	82 e0       	ldi	r24, 0x02	; 2
    1214:	6f 85       	ldd	r22, Y+15	; 0x0f
    1216:	0e 94 ae 08 	call	0x115c	; 0x115c <DIO_SetPortValue>

	  // set EN to 1 after settting command
	  // pulse
	  DIO_SetPinValue(Ctrl_PORT , E, LOW);
    121a:	83 e0       	ldi	r24, 0x03	; 3
    121c:	63 e0       	ldi	r22, 0x03	; 3
    121e:	40 e0       	ldi	r20, 0x00	; 0
    1220:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <DIO_SetPinValue>
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	a0 e2       	ldi	r26, 0x20	; 32
    122a:	b1 e4       	ldi	r27, 0x41	; 65
    122c:	8b 87       	std	Y+11, r24	; 0x0b
    122e:	9c 87       	std	Y+12, r25	; 0x0c
    1230:	ad 87       	std	Y+13, r26	; 0x0d
    1232:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1234:	6b 85       	ldd	r22, Y+11	; 0x0b
    1236:	7c 85       	ldd	r23, Y+12	; 0x0c
    1238:	8d 85       	ldd	r24, Y+13	; 0x0d
    123a:	9e 85       	ldd	r25, Y+14	; 0x0e
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e8       	ldi	r19, 0x80	; 128
    1240:	4b e3       	ldi	r20, 0x3B	; 59
    1242:	55 e4       	ldi	r21, 0x45	; 69
    1244:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1248:	dc 01       	movw	r26, r24
    124a:	cb 01       	movw	r24, r22
    124c:	8f 83       	std	Y+7, r24	; 0x07
    124e:	98 87       	std	Y+8, r25	; 0x08
    1250:	a9 87       	std	Y+9, r26	; 0x09
    1252:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1254:	6f 81       	ldd	r22, Y+7	; 0x07
    1256:	78 85       	ldd	r23, Y+8	; 0x08
    1258:	89 85       	ldd	r24, Y+9	; 0x09
    125a:	9a 85       	ldd	r25, Y+10	; 0x0a
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	40 e8       	ldi	r20, 0x80	; 128
    1262:	5f e3       	ldi	r21, 0x3F	; 63
    1264:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1268:	88 23       	and	r24, r24
    126a:	2c f4       	brge	.+10     	; 0x1276 <LCD_vidWriteCommand+0x98>
		__ticks = 1;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	9e 83       	std	Y+6, r25	; 0x06
    1272:	8d 83       	std	Y+5, r24	; 0x05
    1274:	3f c0       	rjmp	.+126    	; 0x12f4 <LCD_vidWriteCommand+0x116>
	else if (__tmp > 65535)
    1276:	6f 81       	ldd	r22, Y+7	; 0x07
    1278:	78 85       	ldd	r23, Y+8	; 0x08
    127a:	89 85       	ldd	r24, Y+9	; 0x09
    127c:	9a 85       	ldd	r25, Y+10	; 0x0a
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	3f ef       	ldi	r19, 0xFF	; 255
    1282:	4f e7       	ldi	r20, 0x7F	; 127
    1284:	57 e4       	ldi	r21, 0x47	; 71
    1286:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    128a:	18 16       	cp	r1, r24
    128c:	4c f5       	brge	.+82     	; 0x12e0 <LCD_vidWriteCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    128e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1290:	7c 85       	ldd	r23, Y+12	; 0x0c
    1292:	8d 85       	ldd	r24, Y+13	; 0x0d
    1294:	9e 85       	ldd	r25, Y+14	; 0x0e
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	40 e2       	ldi	r20, 0x20	; 32
    129c:	51 e4       	ldi	r21, 0x41	; 65
    129e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	bc 01       	movw	r22, r24
    12a8:	cd 01       	movw	r24, r26
    12aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12ae:	dc 01       	movw	r26, r24
    12b0:	cb 01       	movw	r24, r22
    12b2:	9e 83       	std	Y+6, r25	; 0x06
    12b4:	8d 83       	std	Y+5, r24	; 0x05
    12b6:	0f c0       	rjmp	.+30     	; 0x12d6 <LCD_vidWriteCommand+0xf8>
    12b8:	8c e2       	ldi	r24, 0x2C	; 44
    12ba:	91 e0       	ldi	r25, 0x01	; 1
    12bc:	9c 83       	std	Y+4, r25	; 0x04
    12be:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	9c 81       	ldd	r25, Y+4	; 0x04
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	f1 f7       	brne	.-4      	; 0x12c4 <LCD_vidWriteCommand+0xe6>
    12c8:	9c 83       	std	Y+4, r25	; 0x04
    12ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12cc:	8d 81       	ldd	r24, Y+5	; 0x05
    12ce:	9e 81       	ldd	r25, Y+6	; 0x06
    12d0:	01 97       	sbiw	r24, 0x01	; 1
    12d2:	9e 83       	std	Y+6, r25	; 0x06
    12d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d6:	8d 81       	ldd	r24, Y+5	; 0x05
    12d8:	9e 81       	ldd	r25, Y+6	; 0x06
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	69 f7       	brne	.-38     	; 0x12b8 <LCD_vidWriteCommand+0xda>
    12de:	14 c0       	rjmp	.+40     	; 0x1308 <LCD_vidWriteCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12e0:	6f 81       	ldd	r22, Y+7	; 0x07
    12e2:	78 85       	ldd	r23, Y+8	; 0x08
    12e4:	89 85       	ldd	r24, Y+9	; 0x09
    12e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12ec:	dc 01       	movw	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	9e 83       	std	Y+6, r25	; 0x06
    12f2:	8d 83       	std	Y+5, r24	; 0x05
    12f4:	8d 81       	ldd	r24, Y+5	; 0x05
    12f6:	9e 81       	ldd	r25, Y+6	; 0x06
    12f8:	9a 83       	std	Y+2, r25	; 0x02
    12fa:	89 83       	std	Y+1, r24	; 0x01
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1300:	01 97       	sbiw	r24, 0x01	; 1
    1302:	f1 f7       	brne	.-4      	; 0x1300 <LCD_vidWriteCommand+0x122>
    1304:	9a 83       	std	Y+2, r25	; 0x02
    1306:	89 83       	std	Y+1, r24	; 0x01
	  _delay_ms(10);
	  DIO_SetPinValue(Ctrl_PORT , E, HIGH);
    1308:	83 e0       	ldi	r24, 0x03	; 3
    130a:	63 e0       	ldi	r22, 0x03	; 3
    130c:	41 e0       	ldi	r20, 0x01	; 1
    130e:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <DIO_SetPinValue>

  }
    1312:	2f 96       	adiw	r28, 0x0f	; 15
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <LCD_vidInitialize>:


/****************************************************************/


void LCD_vidInitialize(void){
    1324:	0f 93       	push	r16
    1326:	1f 93       	push	r17
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    1330:	c6 54       	subi	r28, 0x46	; 70
    1332:	d0 40       	sbci	r29, 0x00	; 0
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	f8 94       	cli
    1338:	de bf       	out	0x3e, r29	; 62
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	cd bf       	out	0x3d, r28	; 61


	/****************  LCD Configuration  *****************/

			  // SET VDD TO D0   5 Volt (D0 >> VDD)
			  DIO_SetPinDirection (Ctrl_PORT, VDD , HIGH);
    133e:	83 e0       	ldi	r24, 0x03	; 3
    1340:	60 e0       	ldi	r22, 0x00	; 0
    1342:	41 e0       	ldi	r20, 0x01	; 1
    1344:	0e 94 65 07 	call	0xeca	; 0xeca <DIO_SetPinDirection>

			  //  RS >> D1
			  DIO_SetPinDirection (Ctrl_PORT, RS, HIGH);
    1348:	83 e0       	ldi	r24, 0x03	; 3
    134a:	61 e0       	ldi	r22, 0x01	; 1
    134c:	41 e0       	ldi	r20, 0x01	; 1
    134e:	0e 94 65 07 	call	0xeca	; 0xeca <DIO_SetPinDirection>

			  //  R/W >> D2
			  DIO_SetPinDirection (Ctrl_PORT, RW, HIGH);
    1352:	83 e0       	ldi	r24, 0x03	; 3
    1354:	62 e0       	ldi	r22, 0x02	; 2
    1356:	41 e0       	ldi	r20, 0x01	; 1
    1358:	0e 94 65 07 	call	0xeca	; 0xeca <DIO_SetPinDirection>

			  //  Enable >> D3
			   DIO_SetPinDirection (Ctrl_PORT, E, HIGH);
    135c:	83 e0       	ldi	r24, 0x03	; 3
    135e:	63 e0       	ldi	r22, 0x03	; 3
    1360:	41 e0       	ldi	r20, 0x01	; 1
    1362:	0e 94 65 07 	call	0xeca	; 0xeca <DIO_SetPinDirection>


			  //SET PORTC AS OUTPUT (PORTC >> DB0...DB7)
			  DIO_SetPortDirection (Buff_PORT, 0XFF);
    1366:	82 e0       	ldi	r24, 0x02	; 2
    1368:	6f ef       	ldi	r22, 0xFF	; 255
    136a:	0e 94 6d 08 	call	0x10da	; 0x10da <DIO_SetPortDirection>

	  /***************************************************************/

	 // set VDD @ A0 to 5 volt
	  DIO_SetPinValue(Ctrl_PORT , VDD, HIGH);
    136e:	83 e0       	ldi	r24, 0x03	; 3
    1370:	60 e0       	ldi	r22, 0x00	; 0
    1372:	41 e0       	ldi	r20, 0x01	; 1
    1374:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <DIO_SetPinValue>
    1378:	fe 01       	movw	r30, r28
    137a:	ed 5b       	subi	r30, 0xBD	; 189
    137c:	ff 4f       	sbci	r31, 0xFF	; 255
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	a8 e4       	ldi	r26, 0x48	; 72
    1384:	b2 e4       	ldi	r27, 0x42	; 66
    1386:	80 83       	st	Z, r24
    1388:	91 83       	std	Z+1, r25	; 0x01
    138a:	a2 83       	std	Z+2, r26	; 0x02
    138c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    138e:	8e 01       	movw	r16, r28
    1390:	01 5c       	subi	r16, 0xC1	; 193
    1392:	1f 4f       	sbci	r17, 0xFF	; 255
    1394:	fe 01       	movw	r30, r28
    1396:	ed 5b       	subi	r30, 0xBD	; 189
    1398:	ff 4f       	sbci	r31, 0xFF	; 255
    139a:	60 81       	ld	r22, Z
    139c:	71 81       	ldd	r23, Z+1	; 0x01
    139e:	82 81       	ldd	r24, Z+2	; 0x02
    13a0:	93 81       	ldd	r25, Z+3	; 0x03
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e8       	ldi	r19, 0x80	; 128
    13a6:	4b e3       	ldi	r20, 0x3B	; 59
    13a8:	55 e4       	ldi	r21, 0x45	; 69
    13aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	f8 01       	movw	r30, r16
    13b4:	80 83       	st	Z, r24
    13b6:	91 83       	std	Z+1, r25	; 0x01
    13b8:	a2 83       	std	Z+2, r26	; 0x02
    13ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13bc:	fe 01       	movw	r30, r28
    13be:	ff 96       	adiw	r30, 0x3f	; 63
    13c0:	60 81       	ld	r22, Z
    13c2:	71 81       	ldd	r23, Z+1	; 0x01
    13c4:	82 81       	ldd	r24, Z+2	; 0x02
    13c6:	93 81       	ldd	r25, Z+3	; 0x03
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	40 e8       	ldi	r20, 0x80	; 128
    13ce:	5f e3       	ldi	r21, 0x3F	; 63
    13d0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    13d4:	88 23       	and	r24, r24
    13d6:	2c f4       	brge	.+10     	; 0x13e2 <LCD_vidInitialize+0xbe>
		__ticks = 1;
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	9e af       	std	Y+62, r25	; 0x3e
    13de:	8d af       	std	Y+61, r24	; 0x3d
    13e0:	46 c0       	rjmp	.+140    	; 0x146e <LCD_vidInitialize+0x14a>
	else if (__tmp > 65535)
    13e2:	fe 01       	movw	r30, r28
    13e4:	ff 96       	adiw	r30, 0x3f	; 63
    13e6:	60 81       	ld	r22, Z
    13e8:	71 81       	ldd	r23, Z+1	; 0x01
    13ea:	82 81       	ldd	r24, Z+2	; 0x02
    13ec:	93 81       	ldd	r25, Z+3	; 0x03
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	3f ef       	ldi	r19, 0xFF	; 255
    13f2:	4f e7       	ldi	r20, 0x7F	; 127
    13f4:	57 e4       	ldi	r21, 0x47	; 71
    13f6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13fa:	18 16       	cp	r1, r24
    13fc:	64 f5       	brge	.+88     	; 0x1456 <LCD_vidInitialize+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13fe:	fe 01       	movw	r30, r28
    1400:	ed 5b       	subi	r30, 0xBD	; 189
    1402:	ff 4f       	sbci	r31, 0xFF	; 255
    1404:	60 81       	ld	r22, Z
    1406:	71 81       	ldd	r23, Z+1	; 0x01
    1408:	82 81       	ldd	r24, Z+2	; 0x02
    140a:	93 81       	ldd	r25, Z+3	; 0x03
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	40 e2       	ldi	r20, 0x20	; 32
    1412:	51 e4       	ldi	r21, 0x41	; 65
    1414:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1418:	dc 01       	movw	r26, r24
    141a:	cb 01       	movw	r24, r22
    141c:	bc 01       	movw	r22, r24
    141e:	cd 01       	movw	r24, r26
    1420:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	9e af       	std	Y+62, r25	; 0x3e
    142a:	8d af       	std	Y+61, r24	; 0x3d
    142c:	0f c0       	rjmp	.+30     	; 0x144c <LCD_vidInitialize+0x128>
    142e:	8c e2       	ldi	r24, 0x2C	; 44
    1430:	91 e0       	ldi	r25, 0x01	; 1
    1432:	9c af       	std	Y+60, r25	; 0x3c
    1434:	8b af       	std	Y+59, r24	; 0x3b
    1436:	8b ad       	ldd	r24, Y+59	; 0x3b
    1438:	9c ad       	ldd	r25, Y+60	; 0x3c
    143a:	01 97       	sbiw	r24, 0x01	; 1
    143c:	f1 f7       	brne	.-4      	; 0x143a <LCD_vidInitialize+0x116>
    143e:	9c af       	std	Y+60, r25	; 0x3c
    1440:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1442:	8d ad       	ldd	r24, Y+61	; 0x3d
    1444:	9e ad       	ldd	r25, Y+62	; 0x3e
    1446:	01 97       	sbiw	r24, 0x01	; 1
    1448:	9e af       	std	Y+62, r25	; 0x3e
    144a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144c:	8d ad       	ldd	r24, Y+61	; 0x3d
    144e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	69 f7       	brne	.-38     	; 0x142e <LCD_vidInitialize+0x10a>
    1454:	16 c0       	rjmp	.+44     	; 0x1482 <LCD_vidInitialize+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1456:	fe 01       	movw	r30, r28
    1458:	ff 96       	adiw	r30, 0x3f	; 63
    145a:	60 81       	ld	r22, Z
    145c:	71 81       	ldd	r23, Z+1	; 0x01
    145e:	82 81       	ldd	r24, Z+2	; 0x02
    1460:	93 81       	ldd	r25, Z+3	; 0x03
    1462:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1466:	dc 01       	movw	r26, r24
    1468:	cb 01       	movw	r24, r22
    146a:	9e af       	std	Y+62, r25	; 0x3e
    146c:	8d af       	std	Y+61, r24	; 0x3d
    146e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1470:	9e ad       	ldd	r25, Y+62	; 0x3e
    1472:	9a af       	std	Y+58, r25	; 0x3a
    1474:	89 af       	std	Y+57, r24	; 0x39
    1476:	89 ad       	ldd	r24, Y+57	; 0x39
    1478:	9a ad       	ldd	r25, Y+58	; 0x3a
    147a:	01 97       	sbiw	r24, 0x01	; 1
    147c:	f1 f7       	brne	.-4      	; 0x147a <LCD_vidInitialize+0x156>
    147e:	9a af       	std	Y+58, r25	; 0x3a
    1480:	89 af       	std	Y+57, r24	; 0x39
	  _delay_ms(50);



	 // FUNCTION SET
	  LCD_vidWriteCommand (0b00111000);//0X38  // N=0 1 line 0b00110000
    1482:	88 e3       	ldi	r24, 0x38	; 56
    1484:	0e 94 ef 08 	call	0x11de	; 0x11de <LCD_vidWriteCommand>
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	a0 e2       	ldi	r26, 0x20	; 32
    148e:	b1 e4       	ldi	r27, 0x41	; 65
    1490:	8d ab       	std	Y+53, r24	; 0x35
    1492:	9e ab       	std	Y+54, r25	; 0x36
    1494:	af ab       	std	Y+55, r26	; 0x37
    1496:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1498:	6d a9       	ldd	r22, Y+53	; 0x35
    149a:	7e a9       	ldd	r23, Y+54	; 0x36
    149c:	8f a9       	ldd	r24, Y+55	; 0x37
    149e:	98 ad       	ldd	r25, Y+56	; 0x38
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e8       	ldi	r19, 0x80	; 128
    14a4:	4b e3       	ldi	r20, 0x3B	; 59
    14a6:	55 e4       	ldi	r21, 0x45	; 69
    14a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	89 ab       	std	Y+49, r24	; 0x31
    14b2:	9a ab       	std	Y+50, r25	; 0x32
    14b4:	ab ab       	std	Y+51, r26	; 0x33
    14b6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14b8:	69 a9       	ldd	r22, Y+49	; 0x31
    14ba:	7a a9       	ldd	r23, Y+50	; 0x32
    14bc:	8b a9       	ldd	r24, Y+51	; 0x33
    14be:	9c a9       	ldd	r25, Y+52	; 0x34
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	40 e8       	ldi	r20, 0x80	; 128
    14c6:	5f e3       	ldi	r21, 0x3F	; 63
    14c8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14cc:	88 23       	and	r24, r24
    14ce:	2c f4       	brge	.+10     	; 0x14da <LCD_vidInitialize+0x1b6>
		__ticks = 1;
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	98 ab       	std	Y+48, r25	; 0x30
    14d6:	8f a7       	std	Y+47, r24	; 0x2f
    14d8:	3f c0       	rjmp	.+126    	; 0x1558 <LCD_vidInitialize+0x234>
	else if (__tmp > 65535)
    14da:	69 a9       	ldd	r22, Y+49	; 0x31
    14dc:	7a a9       	ldd	r23, Y+50	; 0x32
    14de:	8b a9       	ldd	r24, Y+51	; 0x33
    14e0:	9c a9       	ldd	r25, Y+52	; 0x34
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	3f ef       	ldi	r19, 0xFF	; 255
    14e6:	4f e7       	ldi	r20, 0x7F	; 127
    14e8:	57 e4       	ldi	r21, 0x47	; 71
    14ea:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    14ee:	18 16       	cp	r1, r24
    14f0:	4c f5       	brge	.+82     	; 0x1544 <LCD_vidInitialize+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14f2:	6d a9       	ldd	r22, Y+53	; 0x35
    14f4:	7e a9       	ldd	r23, Y+54	; 0x36
    14f6:	8f a9       	ldd	r24, Y+55	; 0x37
    14f8:	98 ad       	ldd	r25, Y+56	; 0x38
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	40 e2       	ldi	r20, 0x20	; 32
    1500:	51 e4       	ldi	r21, 0x41	; 65
    1502:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	bc 01       	movw	r22, r24
    150c:	cd 01       	movw	r24, r26
    150e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1512:	dc 01       	movw	r26, r24
    1514:	cb 01       	movw	r24, r22
    1516:	98 ab       	std	Y+48, r25	; 0x30
    1518:	8f a7       	std	Y+47, r24	; 0x2f
    151a:	0f c0       	rjmp	.+30     	; 0x153a <LCD_vidInitialize+0x216>
    151c:	8c e2       	ldi	r24, 0x2C	; 44
    151e:	91 e0       	ldi	r25, 0x01	; 1
    1520:	9e a7       	std	Y+46, r25	; 0x2e
    1522:	8d a7       	std	Y+45, r24	; 0x2d
    1524:	8d a5       	ldd	r24, Y+45	; 0x2d
    1526:	9e a5       	ldd	r25, Y+46	; 0x2e
    1528:	01 97       	sbiw	r24, 0x01	; 1
    152a:	f1 f7       	brne	.-4      	; 0x1528 <LCD_vidInitialize+0x204>
    152c:	9e a7       	std	Y+46, r25	; 0x2e
    152e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1530:	8f a5       	ldd	r24, Y+47	; 0x2f
    1532:	98 a9       	ldd	r25, Y+48	; 0x30
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	98 ab       	std	Y+48, r25	; 0x30
    1538:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    153a:	8f a5       	ldd	r24, Y+47	; 0x2f
    153c:	98 a9       	ldd	r25, Y+48	; 0x30
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	69 f7       	brne	.-38     	; 0x151c <LCD_vidInitialize+0x1f8>
    1542:	14 c0       	rjmp	.+40     	; 0x156c <LCD_vidInitialize+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1544:	69 a9       	ldd	r22, Y+49	; 0x31
    1546:	7a a9       	ldd	r23, Y+50	; 0x32
    1548:	8b a9       	ldd	r24, Y+51	; 0x33
    154a:	9c a9       	ldd	r25, Y+52	; 0x34
    154c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1550:	dc 01       	movw	r26, r24
    1552:	cb 01       	movw	r24, r22
    1554:	98 ab       	std	Y+48, r25	; 0x30
    1556:	8f a7       	std	Y+47, r24	; 0x2f
    1558:	8f a5       	ldd	r24, Y+47	; 0x2f
    155a:	98 a9       	ldd	r25, Y+48	; 0x30
    155c:	9c a7       	std	Y+44, r25	; 0x2c
    155e:	8b a7       	std	Y+43, r24	; 0x2b
    1560:	8b a5       	ldd	r24, Y+43	; 0x2b
    1562:	9c a5       	ldd	r25, Y+44	; 0x2c
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	f1 f7       	brne	.-4      	; 0x1564 <LCD_vidInitialize+0x240>
    1568:	9c a7       	std	Y+44, r25	; 0x2c
    156a:	8b a7       	std	Y+43, r24	; 0x2b
	  _delay_ms (10);


	  // DISPLAY ON/OFF CONTROL
	  LCD_vidWriteCommand (0b00001111);
    156c:	8f e0       	ldi	r24, 0x0F	; 15
    156e:	0e 94 ef 08 	call	0x11de	; 0x11de <LCD_vidWriteCommand>
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	a0 e2       	ldi	r26, 0x20	; 32
    1578:	b1 e4       	ldi	r27, 0x41	; 65
    157a:	8f a3       	std	Y+39, r24	; 0x27
    157c:	98 a7       	std	Y+40, r25	; 0x28
    157e:	a9 a7       	std	Y+41, r26	; 0x29
    1580:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1582:	6f a1       	ldd	r22, Y+39	; 0x27
    1584:	78 a5       	ldd	r23, Y+40	; 0x28
    1586:	89 a5       	ldd	r24, Y+41	; 0x29
    1588:	9a a5       	ldd	r25, Y+42	; 0x2a
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e8       	ldi	r19, 0x80	; 128
    158e:	4b e3       	ldi	r20, 0x3B	; 59
    1590:	55 e4       	ldi	r21, 0x45	; 69
    1592:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	8b a3       	std	Y+35, r24	; 0x23
    159c:	9c a3       	std	Y+36, r25	; 0x24
    159e:	ad a3       	std	Y+37, r26	; 0x25
    15a0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15a2:	6b a1       	ldd	r22, Y+35	; 0x23
    15a4:	7c a1       	ldd	r23, Y+36	; 0x24
    15a6:	8d a1       	ldd	r24, Y+37	; 0x25
    15a8:	9e a1       	ldd	r25, Y+38	; 0x26
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	40 e8       	ldi	r20, 0x80	; 128
    15b0:	5f e3       	ldi	r21, 0x3F	; 63
    15b2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15b6:	88 23       	and	r24, r24
    15b8:	2c f4       	brge	.+10     	; 0x15c4 <LCD_vidInitialize+0x2a0>
		__ticks = 1;
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	9a a3       	std	Y+34, r25	; 0x22
    15c0:	89 a3       	std	Y+33, r24	; 0x21
    15c2:	3f c0       	rjmp	.+126    	; 0x1642 <LCD_vidInitialize+0x31e>
	else if (__tmp > 65535)
    15c4:	6b a1       	ldd	r22, Y+35	; 0x23
    15c6:	7c a1       	ldd	r23, Y+36	; 0x24
    15c8:	8d a1       	ldd	r24, Y+37	; 0x25
    15ca:	9e a1       	ldd	r25, Y+38	; 0x26
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	3f ef       	ldi	r19, 0xFF	; 255
    15d0:	4f e7       	ldi	r20, 0x7F	; 127
    15d2:	57 e4       	ldi	r21, 0x47	; 71
    15d4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15d8:	18 16       	cp	r1, r24
    15da:	4c f5       	brge	.+82     	; 0x162e <LCD_vidInitialize+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15dc:	6f a1       	ldd	r22, Y+39	; 0x27
    15de:	78 a5       	ldd	r23, Y+40	; 0x28
    15e0:	89 a5       	ldd	r24, Y+41	; 0x29
    15e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	40 e2       	ldi	r20, 0x20	; 32
    15ea:	51 e4       	ldi	r21, 0x41	; 65
    15ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	bc 01       	movw	r22, r24
    15f6:	cd 01       	movw	r24, r26
    15f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15fc:	dc 01       	movw	r26, r24
    15fe:	cb 01       	movw	r24, r22
    1600:	9a a3       	std	Y+34, r25	; 0x22
    1602:	89 a3       	std	Y+33, r24	; 0x21
    1604:	0f c0       	rjmp	.+30     	; 0x1624 <LCD_vidInitialize+0x300>
    1606:	8c e2       	ldi	r24, 0x2C	; 44
    1608:	91 e0       	ldi	r25, 0x01	; 1
    160a:	98 a3       	std	Y+32, r25	; 0x20
    160c:	8f 8f       	std	Y+31, r24	; 0x1f
    160e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1610:	98 a1       	ldd	r25, Y+32	; 0x20
    1612:	01 97       	sbiw	r24, 0x01	; 1
    1614:	f1 f7       	brne	.-4      	; 0x1612 <LCD_vidInitialize+0x2ee>
    1616:	98 a3       	std	Y+32, r25	; 0x20
    1618:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    161a:	89 a1       	ldd	r24, Y+33	; 0x21
    161c:	9a a1       	ldd	r25, Y+34	; 0x22
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	9a a3       	std	Y+34, r25	; 0x22
    1622:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1624:	89 a1       	ldd	r24, Y+33	; 0x21
    1626:	9a a1       	ldd	r25, Y+34	; 0x22
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	69 f7       	brne	.-38     	; 0x1606 <LCD_vidInitialize+0x2e2>
    162c:	14 c0       	rjmp	.+40     	; 0x1656 <LCD_vidInitialize+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    162e:	6b a1       	ldd	r22, Y+35	; 0x23
    1630:	7c a1       	ldd	r23, Y+36	; 0x24
    1632:	8d a1       	ldd	r24, Y+37	; 0x25
    1634:	9e a1       	ldd	r25, Y+38	; 0x26
    1636:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	9a a3       	std	Y+34, r25	; 0x22
    1640:	89 a3       	std	Y+33, r24	; 0x21
    1642:	89 a1       	ldd	r24, Y+33	; 0x21
    1644:	9a a1       	ldd	r25, Y+34	; 0x22
    1646:	9e 8f       	std	Y+30, r25	; 0x1e
    1648:	8d 8f       	std	Y+29, r24	; 0x1d
    164a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    164c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    164e:	01 97       	sbiw	r24, 0x01	; 1
    1650:	f1 f7       	brne	.-4      	; 0x164e <LCD_vidInitialize+0x32a>
    1652:	9e 8f       	std	Y+30, r25	; 0x1e
    1654:	8d 8f       	std	Y+29, r24	; 0x1d
	 //  LCD_vidWriteCommand (0b00001100); //0X0C
	  _delay_ms (10);

	  // DISPLAY CLEAR
	 	  LCD_vidWriteCommand (0b00000001);
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	0e 94 ef 08 	call	0x11de	; 0x11de <LCD_vidWriteCommand>
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	a0 e2       	ldi	r26, 0x20	; 32
    1662:	b1 e4       	ldi	r27, 0x41	; 65
    1664:	89 8f       	std	Y+25, r24	; 0x19
    1666:	9a 8f       	std	Y+26, r25	; 0x1a
    1668:	ab 8f       	std	Y+27, r26	; 0x1b
    166a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    166c:	69 8d       	ldd	r22, Y+25	; 0x19
    166e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1670:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1672:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e8       	ldi	r19, 0x80	; 128
    1678:	4b e3       	ldi	r20, 0x3B	; 59
    167a:	55 e4       	ldi	r21, 0x45	; 69
    167c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	8d 8b       	std	Y+21, r24	; 0x15
    1686:	9e 8b       	std	Y+22, r25	; 0x16
    1688:	af 8b       	std	Y+23, r26	; 0x17
    168a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    168c:	6d 89       	ldd	r22, Y+21	; 0x15
    168e:	7e 89       	ldd	r23, Y+22	; 0x16
    1690:	8f 89       	ldd	r24, Y+23	; 0x17
    1692:	98 8d       	ldd	r25, Y+24	; 0x18
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	40 e8       	ldi	r20, 0x80	; 128
    169a:	5f e3       	ldi	r21, 0x3F	; 63
    169c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16a0:	88 23       	and	r24, r24
    16a2:	2c f4       	brge	.+10     	; 0x16ae <LCD_vidInitialize+0x38a>
		__ticks = 1;
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	9c 8b       	std	Y+20, r25	; 0x14
    16aa:	8b 8b       	std	Y+19, r24	; 0x13
    16ac:	3f c0       	rjmp	.+126    	; 0x172c <LCD_vidInitialize+0x408>
	else if (__tmp > 65535)
    16ae:	6d 89       	ldd	r22, Y+21	; 0x15
    16b0:	7e 89       	ldd	r23, Y+22	; 0x16
    16b2:	8f 89       	ldd	r24, Y+23	; 0x17
    16b4:	98 8d       	ldd	r25, Y+24	; 0x18
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	3f ef       	ldi	r19, 0xFF	; 255
    16ba:	4f e7       	ldi	r20, 0x7F	; 127
    16bc:	57 e4       	ldi	r21, 0x47	; 71
    16be:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16c2:	18 16       	cp	r1, r24
    16c4:	4c f5       	brge	.+82     	; 0x1718 <LCD_vidInitialize+0x3f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c6:	69 8d       	ldd	r22, Y+25	; 0x19
    16c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	40 e2       	ldi	r20, 0x20	; 32
    16d4:	51 e4       	ldi	r21, 0x41	; 65
    16d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	bc 01       	movw	r22, r24
    16e0:	cd 01       	movw	r24, r26
    16e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16e6:	dc 01       	movw	r26, r24
    16e8:	cb 01       	movw	r24, r22
    16ea:	9c 8b       	std	Y+20, r25	; 0x14
    16ec:	8b 8b       	std	Y+19, r24	; 0x13
    16ee:	0f c0       	rjmp	.+30     	; 0x170e <LCD_vidInitialize+0x3ea>
    16f0:	8c e2       	ldi	r24, 0x2C	; 44
    16f2:	91 e0       	ldi	r25, 0x01	; 1
    16f4:	9a 8b       	std	Y+18, r25	; 0x12
    16f6:	89 8b       	std	Y+17, r24	; 0x11
    16f8:	89 89       	ldd	r24, Y+17	; 0x11
    16fa:	9a 89       	ldd	r25, Y+18	; 0x12
    16fc:	01 97       	sbiw	r24, 0x01	; 1
    16fe:	f1 f7       	brne	.-4      	; 0x16fc <LCD_vidInitialize+0x3d8>
    1700:	9a 8b       	std	Y+18, r25	; 0x12
    1702:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1704:	8b 89       	ldd	r24, Y+19	; 0x13
    1706:	9c 89       	ldd	r25, Y+20	; 0x14
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	9c 8b       	std	Y+20, r25	; 0x14
    170c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    170e:	8b 89       	ldd	r24, Y+19	; 0x13
    1710:	9c 89       	ldd	r25, Y+20	; 0x14
    1712:	00 97       	sbiw	r24, 0x00	; 0
    1714:	69 f7       	brne	.-38     	; 0x16f0 <LCD_vidInitialize+0x3cc>
    1716:	14 c0       	rjmp	.+40     	; 0x1740 <LCD_vidInitialize+0x41c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1718:	6d 89       	ldd	r22, Y+21	; 0x15
    171a:	7e 89       	ldd	r23, Y+22	; 0x16
    171c:	8f 89       	ldd	r24, Y+23	; 0x17
    171e:	98 8d       	ldd	r25, Y+24	; 0x18
    1720:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1724:	dc 01       	movw	r26, r24
    1726:	cb 01       	movw	r24, r22
    1728:	9c 8b       	std	Y+20, r25	; 0x14
    172a:	8b 8b       	std	Y+19, r24	; 0x13
    172c:	8b 89       	ldd	r24, Y+19	; 0x13
    172e:	9c 89       	ldd	r25, Y+20	; 0x14
    1730:	98 8b       	std	Y+16, r25	; 0x10
    1732:	8f 87       	std	Y+15, r24	; 0x0f
    1734:	8f 85       	ldd	r24, Y+15	; 0x0f
    1736:	98 89       	ldd	r25, Y+16	; 0x10
    1738:	01 97       	sbiw	r24, 0x01	; 1
    173a:	f1 f7       	brne	.-4      	; 0x1738 <LCD_vidInitialize+0x414>
    173c:	98 8b       	std	Y+16, r25	; 0x10
    173e:	8f 87       	std	Y+15, r24	; 0x0f
	 	  _delay_ms (10);

	  // Entry mode set
	  LCD_vidWriteCommand (0b00000110);//0X06
    1740:	86 e0       	ldi	r24, 0x06	; 6
    1742:	0e 94 ef 08 	call	0x11de	; 0x11de <LCD_vidWriteCommand>
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	a0 ea       	ldi	r26, 0xA0	; 160
    174c:	b1 e4       	ldi	r27, 0x41	; 65
    174e:	8b 87       	std	Y+11, r24	; 0x0b
    1750:	9c 87       	std	Y+12, r25	; 0x0c
    1752:	ad 87       	std	Y+13, r26	; 0x0d
    1754:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1756:	6b 85       	ldd	r22, Y+11	; 0x0b
    1758:	7c 85       	ldd	r23, Y+12	; 0x0c
    175a:	8d 85       	ldd	r24, Y+13	; 0x0d
    175c:	9e 85       	ldd	r25, Y+14	; 0x0e
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	30 e8       	ldi	r19, 0x80	; 128
    1762:	4b e3       	ldi	r20, 0x3B	; 59
    1764:	55 e4       	ldi	r21, 0x45	; 69
    1766:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    176a:	dc 01       	movw	r26, r24
    176c:	cb 01       	movw	r24, r22
    176e:	8f 83       	std	Y+7, r24	; 0x07
    1770:	98 87       	std	Y+8, r25	; 0x08
    1772:	a9 87       	std	Y+9, r26	; 0x09
    1774:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1776:	6f 81       	ldd	r22, Y+7	; 0x07
    1778:	78 85       	ldd	r23, Y+8	; 0x08
    177a:	89 85       	ldd	r24, Y+9	; 0x09
    177c:	9a 85       	ldd	r25, Y+10	; 0x0a
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	40 e8       	ldi	r20, 0x80	; 128
    1784:	5f e3       	ldi	r21, 0x3F	; 63
    1786:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    178a:	88 23       	and	r24, r24
    178c:	2c f4       	brge	.+10     	; 0x1798 <LCD_vidInitialize+0x474>
		__ticks = 1;
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	9e 83       	std	Y+6, r25	; 0x06
    1794:	8d 83       	std	Y+5, r24	; 0x05
    1796:	3f c0       	rjmp	.+126    	; 0x1816 <LCD_vidInitialize+0x4f2>
	else if (__tmp > 65535)
    1798:	6f 81       	ldd	r22, Y+7	; 0x07
    179a:	78 85       	ldd	r23, Y+8	; 0x08
    179c:	89 85       	ldd	r24, Y+9	; 0x09
    179e:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	3f ef       	ldi	r19, 0xFF	; 255
    17a4:	4f e7       	ldi	r20, 0x7F	; 127
    17a6:	57 e4       	ldi	r21, 0x47	; 71
    17a8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17ac:	18 16       	cp	r1, r24
    17ae:	4c f5       	brge	.+82     	; 0x1802 <LCD_vidInitialize+0x4de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	40 e2       	ldi	r20, 0x20	; 32
    17be:	51 e4       	ldi	r21, 0x41	; 65
    17c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	bc 01       	movw	r22, r24
    17ca:	cd 01       	movw	r24, r26
    17cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	9e 83       	std	Y+6, r25	; 0x06
    17d6:	8d 83       	std	Y+5, r24	; 0x05
    17d8:	0f c0       	rjmp	.+30     	; 0x17f8 <LCD_vidInitialize+0x4d4>
    17da:	8c e2       	ldi	r24, 0x2C	; 44
    17dc:	91 e0       	ldi	r25, 0x01	; 1
    17de:	9c 83       	std	Y+4, r25	; 0x04
    17e0:	8b 83       	std	Y+3, r24	; 0x03
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	9c 81       	ldd	r25, Y+4	; 0x04
    17e6:	01 97       	sbiw	r24, 0x01	; 1
    17e8:	f1 f7       	brne	.-4      	; 0x17e6 <LCD_vidInitialize+0x4c2>
    17ea:	9c 83       	std	Y+4, r25	; 0x04
    17ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ee:	8d 81       	ldd	r24, Y+5	; 0x05
    17f0:	9e 81       	ldd	r25, Y+6	; 0x06
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	9e 83       	std	Y+6, r25	; 0x06
    17f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f8:	8d 81       	ldd	r24, Y+5	; 0x05
    17fa:	9e 81       	ldd	r25, Y+6	; 0x06
    17fc:	00 97       	sbiw	r24, 0x00	; 0
    17fe:	69 f7       	brne	.-38     	; 0x17da <LCD_vidInitialize+0x4b6>
    1800:	14 c0       	rjmp	.+40     	; 0x182a <LCD_vidInitialize+0x506>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1802:	6f 81       	ldd	r22, Y+7	; 0x07
    1804:	78 85       	ldd	r23, Y+8	; 0x08
    1806:	89 85       	ldd	r24, Y+9	; 0x09
    1808:	9a 85       	ldd	r25, Y+10	; 0x0a
    180a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	9e 83       	std	Y+6, r25	; 0x06
    1814:	8d 83       	std	Y+5, r24	; 0x05
    1816:	8d 81       	ldd	r24, Y+5	; 0x05
    1818:	9e 81       	ldd	r25, Y+6	; 0x06
    181a:	9a 83       	std	Y+2, r25	; 0x02
    181c:	89 83       	std	Y+1, r24	; 0x01
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	9a 81       	ldd	r25, Y+2	; 0x02
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	f1 f7       	brne	.-4      	; 0x1822 <LCD_vidInitialize+0x4fe>
    1826:	9a 83       	std	Y+2, r25	; 0x02
    1828:	89 83       	std	Y+1, r24	; 0x01
	  _delay_ms (20);

}
    182a:	ca 5b       	subi	r28, 0xBA	; 186
    182c:	df 4f       	sbci	r29, 0xFF	; 255
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	cf 91       	pop	r28
    183a:	df 91       	pop	r29
    183c:	1f 91       	pop	r17
    183e:	0f 91       	pop	r16
    1840:	08 95       	ret

00001842 <LCD_vidWriteCharacter>:


/****************************************************************/

void LCD_vidWriteCharacter(u8 u8DataCpy){
    1842:	df 93       	push	r29
    1844:	cf 93       	push	r28
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	6d 97       	sbiw	r28, 0x1d	; 29
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	f8 94       	cli
    1850:	de bf       	out	0x3e, r29	; 62
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	cd bf       	out	0x3d, r28	; 61
    1856:	8d 8f       	std	Y+29, r24	; 0x1d
	 // Set RS to HIGH
		DIO_SetPinValue(Ctrl_PORT, RS , HIGH);
    1858:	83 e0       	ldi	r24, 0x03	; 3
    185a:	61 e0       	ldi	r22, 0x01	; 1
    185c:	41 e0       	ldi	r20, 0x01	; 1
    185e:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <DIO_SetPinValue>

		// Set R/W to LOW
		DIO_SetPinValue(Ctrl_PORT, RW , LOW);
    1862:	83 e0       	ldi	r24, 0x03	; 3
    1864:	62 e0       	ldi	r22, 0x02	; 2
    1866:	40 e0       	ldi	r20, 0x00	; 0
    1868:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <DIO_SetPinValue>

		// Set E to HIGH
		DIO_SetPinValue(Ctrl_PORT, E , HIGH);
    186c:	83 e0       	ldi	r24, 0x03	; 3
    186e:	63 e0       	ldi	r22, 0x03	; 3
    1870:	41 e0       	ldi	r20, 0x01	; 1
    1872:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <DIO_SetPinValue>

		// Load Command on Data bus
		DIO_SetPortValue(Buff_PORT, u8DataCpy);
    1876:	82 e0       	ldi	r24, 0x02	; 2
    1878:	6d 8d       	ldd	r22, Y+29	; 0x1d
    187a:	0e 94 ae 08 	call	0x115c	; 0x115c <DIO_SetPortValue>

		// Set E to LOW
		DIO_SetPinValue(Ctrl_PORT, E, LOW);
    187e:	83 e0       	ldi	r24, 0x03	; 3
    1880:	63 e0       	ldi	r22, 0x03	; 3
    1882:	40 e0       	ldi	r20, 0x00	; 0
    1884:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <DIO_SetPinValue>
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	a0 e2       	ldi	r26, 0x20	; 32
    188e:	b1 e4       	ldi	r27, 0x41	; 65
    1890:	89 8f       	std	Y+25, r24	; 0x19
    1892:	9a 8f       	std	Y+26, r25	; 0x1a
    1894:	ab 8f       	std	Y+27, r26	; 0x1b
    1896:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1898:	69 8d       	ldd	r22, Y+25	; 0x19
    189a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    189c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    189e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	30 e8       	ldi	r19, 0x80	; 128
    18a4:	4b e3       	ldi	r20, 0x3B	; 59
    18a6:	55 e4       	ldi	r21, 0x45	; 69
    18a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ac:	dc 01       	movw	r26, r24
    18ae:	cb 01       	movw	r24, r22
    18b0:	8d 8b       	std	Y+21, r24	; 0x15
    18b2:	9e 8b       	std	Y+22, r25	; 0x16
    18b4:	af 8b       	std	Y+23, r26	; 0x17
    18b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18b8:	6d 89       	ldd	r22, Y+21	; 0x15
    18ba:	7e 89       	ldd	r23, Y+22	; 0x16
    18bc:	8f 89       	ldd	r24, Y+23	; 0x17
    18be:	98 8d       	ldd	r25, Y+24	; 0x18
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	40 e8       	ldi	r20, 0x80	; 128
    18c6:	5f e3       	ldi	r21, 0x3F	; 63
    18c8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18cc:	88 23       	and	r24, r24
    18ce:	2c f4       	brge	.+10     	; 0x18da <LCD_vidWriteCharacter+0x98>
		__ticks = 1;
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	9c 8b       	std	Y+20, r25	; 0x14
    18d6:	8b 8b       	std	Y+19, r24	; 0x13
    18d8:	3f c0       	rjmp	.+126    	; 0x1958 <LCD_vidWriteCharacter+0x116>
	else if (__tmp > 65535)
    18da:	6d 89       	ldd	r22, Y+21	; 0x15
    18dc:	7e 89       	ldd	r23, Y+22	; 0x16
    18de:	8f 89       	ldd	r24, Y+23	; 0x17
    18e0:	98 8d       	ldd	r25, Y+24	; 0x18
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	3f ef       	ldi	r19, 0xFF	; 255
    18e6:	4f e7       	ldi	r20, 0x7F	; 127
    18e8:	57 e4       	ldi	r21, 0x47	; 71
    18ea:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18ee:	18 16       	cp	r1, r24
    18f0:	4c f5       	brge	.+82     	; 0x1944 <LCD_vidWriteCharacter+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f2:	69 8d       	ldd	r22, Y+25	; 0x19
    18f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	40 e2       	ldi	r20, 0x20	; 32
    1900:	51 e4       	ldi	r21, 0x41	; 65
    1902:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1906:	dc 01       	movw	r26, r24
    1908:	cb 01       	movw	r24, r22
    190a:	bc 01       	movw	r22, r24
    190c:	cd 01       	movw	r24, r26
    190e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	9c 8b       	std	Y+20, r25	; 0x14
    1918:	8b 8b       	std	Y+19, r24	; 0x13
    191a:	0f c0       	rjmp	.+30     	; 0x193a <LCD_vidWriteCharacter+0xf8>
    191c:	8c e2       	ldi	r24, 0x2C	; 44
    191e:	91 e0       	ldi	r25, 0x01	; 1
    1920:	9a 8b       	std	Y+18, r25	; 0x12
    1922:	89 8b       	std	Y+17, r24	; 0x11
    1924:	89 89       	ldd	r24, Y+17	; 0x11
    1926:	9a 89       	ldd	r25, Y+18	; 0x12
    1928:	01 97       	sbiw	r24, 0x01	; 1
    192a:	f1 f7       	brne	.-4      	; 0x1928 <LCD_vidWriteCharacter+0xe6>
    192c:	9a 8b       	std	Y+18, r25	; 0x12
    192e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1930:	8b 89       	ldd	r24, Y+19	; 0x13
    1932:	9c 89       	ldd	r25, Y+20	; 0x14
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	9c 8b       	std	Y+20, r25	; 0x14
    1938:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    193a:	8b 89       	ldd	r24, Y+19	; 0x13
    193c:	9c 89       	ldd	r25, Y+20	; 0x14
    193e:	00 97       	sbiw	r24, 0x00	; 0
    1940:	69 f7       	brne	.-38     	; 0x191c <LCD_vidWriteCharacter+0xda>
    1942:	14 c0       	rjmp	.+40     	; 0x196c <LCD_vidWriteCharacter+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1944:	6d 89       	ldd	r22, Y+21	; 0x15
    1946:	7e 89       	ldd	r23, Y+22	; 0x16
    1948:	8f 89       	ldd	r24, Y+23	; 0x17
    194a:	98 8d       	ldd	r25, Y+24	; 0x18
    194c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1950:	dc 01       	movw	r26, r24
    1952:	cb 01       	movw	r24, r22
    1954:	9c 8b       	std	Y+20, r25	; 0x14
    1956:	8b 8b       	std	Y+19, r24	; 0x13
    1958:	8b 89       	ldd	r24, Y+19	; 0x13
    195a:	9c 89       	ldd	r25, Y+20	; 0x14
    195c:	98 8b       	std	Y+16, r25	; 0x10
    195e:	8f 87       	std	Y+15, r24	; 0x0f
    1960:	8f 85       	ldd	r24, Y+15	; 0x0f
    1962:	98 89       	ldd	r25, Y+16	; 0x10
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	f1 f7       	brne	.-4      	; 0x1964 <LCD_vidWriteCharacter+0x122>
    1968:	98 8b       	std	Y+16, r25	; 0x10
    196a:	8f 87       	std	Y+15, r24	; 0x0f

		// Wait for E to settle
		_delay_ms(10);

		// Set E to HIGH
		DIO_SetPinValue(Ctrl_PORT, E, HIGH);
    196c:	83 e0       	ldi	r24, 0x03	; 3
    196e:	63 e0       	ldi	r22, 0x03	; 3
    1970:	41 e0       	ldi	r20, 0x01	; 1
    1972:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <DIO_SetPinValue>
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	a0 e2       	ldi	r26, 0x20	; 32
    197c:	b1 e4       	ldi	r27, 0x41	; 65
    197e:	8b 87       	std	Y+11, r24	; 0x0b
    1980:	9c 87       	std	Y+12, r25	; 0x0c
    1982:	ad 87       	std	Y+13, r26	; 0x0d
    1984:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1986:	6b 85       	ldd	r22, Y+11	; 0x0b
    1988:	7c 85       	ldd	r23, Y+12	; 0x0c
    198a:	8d 85       	ldd	r24, Y+13	; 0x0d
    198c:	9e 85       	ldd	r25, Y+14	; 0x0e
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	30 e8       	ldi	r19, 0x80	; 128
    1992:	4b e3       	ldi	r20, 0x3B	; 59
    1994:	55 e4       	ldi	r21, 0x45	; 69
    1996:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    199a:	dc 01       	movw	r26, r24
    199c:	cb 01       	movw	r24, r22
    199e:	8f 83       	std	Y+7, r24	; 0x07
    19a0:	98 87       	std	Y+8, r25	; 0x08
    19a2:	a9 87       	std	Y+9, r26	; 0x09
    19a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19a6:	6f 81       	ldd	r22, Y+7	; 0x07
    19a8:	78 85       	ldd	r23, Y+8	; 0x08
    19aa:	89 85       	ldd	r24, Y+9	; 0x09
    19ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	40 e8       	ldi	r20, 0x80	; 128
    19b4:	5f e3       	ldi	r21, 0x3F	; 63
    19b6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19ba:	88 23       	and	r24, r24
    19bc:	2c f4       	brge	.+10     	; 0x19c8 <LCD_vidWriteCharacter+0x186>
		__ticks = 1;
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	9e 83       	std	Y+6, r25	; 0x06
    19c4:	8d 83       	std	Y+5, r24	; 0x05
    19c6:	3f c0       	rjmp	.+126    	; 0x1a46 <LCD_vidWriteCharacter+0x204>
	else if (__tmp > 65535)
    19c8:	6f 81       	ldd	r22, Y+7	; 0x07
    19ca:	78 85       	ldd	r23, Y+8	; 0x08
    19cc:	89 85       	ldd	r24, Y+9	; 0x09
    19ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	3f ef       	ldi	r19, 0xFF	; 255
    19d4:	4f e7       	ldi	r20, 0x7F	; 127
    19d6:	57 e4       	ldi	r21, 0x47	; 71
    19d8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19dc:	18 16       	cp	r1, r24
    19de:	4c f5       	brge	.+82     	; 0x1a32 <LCD_vidWriteCharacter+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e2       	ldi	r20, 0x20	; 32
    19ee:	51 e4       	ldi	r21, 0x41	; 65
    19f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	bc 01       	movw	r22, r24
    19fa:	cd 01       	movw	r24, r26
    19fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	9e 83       	std	Y+6, r25	; 0x06
    1a06:	8d 83       	std	Y+5, r24	; 0x05
    1a08:	0f c0       	rjmp	.+30     	; 0x1a28 <LCD_vidWriteCharacter+0x1e6>
    1a0a:	8c e2       	ldi	r24, 0x2C	; 44
    1a0c:	91 e0       	ldi	r25, 0x01	; 1
    1a0e:	9c 83       	std	Y+4, r25	; 0x04
    1a10:	8b 83       	std	Y+3, r24	; 0x03
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	9c 81       	ldd	r25, Y+4	; 0x04
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	f1 f7       	brne	.-4      	; 0x1a16 <LCD_vidWriteCharacter+0x1d4>
    1a1a:	9c 83       	std	Y+4, r25	; 0x04
    1a1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a20:	9e 81       	ldd	r25, Y+6	; 0x06
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	9e 83       	std	Y+6, r25	; 0x06
    1a26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a28:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2c:	00 97       	sbiw	r24, 0x00	; 0
    1a2e:	69 f7       	brne	.-38     	; 0x1a0a <LCD_vidWriteCharacter+0x1c8>
    1a30:	14 c0       	rjmp	.+40     	; 0x1a5a <LCD_vidWriteCharacter+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a32:	6f 81       	ldd	r22, Y+7	; 0x07
    1a34:	78 85       	ldd	r23, Y+8	; 0x08
    1a36:	89 85       	ldd	r24, Y+9	; 0x09
    1a38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	9e 83       	std	Y+6, r25	; 0x06
    1a44:	8d 83       	std	Y+5, r24	; 0x05
    1a46:	8d 81       	ldd	r24, Y+5	; 0x05
    1a48:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4a:	9a 83       	std	Y+2, r25	; 0x02
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	9a 81       	ldd	r25, Y+2	; 0x02
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	f1 f7       	brne	.-4      	; 0x1a52 <LCD_vidWriteCharacter+0x210>
    1a56:	9a 83       	std	Y+2, r25	; 0x02
    1a58:	89 83       	std	Y+1, r24	; 0x01

		// Delay to let the LCD Display the character
		_delay_ms(10);

}
    1a5a:	6d 96       	adiw	r28, 0x1d	; 29
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	f8 94       	cli
    1a60:	de bf       	out	0x3e, r29	; 62
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	cd bf       	out	0x3d, r28	; 61
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	08 95       	ret

00001a6c <LCD_vidWriteString>:


/****************************************************************/

void LCD_vidWriteString (u8* pu8StringCpy, u8 u8Index){
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	62 97       	sbiw	r28, 0x12	; 18
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
    1a80:	99 8b       	std	Y+17, r25	; 0x11
    1a82:	88 8b       	std	Y+16, r24	; 0x10
    1a84:	6a 8b       	std	Y+18, r22	; 0x12

	// Local loop index

		u8 iteration=0;
    1a86:	1f 86       	std	Y+15, r1	; 0x0f

		for (iteration=0; ((iteration<u8Index)&&(pu8StringCpy[iteration] != '\0')) ; iteration++)
    1a88:	1f 86       	std	Y+15, r1	; 0x0f
    1a8a:	80 c0       	rjmp	.+256    	; 0x1b8c <LCD_vidWriteString+0x120>
		{
			/* Write Character on LCD */
			LCD_vidWriteCharacter(pu8StringCpy[iteration]);
    1a8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	88 89       	ldd	r24, Y+16	; 0x10
    1a94:	99 89       	ldd	r25, Y+17	; 0x11
    1a96:	fc 01       	movw	r30, r24
    1a98:	e2 0f       	add	r30, r18
    1a9a:	f3 1f       	adc	r31, r19
    1a9c:	80 81       	ld	r24, Z
    1a9e:	0e 94 21 0c 	call	0x1842	; 0x1842 <LCD_vidWriteCharacter>
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	a0 e2       	ldi	r26, 0x20	; 32
    1aa8:	b1 e4       	ldi	r27, 0x41	; 65
    1aaa:	8b 87       	std	Y+11, r24	; 0x0b
    1aac:	9c 87       	std	Y+12, r25	; 0x0c
    1aae:	ad 87       	std	Y+13, r26	; 0x0d
    1ab0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e8       	ldi	r19, 0x80	; 128
    1abe:	4b e3       	ldi	r20, 0x3B	; 59
    1ac0:	55 e4       	ldi	r21, 0x45	; 69
    1ac2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	8f 83       	std	Y+7, r24	; 0x07
    1acc:	98 87       	std	Y+8, r25	; 0x08
    1ace:	a9 87       	std	Y+9, r26	; 0x09
    1ad0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ad2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad4:	78 85       	ldd	r23, Y+8	; 0x08
    1ad6:	89 85       	ldd	r24, Y+9	; 0x09
    1ad8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	40 e8       	ldi	r20, 0x80	; 128
    1ae0:	5f e3       	ldi	r21, 0x3F	; 63
    1ae2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ae6:	88 23       	and	r24, r24
    1ae8:	2c f4       	brge	.+10     	; 0x1af4 <LCD_vidWriteString+0x88>
		__ticks = 1;
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	9e 83       	std	Y+6, r25	; 0x06
    1af0:	8d 83       	std	Y+5, r24	; 0x05
    1af2:	3f c0       	rjmp	.+126    	; 0x1b72 <LCD_vidWriteString+0x106>
	else if (__tmp > 65535)
    1af4:	6f 81       	ldd	r22, Y+7	; 0x07
    1af6:	78 85       	ldd	r23, Y+8	; 0x08
    1af8:	89 85       	ldd	r24, Y+9	; 0x09
    1afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	3f ef       	ldi	r19, 0xFF	; 255
    1b00:	4f e7       	ldi	r20, 0x7F	; 127
    1b02:	57 e4       	ldi	r21, 0x47	; 71
    1b04:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b08:	18 16       	cp	r1, r24
    1b0a:	4c f5       	brge	.+82     	; 0x1b5e <LCD_vidWriteString+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	40 e2       	ldi	r20, 0x20	; 32
    1b1a:	51 e4       	ldi	r21, 0x41	; 65
    1b1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	bc 01       	movw	r22, r24
    1b26:	cd 01       	movw	r24, r26
    1b28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	9e 83       	std	Y+6, r25	; 0x06
    1b32:	8d 83       	std	Y+5, r24	; 0x05
    1b34:	0f c0       	rjmp	.+30     	; 0x1b54 <LCD_vidWriteString+0xe8>
    1b36:	8c e2       	ldi	r24, 0x2C	; 44
    1b38:	91 e0       	ldi	r25, 0x01	; 1
    1b3a:	9c 83       	std	Y+4, r25	; 0x04
    1b3c:	8b 83       	std	Y+3, r24	; 0x03
    1b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b40:	9c 81       	ldd	r25, Y+4	; 0x04
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <LCD_vidWriteString+0xd6>
    1b46:	9c 83       	std	Y+4, r25	; 0x04
    1b48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	9e 83       	std	Y+6, r25	; 0x06
    1b52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b54:	8d 81       	ldd	r24, Y+5	; 0x05
    1b56:	9e 81       	ldd	r25, Y+6	; 0x06
    1b58:	00 97       	sbiw	r24, 0x00	; 0
    1b5a:	69 f7       	brne	.-38     	; 0x1b36 <LCD_vidWriteString+0xca>
    1b5c:	14 c0       	rjmp	.+40     	; 0x1b86 <LCD_vidWriteString+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b60:	78 85       	ldd	r23, Y+8	; 0x08
    1b62:	89 85       	ldd	r24, Y+9	; 0x09
    1b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	9e 83       	std	Y+6, r25	; 0x06
    1b70:	8d 83       	std	Y+5, r24	; 0x05
    1b72:	8d 81       	ldd	r24, Y+5	; 0x05
    1b74:	9e 81       	ldd	r25, Y+6	; 0x06
    1b76:	9a 83       	std	Y+2, r25	; 0x02
    1b78:	89 83       	std	Y+1, r24	; 0x01
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	f1 f7       	brne	.-4      	; 0x1b7e <LCD_vidWriteString+0x112>
    1b82:	9a 83       	std	Y+2, r25	; 0x02
    1b84:	89 83       	std	Y+1, r24	; 0x01

	// Local loop index

		u8 iteration=0;

		for (iteration=0; ((iteration<u8Index)&&(pu8StringCpy[iteration] != '\0')) ; iteration++)
    1b86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b88:	8f 5f       	subi	r24, 0xFF	; 255
    1b8a:	8f 87       	std	Y+15, r24	; 0x0f
    1b8c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b8e:	8a 89       	ldd	r24, Y+18	; 0x12
    1b90:	98 17       	cp	r25, r24
    1b92:	60 f4       	brcc	.+24     	; 0x1bac <LCD_vidWriteString+0x140>
    1b94:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b96:	28 2f       	mov	r18, r24
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	88 89       	ldd	r24, Y+16	; 0x10
    1b9c:	99 89       	ldd	r25, Y+17	; 0x11
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	e2 0f       	add	r30, r18
    1ba2:	f3 1f       	adc	r31, r19
    1ba4:	80 81       	ld	r24, Z
    1ba6:	88 23       	and	r24, r24
    1ba8:	09 f0       	breq	.+2      	; 0x1bac <LCD_vidWriteString+0x140>
    1baa:	70 cf       	rjmp	.-288    	; 0x1a8c <LCD_vidWriteString+0x20>
			LCD_vidWriteCharacter(pu8StringCpy[iteration]);

			/* Delay to let the LCD show the character */
			_delay_ms(10);
		}
}
    1bac:	62 96       	adiw	r28, 0x12	; 18
    1bae:	0f b6       	in	r0, 0x3f	; 63
    1bb0:	f8 94       	cli
    1bb2:	de bf       	out	0x3e, r29	; 62
    1bb4:	0f be       	out	0x3f, r0	; 63
    1bb6:	cd bf       	out	0x3d, r28	; 61
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <LCD_vidClear>:

/****************************************************************/


void LCD_vidClear(void)
{
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
	LCD_vidWriteCommand (0x01);		/* clear display */
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	0e 94 ef 08 	call	0x11de	; 0x11de <LCD_vidWriteCommand>
	LCD_vidWriteCommand (0x02);		/* cursor at home position */
    1bcc:	82 e0       	ldi	r24, 0x02	; 2
    1bce:	0e 94 ef 08 	call	0x11de	; 0x11de <LCD_vidWriteCommand>
}
    1bd2:	cf 91       	pop	r28
    1bd4:	df 91       	pop	r29
    1bd6:	08 95       	ret

00001bd8 <Gotoxy>:

/****************************************************************/

void Gotoxy (u8 X,u8 Y){
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	00 d0       	rcall	.+0      	; 0x1bde <Gotoxy+0x6>
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <Gotoxy+0x8>
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	89 83       	std	Y+1, r24	; 0x01
    1be6:	6a 83       	std	Y+2, r22	; 0x02
	if (X>0 && X<=16)
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	88 23       	and	r24, r24
    1bec:	e1 f0       	breq	.+56     	; 0x1c26 <Gotoxy+0x4e>
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	81 31       	cpi	r24, 0x11	; 17
    1bf2:	c8 f4       	brcc	.+50     	; 0x1c26 <Gotoxy+0x4e>
		{
		    switch(Y)
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	3c 83       	std	Y+4, r19	; 0x04
    1bfc:	2b 83       	std	Y+3, r18	; 0x03
    1bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1c00:	9c 81       	ldd	r25, Y+4	; 0x04
    1c02:	81 30       	cpi	r24, 0x01	; 1
    1c04:	91 05       	cpc	r25, r1
    1c06:	31 f0       	breq	.+12     	; 0x1c14 <Gotoxy+0x3c>
    1c08:	2b 81       	ldd	r18, Y+3	; 0x03
    1c0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c0c:	22 30       	cpi	r18, 0x02	; 2
    1c0e:	31 05       	cpc	r19, r1
    1c10:	31 f0       	breq	.+12     	; 0x1c1e <Gotoxy+0x46>
    1c12:	09 c0       	rjmp	.+18     	; 0x1c26 <Gotoxy+0x4e>
		    {
			    case 1:
			    	LCD_vidWriteCommand(X+127);
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	81 58       	subi	r24, 0x81	; 129
    1c18:	0e 94 ef 08 	call	0x11de	; 0x11de <LCD_vidWriteCommand>
    1c1c:	04 c0       	rjmp	.+8      	; 0x1c26 <Gotoxy+0x4e>
			    break;
			    case 2:
			    	LCD_vidWriteCommand(X+191);
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	81 54       	subi	r24, 0x41	; 65
    1c22:	0e 94 ef 08 	call	0x11de	; 0x11de <LCD_vidWriteCommand>
			    default:
			    break;
		    }
		}

}
    1c26:	0f 90       	pop	r0
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	cf 91       	pop	r28
    1c30:	df 91       	pop	r29
    1c32:	08 95       	ret

00001c34 <LCDWriteInteger>:

/********************************************************/

void LCDWriteInteger(u16 val , u16 field_length)
{
    1c34:	df 93       	push	r29
    1c36:	cf 93       	push	r28
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62
    1c3c:	62 97       	sbiw	r28, 0x12	; 18
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	de bf       	out	0x3e, r29	; 62
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	cd bf       	out	0x3d, r28	; 61
    1c48:	98 8b       	std	Y+16, r25	; 0x10
    1c4a:	8f 87       	std	Y+15, r24	; 0x0f
    1c4c:	7a 8b       	std	Y+18, r23	; 0x12
    1c4e:	69 8b       	std	Y+17, r22	; 0x11
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	u16 str[5]={0,0,0,0,0};
    1c50:	8a e0       	ldi	r24, 0x0A	; 10
    1c52:	fe 01       	movw	r30, r28
    1c54:	35 96       	adiw	r30, 0x05	; 5
    1c56:	df 01       	movw	r26, r30
    1c58:	28 2f       	mov	r18, r24
    1c5a:	1d 92       	st	X+, r1
    1c5c:	2a 95       	dec	r18
    1c5e:	e9 f7       	brne	.-6      	; 0x1c5a <LCDWriteInteger+0x26>
	u16 i=4,j=0;
    1c60:	84 e0       	ldi	r24, 0x04	; 4
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	9c 83       	std	Y+4, r25	; 0x04
    1c66:	8b 83       	std	Y+3, r24	; 0x03
    1c68:	1a 82       	std	Y+2, r1	; 0x02
    1c6a:	19 82       	std	Y+1, r1	; 0x01
		LCD_vidWriteCharacter('-');   //Write Negative sign
		val=val*(-1);     //convert to positive
	}
	else
	{
		LCD_vidWriteCharacter(' ');
    1c6c:	80 e2       	ldi	r24, 0x20	; 32
    1c6e:	0e 94 21 0c 	call	0x1842	; 0x1842 <LCD_vidWriteCharacter>
    1c72:	24 c0       	rjmp	.+72     	; 0x1cbc <LCDWriteInteger+0x88>
	}

	while(val)
	{
		str[i]=val%10;
    1c74:	eb 81       	ldd	r30, Y+3	; 0x03
    1c76:	fc 81       	ldd	r31, Y+4	; 0x04
    1c78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c7a:	98 89       	ldd	r25, Y+16	; 0x10
    1c7c:	2a e0       	ldi	r18, 0x0A	; 10
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	b9 01       	movw	r22, r18
    1c82:	0e 94 24 10 	call	0x2048	; 0x2048 <__udivmodhi4>
    1c86:	ac 01       	movw	r20, r24
    1c88:	9f 01       	movw	r18, r30
    1c8a:	22 0f       	add	r18, r18
    1c8c:	33 1f       	adc	r19, r19
    1c8e:	ce 01       	movw	r24, r28
    1c90:	01 96       	adiw	r24, 0x01	; 1
    1c92:	82 0f       	add	r24, r18
    1c94:	93 1f       	adc	r25, r19
    1c96:	fc 01       	movw	r30, r24
    1c98:	34 96       	adiw	r30, 0x04	; 4
    1c9a:	51 83       	std	Z+1, r21	; 0x01
    1c9c:	40 83       	st	Z, r20
		val=val/10;
    1c9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ca0:	98 89       	ldd	r25, Y+16	; 0x10
    1ca2:	2a e0       	ldi	r18, 0x0A	; 10
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	b9 01       	movw	r22, r18
    1ca8:	0e 94 24 10 	call	0x2048	; 0x2048 <__udivmodhi4>
    1cac:	cb 01       	movw	r24, r22
    1cae:	98 8b       	std	Y+16, r25	; 0x10
    1cb0:	8f 87       	std	Y+15, r24	; 0x0f
		i--;
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	9c 83       	std	Y+4, r25	; 0x04
    1cba:	8b 83       	std	Y+3, r24	; 0x03
	else
	{
		LCD_vidWriteCharacter(' ');
	}

	while(val)
    1cbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cbe:	98 89       	ldd	r25, Y+16	; 0x10
    1cc0:	00 97       	sbiw	r24, 0x00	; 0
    1cc2:	c1 f6       	brne	.-80     	; 0x1c74 <LCDWriteInteger+0x40>
		str[i]=val%10;
		val=val/10;
		i--;
	}

	if(field_length==-1)
    1cc4:	89 89       	ldd	r24, Y+17	; 0x11
    1cc6:	9a 89       	ldd	r25, Y+18	; 0x12
    1cc8:	af ef       	ldi	r26, 0xFF	; 255
    1cca:	8f 3f       	cpi	r24, 0xFF	; 255
    1ccc:	9a 07       	cpc	r25, r26
    1cce:	b1 f4       	brne	.+44     	; 0x1cfc <LCDWriteInteger+0xc8>
    1cd0:	05 c0       	rjmp	.+10     	; 0x1cdc <LCDWriteInteger+0xa8>
		while(str[j]==0) j++;
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
    1cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd6:	01 96       	adiw	r24, 0x01	; 1
    1cd8:	9a 83       	std	Y+2, r25	; 0x02
    1cda:	89 83       	std	Y+1, r24	; 0x01
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce0:	9c 01       	movw	r18, r24
    1ce2:	22 0f       	add	r18, r18
    1ce4:	33 1f       	adc	r19, r19
    1ce6:	ce 01       	movw	r24, r28
    1ce8:	01 96       	adiw	r24, 0x01	; 1
    1cea:	82 0f       	add	r24, r18
    1cec:	93 1f       	adc	r25, r19
    1cee:	fc 01       	movw	r30, r24
    1cf0:	34 96       	adiw	r30, 0x04	; 4
    1cf2:	80 81       	ld	r24, Z
    1cf4:	91 81       	ldd	r25, Z+1	; 0x01
    1cf6:	00 97       	sbiw	r24, 0x00	; 0
    1cf8:	61 f3       	breq	.-40     	; 0x1cd2 <LCDWriteInteger+0x9e>
    1cfa:	08 c0       	rjmp	.+16     	; 0x1d0c <LCDWriteInteger+0xd8>
	else
		j=5-field_length;
    1cfc:	85 e0       	ldi	r24, 0x05	; 5
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	29 89       	ldd	r18, Y+17	; 0x11
    1d02:	3a 89       	ldd	r19, Y+18	; 0x12
    1d04:	82 1b       	sub	r24, r18
    1d06:	93 0b       	sbc	r25, r19
    1d08:	9a 83       	std	Y+2, r25	; 0x02
    1d0a:	89 83       	std	Y+1, r24	; 0x01

	for(i=j;i<5;i++)
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d10:	9c 83       	std	Y+4, r25	; 0x04
    1d12:	8b 83       	std	Y+3, r24	; 0x03
    1d14:	15 c0       	rjmp	.+42     	; 0x1d40 <LCDWriteInteger+0x10c>
	{
		LCD_vidWriteCharacter('0'+str[i]);
    1d16:	8b 81       	ldd	r24, Y+3	; 0x03
    1d18:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1a:	9c 01       	movw	r18, r24
    1d1c:	22 0f       	add	r18, r18
    1d1e:	33 1f       	adc	r19, r19
    1d20:	ce 01       	movw	r24, r28
    1d22:	01 96       	adiw	r24, 0x01	; 1
    1d24:	82 0f       	add	r24, r18
    1d26:	93 1f       	adc	r25, r19
    1d28:	fc 01       	movw	r30, r24
    1d2a:	34 96       	adiw	r30, 0x04	; 4
    1d2c:	80 81       	ld	r24, Z
    1d2e:	91 81       	ldd	r25, Z+1	; 0x01
    1d30:	80 5d       	subi	r24, 0xD0	; 208
    1d32:	0e 94 21 0c 	call	0x1842	; 0x1842 <LCD_vidWriteCharacter>
	if(field_length==-1)
		while(str[j]==0) j++;
	else
		j=5-field_length;

	for(i=j;i<5;i++)
    1d36:	8b 81       	ldd	r24, Y+3	; 0x03
    1d38:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3a:	01 96       	adiw	r24, 0x01	; 1
    1d3c:	9c 83       	std	Y+4, r25	; 0x04
    1d3e:	8b 83       	std	Y+3, r24	; 0x03
    1d40:	8b 81       	ldd	r24, Y+3	; 0x03
    1d42:	9c 81       	ldd	r25, Y+4	; 0x04
    1d44:	85 30       	cpi	r24, 0x05	; 5
    1d46:	91 05       	cpc	r25, r1
    1d48:	30 f3       	brcs	.-52     	; 0x1d16 <LCDWriteInteger+0xe2>
	{
		LCD_vidWriteCharacter('0'+str[i]);
	}
}
    1d4a:	62 96       	adiw	r28, 0x12	; 18
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	f8 94       	cli
    1d50:	de bf       	out	0x3e, r29	; 62
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	cd bf       	out	0x3d, r28	; 61
    1d56:	cf 91       	pop	r28
    1d58:	df 91       	pop	r29
    1d5a:	08 95       	ret

00001d5c <vid_SeparateResult>:


/********************************************************/

void vid_SeparateResult(u32 u32Result , u8 * u8ArrayResult) {
    1d5c:	0f 93       	push	r16
    1d5e:	1f 93       	push	r17
    1d60:	df 93       	push	r29
    1d62:	cf 93       	push	r28
    1d64:	00 d0       	rcall	.+0      	; 0x1d66 <vid_SeparateResult+0xa>
    1d66:	00 d0       	rcall	.+0      	; 0x1d68 <vid_SeparateResult+0xc>
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <vid_SeparateResult+0xe>
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
    1d6e:	69 83       	std	Y+1, r22	; 0x01
    1d70:	7a 83       	std	Y+2, r23	; 0x02
    1d72:	8b 83       	std	Y+3, r24	; 0x03
    1d74:	9c 83       	std	Y+4, r25	; 0x04
    1d76:	5e 83       	std	Y+6, r21	; 0x06
    1d78:	4d 83       	std	Y+5, r20	; 0x05

	u8ArrayResult[0]= ( (u32Result / 10000) % 10 ) + 48 ;
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7e:	ab 81       	ldd	r26, Y+3	; 0x03
    1d80:	bc 81       	ldd	r27, Y+4	; 0x04
    1d82:	20 e1       	ldi	r18, 0x10	; 16
    1d84:	37 e2       	ldi	r19, 0x27	; 39
    1d86:	40 e0       	ldi	r20, 0x00	; 0
    1d88:	50 e0       	ldi	r21, 0x00	; 0
    1d8a:	bc 01       	movw	r22, r24
    1d8c:	cd 01       	movw	r24, r26
    1d8e:	0e 94 38 10 	call	0x2070	; 0x2070 <__udivmodsi4>
    1d92:	da 01       	movw	r26, r20
    1d94:	c9 01       	movw	r24, r18
    1d96:	2a e0       	ldi	r18, 0x0A	; 10
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	40 e0       	ldi	r20, 0x00	; 0
    1d9c:	50 e0       	ldi	r21, 0x00	; 0
    1d9e:	bc 01       	movw	r22, r24
    1da0:	cd 01       	movw	r24, r26
    1da2:	0e 94 38 10 	call	0x2070	; 0x2070 <__udivmodsi4>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	80 5d       	subi	r24, 0xD0	; 208
    1dac:	ed 81       	ldd	r30, Y+5	; 0x05
    1dae:	fe 81       	ldd	r31, Y+6	; 0x06
    1db0:	80 83       	st	Z, r24
	u8ArrayResult[1]= ( (u32Result / 1000) % 10 ) + 48 ;
    1db2:	8d 81       	ldd	r24, Y+5	; 0x05
    1db4:	9e 81       	ldd	r25, Y+6	; 0x06
    1db6:	8c 01       	movw	r16, r24
    1db8:	0f 5f       	subi	r16, 0xFF	; 255
    1dba:	1f 4f       	sbci	r17, 0xFF	; 255
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc0:	ab 81       	ldd	r26, Y+3	; 0x03
    1dc2:	bc 81       	ldd	r27, Y+4	; 0x04
    1dc4:	28 ee       	ldi	r18, 0xE8	; 232
    1dc6:	33 e0       	ldi	r19, 0x03	; 3
    1dc8:	40 e0       	ldi	r20, 0x00	; 0
    1dca:	50 e0       	ldi	r21, 0x00	; 0
    1dcc:	bc 01       	movw	r22, r24
    1dce:	cd 01       	movw	r24, r26
    1dd0:	0e 94 38 10 	call	0x2070	; 0x2070 <__udivmodsi4>
    1dd4:	da 01       	movw	r26, r20
    1dd6:	c9 01       	movw	r24, r18
    1dd8:	2a e0       	ldi	r18, 0x0A	; 10
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	40 e0       	ldi	r20, 0x00	; 0
    1dde:	50 e0       	ldi	r21, 0x00	; 0
    1de0:	bc 01       	movw	r22, r24
    1de2:	cd 01       	movw	r24, r26
    1de4:	0e 94 38 10 	call	0x2070	; 0x2070 <__udivmodsi4>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	80 5d       	subi	r24, 0xD0	; 208
    1dee:	f8 01       	movw	r30, r16
    1df0:	80 83       	st	Z, r24
	u8ArrayResult[2]= ( (u32Result / 100) % 10 ) + 48 ;
    1df2:	8d 81       	ldd	r24, Y+5	; 0x05
    1df4:	9e 81       	ldd	r25, Y+6	; 0x06
    1df6:	8c 01       	movw	r16, r24
    1df8:	0e 5f       	subi	r16, 0xFE	; 254
    1dfa:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1e00:	ab 81       	ldd	r26, Y+3	; 0x03
    1e02:	bc 81       	ldd	r27, Y+4	; 0x04
    1e04:	24 e6       	ldi	r18, 0x64	; 100
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	40 e0       	ldi	r20, 0x00	; 0
    1e0a:	50 e0       	ldi	r21, 0x00	; 0
    1e0c:	bc 01       	movw	r22, r24
    1e0e:	cd 01       	movw	r24, r26
    1e10:	0e 94 38 10 	call	0x2070	; 0x2070 <__udivmodsi4>
    1e14:	da 01       	movw	r26, r20
    1e16:	c9 01       	movw	r24, r18
    1e18:	2a e0       	ldi	r18, 0x0A	; 10
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	40 e0       	ldi	r20, 0x00	; 0
    1e1e:	50 e0       	ldi	r21, 0x00	; 0
    1e20:	bc 01       	movw	r22, r24
    1e22:	cd 01       	movw	r24, r26
    1e24:	0e 94 38 10 	call	0x2070	; 0x2070 <__udivmodsi4>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	80 5d       	subi	r24, 0xD0	; 208
    1e2e:	f8 01       	movw	r30, r16
    1e30:	80 83       	st	Z, r24
	u8ArrayResult[3]= ( (u32Result / 10) % 10 ) + 48 ;
    1e32:	8d 81       	ldd	r24, Y+5	; 0x05
    1e34:	9e 81       	ldd	r25, Y+6	; 0x06
    1e36:	8c 01       	movw	r16, r24
    1e38:	0d 5f       	subi	r16, 0xFD	; 253
    1e3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e40:	ab 81       	ldd	r26, Y+3	; 0x03
    1e42:	bc 81       	ldd	r27, Y+4	; 0x04
    1e44:	2a e0       	ldi	r18, 0x0A	; 10
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	40 e0       	ldi	r20, 0x00	; 0
    1e4a:	50 e0       	ldi	r21, 0x00	; 0
    1e4c:	bc 01       	movw	r22, r24
    1e4e:	cd 01       	movw	r24, r26
    1e50:	0e 94 38 10 	call	0x2070	; 0x2070 <__udivmodsi4>
    1e54:	da 01       	movw	r26, r20
    1e56:	c9 01       	movw	r24, r18
    1e58:	2a e0       	ldi	r18, 0x0A	; 10
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e0       	ldi	r20, 0x00	; 0
    1e5e:	50 e0       	ldi	r21, 0x00	; 0
    1e60:	bc 01       	movw	r22, r24
    1e62:	cd 01       	movw	r24, r26
    1e64:	0e 94 38 10 	call	0x2070	; 0x2070 <__udivmodsi4>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	80 5d       	subi	r24, 0xD0	; 208
    1e6e:	f8 01       	movw	r30, r16
    1e70:	80 83       	st	Z, r24
	u8ArrayResult[4]=   (u32Result  % 10 ) + 48 ;
    1e72:	8d 81       	ldd	r24, Y+5	; 0x05
    1e74:	9e 81       	ldd	r25, Y+6	; 0x06
    1e76:	8c 01       	movw	r16, r24
    1e78:	0c 5f       	subi	r16, 0xFC	; 252
    1e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e80:	ab 81       	ldd	r26, Y+3	; 0x03
    1e82:	bc 81       	ldd	r27, Y+4	; 0x04
    1e84:	2a e0       	ldi	r18, 0x0A	; 10
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	40 e0       	ldi	r20, 0x00	; 0
    1e8a:	50 e0       	ldi	r21, 0x00	; 0
    1e8c:	bc 01       	movw	r22, r24
    1e8e:	cd 01       	movw	r24, r26
    1e90:	0e 94 38 10 	call	0x2070	; 0x2070 <__udivmodsi4>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	80 5d       	subi	r24, 0xD0	; 208
    1e9a:	f8 01       	movw	r30, r16
    1e9c:	80 83       	st	Z, r24

}
    1e9e:	26 96       	adiw	r28, 0x06	; 6
    1ea0:	0f b6       	in	r0, 0x3f	; 63
    1ea2:	f8 94       	cli
    1ea4:	de bf       	out	0x3e, r29	; 62
    1ea6:	0f be       	out	0x3f, r0	; 63
    1ea8:	cd bf       	out	0x3d, r28	; 61
    1eaa:	cf 91       	pop	r28
    1eac:	df 91       	pop	r29
    1eae:	1f 91       	pop	r17
    1eb0:	0f 91       	pop	r16
    1eb2:	08 95       	ret

00001eb4 <main>:
#include <util/delay.h>
#include "ADC_Interface.h"
#include "LCD_int.h"


void main (void) {
    1eb4:	df 93       	push	r29
    1eb6:	cf 93       	push	r28
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	a0 97       	sbiw	r28, 0x20	; 32
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	f8 94       	cli
    1ec2:	de bf       	out	0x3e, r29	; 62
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	cd bf       	out	0x3d, r28	; 61

	u8 u8_ADC_Read = 0 ;
    1ec8:	1d 82       	std	Y+5, r1	; 0x05
	u16 volt = 0 ;
    1eca:	1c 82       	std	Y+4, r1	; 0x04
    1ecc:	1b 82       	std	Y+3, r1	; 0x03
	u16 temp = 0 ;
    1ece:	1a 82       	std	Y+2, r1	; 0x02
    1ed0:	19 82       	std	Y+1, r1	; 0x01
	u8 string1[10] ="Analog = ";
    1ed2:	ce 01       	movw	r24, r28
    1ed4:	06 96       	adiw	r24, 0x06	; 6
    1ed6:	98 8f       	std	Y+24, r25	; 0x18
    1ed8:	8f 8b       	std	Y+23, r24	; 0x17
    1eda:	e0 e6       	ldi	r30, 0x60	; 96
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	fa 8f       	std	Y+26, r31	; 0x1a
    1ee0:	e9 8f       	std	Y+25, r30	; 0x19
    1ee2:	fa e0       	ldi	r31, 0x0A	; 10
    1ee4:	fb 8f       	std	Y+27, r31	; 0x1b
    1ee6:	e9 8d       	ldd	r30, Y+25	; 0x19
    1ee8:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1eea:	00 80       	ld	r0, Z
    1eec:	89 8d       	ldd	r24, Y+25	; 0x19
    1eee:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ef0:	01 96       	adiw	r24, 0x01	; 1
    1ef2:	9a 8f       	std	Y+26, r25	; 0x1a
    1ef4:	89 8f       	std	Y+25, r24	; 0x19
    1ef6:	ef 89       	ldd	r30, Y+23	; 0x17
    1ef8:	f8 8d       	ldd	r31, Y+24	; 0x18
    1efa:	00 82       	st	Z, r0
    1efc:	8f 89       	ldd	r24, Y+23	; 0x17
    1efe:	98 8d       	ldd	r25, Y+24	; 0x18
    1f00:	01 96       	adiw	r24, 0x01	; 1
    1f02:	98 8f       	std	Y+24, r25	; 0x18
    1f04:	8f 8b       	std	Y+23, r24	; 0x17
    1f06:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f08:	91 50       	subi	r25, 0x01	; 1
    1f0a:	9b 8f       	std	Y+27, r25	; 0x1b
    1f0c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1f0e:	ee 23       	and	r30, r30
    1f10:	51 f7       	brne	.-44     	; 0x1ee6 <main+0x32>
	u8 string2[7] ="TMP = ";
    1f12:	ce 01       	movw	r24, r28
    1f14:	40 96       	adiw	r24, 0x10	; 16
    1f16:	9d 8f       	std	Y+29, r25	; 0x1d
    1f18:	8c 8f       	std	Y+28, r24	; 0x1c
    1f1a:	ea e6       	ldi	r30, 0x6A	; 106
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	ff 8f       	std	Y+31, r31	; 0x1f
    1f20:	ee 8f       	std	Y+30, r30	; 0x1e
    1f22:	f7 e0       	ldi	r31, 0x07	; 7
    1f24:	f8 a3       	std	Y+32, r31	; 0x20
    1f26:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1f28:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1f2a:	00 80       	ld	r0, Z
    1f2c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f2e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f30:	01 96       	adiw	r24, 0x01	; 1
    1f32:	9f 8f       	std	Y+31, r25	; 0x1f
    1f34:	8e 8f       	std	Y+30, r24	; 0x1e
    1f36:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1f38:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1f3a:	00 82       	st	Z, r0
    1f3c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f3e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f40:	01 96       	adiw	r24, 0x01	; 1
    1f42:	9d 8f       	std	Y+29, r25	; 0x1d
    1f44:	8c 8f       	std	Y+28, r24	; 0x1c
    1f46:	98 a1       	ldd	r25, Y+32	; 0x20
    1f48:	91 50       	subi	r25, 0x01	; 1
    1f4a:	98 a3       	std	Y+32, r25	; 0x20
    1f4c:	e8 a1       	ldd	r30, Y+32	; 0x20
    1f4e:	ee 23       	and	r30, r30
    1f50:	51 f7       	brne	.-44     	; 0x1f26 <main+0x72>

	DIO_SetPinDirection (PORTA_DIO, PIN0, INPUT);
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	60 e0       	ldi	r22, 0x00	; 0
    1f56:	40 e0       	ldi	r20, 0x00	; 0
    1f58:	0e 94 65 07 	call	0xeca	; 0xeca <DIO_SetPinDirection>
	//DIO_SetPinValue(PORTA_DIO , PIN0, HIGH);
	DIO_SetPortDirection (PORTC_DIO,0xff);
    1f5c:	82 e0       	ldi	r24, 0x02	; 2
    1f5e:	6f ef       	ldi	r22, 0xFF	; 255
    1f60:	0e 94 6d 08 	call	0x10da	; 0x10da <DIO_SetPortDirection>
	DIO_SetPortDirection (PORTD_DIO,0xff);
    1f64:	83 e0       	ldi	r24, 0x03	; 3
    1f66:	6f ef       	ldi	r22, 0xFF	; 255
    1f68:	0e 94 6d 08 	call	0x10da	; 0x10da <DIO_SetPortDirection>

	LCD_vidInitialize();
    1f6c:	0e 94 92 09 	call	0x1324	; 0x1324 <LCD_vidInitialize>
	vid_ADC_vid_Initialize () ;
    1f70:	0e 94 9b 05 	call	0xb36	; 0xb36 <vid_ADC_vid_Initialize>


	while(1) {

		u8_ADC_Read = U8_ADC_U8_Read(0) ;
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	0e 94 aa 05 	call	0xb54	; 0xb54 <U8_ADC_U8_Read>
    1f7a:	8d 83       	std	Y+5, r24	; 0x05


		volt =  (( ( (u32)u8_ADC_Read *  1500UL) ) / 256UL )  ;
    1f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7e:	88 2f       	mov	r24, r24
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	a0 e0       	ldi	r26, 0x00	; 0
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	2c ed       	ldi	r18, 0xDC	; 220
    1f88:	35 e0       	ldi	r19, 0x05	; 5
    1f8a:	40 e0       	ldi	r20, 0x00	; 0
    1f8c:	50 e0       	ldi	r21, 0x00	; 0
    1f8e:	bc 01       	movw	r22, r24
    1f90:	cd 01       	movw	r24, r26
    1f92:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsi3>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	89 2f       	mov	r24, r25
    1f9c:	9a 2f       	mov	r25, r26
    1f9e:	ab 2f       	mov	r26, r27
    1fa0:	bb 27       	eor	r27, r27
    1fa2:	9c 83       	std	Y+4, r25	; 0x04
    1fa4:	8b 83       	std	Y+3, r24	; 0x03
		temp = volt/10 ;
    1fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa8:	9c 81       	ldd	r25, Y+4	; 0x04
    1faa:	2a e0       	ldi	r18, 0x0A	; 10
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	b9 01       	movw	r22, r18
    1fb0:	0e 94 24 10 	call	0x2048	; 0x2048 <__udivmodhi4>
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	9a 83       	std	Y+2, r25	; 0x02
    1fb8:	89 83       	std	Y+1, r24	; 0x01

		Gotoxy(1,1) ;
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	61 e0       	ldi	r22, 0x01	; 1
    1fbe:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <Gotoxy>
		LCD_vidWriteString(string1,10) ;
    1fc2:	ce 01       	movw	r24, r28
    1fc4:	06 96       	adiw	r24, 0x06	; 6
    1fc6:	6a e0       	ldi	r22, 0x0A	; 10
    1fc8:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <LCD_vidWriteString>
		Gotoxy(9,1) ;
    1fcc:	89 e0       	ldi	r24, 0x09	; 9
    1fce:	61 e0       	ldi	r22, 0x01	; 1
    1fd0:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <Gotoxy>
		LCDWriteInteger(u8_ADC_Read,4) ;
    1fd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd6:	88 2f       	mov	r24, r24
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	64 e0       	ldi	r22, 0x04	; 4
    1fdc:	70 e0       	ldi	r23, 0x00	; 0
    1fde:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCDWriteInteger>

		Gotoxy(1,2) ;
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	62 e0       	ldi	r22, 0x02	; 2
    1fe6:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <Gotoxy>
		LCD_vidWriteString(string2,7) ;
    1fea:	ce 01       	movw	r24, r28
    1fec:	40 96       	adiw	r24, 0x10	; 16
    1fee:	67 e0       	ldi	r22, 0x07	; 7
    1ff0:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <LCD_vidWriteString>
		Gotoxy(6,2) ;
    1ff4:	86 e0       	ldi	r24, 0x06	; 6
    1ff6:	62 e0       	ldi	r22, 0x02	; 2
    1ff8:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <Gotoxy>
		LCDWriteInteger(temp,4) ;
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    2000:	64 e0       	ldi	r22, 0x04	; 4
    2002:	70 e0       	ldi	r23, 0x00	; 0
    2004:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCDWriteInteger>
    2008:	b5 cf       	rjmp	.-150    	; 0x1f74 <main+0xc0>

0000200a <__mulsi3>:
    200a:	62 9f       	mul	r22, r18
    200c:	d0 01       	movw	r26, r0
    200e:	73 9f       	mul	r23, r19
    2010:	f0 01       	movw	r30, r0
    2012:	82 9f       	mul	r24, r18
    2014:	e0 0d       	add	r30, r0
    2016:	f1 1d       	adc	r31, r1
    2018:	64 9f       	mul	r22, r20
    201a:	e0 0d       	add	r30, r0
    201c:	f1 1d       	adc	r31, r1
    201e:	92 9f       	mul	r25, r18
    2020:	f0 0d       	add	r31, r0
    2022:	83 9f       	mul	r24, r19
    2024:	f0 0d       	add	r31, r0
    2026:	74 9f       	mul	r23, r20
    2028:	f0 0d       	add	r31, r0
    202a:	65 9f       	mul	r22, r21
    202c:	f0 0d       	add	r31, r0
    202e:	99 27       	eor	r25, r25
    2030:	72 9f       	mul	r23, r18
    2032:	b0 0d       	add	r27, r0
    2034:	e1 1d       	adc	r30, r1
    2036:	f9 1f       	adc	r31, r25
    2038:	63 9f       	mul	r22, r19
    203a:	b0 0d       	add	r27, r0
    203c:	e1 1d       	adc	r30, r1
    203e:	f9 1f       	adc	r31, r25
    2040:	bd 01       	movw	r22, r26
    2042:	cf 01       	movw	r24, r30
    2044:	11 24       	eor	r1, r1
    2046:	08 95       	ret

00002048 <__udivmodhi4>:
    2048:	aa 1b       	sub	r26, r26
    204a:	bb 1b       	sub	r27, r27
    204c:	51 e1       	ldi	r21, 0x11	; 17
    204e:	07 c0       	rjmp	.+14     	; 0x205e <__udivmodhi4_ep>

00002050 <__udivmodhi4_loop>:
    2050:	aa 1f       	adc	r26, r26
    2052:	bb 1f       	adc	r27, r27
    2054:	a6 17       	cp	r26, r22
    2056:	b7 07       	cpc	r27, r23
    2058:	10 f0       	brcs	.+4      	; 0x205e <__udivmodhi4_ep>
    205a:	a6 1b       	sub	r26, r22
    205c:	b7 0b       	sbc	r27, r23

0000205e <__udivmodhi4_ep>:
    205e:	88 1f       	adc	r24, r24
    2060:	99 1f       	adc	r25, r25
    2062:	5a 95       	dec	r21
    2064:	a9 f7       	brne	.-22     	; 0x2050 <__udivmodhi4_loop>
    2066:	80 95       	com	r24
    2068:	90 95       	com	r25
    206a:	bc 01       	movw	r22, r24
    206c:	cd 01       	movw	r24, r26
    206e:	08 95       	ret

00002070 <__udivmodsi4>:
    2070:	a1 e2       	ldi	r26, 0x21	; 33
    2072:	1a 2e       	mov	r1, r26
    2074:	aa 1b       	sub	r26, r26
    2076:	bb 1b       	sub	r27, r27
    2078:	fd 01       	movw	r30, r26
    207a:	0d c0       	rjmp	.+26     	; 0x2096 <__udivmodsi4_ep>

0000207c <__udivmodsi4_loop>:
    207c:	aa 1f       	adc	r26, r26
    207e:	bb 1f       	adc	r27, r27
    2080:	ee 1f       	adc	r30, r30
    2082:	ff 1f       	adc	r31, r31
    2084:	a2 17       	cp	r26, r18
    2086:	b3 07       	cpc	r27, r19
    2088:	e4 07       	cpc	r30, r20
    208a:	f5 07       	cpc	r31, r21
    208c:	20 f0       	brcs	.+8      	; 0x2096 <__udivmodsi4_ep>
    208e:	a2 1b       	sub	r26, r18
    2090:	b3 0b       	sbc	r27, r19
    2092:	e4 0b       	sbc	r30, r20
    2094:	f5 0b       	sbc	r31, r21

00002096 <__udivmodsi4_ep>:
    2096:	66 1f       	adc	r22, r22
    2098:	77 1f       	adc	r23, r23
    209a:	88 1f       	adc	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	1a 94       	dec	r1
    20a0:	69 f7       	brne	.-38     	; 0x207c <__udivmodsi4_loop>
    20a2:	60 95       	com	r22
    20a4:	70 95       	com	r23
    20a6:	80 95       	com	r24
    20a8:	90 95       	com	r25
    20aa:	9b 01       	movw	r18, r22
    20ac:	ac 01       	movw	r20, r24
    20ae:	bd 01       	movw	r22, r26
    20b0:	cf 01       	movw	r24, r30
    20b2:	08 95       	ret

000020b4 <__prologue_saves__>:
    20b4:	2f 92       	push	r2
    20b6:	3f 92       	push	r3
    20b8:	4f 92       	push	r4
    20ba:	5f 92       	push	r5
    20bc:	6f 92       	push	r6
    20be:	7f 92       	push	r7
    20c0:	8f 92       	push	r8
    20c2:	9f 92       	push	r9
    20c4:	af 92       	push	r10
    20c6:	bf 92       	push	r11
    20c8:	cf 92       	push	r12
    20ca:	df 92       	push	r13
    20cc:	ef 92       	push	r14
    20ce:	ff 92       	push	r15
    20d0:	0f 93       	push	r16
    20d2:	1f 93       	push	r17
    20d4:	cf 93       	push	r28
    20d6:	df 93       	push	r29
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
    20dc:	ca 1b       	sub	r28, r26
    20de:	db 0b       	sbc	r29, r27
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	f8 94       	cli
    20e4:	de bf       	out	0x3e, r29	; 62
    20e6:	0f be       	out	0x3f, r0	; 63
    20e8:	cd bf       	out	0x3d, r28	; 61
    20ea:	09 94       	ijmp

000020ec <__epilogue_restores__>:
    20ec:	2a 88       	ldd	r2, Y+18	; 0x12
    20ee:	39 88       	ldd	r3, Y+17	; 0x11
    20f0:	48 88       	ldd	r4, Y+16	; 0x10
    20f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    20f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    20f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    20f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    20fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    20fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    20fe:	b9 84       	ldd	r11, Y+9	; 0x09
    2100:	c8 84       	ldd	r12, Y+8	; 0x08
    2102:	df 80       	ldd	r13, Y+7	; 0x07
    2104:	ee 80       	ldd	r14, Y+6	; 0x06
    2106:	fd 80       	ldd	r15, Y+5	; 0x05
    2108:	0c 81       	ldd	r16, Y+4	; 0x04
    210a:	1b 81       	ldd	r17, Y+3	; 0x03
    210c:	aa 81       	ldd	r26, Y+2	; 0x02
    210e:	b9 81       	ldd	r27, Y+1	; 0x01
    2110:	ce 0f       	add	r28, r30
    2112:	d1 1d       	adc	r29, r1
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
    211e:	ed 01       	movw	r28, r26
    2120:	08 95       	ret

00002122 <_exit>:
    2122:	f8 94       	cli

00002124 <__stop_program>:
    2124:	ff cf       	rjmp	.-2      	; 0x2124 <__stop_program>
