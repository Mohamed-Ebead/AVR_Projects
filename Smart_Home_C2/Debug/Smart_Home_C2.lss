
Smart_Home_C2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a10  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005a  00800060  00002a10  00002a84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000228c  00000000  00000000  00002ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d24  00000000  00000000  00004d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007989  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008874  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009624  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009784  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009a11  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a1df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3b       	cpi	r26, 0xBA	; 186
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 06 15 	jmp	0x2a0c	; 0x2a0c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a1 ea       	ldi	r26, 0xA1	; 161
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	81 ea       	ldi	r24, 0xA1	; 161
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 df 14 	jmp	0x29be	; 0x29be <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 fb 14 	jmp	0x29f6	; 0x29f6 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:
#include "UART_interface.h"
#include "LCD_int.h"



void main (void) {
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <main+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <main+0x8>
     b3e:	0f 92       	push	r0
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62


	u16	u16_ID = 0 ;
     b44:	1d 82       	std	Y+5, r1	; 0x05
     b46:	1c 82       	std	Y+4, r1	; 0x04
	u16 u16_PASS = 0 ;
     b48:	1b 82       	std	Y+3, r1	; 0x03
     b4a:	1a 82       	std	Y+2, r1	; 0x02


	u8 u8NBOfTries = 0 ;
     b4c:	19 82       	std	Y+1, r1	; 0x01


	vid_DIO_vid_SetDioDirections() ;
     b4e:	0e 94 36 10 	call	0x206c	; 0x206c <vid_DIO_vid_SetDioDirections>
	LCD_vidInitialize() ;
     b52:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidInitialize>
	vid_UART_vid_Initialize();
     b56:	0e 94 54 14 	call	0x28a8	; 0x28a8 <vid_UART_vid_Initialize>



	vid_WelcomeMsg();
     b5a:	0e 94 57 10 	call	0x20ae	; 0x20ae <vid_WelcomeMsg>


/**********************************************************************/

	u16_ID = Check_ID() ;
     b5e:	0e 94 07 11 	call	0x220e	; 0x220e <Check_ID>
     b62:	9d 83       	std	Y+5, r25	; 0x05
     b64:	8c 83       	std	Y+4, r24	; 0x04

	switch(u16_ID) {
     b66:	8c 81       	ldd	r24, Y+4	; 0x04
     b68:	9d 81       	ldd	r25, Y+5	; 0x05
     b6a:	24 e0       	ldi	r18, 0x04	; 4
     b6c:	82 3d       	cpi	r24, 0xD2	; 210
     b6e:	92 07       	cpc	r25, r18
     b70:	51 f5       	brne	.+84     	; 0xbc6 <main+0x90>

	case(1234) :         // correct ID
		u16_PASS = Check_Password() ;
     b72:	0e 94 1c 12 	call	0x2438	; 0x2438 <Check_Password>
     b76:	9b 83       	std	Y+3, r25	; 0x03
     b78:	8a 83       	std	Y+2, r24	; 0x02


/*------------------------------------------------------*/

	switch(u16_PASS) {
     b7a:	8a 81       	ldd	r24, Y+2	; 0x02
     b7c:	9b 81       	ldd	r25, Y+3	; 0x03
     b7e:	26 e1       	ldi	r18, 0x16	; 22
     b80:	8e 32       	cpi	r24, 0x2E	; 46
     b82:	92 07       	cpc	r25, r18
     b84:	19 f4       	brne	.+6      	; 0xb8c <main+0x56>

	/*------------------------------------*/

	case (5678) : // correct ID && correct password  in first try

		 vid_LCD_vid_DisplayData();     break ;
     b86:	0e 94 33 13 	call	0x2666	; 0x2666 <vid_LCD_vid_DisplayData>
     b8a:	1f c0       	rjmp	.+62     	; 0xbca <main+0x94>
	/*------------------------------------*/

	default :   // correct ID but Wrong password
		for (u8NBOfTries=1 ; u8NBOfTries<=3 ; u8NBOfTries++ ){
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	89 83       	std	Y+1, r24	; 0x01
     b90:	16 c0       	rjmp	.+44     	; 0xbbe <main+0x88>
		u16_PASS = Check_Password() ;
     b92:	0e 94 1c 12 	call	0x2438	; 0x2438 <Check_Password>
     b96:	9b 83       	std	Y+3, r25	; 0x03
     b98:	8a 83       	std	Y+2, r24	; 0x02

		if(u16_PASS==5678){      // correct ID && correct password in 2nd or 3rd try
     b9a:	8a 81       	ldd	r24, Y+2	; 0x02
     b9c:	9b 81       	ldd	r25, Y+3	; 0x03
     b9e:	26 e1       	ldi	r18, 0x16	; 22
     ba0:	8e 32       	cpi	r24, 0x2E	; 46
     ba2:	92 07       	cpc	r25, r18
     ba4:	19 f4       	brne	.+6      	; 0xbac <main+0x76>
		  	  vid_LCD_vid_DisplayData();     break ;
     ba6:	0e 94 33 13 	call	0x2666	; 0x2666 <vid_LCD_vid_DisplayData>
     baa:	0f c0       	rjmp	.+30     	; 0xbca <main+0x94>
			}
		else {

			}

		if ( u8NBOfTries == 2) {
     bac:	89 81       	ldd	r24, Y+1	; 0x01
     bae:	82 30       	cpi	r24, 0x02	; 2
     bb0:	19 f4       	brne	.+6      	; 0xbb8 <main+0x82>
			vid_ErrorLogInMsg() ;   		break ;
     bb2:	0e 94 0e 14 	call	0x281c	; 0x281c <vid_ErrorLogInMsg>
     bb6:	09 c0       	rjmp	.+18     	; 0xbca <main+0x94>

		 vid_LCD_vid_DisplayData();     break ;
	/*------------------------------------*/

	default :   // correct ID but Wrong password
		for (u8NBOfTries=1 ; u8NBOfTries<=3 ; u8NBOfTries++ ){
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	8f 5f       	subi	r24, 0xFF	; 255
     bbc:	89 83       	std	Y+1, r24	; 0x01
     bbe:	89 81       	ldd	r24, Y+1	; 0x01
     bc0:	84 30       	cpi	r24, 0x04	; 4
     bc2:	38 f3       	brcs	.-50     	; 0xb92 <main+0x5c>
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <main+0x94>
	break ;
/*------------------------------------------------------*/


	default :         // error ID
		vid_ErrorLogInMsg() ;   		break ;
     bc6:	0e 94 0e 14 	call	0x281c	; 0x281c <vid_ErrorLogInMsg>





	}
     bca:	0f 90       	pop	r0
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	cf 91       	pop	r28
     bd6:	df 91       	pop	r29
     bd8:	08 95       	ret

00000bda <DIO_SetPinValue>:

/******************************************************************************/

/* IO Pins */
void DIO_SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy)
{
     bda:	df 93       	push	r29
     bdc:	cf 93       	push	r28
     bde:	cd b7       	in	r28, 0x3d	; 61
     be0:	de b7       	in	r29, 0x3e	; 62
     be2:	27 97       	sbiw	r28, 0x07	; 7
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	f8 94       	cli
     be8:	de bf       	out	0x3e, r29	; 62
     bea:	0f be       	out	0x3f, r0	; 63
     bec:	cd bf       	out	0x3d, r28	; 61
     bee:	89 83       	std	Y+1, r24	; 0x01
     bf0:	6a 83       	std	Y+2, r22	; 0x02
     bf2:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD_DIO) && (u8PinIdCopy <= PIN7))
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	84 30       	cpi	r24, 0x04	; 4
     bf8:	08 f0       	brcs	.+2      	; 0xbfc <DIO_SetPinValue+0x22>
     bfa:	ee c0       	rjmp	.+476    	; 0xdd8 <DIO_SetPinValue+0x1fe>
     bfc:	8a 81       	ldd	r24, Y+2	; 0x02
     bfe:	88 30       	cpi	r24, 0x08	; 8
     c00:	08 f0       	brcs	.+2      	; 0xc04 <DIO_SetPinValue+0x2a>
     c02:	ea c0       	rjmp	.+468    	; 0xdd8 <DIO_SetPinValue+0x1fe>
	{
		if (u8PinValCopy == HIGH)
     c04:	8b 81       	ldd	r24, Y+3	; 0x03
     c06:	81 30       	cpi	r24, 0x01	; 1
     c08:	09 f0       	breq	.+2      	; 0xc0c <DIO_SetPinValue+0x32>
     c0a:	6f c0       	rjmp	.+222    	; 0xcea <DIO_SetPinValue+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
     c0c:	89 81       	ldd	r24, Y+1	; 0x01
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	3f 83       	std	Y+7, r19	; 0x07
     c14:	2e 83       	std	Y+6, r18	; 0x06
     c16:	8e 81       	ldd	r24, Y+6	; 0x06
     c18:	9f 81       	ldd	r25, Y+7	; 0x07
     c1a:	81 30       	cpi	r24, 0x01	; 1
     c1c:	91 05       	cpc	r25, r1
     c1e:	49 f1       	breq	.+82     	; 0xc72 <DIO_SetPinValue+0x98>
     c20:	2e 81       	ldd	r18, Y+6	; 0x06
     c22:	3f 81       	ldd	r19, Y+7	; 0x07
     c24:	22 30       	cpi	r18, 0x02	; 2
     c26:	31 05       	cpc	r19, r1
     c28:	2c f4       	brge	.+10     	; 0xc34 <DIO_SetPinValue+0x5a>
     c2a:	8e 81       	ldd	r24, Y+6	; 0x06
     c2c:	9f 81       	ldd	r25, Y+7	; 0x07
     c2e:	00 97       	sbiw	r24, 0x00	; 0
     c30:	61 f0       	breq	.+24     	; 0xc4a <DIO_SetPinValue+0x70>
     c32:	d2 c0       	rjmp	.+420    	; 0xdd8 <DIO_SetPinValue+0x1fe>
     c34:	2e 81       	ldd	r18, Y+6	; 0x06
     c36:	3f 81       	ldd	r19, Y+7	; 0x07
     c38:	22 30       	cpi	r18, 0x02	; 2
     c3a:	31 05       	cpc	r19, r1
     c3c:	71 f1       	breq	.+92     	; 0xc9a <DIO_SetPinValue+0xc0>
     c3e:	8e 81       	ldd	r24, Y+6	; 0x06
     c40:	9f 81       	ldd	r25, Y+7	; 0x07
     c42:	83 30       	cpi	r24, 0x03	; 3
     c44:	91 05       	cpc	r25, r1
     c46:	e9 f1       	breq	.+122    	; 0xcc2 <DIO_SetPinValue+0xe8>
     c48:	c7 c0       	rjmp	.+398    	; 0xdd8 <DIO_SetPinValue+0x1fe>
			{
				case PORTA_DIO: SET_BIT(PORTA_Register,u8PinIdCopy); break;
     c4a:	ab e3       	ldi	r26, 0x3B	; 59
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	eb e3       	ldi	r30, 0x3B	; 59
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	48 2f       	mov	r20, r24
     c56:	8a 81       	ldd	r24, Y+2	; 0x02
     c58:	28 2f       	mov	r18, r24
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	02 2e       	mov	r0, r18
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <DIO_SetPinValue+0x8e>
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	0a 94       	dec	r0
     c6a:	e2 f7       	brpl	.-8      	; 0xc64 <DIO_SetPinValue+0x8a>
     c6c:	84 2b       	or	r24, r20
     c6e:	8c 93       	st	X, r24
     c70:	b3 c0       	rjmp	.+358    	; 0xdd8 <DIO_SetPinValue+0x1fe>
				case PORTB_DIO: SET_BIT(PORTB_Register,u8PinIdCopy); break;
     c72:	a8 e3       	ldi	r26, 0x38	; 56
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	e8 e3       	ldi	r30, 0x38	; 56
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	48 2f       	mov	r20, r24
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	28 2f       	mov	r18, r24
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	02 2e       	mov	r0, r18
     c8a:	02 c0       	rjmp	.+4      	; 0xc90 <DIO_SetPinValue+0xb6>
     c8c:	88 0f       	add	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	0a 94       	dec	r0
     c92:	e2 f7       	brpl	.-8      	; 0xc8c <DIO_SetPinValue+0xb2>
     c94:	84 2b       	or	r24, r20
     c96:	8c 93       	st	X, r24
     c98:	9f c0       	rjmp	.+318    	; 0xdd8 <DIO_SetPinValue+0x1fe>
				case PORTC_DIO: SET_BIT(PORTC_Register,u8PinIdCopy); break;
     c9a:	a5 e3       	ldi	r26, 0x35	; 53
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e5 e3       	ldi	r30, 0x35	; 53
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	48 2f       	mov	r20, r24
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	28 2f       	mov	r18, r24
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	02 2e       	mov	r0, r18
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <DIO_SetPinValue+0xde>
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	0a 94       	dec	r0
     cba:	e2 f7       	brpl	.-8      	; 0xcb4 <DIO_SetPinValue+0xda>
     cbc:	84 2b       	or	r24, r20
     cbe:	8c 93       	st	X, r24
     cc0:	8b c0       	rjmp	.+278    	; 0xdd8 <DIO_SetPinValue+0x1fe>
				case PORTD_DIO: SET_BIT(PORTD_Register,u8PinIdCopy); break;
     cc2:	a2 e3       	ldi	r26, 0x32	; 50
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e2 e3       	ldi	r30, 0x32	; 50
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	48 2f       	mov	r20, r24
     cce:	8a 81       	ldd	r24, Y+2	; 0x02
     cd0:	28 2f       	mov	r18, r24
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	02 2e       	mov	r0, r18
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <DIO_SetPinValue+0x106>
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	0a 94       	dec	r0
     ce2:	e2 f7       	brpl	.-8      	; 0xcdc <DIO_SetPinValue+0x102>
     ce4:	84 2b       	or	r24, r20
     ce6:	8c 93       	st	X, r24
     ce8:	77 c0       	rjmp	.+238    	; 0xdd8 <DIO_SetPinValue+0x1fe>
			}
		
		}
		
		else if (u8PinValCopy == LOW)
     cea:	8b 81       	ldd	r24, Y+3	; 0x03
     cec:	88 23       	and	r24, r24
     cee:	09 f0       	breq	.+2      	; 0xcf2 <DIO_SetPinValue+0x118>
     cf0:	73 c0       	rjmp	.+230    	; 0xdd8 <DIO_SetPinValue+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	3d 83       	std	Y+5, r19	; 0x05
     cfa:	2c 83       	std	Y+4, r18	; 0x04
     cfc:	8c 81       	ldd	r24, Y+4	; 0x04
     cfe:	9d 81       	ldd	r25, Y+5	; 0x05
     d00:	81 30       	cpi	r24, 0x01	; 1
     d02:	91 05       	cpc	r25, r1
     d04:	59 f1       	breq	.+86     	; 0xd5c <DIO_SetPinValue+0x182>
     d06:	2c 81       	ldd	r18, Y+4	; 0x04
     d08:	3d 81       	ldd	r19, Y+5	; 0x05
     d0a:	22 30       	cpi	r18, 0x02	; 2
     d0c:	31 05       	cpc	r19, r1
     d0e:	2c f4       	brge	.+10     	; 0xd1a <DIO_SetPinValue+0x140>
     d10:	8c 81       	ldd	r24, Y+4	; 0x04
     d12:	9d 81       	ldd	r25, Y+5	; 0x05
     d14:	00 97       	sbiw	r24, 0x00	; 0
     d16:	69 f0       	breq	.+26     	; 0xd32 <DIO_SetPinValue+0x158>
     d18:	5f c0       	rjmp	.+190    	; 0xdd8 <DIO_SetPinValue+0x1fe>
     d1a:	2c 81       	ldd	r18, Y+4	; 0x04
     d1c:	3d 81       	ldd	r19, Y+5	; 0x05
     d1e:	22 30       	cpi	r18, 0x02	; 2
     d20:	31 05       	cpc	r19, r1
     d22:	89 f1       	breq	.+98     	; 0xd86 <DIO_SetPinValue+0x1ac>
     d24:	8c 81       	ldd	r24, Y+4	; 0x04
     d26:	9d 81       	ldd	r25, Y+5	; 0x05
     d28:	83 30       	cpi	r24, 0x03	; 3
     d2a:	91 05       	cpc	r25, r1
     d2c:	09 f4       	brne	.+2      	; 0xd30 <DIO_SetPinValue+0x156>
     d2e:	40 c0       	rjmp	.+128    	; 0xdb0 <DIO_SetPinValue+0x1d6>
     d30:	53 c0       	rjmp	.+166    	; 0xdd8 <DIO_SetPinValue+0x1fe>
			{
				case PORTA_DIO: CLR_BIT(PORTA_Register,u8PinIdCopy); break;
     d32:	ab e3       	ldi	r26, 0x3B	; 59
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	eb e3       	ldi	r30, 0x3B	; 59
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	48 2f       	mov	r20, r24
     d3e:	8a 81       	ldd	r24, Y+2	; 0x02
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	02 2e       	mov	r0, r18
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <DIO_SetPinValue+0x176>
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	0a 94       	dec	r0
     d52:	e2 f7       	brpl	.-8      	; 0xd4c <DIO_SetPinValue+0x172>
     d54:	80 95       	com	r24
     d56:	84 23       	and	r24, r20
     d58:	8c 93       	st	X, r24
     d5a:	3e c0       	rjmp	.+124    	; 0xdd8 <DIO_SetPinValue+0x1fe>
				case PORTB_DIO: CLR_BIT(PORTB_Register,u8PinIdCopy); break;
     d5c:	a8 e3       	ldi	r26, 0x38	; 56
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e8 e3       	ldi	r30, 0x38	; 56
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	48 2f       	mov	r20, r24
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	02 2e       	mov	r0, r18
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <DIO_SetPinValue+0x1a0>
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	0a 94       	dec	r0
     d7c:	e2 f7       	brpl	.-8      	; 0xd76 <DIO_SetPinValue+0x19c>
     d7e:	80 95       	com	r24
     d80:	84 23       	and	r24, r20
     d82:	8c 93       	st	X, r24
     d84:	29 c0       	rjmp	.+82     	; 0xdd8 <DIO_SetPinValue+0x1fe>
				case PORTC_DIO: CLR_BIT(PORTC_Register,u8PinIdCopy); break;
     d86:	a5 e3       	ldi	r26, 0x35	; 53
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e5 e3       	ldi	r30, 0x35	; 53
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	48 2f       	mov	r20, r24
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	02 2e       	mov	r0, r18
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <DIO_SetPinValue+0x1ca>
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	0a 94       	dec	r0
     da6:	e2 f7       	brpl	.-8      	; 0xda0 <DIO_SetPinValue+0x1c6>
     da8:	80 95       	com	r24
     daa:	84 23       	and	r24, r20
     dac:	8c 93       	st	X, r24
     dae:	14 c0       	rjmp	.+40     	; 0xdd8 <DIO_SetPinValue+0x1fe>
				case PORTD_DIO: CLR_BIT(PORTD_Register,u8PinIdCopy); break;
     db0:	a2 e3       	ldi	r26, 0x32	; 50
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e2 e3       	ldi	r30, 0x32	; 50
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	48 2f       	mov	r20, r24
     dbc:	8a 81       	ldd	r24, Y+2	; 0x02
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	02 2e       	mov	r0, r18
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <DIO_SetPinValue+0x1f4>
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	0a 94       	dec	r0
     dd0:	e2 f7       	brpl	.-8      	; 0xdca <DIO_SetPinValue+0x1f0>
     dd2:	80 95       	com	r24
     dd4:	84 23       	and	r24, r20
     dd6:	8c 93       	st	X, r24
	
	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
     dd8:	27 96       	adiw	r28, 0x07	; 7
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	de bf       	out	0x3e, r29	; 62
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	cd bf       	out	0x3d, r28	; 61
     de4:	cf 91       	pop	r28
     de6:	df 91       	pop	r29
     de8:	08 95       	ret

00000dea <DIO_GetPinValue>:

/******************************************************************************/


u8 DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy)
{
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	00 d0       	rcall	.+0      	; 0xdf0 <DIO_GetPinValue+0x6>
     df0:	00 d0       	rcall	.+0      	; 0xdf2 <DIO_GetPinValue+0x8>
     df2:	0f 92       	push	r0
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
     df8:	8a 83       	std	Y+2, r24	; 0x02
     dfa:	6b 83       	std	Y+3, r22	; 0x03
	/* Define Local Variable to get the BIT Value */
	u8 u8ResultLocal;
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD_DIO) && (u8PinIdCopy <= PIN7))
     dfc:	8a 81       	ldd	r24, Y+2	; 0x02
     dfe:	84 30       	cpi	r24, 0x04	; 4
     e00:	08 f0       	brcs	.+2      	; 0xe04 <DIO_GetPinValue+0x1a>
     e02:	6c c0       	rjmp	.+216    	; 0xedc <DIO_GetPinValue+0xf2>
     e04:	8b 81       	ldd	r24, Y+3	; 0x03
     e06:	88 30       	cpi	r24, 0x08	; 8
     e08:	08 f0       	brcs	.+2      	; 0xe0c <DIO_GetPinValue+0x22>
     e0a:	68 c0       	rjmp	.+208    	; 0xedc <DIO_GetPinValue+0xf2>
	{
		/* Check on the Required PORT Number */
		switch (u8PortIdCopy)
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	3d 83       	std	Y+5, r19	; 0x05
     e14:	2c 83       	std	Y+4, r18	; 0x04
     e16:	4c 81       	ldd	r20, Y+4	; 0x04
     e18:	5d 81       	ldd	r21, Y+5	; 0x05
     e1a:	41 30       	cpi	r20, 0x01	; 1
     e1c:	51 05       	cpc	r21, r1
     e1e:	41 f1       	breq	.+80     	; 0xe70 <DIO_GetPinValue+0x86>
     e20:	8c 81       	ldd	r24, Y+4	; 0x04
     e22:	9d 81       	ldd	r25, Y+5	; 0x05
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	91 05       	cpc	r25, r1
     e28:	34 f4       	brge	.+12     	; 0xe36 <DIO_GetPinValue+0x4c>
     e2a:	2c 81       	ldd	r18, Y+4	; 0x04
     e2c:	3d 81       	ldd	r19, Y+5	; 0x05
     e2e:	21 15       	cp	r18, r1
     e30:	31 05       	cpc	r19, r1
     e32:	61 f0       	breq	.+24     	; 0xe4c <DIO_GetPinValue+0x62>
     e34:	55 c0       	rjmp	.+170    	; 0xee0 <DIO_GetPinValue+0xf6>
     e36:	4c 81       	ldd	r20, Y+4	; 0x04
     e38:	5d 81       	ldd	r21, Y+5	; 0x05
     e3a:	42 30       	cpi	r20, 0x02	; 2
     e3c:	51 05       	cpc	r21, r1
     e3e:	51 f1       	breq	.+84     	; 0xe94 <DIO_GetPinValue+0xaa>
     e40:	8c 81       	ldd	r24, Y+4	; 0x04
     e42:	9d 81       	ldd	r25, Y+5	; 0x05
     e44:	83 30       	cpi	r24, 0x03	; 3
     e46:	91 05       	cpc	r25, r1
     e48:	b9 f1       	breq	.+110    	; 0xeb8 <DIO_GetPinValue+0xce>
     e4a:	4a c0       	rjmp	.+148    	; 0xee0 <DIO_GetPinValue+0xf6>
		{
			case PORTA_DIO: u8ResultLocal= GET_BIT(PINA_Register,u8PinIdCopy); break;
     e4c:	e9 e3       	ldi	r30, 0x39	; 57
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	88 2f       	mov	r24, r24
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	a9 01       	movw	r20, r18
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <DIO_GetPinValue+0x7a>
     e60:	55 95       	asr	r21
     e62:	47 95       	ror	r20
     e64:	8a 95       	dec	r24
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <DIO_GetPinValue+0x76>
     e68:	ca 01       	movw	r24, r20
     e6a:	81 70       	andi	r24, 0x01	; 1
     e6c:	89 83       	std	Y+1, r24	; 0x01
     e6e:	38 c0       	rjmp	.+112    	; 0xee0 <DIO_GetPinValue+0xf6>
			case PORTB_DIO: u8ResultLocal= GET_BIT(PINB_Register,u8PinIdCopy); break;
     e70:	e6 e3       	ldi	r30, 0x36	; 54
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	88 2f       	mov	r24, r24
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	a9 01       	movw	r20, r18
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <DIO_GetPinValue+0x9e>
     e84:	55 95       	asr	r21
     e86:	47 95       	ror	r20
     e88:	8a 95       	dec	r24
     e8a:	e2 f7       	brpl	.-8      	; 0xe84 <DIO_GetPinValue+0x9a>
     e8c:	ca 01       	movw	r24, r20
     e8e:	81 70       	andi	r24, 0x01	; 1
     e90:	89 83       	std	Y+1, r24	; 0x01
     e92:	26 c0       	rjmp	.+76     	; 0xee0 <DIO_GetPinValue+0xf6>
			case PORTC_DIO: u8ResultLocal= GET_BIT(PINC_Register,u8PinIdCopy); break;
     e94:	e3 e3       	ldi	r30, 0x33	; 51
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ea0:	88 2f       	mov	r24, r24
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	a9 01       	movw	r20, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_GetPinValue+0xc2>
     ea8:	55 95       	asr	r21
     eaa:	47 95       	ror	r20
     eac:	8a 95       	dec	r24
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_GetPinValue+0xbe>
     eb0:	ca 01       	movw	r24, r20
     eb2:	81 70       	andi	r24, 0x01	; 1
     eb4:	89 83       	std	Y+1, r24	; 0x01
     eb6:	14 c0       	rjmp	.+40     	; 0xee0 <DIO_GetPinValue+0xf6>
			case PORTD_DIO: u8ResultLocal= GET_BIT(PIND_Register,u8PinIdCopy); break;
     eb8:	e0 e3       	ldi	r30, 0x30	; 48
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	88 2f       	mov	r24, r24
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	a9 01       	movw	r20, r18
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <DIO_GetPinValue+0xe6>
     ecc:	55 95       	asr	r21
     ece:	47 95       	ror	r20
     ed0:	8a 95       	dec	r24
     ed2:	e2 f7       	brpl	.-8      	; 0xecc <DIO_GetPinValue+0xe2>
     ed4:	ca 01       	movw	r24, r20
     ed6:	81 70       	andi	r24, 0x01	; 1
     ed8:	89 83       	std	Y+1, r24	; 0x01
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <DIO_GetPinValue+0xf6>
	}
	
	else
	{
		/* return 0xff in case of error in the Pin ID or PORT ID */
		u8ResultLocal = 0xFF;
     edc:	8f ef       	ldi	r24, 0xFF	; 255
     ede:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return u8ResultLocal;
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <DIO_SetPinDirection>:

/******************************************************************************/

void DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	27 97       	sbiw	r28, 0x07	; 7
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	f8 94       	cli
     f00:	de bf       	out	0x3e, r29	; 62
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	cd bf       	out	0x3d, r28	; 61
     f06:	89 83       	std	Y+1, r24	; 0x01
     f08:	6a 83       	std	Y+2, r22	; 0x02
     f0a:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD_DIO) && (u8PinIdCopy <= PIN7))
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	84 30       	cpi	r24, 0x04	; 4
     f10:	08 f0       	brcs	.+2      	; 0xf14 <DIO_SetPinDirection+0x22>
     f12:	ee c0       	rjmp	.+476    	; 0x10f0 <DIO_SetPinDirection+0x1fe>
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	88 30       	cpi	r24, 0x08	; 8
     f18:	08 f0       	brcs	.+2      	; 0xf1c <DIO_SetPinDirection+0x2a>
     f1a:	ea c0       	rjmp	.+468    	; 0x10f0 <DIO_SetPinDirection+0x1fe>
	{
		if ( u8PinDirCopy == OUTPUT )
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	81 30       	cpi	r24, 0x01	; 1
     f20:	09 f0       	breq	.+2      	; 0xf24 <DIO_SetPinDirection+0x32>
     f22:	6f c0       	rjmp	.+222    	; 0x1002 <DIO_SetPinDirection+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	3f 83       	std	Y+7, r19	; 0x07
     f2c:	2e 83       	std	Y+6, r18	; 0x06
     f2e:	8e 81       	ldd	r24, Y+6	; 0x06
     f30:	9f 81       	ldd	r25, Y+7	; 0x07
     f32:	81 30       	cpi	r24, 0x01	; 1
     f34:	91 05       	cpc	r25, r1
     f36:	49 f1       	breq	.+82     	; 0xf8a <DIO_SetPinDirection+0x98>
     f38:	2e 81       	ldd	r18, Y+6	; 0x06
     f3a:	3f 81       	ldd	r19, Y+7	; 0x07
     f3c:	22 30       	cpi	r18, 0x02	; 2
     f3e:	31 05       	cpc	r19, r1
     f40:	2c f4       	brge	.+10     	; 0xf4c <DIO_SetPinDirection+0x5a>
     f42:	8e 81       	ldd	r24, Y+6	; 0x06
     f44:	9f 81       	ldd	r25, Y+7	; 0x07
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	61 f0       	breq	.+24     	; 0xf62 <DIO_SetPinDirection+0x70>
     f4a:	d2 c0       	rjmp	.+420    	; 0x10f0 <DIO_SetPinDirection+0x1fe>
     f4c:	2e 81       	ldd	r18, Y+6	; 0x06
     f4e:	3f 81       	ldd	r19, Y+7	; 0x07
     f50:	22 30       	cpi	r18, 0x02	; 2
     f52:	31 05       	cpc	r19, r1
     f54:	71 f1       	breq	.+92     	; 0xfb2 <DIO_SetPinDirection+0xc0>
     f56:	8e 81       	ldd	r24, Y+6	; 0x06
     f58:	9f 81       	ldd	r25, Y+7	; 0x07
     f5a:	83 30       	cpi	r24, 0x03	; 3
     f5c:	91 05       	cpc	r25, r1
     f5e:	e9 f1       	breq	.+122    	; 0xfda <DIO_SetPinDirection+0xe8>
     f60:	c7 c0       	rjmp	.+398    	; 0x10f0 <DIO_SetPinDirection+0x1fe>
			{
				case PORTA_DIO: SET_BIT(DDRA_Register,u8PinIdCopy); break;
     f62:	aa e3       	ldi	r26, 0x3A	; 58
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	ea e3       	ldi	r30, 0x3A	; 58
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	48 2f       	mov	r20, r24
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 2e       	mov	r0, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <DIO_SetPinDirection+0x8e>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	0a 94       	dec	r0
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <DIO_SetPinDirection+0x8a>
     f84:	84 2b       	or	r24, r20
     f86:	8c 93       	st	X, r24
     f88:	b3 c0       	rjmp	.+358    	; 0x10f0 <DIO_SetPinDirection+0x1fe>
				case PORTB_DIO: SET_BIT(DDRB_Register,u8PinIdCopy); break;
     f8a:	a7 e3       	ldi	r26, 0x37	; 55
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e7 e3       	ldi	r30, 0x37	; 55
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	48 2f       	mov	r20, r24
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	02 2e       	mov	r0, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <DIO_SetPinDirection+0xb6>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	0a 94       	dec	r0
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <DIO_SetPinDirection+0xb2>
     fac:	84 2b       	or	r24, r20
     fae:	8c 93       	st	X, r24
     fb0:	9f c0       	rjmp	.+318    	; 0x10f0 <DIO_SetPinDirection+0x1fe>
				case PORTC_DIO: SET_BIT(DDRC_Register,u8PinIdCopy); break;
     fb2:	a4 e3       	ldi	r26, 0x34	; 52
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e4 e3       	ldi	r30, 0x34	; 52
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 2e       	mov	r0, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <DIO_SetPinDirection+0xde>
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	0a 94       	dec	r0
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <DIO_SetPinDirection+0xda>
     fd4:	84 2b       	or	r24, r20
     fd6:	8c 93       	st	X, r24
     fd8:	8b c0       	rjmp	.+278    	; 0x10f0 <DIO_SetPinDirection+0x1fe>
				case PORTD_DIO: SET_BIT(DDRD_Register,u8PinIdCopy); break;
     fda:	a1 e3       	ldi	r26, 0x31	; 49
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e1 e3       	ldi	r30, 0x31	; 49
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 2e       	mov	r0, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <DIO_SetPinDirection+0x106>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <DIO_SetPinDirection+0x102>
     ffc:	84 2b       	or	r24, r20
     ffe:	8c 93       	st	X, r24
    1000:	77 c0       	rjmp	.+238    	; 0x10f0 <DIO_SetPinDirection+0x1fe>
			}
		}
		
		else if ( u8PinDirCopy == INPUT )
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	88 23       	and	r24, r24
    1006:	09 f0       	breq	.+2      	; 0x100a <DIO_SetPinDirection+0x118>
    1008:	73 c0       	rjmp	.+230    	; 0x10f0 <DIO_SetPinDirection+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	3d 83       	std	Y+5, r19	; 0x05
    1012:	2c 83       	std	Y+4, r18	; 0x04
    1014:	8c 81       	ldd	r24, Y+4	; 0x04
    1016:	9d 81       	ldd	r25, Y+5	; 0x05
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	91 05       	cpc	r25, r1
    101c:	59 f1       	breq	.+86     	; 0x1074 <DIO_SetPinDirection+0x182>
    101e:	2c 81       	ldd	r18, Y+4	; 0x04
    1020:	3d 81       	ldd	r19, Y+5	; 0x05
    1022:	22 30       	cpi	r18, 0x02	; 2
    1024:	31 05       	cpc	r19, r1
    1026:	2c f4       	brge	.+10     	; 0x1032 <DIO_SetPinDirection+0x140>
    1028:	8c 81       	ldd	r24, Y+4	; 0x04
    102a:	9d 81       	ldd	r25, Y+5	; 0x05
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	69 f0       	breq	.+26     	; 0x104a <DIO_SetPinDirection+0x158>
    1030:	5f c0       	rjmp	.+190    	; 0x10f0 <DIO_SetPinDirection+0x1fe>
    1032:	2c 81       	ldd	r18, Y+4	; 0x04
    1034:	3d 81       	ldd	r19, Y+5	; 0x05
    1036:	22 30       	cpi	r18, 0x02	; 2
    1038:	31 05       	cpc	r19, r1
    103a:	89 f1       	breq	.+98     	; 0x109e <DIO_SetPinDirection+0x1ac>
    103c:	8c 81       	ldd	r24, Y+4	; 0x04
    103e:	9d 81       	ldd	r25, Y+5	; 0x05
    1040:	83 30       	cpi	r24, 0x03	; 3
    1042:	91 05       	cpc	r25, r1
    1044:	09 f4       	brne	.+2      	; 0x1048 <DIO_SetPinDirection+0x156>
    1046:	40 c0       	rjmp	.+128    	; 0x10c8 <DIO_SetPinDirection+0x1d6>
    1048:	53 c0       	rjmp	.+166    	; 0x10f0 <DIO_SetPinDirection+0x1fe>
			{
				case PORTA_DIO: CLR_BIT(DDRA_Register,u8PinIdCopy); break;
    104a:	aa e3       	ldi	r26, 0x3A	; 58
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	ea e3       	ldi	r30, 0x3A	; 58
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_SetPinDirection+0x176>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <DIO_SetPinDirection+0x172>
    106c:	80 95       	com	r24
    106e:	84 23       	and	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	3e c0       	rjmp	.+124    	; 0x10f0 <DIO_SetPinDirection+0x1fe>
				case PORTB_DIO: CLR_BIT(DDRB_Register,u8PinIdCopy); break;
    1074:	a7 e3       	ldi	r26, 0x37	; 55
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e7 e3       	ldi	r30, 0x37	; 55
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 2e       	mov	r0, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <DIO_SetPinDirection+0x1a0>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <DIO_SetPinDirection+0x19c>
    1096:	80 95       	com	r24
    1098:	84 23       	and	r24, r20
    109a:	8c 93       	st	X, r24
    109c:	29 c0       	rjmp	.+82     	; 0x10f0 <DIO_SetPinDirection+0x1fe>
				case PORTC_DIO: CLR_BIT(DDRC_Register,u8PinIdCopy); break;
    109e:	a4 e3       	ldi	r26, 0x34	; 52
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e4 e3       	ldi	r30, 0x34	; 52
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 2e       	mov	r0, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <DIO_SetPinDirection+0x1ca>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	0a 94       	dec	r0
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <DIO_SetPinDirection+0x1c6>
    10c0:	80 95       	com	r24
    10c2:	84 23       	and	r24, r20
    10c4:	8c 93       	st	X, r24
    10c6:	14 c0       	rjmp	.+40     	; 0x10f0 <DIO_SetPinDirection+0x1fe>
				case PORTD_DIO: CLR_BIT(DDRD_Register,u8PinIdCopy); break;
    10c8:	a1 e3       	ldi	r26, 0x31	; 49
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e1 e3       	ldi	r30, 0x31	; 49
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	48 2f       	mov	r20, r24
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	02 2e       	mov	r0, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <DIO_SetPinDirection+0x1f4>
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	0a 94       	dec	r0
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <DIO_SetPinDirection+0x1f0>
    10ea:	80 95       	com	r24
    10ec:	84 23       	and	r24, r20
    10ee:	8c 93       	st	X, r24
	
	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
    10f0:	27 96       	adiw	r28, 0x07	; 7
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	f8 94       	cli
    10f6:	de bf       	out	0x3e, r29	; 62
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	cd bf       	out	0x3d, r28	; 61
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <DIO_SetPortDirection>:

/******************************************************************************/

/* IO Ports */
void DIO_SetPortDirection (u8 u8PortId, u8 u8PortDir)
{
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	00 d0       	rcall	.+0      	; 0x1108 <DIO_SetPortDirection+0x6>
    1108:	00 d0       	rcall	.+0      	; 0x110a <DIO_SetPortDirection+0x8>
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	89 83       	std	Y+1, r24	; 0x01
    1110:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	3c 83       	std	Y+4, r19	; 0x04
    111a:	2b 83       	std	Y+3, r18	; 0x03
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	9c 81       	ldd	r25, Y+4	; 0x04
    1120:	81 30       	cpi	r24, 0x01	; 1
    1122:	91 05       	cpc	r25, r1
    1124:	d1 f0       	breq	.+52     	; 0x115a <DIO_SetPortDirection+0x58>
    1126:	2b 81       	ldd	r18, Y+3	; 0x03
    1128:	3c 81       	ldd	r19, Y+4	; 0x04
    112a:	22 30       	cpi	r18, 0x02	; 2
    112c:	31 05       	cpc	r19, r1
    112e:	2c f4       	brge	.+10     	; 0x113a <DIO_SetPortDirection+0x38>
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	9c 81       	ldd	r25, Y+4	; 0x04
    1134:	00 97       	sbiw	r24, 0x00	; 0
    1136:	61 f0       	breq	.+24     	; 0x1150 <DIO_SetPortDirection+0x4e>
    1138:	1e c0       	rjmp	.+60     	; 0x1176 <DIO_SetPortDirection+0x74>
    113a:	2b 81       	ldd	r18, Y+3	; 0x03
    113c:	3c 81       	ldd	r19, Y+4	; 0x04
    113e:	22 30       	cpi	r18, 0x02	; 2
    1140:	31 05       	cpc	r19, r1
    1142:	81 f0       	breq	.+32     	; 0x1164 <DIO_SetPortDirection+0x62>
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	9c 81       	ldd	r25, Y+4	; 0x04
    1148:	83 30       	cpi	r24, 0x03	; 3
    114a:	91 05       	cpc	r25, r1
    114c:	81 f0       	breq	.+32     	; 0x116e <DIO_SetPortDirection+0x6c>
    114e:	13 c0       	rjmp	.+38     	; 0x1176 <DIO_SetPortDirection+0x74>
	{
			case PORTA_DIO: DDRA_Register = u8PortDir; break;
    1150:	ea e3       	ldi	r30, 0x3A	; 58
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	80 83       	st	Z, r24
    1158:	0e c0       	rjmp	.+28     	; 0x1176 <DIO_SetPortDirection+0x74>
			case PORTB_DIO: DDRB_Register = u8PortDir; break;
    115a:	e7 e3       	ldi	r30, 0x37	; 55
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	80 83       	st	Z, r24
    1162:	09 c0       	rjmp	.+18     	; 0x1176 <DIO_SetPortDirection+0x74>
			case PORTC_DIO: DDRC_Register = u8PortDir; break;
    1164:	e4 e3       	ldi	r30, 0x34	; 52
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	80 83       	st	Z, r24
    116c:	04 c0       	rjmp	.+8      	; 0x1176 <DIO_SetPortDirection+0x74>
			case PORTD_DIO: DDRD_Register = u8PortDir; break;
    116e:	e1 e3       	ldi	r30, 0x31	; 49
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	80 83       	st	Z, r24
		default: /* Wrong Port ID */       break;
	}
}
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	cf 91       	pop	r28
    1180:	df 91       	pop	r29
    1182:	08 95       	ret

00001184 <DIO_SetPortValue>:

/******************************************************************************/


void DIO_SetPortValue (u8 u8PortId, u8 u8PortVal)
{
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	00 d0       	rcall	.+0      	; 0x118a <DIO_SetPortValue+0x6>
    118a:	00 d0       	rcall	.+0      	; 0x118c <DIO_SetPortValue+0x8>
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
    1190:	89 83       	std	Y+1, r24	; 0x01
    1192:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	3c 83       	std	Y+4, r19	; 0x04
    119c:	2b 83       	std	Y+3, r18	; 0x03
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	9c 81       	ldd	r25, Y+4	; 0x04
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	91 05       	cpc	r25, r1
    11a6:	d1 f0       	breq	.+52     	; 0x11dc <DIO_SetPortValue+0x58>
    11a8:	2b 81       	ldd	r18, Y+3	; 0x03
    11aa:	3c 81       	ldd	r19, Y+4	; 0x04
    11ac:	22 30       	cpi	r18, 0x02	; 2
    11ae:	31 05       	cpc	r19, r1
    11b0:	2c f4       	brge	.+10     	; 0x11bc <DIO_SetPortValue+0x38>
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	9c 81       	ldd	r25, Y+4	; 0x04
    11b6:	00 97       	sbiw	r24, 0x00	; 0
    11b8:	61 f0       	breq	.+24     	; 0x11d2 <DIO_SetPortValue+0x4e>
    11ba:	1e c0       	rjmp	.+60     	; 0x11f8 <DIO_SetPortValue+0x74>
    11bc:	2b 81       	ldd	r18, Y+3	; 0x03
    11be:	3c 81       	ldd	r19, Y+4	; 0x04
    11c0:	22 30       	cpi	r18, 0x02	; 2
    11c2:	31 05       	cpc	r19, r1
    11c4:	81 f0       	breq	.+32     	; 0x11e6 <DIO_SetPortValue+0x62>
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ca:	83 30       	cpi	r24, 0x03	; 3
    11cc:	91 05       	cpc	r25, r1
    11ce:	81 f0       	breq	.+32     	; 0x11f0 <DIO_SetPortValue+0x6c>
    11d0:	13 c0       	rjmp	.+38     	; 0x11f8 <DIO_SetPortValue+0x74>
	{
			case PORTA_DIO: PORTA_Register = u8PortVal; break;
    11d2:	eb e3       	ldi	r30, 0x3B	; 59
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	80 83       	st	Z, r24
    11da:	0e c0       	rjmp	.+28     	; 0x11f8 <DIO_SetPortValue+0x74>
			case PORTB_DIO: PORTB_Register = u8PortVal; break;
    11dc:	e8 e3       	ldi	r30, 0x38	; 56
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	80 83       	st	Z, r24
    11e4:	09 c0       	rjmp	.+18     	; 0x11f8 <DIO_SetPortValue+0x74>
			case PORTC_DIO: PORTC_Register = u8PortVal; break;
    11e6:	e5 e3       	ldi	r30, 0x35	; 53
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	80 83       	st	Z, r24
    11ee:	04 c0       	rjmp	.+8      	; 0x11f8 <DIO_SetPortValue+0x74>
			case PORTD_DIO: PORTD_Register = u8PortVal; break;
    11f0:	e2 e3       	ldi	r30, 0x32	; 50
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	80 83       	st	Z, r24
		default: /* Wrong Port ID */        break;
	}
}
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <KPD_u8GetPressedKey>:
#define KPD_PORT  PORTC_DIO




u8 KPD_u8GetPressedKey(void){
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	61 97       	sbiw	r28, 0x11	; 17
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61

		const u8 arr[4][4]= {{7,8,9,0},{4,5,6,0},{1,2,3,0},{0,0,0,0}};   // keypad button's array
		u8 NB =0 	;  //  returned pressed button number
    121a:	19 8a       	std	Y+17, r1	; 0x11
		u8 i =0 ; // row iterator
    121c:	18 8a       	std	Y+16, r1	; 0x10
		u8 j =0 ; // coloumn iterator
    121e:	1f 86       	std	Y+15, r1	; 0x0f


	//  output row loop
		for(i = 0 ;i <4 ;i ++){
    1220:	18 8a       	std	Y+16, r1	; 0x10
    1222:	ab c0       	rjmp	.+342    	; 0x137a <KPD_u8GetPressedKey+0x174>

			DIO_SetPinValue(KPD_PORT , i , LOW);  // shift 0 to row i and search for pressed coloum
    1224:	82 e0       	ldi	r24, 0x02	; 2
    1226:	68 89       	ldd	r22, Y+16	; 0x10
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_SetPinValue>

	// input coloums loop
			for(j =4 ;j <8 ;j ++){     // search for
    122e:	84 e0       	ldi	r24, 0x04	; 4
    1230:	8f 87       	std	Y+15, r24	; 0x0f
    1232:	97 c0       	rjmp	.+302    	; 0x1362 <KPD_u8GetPressedKey+0x15c>

				if(!(DIO_GetPinValue(KPD_PORT, j ))){
    1234:	82 e0       	ldi	r24, 0x02	; 2
    1236:	6f 85       	ldd	r22, Y+15	; 0x0f
    1238:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_GetPinValue>
    123c:	88 23       	and	r24, r24
    123e:	09 f0       	breq	.+2      	; 0x1242 <KPD_u8GetPressedKey+0x3c>
    1240:	8d c0       	rjmp	.+282    	; 0x135c <KPD_u8GetPressedKey+0x156>

					NB=arr[i][j - 4 ] ;
    1242:	88 89       	ldd	r24, Y+16	; 0x10
    1244:	48 2f       	mov	r20, r24
    1246:	50 e0       	ldi	r21, 0x00	; 0
    1248:	8f 85       	ldd	r24, Y+15	; 0x0f
    124a:	88 2f       	mov	r24, r24
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	9c 01       	movw	r18, r24
    1250:	24 50       	subi	r18, 0x04	; 4
    1252:	30 40       	sbci	r19, 0x00	; 0
    1254:	ca 01       	movw	r24, r20
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	82 0f       	add	r24, r18
    1260:	93 1f       	adc	r25, r19
    1262:	fc 01       	movw	r30, r24
    1264:	e7 55       	subi	r30, 0x57	; 87
    1266:	ff 4f       	sbci	r31, 0xFF	; 255
    1268:	80 81       	ld	r24, Z
    126a:	89 8b       	std	Y+17, r24	; 0x11

					 while (!(DIO_GetPinValue(KPD_PORT, j))) ;
    126c:	82 e0       	ldi	r24, 0x02	; 2
    126e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1270:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_GetPinValue>
    1274:	88 23       	and	r24, r24
    1276:	d1 f3       	breq	.-12     	; 0x126c <KPD_u8GetPressedKey+0x66>
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	a0 ea       	ldi	r26, 0xA0	; 160
    127e:	b1 e4       	ldi	r27, 0x41	; 65
    1280:	8b 87       	std	Y+11, r24	; 0x0b
    1282:	9c 87       	std	Y+12, r25	; 0x0c
    1284:	ad 87       	std	Y+13, r26	; 0x0d
    1286:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1288:	6b 85       	ldd	r22, Y+11	; 0x0b
    128a:	7c 85       	ldd	r23, Y+12	; 0x0c
    128c:	8d 85       	ldd	r24, Y+13	; 0x0d
    128e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e8       	ldi	r19, 0x80	; 128
    1294:	4b e3       	ldi	r20, 0x3B	; 59
    1296:	55 e4       	ldi	r21, 0x45	; 69
    1298:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	8f 83       	std	Y+7, r24	; 0x07
    12a2:	98 87       	std	Y+8, r25	; 0x08
    12a4:	a9 87       	std	Y+9, r26	; 0x09
    12a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12a8:	6f 81       	ldd	r22, Y+7	; 0x07
    12aa:	78 85       	ldd	r23, Y+8	; 0x08
    12ac:	89 85       	ldd	r24, Y+9	; 0x09
    12ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	40 e8       	ldi	r20, 0x80	; 128
    12b6:	5f e3       	ldi	r21, 0x3F	; 63
    12b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    12bc:	88 23       	and	r24, r24
    12be:	2c f4       	brge	.+10     	; 0x12ca <KPD_u8GetPressedKey+0xc4>
		__ticks = 1;
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	9e 83       	std	Y+6, r25	; 0x06
    12c6:	8d 83       	std	Y+5, r24	; 0x05
    12c8:	3f c0       	rjmp	.+126    	; 0x1348 <KPD_u8GetPressedKey+0x142>
	else if (__tmp > 65535)
    12ca:	6f 81       	ldd	r22, Y+7	; 0x07
    12cc:	78 85       	ldd	r23, Y+8	; 0x08
    12ce:	89 85       	ldd	r24, Y+9	; 0x09
    12d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	3f ef       	ldi	r19, 0xFF	; 255
    12d6:	4f e7       	ldi	r20, 0x7F	; 127
    12d8:	57 e4       	ldi	r21, 0x47	; 71
    12da:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12de:	18 16       	cp	r1, r24
    12e0:	4c f5       	brge	.+82     	; 0x1334 <KPD_u8GetPressedKey+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	40 e2       	ldi	r20, 0x20	; 32
    12f0:	51 e4       	ldi	r21, 0x41	; 65
    12f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	bc 01       	movw	r22, r24
    12fc:	cd 01       	movw	r24, r26
    12fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	9e 83       	std	Y+6, r25	; 0x06
    1308:	8d 83       	std	Y+5, r24	; 0x05
    130a:	0f c0       	rjmp	.+30     	; 0x132a <KPD_u8GetPressedKey+0x124>
    130c:	8c e2       	ldi	r24, 0x2C	; 44
    130e:	91 e0       	ldi	r25, 0x01	; 1
    1310:	9c 83       	std	Y+4, r25	; 0x04
    1312:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	9c 81       	ldd	r25, Y+4	; 0x04
    1318:	01 97       	sbiw	r24, 0x01	; 1
    131a:	f1 f7       	brne	.-4      	; 0x1318 <KPD_u8GetPressedKey+0x112>
    131c:	9c 83       	std	Y+4, r25	; 0x04
    131e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1320:	8d 81       	ldd	r24, Y+5	; 0x05
    1322:	9e 81       	ldd	r25, Y+6	; 0x06
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	9e 83       	std	Y+6, r25	; 0x06
    1328:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    132a:	8d 81       	ldd	r24, Y+5	; 0x05
    132c:	9e 81       	ldd	r25, Y+6	; 0x06
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	69 f7       	brne	.-38     	; 0x130c <KPD_u8GetPressedKey+0x106>
    1332:	14 c0       	rjmp	.+40     	; 0x135c <KPD_u8GetPressedKey+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1334:	6f 81       	ldd	r22, Y+7	; 0x07
    1336:	78 85       	ldd	r23, Y+8	; 0x08
    1338:	89 85       	ldd	r24, Y+9	; 0x09
    133a:	9a 85       	ldd	r25, Y+10	; 0x0a
    133c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1340:	dc 01       	movw	r26, r24
    1342:	cb 01       	movw	r24, r22
    1344:	9e 83       	std	Y+6, r25	; 0x06
    1346:	8d 83       	std	Y+5, r24	; 0x05
    1348:	8d 81       	ldd	r24, Y+5	; 0x05
    134a:	9e 81       	ldd	r25, Y+6	; 0x06
    134c:	9a 83       	std	Y+2, r25	; 0x02
    134e:	89 83       	std	Y+1, r24	; 0x01
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	9a 81       	ldd	r25, Y+2	; 0x02
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	f1 f7       	brne	.-4      	; 0x1354 <KPD_u8GetPressedKey+0x14e>
    1358:	9a 83       	std	Y+2, r25	; 0x02
    135a:	89 83       	std	Y+1, r24	; 0x01
		for(i = 0 ;i <4 ;i ++){

			DIO_SetPinValue(KPD_PORT , i , LOW);  // shift 0 to row i and search for pressed coloum

	// input coloums loop
			for(j =4 ;j <8 ;j ++){     // search for
    135c:	8f 85       	ldd	r24, Y+15	; 0x0f
    135e:	8f 5f       	subi	r24, 0xFF	; 255
    1360:	8f 87       	std	Y+15, r24	; 0x0f
    1362:	8f 85       	ldd	r24, Y+15	; 0x0f
    1364:	88 30       	cpi	r24, 0x08	; 8
    1366:	08 f4       	brcc	.+2      	; 0x136a <KPD_u8GetPressedKey+0x164>
    1368:	65 cf       	rjmp	.-310    	; 0x1234 <KPD_u8GetPressedKey+0x2e>
				else {

				}

			}
			DIO_SetPinValue(KPD_PORT , i , HIGH); 	// toggele 0 to 1 in next loop
    136a:	82 e0       	ldi	r24, 0x02	; 2
    136c:	68 89       	ldd	r22, Y+16	; 0x10
    136e:	41 e0       	ldi	r20, 0x01	; 1
    1370:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_SetPinValue>
		u8 i =0 ; // row iterator
		u8 j =0 ; // coloumn iterator


	//  output row loop
		for(i = 0 ;i <4 ;i ++){
    1374:	88 89       	ldd	r24, Y+16	; 0x10
    1376:	8f 5f       	subi	r24, 0xFF	; 255
    1378:	88 8b       	std	Y+16, r24	; 0x10
    137a:	88 89       	ldd	r24, Y+16	; 0x10
    137c:	84 30       	cpi	r24, 0x04	; 4
    137e:	08 f4       	brcc	.+2      	; 0x1382 <KPD_u8GetPressedKey+0x17c>
    1380:	51 cf       	rjmp	.-350    	; 0x1224 <KPD_u8GetPressedKey+0x1e>
			}
			DIO_SetPinValue(KPD_PORT , i , HIGH); 	// toggele 0 to 1 in next loop

		}

		return NB ;
    1382:	89 89       	ldd	r24, Y+17	; 0x11
	}
    1384:	61 96       	adiw	r28, 0x11	; 17
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
    1390:	cf 91       	pop	r28
    1392:	df 91       	pop	r29
    1394:	08 95       	ret

00001396 <LCD_vidWriteCommand>:
#include "LCD_int.h"
#include "LCD_Config.h"


/****************************************************************/
void LCD_vidWriteCommand (u8 u8CmdCpy) {
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	2f 97       	sbiw	r28, 0x0f	; 15
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	f8 94       	cli
    13a4:	de bf       	out	0x3e, r29	; 62
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	cd bf       	out	0x3d, r28	; 61
    13aa:	8f 87       	std	Y+15, r24	; 0x0f
	  // Set RS = 0
	  DIO_SetPinValue(Ctrl_PORT , RS, LOW);
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	61 e0       	ldi	r22, 0x01	; 1
    13b0:	40 e0       	ldi	r20, 0x00	; 0
    13b2:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_SetPinValue>

	  // Set R/W = 0
	  DIO_SetPinValue(Ctrl_PORT , RW, LOW);
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	62 e0       	ldi	r22, 0x02	; 2
    13ba:	40 e0       	ldi	r20, 0x00	; 0
    13bc:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_SetPinValue>

	  // Set EN = 0
	  DIO_SetPinValue(Ctrl_PORT , E, HIGH);
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	63 e0       	ldi	r22, 0x03	; 3
    13c4:	41 e0       	ldi	r20, 0x01	; 1
    13c6:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_SetPinValue>

	  DIO_SetPortValue (Buff_PORT,u8CmdCpy);
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	6f 85       	ldd	r22, Y+15	; 0x0f
    13ce:	0e 94 c2 08 	call	0x1184	; 0x1184 <DIO_SetPortValue>

	  // set EN to 1 after settting command
	  // pulse
	  DIO_SetPinValue(Ctrl_PORT , E, LOW);
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	63 e0       	ldi	r22, 0x03	; 3
    13d6:	40 e0       	ldi	r20, 0x00	; 0
    13d8:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_SetPinValue>
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	a0 e2       	ldi	r26, 0x20	; 32
    13e2:	b1 e4       	ldi	r27, 0x41	; 65
    13e4:	8b 87       	std	Y+11, r24	; 0x0b
    13e6:	9c 87       	std	Y+12, r25	; 0x0c
    13e8:	ad 87       	std	Y+13, r26	; 0x0d
    13ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    13f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	30 e8       	ldi	r19, 0x80	; 128
    13f8:	4b e3       	ldi	r20, 0x3B	; 59
    13fa:	55 e4       	ldi	r21, 0x45	; 69
    13fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	8f 83       	std	Y+7, r24	; 0x07
    1406:	98 87       	std	Y+8, r25	; 0x08
    1408:	a9 87       	std	Y+9, r26	; 0x09
    140a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    140c:	6f 81       	ldd	r22, Y+7	; 0x07
    140e:	78 85       	ldd	r23, Y+8	; 0x08
    1410:	89 85       	ldd	r24, Y+9	; 0x09
    1412:	9a 85       	ldd	r25, Y+10	; 0x0a
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	40 e8       	ldi	r20, 0x80	; 128
    141a:	5f e3       	ldi	r21, 0x3F	; 63
    141c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1420:	88 23       	and	r24, r24
    1422:	2c f4       	brge	.+10     	; 0x142e <LCD_vidWriteCommand+0x98>
		__ticks = 1;
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	9e 83       	std	Y+6, r25	; 0x06
    142a:	8d 83       	std	Y+5, r24	; 0x05
    142c:	3f c0       	rjmp	.+126    	; 0x14ac <LCD_vidWriteCommand+0x116>
	else if (__tmp > 65535)
    142e:	6f 81       	ldd	r22, Y+7	; 0x07
    1430:	78 85       	ldd	r23, Y+8	; 0x08
    1432:	89 85       	ldd	r24, Y+9	; 0x09
    1434:	9a 85       	ldd	r25, Y+10	; 0x0a
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	3f ef       	ldi	r19, 0xFF	; 255
    143a:	4f e7       	ldi	r20, 0x7F	; 127
    143c:	57 e4       	ldi	r21, 0x47	; 71
    143e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1442:	18 16       	cp	r1, r24
    1444:	4c f5       	brge	.+82     	; 0x1498 <LCD_vidWriteCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1446:	6b 85       	ldd	r22, Y+11	; 0x0b
    1448:	7c 85       	ldd	r23, Y+12	; 0x0c
    144a:	8d 85       	ldd	r24, Y+13	; 0x0d
    144c:	9e 85       	ldd	r25, Y+14	; 0x0e
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	40 e2       	ldi	r20, 0x20	; 32
    1454:	51 e4       	ldi	r21, 0x41	; 65
    1456:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    145a:	dc 01       	movw	r26, r24
    145c:	cb 01       	movw	r24, r22
    145e:	bc 01       	movw	r22, r24
    1460:	cd 01       	movw	r24, r26
    1462:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1466:	dc 01       	movw	r26, r24
    1468:	cb 01       	movw	r24, r22
    146a:	9e 83       	std	Y+6, r25	; 0x06
    146c:	8d 83       	std	Y+5, r24	; 0x05
    146e:	0f c0       	rjmp	.+30     	; 0x148e <LCD_vidWriteCommand+0xf8>
    1470:	8c e2       	ldi	r24, 0x2C	; 44
    1472:	91 e0       	ldi	r25, 0x01	; 1
    1474:	9c 83       	std	Y+4, r25	; 0x04
    1476:	8b 83       	std	Y+3, r24	; 0x03
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	9c 81       	ldd	r25, Y+4	; 0x04
    147c:	01 97       	sbiw	r24, 0x01	; 1
    147e:	f1 f7       	brne	.-4      	; 0x147c <LCD_vidWriteCommand+0xe6>
    1480:	9c 83       	std	Y+4, r25	; 0x04
    1482:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1484:	8d 81       	ldd	r24, Y+5	; 0x05
    1486:	9e 81       	ldd	r25, Y+6	; 0x06
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	9e 83       	std	Y+6, r25	; 0x06
    148c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    148e:	8d 81       	ldd	r24, Y+5	; 0x05
    1490:	9e 81       	ldd	r25, Y+6	; 0x06
    1492:	00 97       	sbiw	r24, 0x00	; 0
    1494:	69 f7       	brne	.-38     	; 0x1470 <LCD_vidWriteCommand+0xda>
    1496:	14 c0       	rjmp	.+40     	; 0x14c0 <LCD_vidWriteCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1498:	6f 81       	ldd	r22, Y+7	; 0x07
    149a:	78 85       	ldd	r23, Y+8	; 0x08
    149c:	89 85       	ldd	r24, Y+9	; 0x09
    149e:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	9e 83       	std	Y+6, r25	; 0x06
    14aa:	8d 83       	std	Y+5, r24	; 0x05
    14ac:	8d 81       	ldd	r24, Y+5	; 0x05
    14ae:	9e 81       	ldd	r25, Y+6	; 0x06
    14b0:	9a 83       	std	Y+2, r25	; 0x02
    14b2:	89 83       	std	Y+1, r24	; 0x01
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	9a 81       	ldd	r25, Y+2	; 0x02
    14b8:	01 97       	sbiw	r24, 0x01	; 1
    14ba:	f1 f7       	brne	.-4      	; 0x14b8 <LCD_vidWriteCommand+0x122>
    14bc:	9a 83       	std	Y+2, r25	; 0x02
    14be:	89 83       	std	Y+1, r24	; 0x01
	  _delay_ms(10);
	  DIO_SetPinValue(Ctrl_PORT , E, HIGH);
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	63 e0       	ldi	r22, 0x03	; 3
    14c4:	41 e0       	ldi	r20, 0x01	; 1
    14c6:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_SetPinValue>

  }
    14ca:	2f 96       	adiw	r28, 0x0f	; 15
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	de bf       	out	0x3e, r29	; 62
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	cd bf       	out	0x3d, r28	; 61
    14d6:	cf 91       	pop	r28
    14d8:	df 91       	pop	r29
    14da:	08 95       	ret

000014dc <LCD_vidInitialize>:


/****************************************************************/


void LCD_vidInitialize(void){
    14dc:	0f 93       	push	r16
    14de:	1f 93       	push	r17
    14e0:	df 93       	push	r29
    14e2:	cf 93       	push	r28
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	c6 54       	subi	r28, 0x46	; 70
    14ea:	d0 40       	sbci	r29, 0x00	; 0
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	f8 94       	cli
    14f0:	de bf       	out	0x3e, r29	; 62
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	cd bf       	out	0x3d, r28	; 61


	/****************  LCD Configuration  *****************/

			  // SET VDD TO D0   5 Volt (D0 >> VDD)
			  DIO_SetPinDirection (Ctrl_PORT, VDD , HIGH);
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	60 e0       	ldi	r22, 0x00	; 0
    14fa:	41 e0       	ldi	r20, 0x01	; 1
    14fc:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_SetPinDirection>

			  //  RS >> D1
			  DIO_SetPinDirection (Ctrl_PORT, RS, HIGH);
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	61 e0       	ldi	r22, 0x01	; 1
    1504:	41 e0       	ldi	r20, 0x01	; 1
    1506:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_SetPinDirection>

			  //  R/W >> D2
			  DIO_SetPinDirection (Ctrl_PORT, RW, HIGH);
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	62 e0       	ldi	r22, 0x02	; 2
    150e:	41 e0       	ldi	r20, 0x01	; 1
    1510:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_SetPinDirection>

			  //  Enable >> D3
			   DIO_SetPinDirection (Ctrl_PORT, E, HIGH);
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	63 e0       	ldi	r22, 0x03	; 3
    1518:	41 e0       	ldi	r20, 0x01	; 1
    151a:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_SetPinDirection>


			  //SET PORTC AS OUTPUT (PORTC >> DB0...DB7)
			  DIO_SetPortDirection (Buff_PORT, 0XFF);
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	6f ef       	ldi	r22, 0xFF	; 255
    1522:	0e 94 81 08 	call	0x1102	; 0x1102 <DIO_SetPortDirection>

	  /***************************************************************/

	 // set VDD @ A0 to 5 volt
	  DIO_SetPinValue(Ctrl_PORT , VDD, HIGH);
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	60 e0       	ldi	r22, 0x00	; 0
    152a:	41 e0       	ldi	r20, 0x01	; 1
    152c:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_SetPinValue>
    1530:	fe 01       	movw	r30, r28
    1532:	ed 5b       	subi	r30, 0xBD	; 189
    1534:	ff 4f       	sbci	r31, 0xFF	; 255
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	a8 e4       	ldi	r26, 0x48	; 72
    153c:	b2 e4       	ldi	r27, 0x42	; 66
    153e:	80 83       	st	Z, r24
    1540:	91 83       	std	Z+1, r25	; 0x01
    1542:	a2 83       	std	Z+2, r26	; 0x02
    1544:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1546:	8e 01       	movw	r16, r28
    1548:	01 5c       	subi	r16, 0xC1	; 193
    154a:	1f 4f       	sbci	r17, 0xFF	; 255
    154c:	fe 01       	movw	r30, r28
    154e:	ed 5b       	subi	r30, 0xBD	; 189
    1550:	ff 4f       	sbci	r31, 0xFF	; 255
    1552:	60 81       	ld	r22, Z
    1554:	71 81       	ldd	r23, Z+1	; 0x01
    1556:	82 81       	ldd	r24, Z+2	; 0x02
    1558:	93 81       	ldd	r25, Z+3	; 0x03
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	30 e8       	ldi	r19, 0x80	; 128
    155e:	4b e3       	ldi	r20, 0x3B	; 59
    1560:	55 e4       	ldi	r21, 0x45	; 69
    1562:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1566:	dc 01       	movw	r26, r24
    1568:	cb 01       	movw	r24, r22
    156a:	f8 01       	movw	r30, r16
    156c:	80 83       	st	Z, r24
    156e:	91 83       	std	Z+1, r25	; 0x01
    1570:	a2 83       	std	Z+2, r26	; 0x02
    1572:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1574:	fe 01       	movw	r30, r28
    1576:	ff 96       	adiw	r30, 0x3f	; 63
    1578:	60 81       	ld	r22, Z
    157a:	71 81       	ldd	r23, Z+1	; 0x01
    157c:	82 81       	ldd	r24, Z+2	; 0x02
    157e:	93 81       	ldd	r25, Z+3	; 0x03
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	40 e8       	ldi	r20, 0x80	; 128
    1586:	5f e3       	ldi	r21, 0x3F	; 63
    1588:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    158c:	88 23       	and	r24, r24
    158e:	2c f4       	brge	.+10     	; 0x159a <LCD_vidInitialize+0xbe>
		__ticks = 1;
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	9e af       	std	Y+62, r25	; 0x3e
    1596:	8d af       	std	Y+61, r24	; 0x3d
    1598:	46 c0       	rjmp	.+140    	; 0x1626 <LCD_vidInitialize+0x14a>
	else if (__tmp > 65535)
    159a:	fe 01       	movw	r30, r28
    159c:	ff 96       	adiw	r30, 0x3f	; 63
    159e:	60 81       	ld	r22, Z
    15a0:	71 81       	ldd	r23, Z+1	; 0x01
    15a2:	82 81       	ldd	r24, Z+2	; 0x02
    15a4:	93 81       	ldd	r25, Z+3	; 0x03
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	3f ef       	ldi	r19, 0xFF	; 255
    15aa:	4f e7       	ldi	r20, 0x7F	; 127
    15ac:	57 e4       	ldi	r21, 0x47	; 71
    15ae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15b2:	18 16       	cp	r1, r24
    15b4:	64 f5       	brge	.+88     	; 0x160e <LCD_vidInitialize+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b6:	fe 01       	movw	r30, r28
    15b8:	ed 5b       	subi	r30, 0xBD	; 189
    15ba:	ff 4f       	sbci	r31, 0xFF	; 255
    15bc:	60 81       	ld	r22, Z
    15be:	71 81       	ldd	r23, Z+1	; 0x01
    15c0:	82 81       	ldd	r24, Z+2	; 0x02
    15c2:	93 81       	ldd	r25, Z+3	; 0x03
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	40 e2       	ldi	r20, 0x20	; 32
    15ca:	51 e4       	ldi	r21, 0x41	; 65
    15cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	bc 01       	movw	r22, r24
    15d6:	cd 01       	movw	r24, r26
    15d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	9e af       	std	Y+62, r25	; 0x3e
    15e2:	8d af       	std	Y+61, r24	; 0x3d
    15e4:	0f c0       	rjmp	.+30     	; 0x1604 <LCD_vidInitialize+0x128>
    15e6:	8c e2       	ldi	r24, 0x2C	; 44
    15e8:	91 e0       	ldi	r25, 0x01	; 1
    15ea:	9c af       	std	Y+60, r25	; 0x3c
    15ec:	8b af       	std	Y+59, r24	; 0x3b
    15ee:	8b ad       	ldd	r24, Y+59	; 0x3b
    15f0:	9c ad       	ldd	r25, Y+60	; 0x3c
    15f2:	01 97       	sbiw	r24, 0x01	; 1
    15f4:	f1 f7       	brne	.-4      	; 0x15f2 <LCD_vidInitialize+0x116>
    15f6:	9c af       	std	Y+60, r25	; 0x3c
    15f8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    15fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	9e af       	std	Y+62, r25	; 0x3e
    1602:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1604:	8d ad       	ldd	r24, Y+61	; 0x3d
    1606:	9e ad       	ldd	r25, Y+62	; 0x3e
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	69 f7       	brne	.-38     	; 0x15e6 <LCD_vidInitialize+0x10a>
    160c:	16 c0       	rjmp	.+44     	; 0x163a <LCD_vidInitialize+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    160e:	fe 01       	movw	r30, r28
    1610:	ff 96       	adiw	r30, 0x3f	; 63
    1612:	60 81       	ld	r22, Z
    1614:	71 81       	ldd	r23, Z+1	; 0x01
    1616:	82 81       	ldd	r24, Z+2	; 0x02
    1618:	93 81       	ldd	r25, Z+3	; 0x03
    161a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	9e af       	std	Y+62, r25	; 0x3e
    1624:	8d af       	std	Y+61, r24	; 0x3d
    1626:	8d ad       	ldd	r24, Y+61	; 0x3d
    1628:	9e ad       	ldd	r25, Y+62	; 0x3e
    162a:	9a af       	std	Y+58, r25	; 0x3a
    162c:	89 af       	std	Y+57, r24	; 0x39
    162e:	89 ad       	ldd	r24, Y+57	; 0x39
    1630:	9a ad       	ldd	r25, Y+58	; 0x3a
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	f1 f7       	brne	.-4      	; 0x1632 <LCD_vidInitialize+0x156>
    1636:	9a af       	std	Y+58, r25	; 0x3a
    1638:	89 af       	std	Y+57, r24	; 0x39
	  _delay_ms(50);



	 // FUNCTION SET
	  LCD_vidWriteCommand (0b00111000);//0X38  // N=0 1 line 0b00110000
    163a:	88 e3       	ldi	r24, 0x38	; 56
    163c:	0e 94 cb 09 	call	0x1396	; 0x1396 <LCD_vidWriteCommand>
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	a0 e2       	ldi	r26, 0x20	; 32
    1646:	b1 e4       	ldi	r27, 0x41	; 65
    1648:	8d ab       	std	Y+53, r24	; 0x35
    164a:	9e ab       	std	Y+54, r25	; 0x36
    164c:	af ab       	std	Y+55, r26	; 0x37
    164e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1650:	6d a9       	ldd	r22, Y+53	; 0x35
    1652:	7e a9       	ldd	r23, Y+54	; 0x36
    1654:	8f a9       	ldd	r24, Y+55	; 0x37
    1656:	98 ad       	ldd	r25, Y+56	; 0x38
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e8       	ldi	r19, 0x80	; 128
    165c:	4b e3       	ldi	r20, 0x3B	; 59
    165e:	55 e4       	ldi	r21, 0x45	; 69
    1660:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	89 ab       	std	Y+49, r24	; 0x31
    166a:	9a ab       	std	Y+50, r25	; 0x32
    166c:	ab ab       	std	Y+51, r26	; 0x33
    166e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1670:	69 a9       	ldd	r22, Y+49	; 0x31
    1672:	7a a9       	ldd	r23, Y+50	; 0x32
    1674:	8b a9       	ldd	r24, Y+51	; 0x33
    1676:	9c a9       	ldd	r25, Y+52	; 0x34
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	40 e8       	ldi	r20, 0x80	; 128
    167e:	5f e3       	ldi	r21, 0x3F	; 63
    1680:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1684:	88 23       	and	r24, r24
    1686:	2c f4       	brge	.+10     	; 0x1692 <LCD_vidInitialize+0x1b6>
		__ticks = 1;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	98 ab       	std	Y+48, r25	; 0x30
    168e:	8f a7       	std	Y+47, r24	; 0x2f
    1690:	3f c0       	rjmp	.+126    	; 0x1710 <LCD_vidInitialize+0x234>
	else if (__tmp > 65535)
    1692:	69 a9       	ldd	r22, Y+49	; 0x31
    1694:	7a a9       	ldd	r23, Y+50	; 0x32
    1696:	8b a9       	ldd	r24, Y+51	; 0x33
    1698:	9c a9       	ldd	r25, Y+52	; 0x34
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	3f ef       	ldi	r19, 0xFF	; 255
    169e:	4f e7       	ldi	r20, 0x7F	; 127
    16a0:	57 e4       	ldi	r21, 0x47	; 71
    16a2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16a6:	18 16       	cp	r1, r24
    16a8:	4c f5       	brge	.+82     	; 0x16fc <LCD_vidInitialize+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16aa:	6d a9       	ldd	r22, Y+53	; 0x35
    16ac:	7e a9       	ldd	r23, Y+54	; 0x36
    16ae:	8f a9       	ldd	r24, Y+55	; 0x37
    16b0:	98 ad       	ldd	r25, Y+56	; 0x38
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	40 e2       	ldi	r20, 0x20	; 32
    16b8:	51 e4       	ldi	r21, 0x41	; 65
    16ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	bc 01       	movw	r22, r24
    16c4:	cd 01       	movw	r24, r26
    16c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	98 ab       	std	Y+48, r25	; 0x30
    16d0:	8f a7       	std	Y+47, r24	; 0x2f
    16d2:	0f c0       	rjmp	.+30     	; 0x16f2 <LCD_vidInitialize+0x216>
    16d4:	8c e2       	ldi	r24, 0x2C	; 44
    16d6:	91 e0       	ldi	r25, 0x01	; 1
    16d8:	9e a7       	std	Y+46, r25	; 0x2e
    16da:	8d a7       	std	Y+45, r24	; 0x2d
    16dc:	8d a5       	ldd	r24, Y+45	; 0x2d
    16de:	9e a5       	ldd	r25, Y+46	; 0x2e
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	f1 f7       	brne	.-4      	; 0x16e0 <LCD_vidInitialize+0x204>
    16e4:	9e a7       	std	Y+46, r25	; 0x2e
    16e6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    16ea:	98 a9       	ldd	r25, Y+48	; 0x30
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	98 ab       	std	Y+48, r25	; 0x30
    16f0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    16f4:	98 a9       	ldd	r25, Y+48	; 0x30
    16f6:	00 97       	sbiw	r24, 0x00	; 0
    16f8:	69 f7       	brne	.-38     	; 0x16d4 <LCD_vidInitialize+0x1f8>
    16fa:	14 c0       	rjmp	.+40     	; 0x1724 <LCD_vidInitialize+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16fc:	69 a9       	ldd	r22, Y+49	; 0x31
    16fe:	7a a9       	ldd	r23, Y+50	; 0x32
    1700:	8b a9       	ldd	r24, Y+51	; 0x33
    1702:	9c a9       	ldd	r25, Y+52	; 0x34
    1704:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	98 ab       	std	Y+48, r25	; 0x30
    170e:	8f a7       	std	Y+47, r24	; 0x2f
    1710:	8f a5       	ldd	r24, Y+47	; 0x2f
    1712:	98 a9       	ldd	r25, Y+48	; 0x30
    1714:	9c a7       	std	Y+44, r25	; 0x2c
    1716:	8b a7       	std	Y+43, r24	; 0x2b
    1718:	8b a5       	ldd	r24, Y+43	; 0x2b
    171a:	9c a5       	ldd	r25, Y+44	; 0x2c
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	f1 f7       	brne	.-4      	; 0x171c <LCD_vidInitialize+0x240>
    1720:	9c a7       	std	Y+44, r25	; 0x2c
    1722:	8b a7       	std	Y+43, r24	; 0x2b
	  _delay_ms (10);


	  // DISPLAY ON/OFF CONTROL
	  LCD_vidWriteCommand (0b00001111);
    1724:	8f e0       	ldi	r24, 0x0F	; 15
    1726:	0e 94 cb 09 	call	0x1396	; 0x1396 <LCD_vidWriteCommand>
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	a0 e2       	ldi	r26, 0x20	; 32
    1730:	b1 e4       	ldi	r27, 0x41	; 65
    1732:	8f a3       	std	Y+39, r24	; 0x27
    1734:	98 a7       	std	Y+40, r25	; 0x28
    1736:	a9 a7       	std	Y+41, r26	; 0x29
    1738:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    173a:	6f a1       	ldd	r22, Y+39	; 0x27
    173c:	78 a5       	ldd	r23, Y+40	; 0x28
    173e:	89 a5       	ldd	r24, Y+41	; 0x29
    1740:	9a a5       	ldd	r25, Y+42	; 0x2a
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e8       	ldi	r19, 0x80	; 128
    1746:	4b e3       	ldi	r20, 0x3B	; 59
    1748:	55 e4       	ldi	r21, 0x45	; 69
    174a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	8b a3       	std	Y+35, r24	; 0x23
    1754:	9c a3       	std	Y+36, r25	; 0x24
    1756:	ad a3       	std	Y+37, r26	; 0x25
    1758:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    175a:	6b a1       	ldd	r22, Y+35	; 0x23
    175c:	7c a1       	ldd	r23, Y+36	; 0x24
    175e:	8d a1       	ldd	r24, Y+37	; 0x25
    1760:	9e a1       	ldd	r25, Y+38	; 0x26
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	40 e8       	ldi	r20, 0x80	; 128
    1768:	5f e3       	ldi	r21, 0x3F	; 63
    176a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    176e:	88 23       	and	r24, r24
    1770:	2c f4       	brge	.+10     	; 0x177c <LCD_vidInitialize+0x2a0>
		__ticks = 1;
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	9a a3       	std	Y+34, r25	; 0x22
    1778:	89 a3       	std	Y+33, r24	; 0x21
    177a:	3f c0       	rjmp	.+126    	; 0x17fa <LCD_vidInitialize+0x31e>
	else if (__tmp > 65535)
    177c:	6b a1       	ldd	r22, Y+35	; 0x23
    177e:	7c a1       	ldd	r23, Y+36	; 0x24
    1780:	8d a1       	ldd	r24, Y+37	; 0x25
    1782:	9e a1       	ldd	r25, Y+38	; 0x26
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	3f ef       	ldi	r19, 0xFF	; 255
    1788:	4f e7       	ldi	r20, 0x7F	; 127
    178a:	57 e4       	ldi	r21, 0x47	; 71
    178c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1790:	18 16       	cp	r1, r24
    1792:	4c f5       	brge	.+82     	; 0x17e6 <LCD_vidInitialize+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1794:	6f a1       	ldd	r22, Y+39	; 0x27
    1796:	78 a5       	ldd	r23, Y+40	; 0x28
    1798:	89 a5       	ldd	r24, Y+41	; 0x29
    179a:	9a a5       	ldd	r25, Y+42	; 0x2a
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	40 e2       	ldi	r20, 0x20	; 32
    17a2:	51 e4       	ldi	r21, 0x41	; 65
    17a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	bc 01       	movw	r22, r24
    17ae:	cd 01       	movw	r24, r26
    17b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17b4:	dc 01       	movw	r26, r24
    17b6:	cb 01       	movw	r24, r22
    17b8:	9a a3       	std	Y+34, r25	; 0x22
    17ba:	89 a3       	std	Y+33, r24	; 0x21
    17bc:	0f c0       	rjmp	.+30     	; 0x17dc <LCD_vidInitialize+0x300>
    17be:	8c e2       	ldi	r24, 0x2C	; 44
    17c0:	91 e0       	ldi	r25, 0x01	; 1
    17c2:	98 a3       	std	Y+32, r25	; 0x20
    17c4:	8f 8f       	std	Y+31, r24	; 0x1f
    17c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17c8:	98 a1       	ldd	r25, Y+32	; 0x20
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	f1 f7       	brne	.-4      	; 0x17ca <LCD_vidInitialize+0x2ee>
    17ce:	98 a3       	std	Y+32, r25	; 0x20
    17d0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d2:	89 a1       	ldd	r24, Y+33	; 0x21
    17d4:	9a a1       	ldd	r25, Y+34	; 0x22
    17d6:	01 97       	sbiw	r24, 0x01	; 1
    17d8:	9a a3       	std	Y+34, r25	; 0x22
    17da:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17dc:	89 a1       	ldd	r24, Y+33	; 0x21
    17de:	9a a1       	ldd	r25, Y+34	; 0x22
    17e0:	00 97       	sbiw	r24, 0x00	; 0
    17e2:	69 f7       	brne	.-38     	; 0x17be <LCD_vidInitialize+0x2e2>
    17e4:	14 c0       	rjmp	.+40     	; 0x180e <LCD_vidInitialize+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e6:	6b a1       	ldd	r22, Y+35	; 0x23
    17e8:	7c a1       	ldd	r23, Y+36	; 0x24
    17ea:	8d a1       	ldd	r24, Y+37	; 0x25
    17ec:	9e a1       	ldd	r25, Y+38	; 0x26
    17ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	9a a3       	std	Y+34, r25	; 0x22
    17f8:	89 a3       	std	Y+33, r24	; 0x21
    17fa:	89 a1       	ldd	r24, Y+33	; 0x21
    17fc:	9a a1       	ldd	r25, Y+34	; 0x22
    17fe:	9e 8f       	std	Y+30, r25	; 0x1e
    1800:	8d 8f       	std	Y+29, r24	; 0x1d
    1802:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1804:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	f1 f7       	brne	.-4      	; 0x1806 <LCD_vidInitialize+0x32a>
    180a:	9e 8f       	std	Y+30, r25	; 0x1e
    180c:	8d 8f       	std	Y+29, r24	; 0x1d
	 //  LCD_vidWriteCommand (0b00001100); //0X0C
	  _delay_ms (10);

	  // DISPLAY CLEAR
	 	  LCD_vidWriteCommand (0b00000001);
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	0e 94 cb 09 	call	0x1396	; 0x1396 <LCD_vidWriteCommand>
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	a0 e2       	ldi	r26, 0x20	; 32
    181a:	b1 e4       	ldi	r27, 0x41	; 65
    181c:	89 8f       	std	Y+25, r24	; 0x19
    181e:	9a 8f       	std	Y+26, r25	; 0x1a
    1820:	ab 8f       	std	Y+27, r26	; 0x1b
    1822:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1824:	69 8d       	ldd	r22, Y+25	; 0x19
    1826:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1828:	8b 8d       	ldd	r24, Y+27	; 0x1b
    182a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e8       	ldi	r19, 0x80	; 128
    1830:	4b e3       	ldi	r20, 0x3B	; 59
    1832:	55 e4       	ldi	r21, 0x45	; 69
    1834:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	8d 8b       	std	Y+21, r24	; 0x15
    183e:	9e 8b       	std	Y+22, r25	; 0x16
    1840:	af 8b       	std	Y+23, r26	; 0x17
    1842:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1844:	6d 89       	ldd	r22, Y+21	; 0x15
    1846:	7e 89       	ldd	r23, Y+22	; 0x16
    1848:	8f 89       	ldd	r24, Y+23	; 0x17
    184a:	98 8d       	ldd	r25, Y+24	; 0x18
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	40 e8       	ldi	r20, 0x80	; 128
    1852:	5f e3       	ldi	r21, 0x3F	; 63
    1854:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1858:	88 23       	and	r24, r24
    185a:	2c f4       	brge	.+10     	; 0x1866 <LCD_vidInitialize+0x38a>
		__ticks = 1;
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	9c 8b       	std	Y+20, r25	; 0x14
    1862:	8b 8b       	std	Y+19, r24	; 0x13
    1864:	3f c0       	rjmp	.+126    	; 0x18e4 <LCD_vidInitialize+0x408>
	else if (__tmp > 65535)
    1866:	6d 89       	ldd	r22, Y+21	; 0x15
    1868:	7e 89       	ldd	r23, Y+22	; 0x16
    186a:	8f 89       	ldd	r24, Y+23	; 0x17
    186c:	98 8d       	ldd	r25, Y+24	; 0x18
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	3f ef       	ldi	r19, 0xFF	; 255
    1872:	4f e7       	ldi	r20, 0x7F	; 127
    1874:	57 e4       	ldi	r21, 0x47	; 71
    1876:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    187a:	18 16       	cp	r1, r24
    187c:	4c f5       	brge	.+82     	; 0x18d0 <LCD_vidInitialize+0x3f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    187e:	69 8d       	ldd	r22, Y+25	; 0x19
    1880:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1882:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1884:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	40 e2       	ldi	r20, 0x20	; 32
    188c:	51 e4       	ldi	r21, 0x41	; 65
    188e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	bc 01       	movw	r22, r24
    1898:	cd 01       	movw	r24, r26
    189a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	9c 8b       	std	Y+20, r25	; 0x14
    18a4:	8b 8b       	std	Y+19, r24	; 0x13
    18a6:	0f c0       	rjmp	.+30     	; 0x18c6 <LCD_vidInitialize+0x3ea>
    18a8:	8c e2       	ldi	r24, 0x2C	; 44
    18aa:	91 e0       	ldi	r25, 0x01	; 1
    18ac:	9a 8b       	std	Y+18, r25	; 0x12
    18ae:	89 8b       	std	Y+17, r24	; 0x11
    18b0:	89 89       	ldd	r24, Y+17	; 0x11
    18b2:	9a 89       	ldd	r25, Y+18	; 0x12
    18b4:	01 97       	sbiw	r24, 0x01	; 1
    18b6:	f1 f7       	brne	.-4      	; 0x18b4 <LCD_vidInitialize+0x3d8>
    18b8:	9a 8b       	std	Y+18, r25	; 0x12
    18ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18bc:	8b 89       	ldd	r24, Y+19	; 0x13
    18be:	9c 89       	ldd	r25, Y+20	; 0x14
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	9c 8b       	std	Y+20, r25	; 0x14
    18c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c6:	8b 89       	ldd	r24, Y+19	; 0x13
    18c8:	9c 89       	ldd	r25, Y+20	; 0x14
    18ca:	00 97       	sbiw	r24, 0x00	; 0
    18cc:	69 f7       	brne	.-38     	; 0x18a8 <LCD_vidInitialize+0x3cc>
    18ce:	14 c0       	rjmp	.+40     	; 0x18f8 <LCD_vidInitialize+0x41c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d0:	6d 89       	ldd	r22, Y+21	; 0x15
    18d2:	7e 89       	ldd	r23, Y+22	; 0x16
    18d4:	8f 89       	ldd	r24, Y+23	; 0x17
    18d6:	98 8d       	ldd	r25, Y+24	; 0x18
    18d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	9c 8b       	std	Y+20, r25	; 0x14
    18e2:	8b 8b       	std	Y+19, r24	; 0x13
    18e4:	8b 89       	ldd	r24, Y+19	; 0x13
    18e6:	9c 89       	ldd	r25, Y+20	; 0x14
    18e8:	98 8b       	std	Y+16, r25	; 0x10
    18ea:	8f 87       	std	Y+15, r24	; 0x0f
    18ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ee:	98 89       	ldd	r25, Y+16	; 0x10
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	f1 f7       	brne	.-4      	; 0x18f0 <LCD_vidInitialize+0x414>
    18f4:	98 8b       	std	Y+16, r25	; 0x10
    18f6:	8f 87       	std	Y+15, r24	; 0x0f
	 	  _delay_ms (10);

	  // Entry mode set
	  LCD_vidWriteCommand (0b00000110);//0X06
    18f8:	86 e0       	ldi	r24, 0x06	; 6
    18fa:	0e 94 cb 09 	call	0x1396	; 0x1396 <LCD_vidWriteCommand>
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	a0 ea       	ldi	r26, 0xA0	; 160
    1904:	b1 e4       	ldi	r27, 0x41	; 65
    1906:	8b 87       	std	Y+11, r24	; 0x0b
    1908:	9c 87       	std	Y+12, r25	; 0x0c
    190a:	ad 87       	std	Y+13, r26	; 0x0d
    190c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    190e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1910:	7c 85       	ldd	r23, Y+12	; 0x0c
    1912:	8d 85       	ldd	r24, Y+13	; 0x0d
    1914:	9e 85       	ldd	r25, Y+14	; 0x0e
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e8       	ldi	r19, 0x80	; 128
    191a:	4b e3       	ldi	r20, 0x3B	; 59
    191c:	55 e4       	ldi	r21, 0x45	; 69
    191e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	8f 83       	std	Y+7, r24	; 0x07
    1928:	98 87       	std	Y+8, r25	; 0x08
    192a:	a9 87       	std	Y+9, r26	; 0x09
    192c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    192e:	6f 81       	ldd	r22, Y+7	; 0x07
    1930:	78 85       	ldd	r23, Y+8	; 0x08
    1932:	89 85       	ldd	r24, Y+9	; 0x09
    1934:	9a 85       	ldd	r25, Y+10	; 0x0a
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	40 e8       	ldi	r20, 0x80	; 128
    193c:	5f e3       	ldi	r21, 0x3F	; 63
    193e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1942:	88 23       	and	r24, r24
    1944:	2c f4       	brge	.+10     	; 0x1950 <LCD_vidInitialize+0x474>
		__ticks = 1;
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	9e 83       	std	Y+6, r25	; 0x06
    194c:	8d 83       	std	Y+5, r24	; 0x05
    194e:	3f c0       	rjmp	.+126    	; 0x19ce <LCD_vidInitialize+0x4f2>
	else if (__tmp > 65535)
    1950:	6f 81       	ldd	r22, Y+7	; 0x07
    1952:	78 85       	ldd	r23, Y+8	; 0x08
    1954:	89 85       	ldd	r24, Y+9	; 0x09
    1956:	9a 85       	ldd	r25, Y+10	; 0x0a
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	3f ef       	ldi	r19, 0xFF	; 255
    195c:	4f e7       	ldi	r20, 0x7F	; 127
    195e:	57 e4       	ldi	r21, 0x47	; 71
    1960:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1964:	18 16       	cp	r1, r24
    1966:	4c f5       	brge	.+82     	; 0x19ba <LCD_vidInitialize+0x4de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1968:	6b 85       	ldd	r22, Y+11	; 0x0b
    196a:	7c 85       	ldd	r23, Y+12	; 0x0c
    196c:	8d 85       	ldd	r24, Y+13	; 0x0d
    196e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	40 e2       	ldi	r20, 0x20	; 32
    1976:	51 e4       	ldi	r21, 0x41	; 65
    1978:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	bc 01       	movw	r22, r24
    1982:	cd 01       	movw	r24, r26
    1984:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	9e 83       	std	Y+6, r25	; 0x06
    198e:	8d 83       	std	Y+5, r24	; 0x05
    1990:	0f c0       	rjmp	.+30     	; 0x19b0 <LCD_vidInitialize+0x4d4>
    1992:	8c e2       	ldi	r24, 0x2C	; 44
    1994:	91 e0       	ldi	r25, 0x01	; 1
    1996:	9c 83       	std	Y+4, r25	; 0x04
    1998:	8b 83       	std	Y+3, r24	; 0x03
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	9c 81       	ldd	r25, Y+4	; 0x04
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	f1 f7       	brne	.-4      	; 0x199e <LCD_vidInitialize+0x4c2>
    19a2:	9c 83       	std	Y+4, r25	; 0x04
    19a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a6:	8d 81       	ldd	r24, Y+5	; 0x05
    19a8:	9e 81       	ldd	r25, Y+6	; 0x06
    19aa:	01 97       	sbiw	r24, 0x01	; 1
    19ac:	9e 83       	std	Y+6, r25	; 0x06
    19ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b0:	8d 81       	ldd	r24, Y+5	; 0x05
    19b2:	9e 81       	ldd	r25, Y+6	; 0x06
    19b4:	00 97       	sbiw	r24, 0x00	; 0
    19b6:	69 f7       	brne	.-38     	; 0x1992 <LCD_vidInitialize+0x4b6>
    19b8:	14 c0       	rjmp	.+40     	; 0x19e2 <LCD_vidInitialize+0x506>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ba:	6f 81       	ldd	r22, Y+7	; 0x07
    19bc:	78 85       	ldd	r23, Y+8	; 0x08
    19be:	89 85       	ldd	r24, Y+9	; 0x09
    19c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	9e 83       	std	Y+6, r25	; 0x06
    19cc:	8d 83       	std	Y+5, r24	; 0x05
    19ce:	8d 81       	ldd	r24, Y+5	; 0x05
    19d0:	9e 81       	ldd	r25, Y+6	; 0x06
    19d2:	9a 83       	std	Y+2, r25	; 0x02
    19d4:	89 83       	std	Y+1, r24	; 0x01
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	9a 81       	ldd	r25, Y+2	; 0x02
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	f1 f7       	brne	.-4      	; 0x19da <LCD_vidInitialize+0x4fe>
    19de:	9a 83       	std	Y+2, r25	; 0x02
    19e0:	89 83       	std	Y+1, r24	; 0x01
	  _delay_ms (20);

}
    19e2:	ca 5b       	subi	r28, 0xBA	; 186
    19e4:	df 4f       	sbci	r29, 0xFF	; 255
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	de bf       	out	0x3e, r29	; 62
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	cd bf       	out	0x3d, r28	; 61
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	1f 91       	pop	r17
    19f6:	0f 91       	pop	r16
    19f8:	08 95       	ret

000019fa <LCD_vidWriteCharacter>:


/****************************************************************/

void LCD_vidWriteCharacter(u8 u8DataCpy){
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	cd b7       	in	r28, 0x3d	; 61
    1a00:	de b7       	in	r29, 0x3e	; 62
    1a02:	6d 97       	sbiw	r28, 0x1d	; 29
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	f8 94       	cli
    1a08:	de bf       	out	0x3e, r29	; 62
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	cd bf       	out	0x3d, r28	; 61
    1a0e:	8d 8f       	std	Y+29, r24	; 0x1d
	 // Set RS to HIGH
		DIO_SetPinValue(Ctrl_PORT, RS , HIGH);
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	61 e0       	ldi	r22, 0x01	; 1
    1a14:	41 e0       	ldi	r20, 0x01	; 1
    1a16:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_SetPinValue>

		// Set R/W to LOW
		DIO_SetPinValue(Ctrl_PORT, RW , LOW);
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	62 e0       	ldi	r22, 0x02	; 2
    1a1e:	40 e0       	ldi	r20, 0x00	; 0
    1a20:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_SetPinValue>

		// Set E to HIGH
		DIO_SetPinValue(Ctrl_PORT, E , HIGH);
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	63 e0       	ldi	r22, 0x03	; 3
    1a28:	41 e0       	ldi	r20, 0x01	; 1
    1a2a:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_SetPinValue>

		// Load Command on Data bus
		DIO_SetPortValue(Buff_PORT, u8DataCpy);
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a32:	0e 94 c2 08 	call	0x1184	; 0x1184 <DIO_SetPortValue>

		// Set E to LOW
		DIO_SetPinValue(Ctrl_PORT, E, LOW);
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	63 e0       	ldi	r22, 0x03	; 3
    1a3a:	40 e0       	ldi	r20, 0x00	; 0
    1a3c:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_SetPinValue>
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	a0 e2       	ldi	r26, 0x20	; 32
    1a46:	b1 e4       	ldi	r27, 0x41	; 65
    1a48:	89 8f       	std	Y+25, r24	; 0x19
    1a4a:	9a 8f       	std	Y+26, r25	; 0x1a
    1a4c:	ab 8f       	std	Y+27, r26	; 0x1b
    1a4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a50:	69 8d       	ldd	r22, Y+25	; 0x19
    1a52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e8       	ldi	r19, 0x80	; 128
    1a5c:	4b e3       	ldi	r20, 0x3B	; 59
    1a5e:	55 e4       	ldi	r21, 0x45	; 69
    1a60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	8d 8b       	std	Y+21, r24	; 0x15
    1a6a:	9e 8b       	std	Y+22, r25	; 0x16
    1a6c:	af 8b       	std	Y+23, r26	; 0x17
    1a6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a70:	6d 89       	ldd	r22, Y+21	; 0x15
    1a72:	7e 89       	ldd	r23, Y+22	; 0x16
    1a74:	8f 89       	ldd	r24, Y+23	; 0x17
    1a76:	98 8d       	ldd	r25, Y+24	; 0x18
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	40 e8       	ldi	r20, 0x80	; 128
    1a7e:	5f e3       	ldi	r21, 0x3F	; 63
    1a80:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a84:	88 23       	and	r24, r24
    1a86:	2c f4       	brge	.+10     	; 0x1a92 <LCD_vidWriteCharacter+0x98>
		__ticks = 1;
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	9c 8b       	std	Y+20, r25	; 0x14
    1a8e:	8b 8b       	std	Y+19, r24	; 0x13
    1a90:	3f c0       	rjmp	.+126    	; 0x1b10 <LCD_vidWriteCharacter+0x116>
	else if (__tmp > 65535)
    1a92:	6d 89       	ldd	r22, Y+21	; 0x15
    1a94:	7e 89       	ldd	r23, Y+22	; 0x16
    1a96:	8f 89       	ldd	r24, Y+23	; 0x17
    1a98:	98 8d       	ldd	r25, Y+24	; 0x18
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	3f ef       	ldi	r19, 0xFF	; 255
    1a9e:	4f e7       	ldi	r20, 0x7F	; 127
    1aa0:	57 e4       	ldi	r21, 0x47	; 71
    1aa2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1aa6:	18 16       	cp	r1, r24
    1aa8:	4c f5       	brge	.+82     	; 0x1afc <LCD_vidWriteCharacter+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aaa:	69 8d       	ldd	r22, Y+25	; 0x19
    1aac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ab0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	40 e2       	ldi	r20, 0x20	; 32
    1ab8:	51 e4       	ldi	r21, 0x41	; 65
    1aba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	bc 01       	movw	r22, r24
    1ac4:	cd 01       	movw	r24, r26
    1ac6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	9c 8b       	std	Y+20, r25	; 0x14
    1ad0:	8b 8b       	std	Y+19, r24	; 0x13
    1ad2:	0f c0       	rjmp	.+30     	; 0x1af2 <LCD_vidWriteCharacter+0xf8>
    1ad4:	8c e2       	ldi	r24, 0x2C	; 44
    1ad6:	91 e0       	ldi	r25, 0x01	; 1
    1ad8:	9a 8b       	std	Y+18, r25	; 0x12
    1ada:	89 8b       	std	Y+17, r24	; 0x11
    1adc:	89 89       	ldd	r24, Y+17	; 0x11
    1ade:	9a 89       	ldd	r25, Y+18	; 0x12
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	f1 f7       	brne	.-4      	; 0x1ae0 <LCD_vidWriteCharacter+0xe6>
    1ae4:	9a 8b       	std	Y+18, r25	; 0x12
    1ae6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae8:	8b 89       	ldd	r24, Y+19	; 0x13
    1aea:	9c 89       	ldd	r25, Y+20	; 0x14
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	9c 8b       	std	Y+20, r25	; 0x14
    1af0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af2:	8b 89       	ldd	r24, Y+19	; 0x13
    1af4:	9c 89       	ldd	r25, Y+20	; 0x14
    1af6:	00 97       	sbiw	r24, 0x00	; 0
    1af8:	69 f7       	brne	.-38     	; 0x1ad4 <LCD_vidWriteCharacter+0xda>
    1afa:	14 c0       	rjmp	.+40     	; 0x1b24 <LCD_vidWriteCharacter+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1afc:	6d 89       	ldd	r22, Y+21	; 0x15
    1afe:	7e 89       	ldd	r23, Y+22	; 0x16
    1b00:	8f 89       	ldd	r24, Y+23	; 0x17
    1b02:	98 8d       	ldd	r25, Y+24	; 0x18
    1b04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	9c 8b       	std	Y+20, r25	; 0x14
    1b0e:	8b 8b       	std	Y+19, r24	; 0x13
    1b10:	8b 89       	ldd	r24, Y+19	; 0x13
    1b12:	9c 89       	ldd	r25, Y+20	; 0x14
    1b14:	98 8b       	std	Y+16, r25	; 0x10
    1b16:	8f 87       	std	Y+15, r24	; 0x0f
    1b18:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b1a:	98 89       	ldd	r25, Y+16	; 0x10
    1b1c:	01 97       	sbiw	r24, 0x01	; 1
    1b1e:	f1 f7       	brne	.-4      	; 0x1b1c <LCD_vidWriteCharacter+0x122>
    1b20:	98 8b       	std	Y+16, r25	; 0x10
    1b22:	8f 87       	std	Y+15, r24	; 0x0f

		// Wait for E to settle
		_delay_ms(10);

		// Set E to HIGH
		DIO_SetPinValue(Ctrl_PORT, E, HIGH);
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	63 e0       	ldi	r22, 0x03	; 3
    1b28:	41 e0       	ldi	r20, 0x01	; 1
    1b2a:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_SetPinValue>
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	a0 e2       	ldi	r26, 0x20	; 32
    1b34:	b1 e4       	ldi	r27, 0x41	; 65
    1b36:	8b 87       	std	Y+11, r24	; 0x0b
    1b38:	9c 87       	std	Y+12, r25	; 0x0c
    1b3a:	ad 87       	std	Y+13, r26	; 0x0d
    1b3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b40:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b42:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b44:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e8       	ldi	r19, 0x80	; 128
    1b4a:	4b e3       	ldi	r20, 0x3B	; 59
    1b4c:	55 e4       	ldi	r21, 0x45	; 69
    1b4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	8f 83       	std	Y+7, r24	; 0x07
    1b58:	98 87       	std	Y+8, r25	; 0x08
    1b5a:	a9 87       	std	Y+9, r26	; 0x09
    1b5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b60:	78 85       	ldd	r23, Y+8	; 0x08
    1b62:	89 85       	ldd	r24, Y+9	; 0x09
    1b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	40 e8       	ldi	r20, 0x80	; 128
    1b6c:	5f e3       	ldi	r21, 0x3F	; 63
    1b6e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b72:	88 23       	and	r24, r24
    1b74:	2c f4       	brge	.+10     	; 0x1b80 <LCD_vidWriteCharacter+0x186>
		__ticks = 1;
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	9e 83       	std	Y+6, r25	; 0x06
    1b7c:	8d 83       	std	Y+5, r24	; 0x05
    1b7e:	3f c0       	rjmp	.+126    	; 0x1bfe <LCD_vidWriteCharacter+0x204>
	else if (__tmp > 65535)
    1b80:	6f 81       	ldd	r22, Y+7	; 0x07
    1b82:	78 85       	ldd	r23, Y+8	; 0x08
    1b84:	89 85       	ldd	r24, Y+9	; 0x09
    1b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	3f ef       	ldi	r19, 0xFF	; 255
    1b8c:	4f e7       	ldi	r20, 0x7F	; 127
    1b8e:	57 e4       	ldi	r21, 0x47	; 71
    1b90:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b94:	18 16       	cp	r1, r24
    1b96:	4c f5       	brge	.+82     	; 0x1bea <LCD_vidWriteCharacter+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b98:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	40 e2       	ldi	r20, 0x20	; 32
    1ba6:	51 e4       	ldi	r21, 0x41	; 65
    1ba8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	bc 01       	movw	r22, r24
    1bb2:	cd 01       	movw	r24, r26
    1bb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	9e 83       	std	Y+6, r25	; 0x06
    1bbe:	8d 83       	std	Y+5, r24	; 0x05
    1bc0:	0f c0       	rjmp	.+30     	; 0x1be0 <LCD_vidWriteCharacter+0x1e6>
    1bc2:	8c e2       	ldi	r24, 0x2C	; 44
    1bc4:	91 e0       	ldi	r25, 0x01	; 1
    1bc6:	9c 83       	std	Y+4, r25	; 0x04
    1bc8:	8b 83       	std	Y+3, r24	; 0x03
    1bca:	8b 81       	ldd	r24, Y+3	; 0x03
    1bcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	f1 f7       	brne	.-4      	; 0x1bce <LCD_vidWriteCharacter+0x1d4>
    1bd2:	9c 83       	std	Y+4, r25	; 0x04
    1bd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bda:	01 97       	sbiw	r24, 0x01	; 1
    1bdc:	9e 83       	std	Y+6, r25	; 0x06
    1bde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be0:	8d 81       	ldd	r24, Y+5	; 0x05
    1be2:	9e 81       	ldd	r25, Y+6	; 0x06
    1be4:	00 97       	sbiw	r24, 0x00	; 0
    1be6:	69 f7       	brne	.-38     	; 0x1bc2 <LCD_vidWriteCharacter+0x1c8>
    1be8:	14 c0       	rjmp	.+40     	; 0x1c12 <LCD_vidWriteCharacter+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bea:	6f 81       	ldd	r22, Y+7	; 0x07
    1bec:	78 85       	ldd	r23, Y+8	; 0x08
    1bee:	89 85       	ldd	r24, Y+9	; 0x09
    1bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	9e 83       	std	Y+6, r25	; 0x06
    1bfc:	8d 83       	std	Y+5, r24	; 0x05
    1bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1c00:	9e 81       	ldd	r25, Y+6	; 0x06
    1c02:	9a 83       	std	Y+2, r25	; 0x02
    1c04:	89 83       	std	Y+1, r24	; 0x01
    1c06:	89 81       	ldd	r24, Y+1	; 0x01
    1c08:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0a:	01 97       	sbiw	r24, 0x01	; 1
    1c0c:	f1 f7       	brne	.-4      	; 0x1c0a <LCD_vidWriteCharacter+0x210>
    1c0e:	9a 83       	std	Y+2, r25	; 0x02
    1c10:	89 83       	std	Y+1, r24	; 0x01

		// Delay to let the LCD Display the character
		_delay_ms(10);

}
    1c12:	6d 96       	adiw	r28, 0x1d	; 29
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	f8 94       	cli
    1c18:	de bf       	out	0x3e, r29	; 62
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	cd bf       	out	0x3d, r28	; 61
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <LCD_vidWriteString>:


/****************************************************************/

void LCD_vidWriteString (u8* pu8StringCpy, u8 u8Index){
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
    1c2c:	62 97       	sbiw	r28, 0x12	; 18
    1c2e:	0f b6       	in	r0, 0x3f	; 63
    1c30:	f8 94       	cli
    1c32:	de bf       	out	0x3e, r29	; 62
    1c34:	0f be       	out	0x3f, r0	; 63
    1c36:	cd bf       	out	0x3d, r28	; 61
    1c38:	99 8b       	std	Y+17, r25	; 0x11
    1c3a:	88 8b       	std	Y+16, r24	; 0x10
    1c3c:	6a 8b       	std	Y+18, r22	; 0x12

	// Local loop index

		u8 iteration=0;
    1c3e:	1f 86       	std	Y+15, r1	; 0x0f

		for (iteration=0; ((iteration<u8Index)&&(pu8StringCpy[iteration] != '\0')) ; iteration++)
    1c40:	1f 86       	std	Y+15, r1	; 0x0f
    1c42:	80 c0       	rjmp	.+256    	; 0x1d44 <LCD_vidWriteString+0x120>
		{
			/* Write Character on LCD */
			LCD_vidWriteCharacter(pu8StringCpy[iteration]);
    1c44:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c46:	28 2f       	mov	r18, r24
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	88 89       	ldd	r24, Y+16	; 0x10
    1c4c:	99 89       	ldd	r25, Y+17	; 0x11
    1c4e:	fc 01       	movw	r30, r24
    1c50:	e2 0f       	add	r30, r18
    1c52:	f3 1f       	adc	r31, r19
    1c54:	80 81       	ld	r24, Z
    1c56:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <LCD_vidWriteCharacter>
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	a0 e2       	ldi	r26, 0x20	; 32
    1c60:	b1 e4       	ldi	r27, 0x41	; 65
    1c62:	8b 87       	std	Y+11, r24	; 0x0b
    1c64:	9c 87       	std	Y+12, r25	; 0x0c
    1c66:	ad 87       	std	Y+13, r26	; 0x0d
    1c68:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c70:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e8       	ldi	r19, 0x80	; 128
    1c76:	4b e3       	ldi	r20, 0x3B	; 59
    1c78:	55 e4       	ldi	r21, 0x45	; 69
    1c7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	8f 83       	std	Y+7, r24	; 0x07
    1c84:	98 87       	std	Y+8, r25	; 0x08
    1c86:	a9 87       	std	Y+9, r26	; 0x09
    1c88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8c:	78 85       	ldd	r23, Y+8	; 0x08
    1c8e:	89 85       	ldd	r24, Y+9	; 0x09
    1c90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	40 e8       	ldi	r20, 0x80	; 128
    1c98:	5f e3       	ldi	r21, 0x3F	; 63
    1c9a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c9e:	88 23       	and	r24, r24
    1ca0:	2c f4       	brge	.+10     	; 0x1cac <LCD_vidWriteString+0x88>
		__ticks = 1;
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	9e 83       	std	Y+6, r25	; 0x06
    1ca8:	8d 83       	std	Y+5, r24	; 0x05
    1caa:	3f c0       	rjmp	.+126    	; 0x1d2a <LCD_vidWriteString+0x106>
	else if (__tmp > 65535)
    1cac:	6f 81       	ldd	r22, Y+7	; 0x07
    1cae:	78 85       	ldd	r23, Y+8	; 0x08
    1cb0:	89 85       	ldd	r24, Y+9	; 0x09
    1cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	3f ef       	ldi	r19, 0xFF	; 255
    1cb8:	4f e7       	ldi	r20, 0x7F	; 127
    1cba:	57 e4       	ldi	r21, 0x47	; 71
    1cbc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cc0:	18 16       	cp	r1, r24
    1cc2:	4c f5       	brge	.+82     	; 0x1d16 <LCD_vidWriteString+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e2       	ldi	r20, 0x20	; 32
    1cd2:	51 e4       	ldi	r21, 0x41	; 65
    1cd4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	bc 01       	movw	r22, r24
    1cde:	cd 01       	movw	r24, r26
    1ce0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	9e 83       	std	Y+6, r25	; 0x06
    1cea:	8d 83       	std	Y+5, r24	; 0x05
    1cec:	0f c0       	rjmp	.+30     	; 0x1d0c <LCD_vidWriteString+0xe8>
    1cee:	8c e2       	ldi	r24, 0x2C	; 44
    1cf0:	91 e0       	ldi	r25, 0x01	; 1
    1cf2:	9c 83       	std	Y+4, r25	; 0x04
    1cf4:	8b 83       	std	Y+3, r24	; 0x03
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfa:	01 97       	sbiw	r24, 0x01	; 1
    1cfc:	f1 f7       	brne	.-4      	; 0x1cfa <LCD_vidWriteString+0xd6>
    1cfe:	9c 83       	std	Y+4, r25	; 0x04
    1d00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d02:	8d 81       	ldd	r24, Y+5	; 0x05
    1d04:	9e 81       	ldd	r25, Y+6	; 0x06
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	9e 83       	std	Y+6, r25	; 0x06
    1d0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d10:	00 97       	sbiw	r24, 0x00	; 0
    1d12:	69 f7       	brne	.-38     	; 0x1cee <LCD_vidWriteString+0xca>
    1d14:	14 c0       	rjmp	.+40     	; 0x1d3e <LCD_vidWriteString+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d16:	6f 81       	ldd	r22, Y+7	; 0x07
    1d18:	78 85       	ldd	r23, Y+8	; 0x08
    1d1a:	89 85       	ldd	r24, Y+9	; 0x09
    1d1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	9e 83       	std	Y+6, r25	; 0x06
    1d28:	8d 83       	std	Y+5, r24	; 0x05
    1d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2e:	9a 83       	std	Y+2, r25	; 0x02
    1d30:	89 83       	std	Y+1, r24	; 0x01
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	9a 81       	ldd	r25, Y+2	; 0x02
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	f1 f7       	brne	.-4      	; 0x1d36 <LCD_vidWriteString+0x112>
    1d3a:	9a 83       	std	Y+2, r25	; 0x02
    1d3c:	89 83       	std	Y+1, r24	; 0x01

	// Local loop index

		u8 iteration=0;

		for (iteration=0; ((iteration<u8Index)&&(pu8StringCpy[iteration] != '\0')) ; iteration++)
    1d3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d40:	8f 5f       	subi	r24, 0xFF	; 255
    1d42:	8f 87       	std	Y+15, r24	; 0x0f
    1d44:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d46:	8a 89       	ldd	r24, Y+18	; 0x12
    1d48:	98 17       	cp	r25, r24
    1d4a:	60 f4       	brcc	.+24     	; 0x1d64 <LCD_vidWriteString+0x140>
    1d4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d4e:	28 2f       	mov	r18, r24
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	88 89       	ldd	r24, Y+16	; 0x10
    1d54:	99 89       	ldd	r25, Y+17	; 0x11
    1d56:	fc 01       	movw	r30, r24
    1d58:	e2 0f       	add	r30, r18
    1d5a:	f3 1f       	adc	r31, r19
    1d5c:	80 81       	ld	r24, Z
    1d5e:	88 23       	and	r24, r24
    1d60:	09 f0       	breq	.+2      	; 0x1d64 <LCD_vidWriteString+0x140>
    1d62:	70 cf       	rjmp	.-288    	; 0x1c44 <LCD_vidWriteString+0x20>
			LCD_vidWriteCharacter(pu8StringCpy[iteration]);

			/* Delay to let the LCD show the character */
			_delay_ms(10);
		}
}
    1d64:	62 96       	adiw	r28, 0x12	; 18
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	de bf       	out	0x3e, r29	; 62
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	cd bf       	out	0x3d, r28	; 61
    1d70:	cf 91       	pop	r28
    1d72:	df 91       	pop	r29
    1d74:	08 95       	ret

00001d76 <LCD_vidClear>:

/****************************************************************/


void LCD_vidClear(void)
{
    1d76:	df 93       	push	r29
    1d78:	cf 93       	push	r28
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
	LCD_vidWriteCommand (0x01);		/* clear display */
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	0e 94 cb 09 	call	0x1396	; 0x1396 <LCD_vidWriteCommand>
	LCD_vidWriteCommand (0x02);		/* cursor at home position */
    1d84:	82 e0       	ldi	r24, 0x02	; 2
    1d86:	0e 94 cb 09 	call	0x1396	; 0x1396 <LCD_vidWriteCommand>
}
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <Gotoxy>:

/****************************************************************/

void Gotoxy (u8 X,u8 Y){
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	00 d0       	rcall	.+0      	; 0x1d96 <Gotoxy+0x6>
    1d96:	00 d0       	rcall	.+0      	; 0x1d98 <Gotoxy+0x8>
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
    1d9c:	89 83       	std	Y+1, r24	; 0x01
    1d9e:	6a 83       	std	Y+2, r22	; 0x02
  2*16 LCD
		    {80 81 ... 8F}   0X80 = 128  :Force cursor to beginning of the first line
		    {C0 C1 ... CF}   0XC0 = 129  :Force cursor to beginning of the SECOND line

*/
	if (X>0 && X<=16)           // x from 1 to 16 , coloms : 1 or 2
    1da0:	89 81       	ldd	r24, Y+1	; 0x01
    1da2:	88 23       	and	r24, r24
    1da4:	e1 f0       	breq	.+56     	; 0x1dde <Gotoxy+0x4e>
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	81 31       	cpi	r24, 0x11	; 17
    1daa:	c8 f4       	brcc	.+50     	; 0x1dde <Gotoxy+0x4e>
		{
		    switch(Y)
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	28 2f       	mov	r18, r24
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	3c 83       	std	Y+4, r19	; 0x04
    1db4:	2b 83       	std	Y+3, r18	; 0x03
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dba:	81 30       	cpi	r24, 0x01	; 1
    1dbc:	91 05       	cpc	r25, r1
    1dbe:	31 f0       	breq	.+12     	; 0x1dcc <Gotoxy+0x3c>
    1dc0:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc2:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc4:	22 30       	cpi	r18, 0x02	; 2
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	31 f0       	breq	.+12     	; 0x1dd6 <Gotoxy+0x46>
    1dca:	09 c0       	rjmp	.+18     	; 0x1dde <Gotoxy+0x4e>
		    {
			    case 1:
			    	LCD_vidWriteCommand(X+127);
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	81 58       	subi	r24, 0x81	; 129
    1dd0:	0e 94 cb 09 	call	0x1396	; 0x1396 <LCD_vidWriteCommand>
    1dd4:	04 c0       	rjmp	.+8      	; 0x1dde <Gotoxy+0x4e>
			    break;
			    case 2:
			    	LCD_vidWriteCommand(X+191);
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	81 54       	subi	r24, 0x41	; 65
    1dda:	0e 94 cb 09 	call	0x1396	; 0x1396 <LCD_vidWriteCommand>
			    default:
			    break;
		    }
		}

}
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	cf 91       	pop	r28
    1de8:	df 91       	pop	r29
    1dea:	08 95       	ret

00001dec <LCDWriteInteger>:

/********************************************************/

void LCDWriteInteger(u16 val , u16 field_length)
{
    1dec:	df 93       	push	r29
    1dee:	cf 93       	push	r28
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
    1df4:	62 97       	sbiw	r28, 0x12	; 18
    1df6:	0f b6       	in	r0, 0x3f	; 63
    1df8:	f8 94       	cli
    1dfa:	de bf       	out	0x3e, r29	; 62
    1dfc:	0f be       	out	0x3f, r0	; 63
    1dfe:	cd bf       	out	0x3d, r28	; 61
    1e00:	98 8b       	std	Y+16, r25	; 0x10
    1e02:	8f 87       	std	Y+15, r24	; 0x0f
    1e04:	7a 8b       	std	Y+18, r23	; 0x12
    1e06:	69 8b       	std	Y+17, r22	; 0x11
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	u16 str[5]={0,0,0,0,0};
    1e08:	8a e0       	ldi	r24, 0x0A	; 10
    1e0a:	fe 01       	movw	r30, r28
    1e0c:	35 96       	adiw	r30, 0x05	; 5
    1e0e:	df 01       	movw	r26, r30
    1e10:	28 2f       	mov	r18, r24
    1e12:	1d 92       	st	X+, r1
    1e14:	2a 95       	dec	r18
    1e16:	e9 f7       	brne	.-6      	; 0x1e12 <LCDWriteInteger+0x26>
	u16 i=4,j=0;
    1e18:	84 e0       	ldi	r24, 0x04	; 4
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	9c 83       	std	Y+4, r25	; 0x04
    1e1e:	8b 83       	std	Y+3, r24	; 0x03
    1e20:	1a 82       	std	Y+2, r1	; 0x02
    1e22:	19 82       	std	Y+1, r1	; 0x01
		LCD_vidWriteCharacter('-');   //Write Negative sign
		val=val*(-1);     //convert to positive
	}
	else
	{
		LCD_vidWriteCharacter(' ');
    1e24:	80 e2       	ldi	r24, 0x20	; 32
    1e26:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <LCD_vidWriteCharacter>
    1e2a:	24 c0       	rjmp	.+72     	; 0x1e74 <LCDWriteInteger+0x88>
	}

	while(val)
	{
		str[i]=val%10;
    1e2c:	eb 81       	ldd	r30, Y+3	; 0x03
    1e2e:	fc 81       	ldd	r31, Y+4	; 0x04
    1e30:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e32:	98 89       	ldd	r25, Y+16	; 0x10
    1e34:	2a e0       	ldi	r18, 0x0A	; 10
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	b9 01       	movw	r22, r18
    1e3a:	0e 94 99 14 	call	0x2932	; 0x2932 <__udivmodhi4>
    1e3e:	ac 01       	movw	r20, r24
    1e40:	9f 01       	movw	r18, r30
    1e42:	22 0f       	add	r18, r18
    1e44:	33 1f       	adc	r19, r19
    1e46:	ce 01       	movw	r24, r28
    1e48:	01 96       	adiw	r24, 0x01	; 1
    1e4a:	82 0f       	add	r24, r18
    1e4c:	93 1f       	adc	r25, r19
    1e4e:	fc 01       	movw	r30, r24
    1e50:	34 96       	adiw	r30, 0x04	; 4
    1e52:	51 83       	std	Z+1, r21	; 0x01
    1e54:	40 83       	st	Z, r20
		val=val/10;
    1e56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e58:	98 89       	ldd	r25, Y+16	; 0x10
    1e5a:	2a e0       	ldi	r18, 0x0A	; 10
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	b9 01       	movw	r22, r18
    1e60:	0e 94 99 14 	call	0x2932	; 0x2932 <__udivmodhi4>
    1e64:	cb 01       	movw	r24, r22
    1e66:	98 8b       	std	Y+16, r25	; 0x10
    1e68:	8f 87       	std	Y+15, r24	; 0x0f
		i--;
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	9c 83       	std	Y+4, r25	; 0x04
    1e72:	8b 83       	std	Y+3, r24	; 0x03
	else
	{
		LCD_vidWriteCharacter(' ');
	}

	while(val)
    1e74:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e76:	98 89       	ldd	r25, Y+16	; 0x10
    1e78:	00 97       	sbiw	r24, 0x00	; 0
    1e7a:	c1 f6       	brne	.-80     	; 0x1e2c <LCDWriteInteger+0x40>
		str[i]=val%10;
		val=val/10;
		i--;
	}

	if(field_length==-1)
    1e7c:	89 89       	ldd	r24, Y+17	; 0x11
    1e7e:	9a 89       	ldd	r25, Y+18	; 0x12
    1e80:	af ef       	ldi	r26, 0xFF	; 255
    1e82:	8f 3f       	cpi	r24, 0xFF	; 255
    1e84:	9a 07       	cpc	r25, r26
    1e86:	b1 f4       	brne	.+44     	; 0x1eb4 <LCDWriteInteger+0xc8>
    1e88:	05 c0       	rjmp	.+10     	; 0x1e94 <LCDWriteInteger+0xa8>
		while(str[j]==0) j++;
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8e:	01 96       	adiw	r24, 0x01	; 1
    1e90:	9a 83       	std	Y+2, r25	; 0x02
    1e92:	89 83       	std	Y+1, r24	; 0x01
    1e94:	89 81       	ldd	r24, Y+1	; 0x01
    1e96:	9a 81       	ldd	r25, Y+2	; 0x02
    1e98:	9c 01       	movw	r18, r24
    1e9a:	22 0f       	add	r18, r18
    1e9c:	33 1f       	adc	r19, r19
    1e9e:	ce 01       	movw	r24, r28
    1ea0:	01 96       	adiw	r24, 0x01	; 1
    1ea2:	82 0f       	add	r24, r18
    1ea4:	93 1f       	adc	r25, r19
    1ea6:	fc 01       	movw	r30, r24
    1ea8:	34 96       	adiw	r30, 0x04	; 4
    1eaa:	80 81       	ld	r24, Z
    1eac:	91 81       	ldd	r25, Z+1	; 0x01
    1eae:	00 97       	sbiw	r24, 0x00	; 0
    1eb0:	61 f3       	breq	.-40     	; 0x1e8a <LCDWriteInteger+0x9e>
    1eb2:	08 c0       	rjmp	.+16     	; 0x1ec4 <LCDWriteInteger+0xd8>
	else
		j=5-field_length;
    1eb4:	85 e0       	ldi	r24, 0x05	; 5
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	29 89       	ldd	r18, Y+17	; 0x11
    1eba:	3a 89       	ldd	r19, Y+18	; 0x12
    1ebc:	82 1b       	sub	r24, r18
    1ebe:	93 0b       	sbc	r25, r19
    1ec0:	9a 83       	std	Y+2, r25	; 0x02
    1ec2:	89 83       	std	Y+1, r24	; 0x01

	for(i=j;i<5;i++)
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01
    1ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec8:	9c 83       	std	Y+4, r25	; 0x04
    1eca:	8b 83       	std	Y+3, r24	; 0x03
    1ecc:	15 c0       	rjmp	.+42     	; 0x1ef8 <LCDWriteInteger+0x10c>
	{
		LCD_vidWriteCharacter('0'+str[i]);
    1ece:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed2:	9c 01       	movw	r18, r24
    1ed4:	22 0f       	add	r18, r18
    1ed6:	33 1f       	adc	r19, r19
    1ed8:	ce 01       	movw	r24, r28
    1eda:	01 96       	adiw	r24, 0x01	; 1
    1edc:	82 0f       	add	r24, r18
    1ede:	93 1f       	adc	r25, r19
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	34 96       	adiw	r30, 0x04	; 4
    1ee4:	80 81       	ld	r24, Z
    1ee6:	91 81       	ldd	r25, Z+1	; 0x01
    1ee8:	80 5d       	subi	r24, 0xD0	; 208
    1eea:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <LCD_vidWriteCharacter>
	if(field_length==-1)
		while(str[j]==0) j++;
	else
		j=5-field_length;

	for(i=j;i<5;i++)
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef2:	01 96       	adiw	r24, 0x01	; 1
    1ef4:	9c 83       	std	Y+4, r25	; 0x04
    1ef6:	8b 83       	std	Y+3, r24	; 0x03
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	9c 81       	ldd	r25, Y+4	; 0x04
    1efc:	85 30       	cpi	r24, 0x05	; 5
    1efe:	91 05       	cpc	r25, r1
    1f00:	30 f3       	brcs	.-52     	; 0x1ece <LCDWriteInteger+0xe2>
	{
		LCD_vidWriteCharacter('0'+str[i]);
	}
}
    1f02:	62 96       	adiw	r28, 0x12	; 18
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	f8 94       	cli
    1f08:	de bf       	out	0x3e, r29	; 62
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	cd bf       	out	0x3d, r28	; 61
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	08 95       	ret

00001f14 <vid_SeparateResult>:


/********************************************************/

void vid_SeparateResult(u32 u32Result , u8 * u8ArrayResult) {
    1f14:	0f 93       	push	r16
    1f16:	1f 93       	push	r17
    1f18:	df 93       	push	r29
    1f1a:	cf 93       	push	r28
    1f1c:	00 d0       	rcall	.+0      	; 0x1f1e <vid_SeparateResult+0xa>
    1f1e:	00 d0       	rcall	.+0      	; 0x1f20 <vid_SeparateResult+0xc>
    1f20:	00 d0       	rcall	.+0      	; 0x1f22 <vid_SeparateResult+0xe>
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
    1f26:	69 83       	std	Y+1, r22	; 0x01
    1f28:	7a 83       	std	Y+2, r23	; 0x02
    1f2a:	8b 83       	std	Y+3, r24	; 0x03
    1f2c:	9c 83       	std	Y+4, r25	; 0x04
    1f2e:	5e 83       	std	Y+6, r21	; 0x06
    1f30:	4d 83       	std	Y+5, r20	; 0x05

	u8ArrayResult[0]= ( (u32Result / 10000) % 10 ) + 48 ;   //48 is the asci of 0
    1f32:	89 81       	ldd	r24, Y+1	; 0x01
    1f34:	9a 81       	ldd	r25, Y+2	; 0x02
    1f36:	ab 81       	ldd	r26, Y+3	; 0x03
    1f38:	bc 81       	ldd	r27, Y+4	; 0x04
    1f3a:	20 e1       	ldi	r18, 0x10	; 16
    1f3c:	37 e2       	ldi	r19, 0x27	; 39
    1f3e:	40 e0       	ldi	r20, 0x00	; 0
    1f40:	50 e0       	ldi	r21, 0x00	; 0
    1f42:	bc 01       	movw	r22, r24
    1f44:	cd 01       	movw	r24, r26
    1f46:	0e 94 ad 14 	call	0x295a	; 0x295a <__udivmodsi4>
    1f4a:	da 01       	movw	r26, r20
    1f4c:	c9 01       	movw	r24, r18
    1f4e:	2a e0       	ldi	r18, 0x0A	; 10
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	40 e0       	ldi	r20, 0x00	; 0
    1f54:	50 e0       	ldi	r21, 0x00	; 0
    1f56:	bc 01       	movw	r22, r24
    1f58:	cd 01       	movw	r24, r26
    1f5a:	0e 94 ad 14 	call	0x295a	; 0x295a <__udivmodsi4>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	80 5d       	subi	r24, 0xD0	; 208
    1f64:	ed 81       	ldd	r30, Y+5	; 0x05
    1f66:	fe 81       	ldd	r31, Y+6	; 0x06
    1f68:	80 83       	st	Z, r24
	u8ArrayResult[1]= ( (u32Result / 1000) % 10 ) + 48 ;
    1f6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6e:	8c 01       	movw	r16, r24
    1f70:	0f 5f       	subi	r16, 0xFF	; 255
    1f72:	1f 4f       	sbci	r17, 0xFF	; 255
    1f74:	89 81       	ldd	r24, Y+1	; 0x01
    1f76:	9a 81       	ldd	r25, Y+2	; 0x02
    1f78:	ab 81       	ldd	r26, Y+3	; 0x03
    1f7a:	bc 81       	ldd	r27, Y+4	; 0x04
    1f7c:	28 ee       	ldi	r18, 0xE8	; 232
    1f7e:	33 e0       	ldi	r19, 0x03	; 3
    1f80:	40 e0       	ldi	r20, 0x00	; 0
    1f82:	50 e0       	ldi	r21, 0x00	; 0
    1f84:	bc 01       	movw	r22, r24
    1f86:	cd 01       	movw	r24, r26
    1f88:	0e 94 ad 14 	call	0x295a	; 0x295a <__udivmodsi4>
    1f8c:	da 01       	movw	r26, r20
    1f8e:	c9 01       	movw	r24, r18
    1f90:	2a e0       	ldi	r18, 0x0A	; 10
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e0       	ldi	r20, 0x00	; 0
    1f96:	50 e0       	ldi	r21, 0x00	; 0
    1f98:	bc 01       	movw	r22, r24
    1f9a:	cd 01       	movw	r24, r26
    1f9c:	0e 94 ad 14 	call	0x295a	; 0x295a <__udivmodsi4>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	80 5d       	subi	r24, 0xD0	; 208
    1fa6:	f8 01       	movw	r30, r16
    1fa8:	80 83       	st	Z, r24
	u8ArrayResult[2]= ( (u32Result / 100) % 10 ) + 48 ;
    1faa:	8d 81       	ldd	r24, Y+5	; 0x05
    1fac:	9e 81       	ldd	r25, Y+6	; 0x06
    1fae:	8c 01       	movw	r16, r24
    1fb0:	0e 5f       	subi	r16, 0xFE	; 254
    1fb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb8:	ab 81       	ldd	r26, Y+3	; 0x03
    1fba:	bc 81       	ldd	r27, Y+4	; 0x04
    1fbc:	24 e6       	ldi	r18, 0x64	; 100
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	40 e0       	ldi	r20, 0x00	; 0
    1fc2:	50 e0       	ldi	r21, 0x00	; 0
    1fc4:	bc 01       	movw	r22, r24
    1fc6:	cd 01       	movw	r24, r26
    1fc8:	0e 94 ad 14 	call	0x295a	; 0x295a <__udivmodsi4>
    1fcc:	da 01       	movw	r26, r20
    1fce:	c9 01       	movw	r24, r18
    1fd0:	2a e0       	ldi	r18, 0x0A	; 10
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	40 e0       	ldi	r20, 0x00	; 0
    1fd6:	50 e0       	ldi	r21, 0x00	; 0
    1fd8:	bc 01       	movw	r22, r24
    1fda:	cd 01       	movw	r24, r26
    1fdc:	0e 94 ad 14 	call	0x295a	; 0x295a <__udivmodsi4>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	80 5d       	subi	r24, 0xD0	; 208
    1fe6:	f8 01       	movw	r30, r16
    1fe8:	80 83       	st	Z, r24
	u8ArrayResult[3]= ( (u32Result / 10) % 10 ) + 48 ;
    1fea:	8d 81       	ldd	r24, Y+5	; 0x05
    1fec:	9e 81       	ldd	r25, Y+6	; 0x06
    1fee:	8c 01       	movw	r16, r24
    1ff0:	0d 5f       	subi	r16, 0xFD	; 253
    1ff2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff8:	ab 81       	ldd	r26, Y+3	; 0x03
    1ffa:	bc 81       	ldd	r27, Y+4	; 0x04
    1ffc:	2a e0       	ldi	r18, 0x0A	; 10
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	40 e0       	ldi	r20, 0x00	; 0
    2002:	50 e0       	ldi	r21, 0x00	; 0
    2004:	bc 01       	movw	r22, r24
    2006:	cd 01       	movw	r24, r26
    2008:	0e 94 ad 14 	call	0x295a	; 0x295a <__udivmodsi4>
    200c:	da 01       	movw	r26, r20
    200e:	c9 01       	movw	r24, r18
    2010:	2a e0       	ldi	r18, 0x0A	; 10
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	40 e0       	ldi	r20, 0x00	; 0
    2016:	50 e0       	ldi	r21, 0x00	; 0
    2018:	bc 01       	movw	r22, r24
    201a:	cd 01       	movw	r24, r26
    201c:	0e 94 ad 14 	call	0x295a	; 0x295a <__udivmodsi4>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	80 5d       	subi	r24, 0xD0	; 208
    2026:	f8 01       	movw	r30, r16
    2028:	80 83       	st	Z, r24
	u8ArrayResult[4]=   (u32Result  % 10 ) + 48 ;
    202a:	8d 81       	ldd	r24, Y+5	; 0x05
    202c:	9e 81       	ldd	r25, Y+6	; 0x06
    202e:	8c 01       	movw	r16, r24
    2030:	0c 5f       	subi	r16, 0xFC	; 252
    2032:	1f 4f       	sbci	r17, 0xFF	; 255
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	9a 81       	ldd	r25, Y+2	; 0x02
    2038:	ab 81       	ldd	r26, Y+3	; 0x03
    203a:	bc 81       	ldd	r27, Y+4	; 0x04
    203c:	2a e0       	ldi	r18, 0x0A	; 10
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	40 e0       	ldi	r20, 0x00	; 0
    2042:	50 e0       	ldi	r21, 0x00	; 0
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	0e 94 ad 14 	call	0x295a	; 0x295a <__udivmodsi4>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	80 5d       	subi	r24, 0xD0	; 208
    2052:	f8 01       	movw	r30, r16
    2054:	80 83       	st	Z, r24

}
    2056:	26 96       	adiw	r28, 0x06	; 6
    2058:	0f b6       	in	r0, 0x3f	; 63
    205a:	f8 94       	cli
    205c:	de bf       	out	0x3e, r29	; 62
    205e:	0f be       	out	0x3f, r0	; 63
    2060:	cd bf       	out	0x3d, r28	; 61
    2062:	cf 91       	pop	r28
    2064:	df 91       	pop	r29
    2066:	1f 91       	pop	r17
    2068:	0f 91       	pop	r16
    206a:	08 95       	ret

0000206c <vid_DIO_vid_SetDioDirections>:



/************************************************************/

void vid_DIO_vid_SetDioDirections (void) {
    206c:	df 93       	push	r29
    206e:	cf 93       	push	r28
    2070:	cd b7       	in	r28, 0x3d	; 61
    2072:	de b7       	in	r29, 0x3e	; 62

	DIO_SetPortDirection(KPD_PORT,0X0F) ;   // keypad: input :coloumns , out : rows
    2074:	82 e0       	ldi	r24, 0x02	; 2
    2076:	6f e0       	ldi	r22, 0x0F	; 15
    2078:	0e 94 81 08 	call	0x1102	; 0x1102 <DIO_SetPortDirection>
	DIO_SetPortValue(KPD_PORT,0XFF) ;     // connect coloums to pull up res
    207c:	82 e0       	ldi	r24, 0x02	; 2
    207e:	6f ef       	ldi	r22, 0xFF	; 255
    2080:	0e 94 c2 08 	call	0x1184	; 0x1184 <DIO_SetPortValue>

	DIO_SetPortDirection(LCD_PORT,0XFF) ;     // lcd data pins
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	6f ef       	ldi	r22, 0xFF	; 255
    2088:	0e 94 81 08 	call	0x1102	; 0x1102 <DIO_SetPortDirection>
	DIO_SetPortDirection(LCD_CTRL,0XF0) ;          // lcd control pins
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	60 ef       	ldi	r22, 0xF0	; 240
    2090:	0e 94 81 08 	call	0x1102	; 0x1102 <DIO_SetPortDirection>

	DIO_SetPinDirection(PORTD_DIO , PIN7 , OUTPUT ) ;   // alarm led for gas
    2094:	83 e0       	ldi	r24, 0x03	; 3
    2096:	67 e0       	ldi	r22, 0x07	; 7
    2098:	41 e0       	ldi	r20, 0x01	; 1
    209a:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_SetPinDirection>
	DIO_SetPinValue(PORTD_DIO , PIN7 , LOW ) ;
    209e:	83 e0       	ldi	r24, 0x03	; 3
    20a0:	67 e0       	ldi	r22, 0x07	; 7
    20a2:	40 e0       	ldi	r20, 0x00	; 0
    20a4:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_SetPinValue>

}
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <vid_WelcomeMsg>:

/************************************************************/

void vid_WelcomeMsg(void){
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
    20b6:	6e 97       	sbiw	r28, 0x1e	; 30
    20b8:	0f b6       	in	r0, 0x3f	; 63
    20ba:	f8 94       	cli
    20bc:	de bf       	out	0x3e, r29	; 62
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	cd bf       	out	0x3d, r28	; 61


	u8 String_WLCM [11] = ("Welcome...") ;
    20c2:	ce 01       	movw	r24, r28
    20c4:	0f 96       	adiw	r24, 0x0f	; 15
    20c6:	9b 8f       	std	Y+27, r25	; 0x1b
    20c8:	8a 8f       	std	Y+26, r24	; 0x1a
    20ca:	e0 e6       	ldi	r30, 0x60	; 96
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	fd 8f       	std	Y+29, r31	; 0x1d
    20d0:	ec 8f       	std	Y+28, r30	; 0x1c
    20d2:	fb e0       	ldi	r31, 0x0B	; 11
    20d4:	fe 8f       	std	Y+30, r31	; 0x1e
    20d6:	ec 8d       	ldd	r30, Y+28	; 0x1c
    20d8:	fd 8d       	ldd	r31, Y+29	; 0x1d
    20da:	00 80       	ld	r0, Z
    20dc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    20de:	9d 8d       	ldd	r25, Y+29	; 0x1d
    20e0:	01 96       	adiw	r24, 0x01	; 1
    20e2:	9d 8f       	std	Y+29, r25	; 0x1d
    20e4:	8c 8f       	std	Y+28, r24	; 0x1c
    20e6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    20e8:	fb 8d       	ldd	r31, Y+27	; 0x1b
    20ea:	00 82       	st	Z, r0
    20ec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    20ee:	9b 8d       	ldd	r25, Y+27	; 0x1b
    20f0:	01 96       	adiw	r24, 0x01	; 1
    20f2:	9b 8f       	std	Y+27, r25	; 0x1b
    20f4:	8a 8f       	std	Y+26, r24	; 0x1a
    20f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20f8:	91 50       	subi	r25, 0x01	; 1
    20fa:	9e 8f       	std	Y+30, r25	; 0x1e
    20fc:	ee 8d       	ldd	r30, Y+30	; 0x1e
    20fe:	ee 23       	and	r30, r30
    2100:	51 f7       	brne	.-44     	; 0x20d6 <vid_WelcomeMsg+0x28>

	Gotoxy(1,1) ;
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	61 e0       	ldi	r22, 0x01	; 1
    2106:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <Gotoxy>
	LCD_vidWriteString(String_WLCM,10) ;
    210a:	ce 01       	movw	r24, r28
    210c:	0f 96       	adiw	r24, 0x0f	; 15
    210e:	6a e0       	ldi	r22, 0x0A	; 10
    2110:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_vidWriteString>
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	aa e7       	ldi	r26, 0x7A	; 122
    211a:	b4 e4       	ldi	r27, 0x44	; 68
    211c:	8b 87       	std	Y+11, r24	; 0x0b
    211e:	9c 87       	std	Y+12, r25	; 0x0c
    2120:	ad 87       	std	Y+13, r26	; 0x0d
    2122:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2124:	6b 85       	ldd	r22, Y+11	; 0x0b
    2126:	7c 85       	ldd	r23, Y+12	; 0x0c
    2128:	8d 85       	ldd	r24, Y+13	; 0x0d
    212a:	9e 85       	ldd	r25, Y+14	; 0x0e
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e8       	ldi	r19, 0x80	; 128
    2130:	4b e3       	ldi	r20, 0x3B	; 59
    2132:	55 e4       	ldi	r21, 0x45	; 69
    2134:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	8f 83       	std	Y+7, r24	; 0x07
    213e:	98 87       	std	Y+8, r25	; 0x08
    2140:	a9 87       	std	Y+9, r26	; 0x09
    2142:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2144:	6f 81       	ldd	r22, Y+7	; 0x07
    2146:	78 85       	ldd	r23, Y+8	; 0x08
    2148:	89 85       	ldd	r24, Y+9	; 0x09
    214a:	9a 85       	ldd	r25, Y+10	; 0x0a
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	40 e8       	ldi	r20, 0x80	; 128
    2152:	5f e3       	ldi	r21, 0x3F	; 63
    2154:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2158:	88 23       	and	r24, r24
    215a:	2c f4       	brge	.+10     	; 0x2166 <vid_WelcomeMsg+0xb8>
		__ticks = 1;
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	9e 83       	std	Y+6, r25	; 0x06
    2162:	8d 83       	std	Y+5, r24	; 0x05
    2164:	3f c0       	rjmp	.+126    	; 0x21e4 <vid_WelcomeMsg+0x136>
	else if (__tmp > 65535)
    2166:	6f 81       	ldd	r22, Y+7	; 0x07
    2168:	78 85       	ldd	r23, Y+8	; 0x08
    216a:	89 85       	ldd	r24, Y+9	; 0x09
    216c:	9a 85       	ldd	r25, Y+10	; 0x0a
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	3f ef       	ldi	r19, 0xFF	; 255
    2172:	4f e7       	ldi	r20, 0x7F	; 127
    2174:	57 e4       	ldi	r21, 0x47	; 71
    2176:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    217a:	18 16       	cp	r1, r24
    217c:	4c f5       	brge	.+82     	; 0x21d0 <vid_WelcomeMsg+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2180:	7c 85       	ldd	r23, Y+12	; 0x0c
    2182:	8d 85       	ldd	r24, Y+13	; 0x0d
    2184:	9e 85       	ldd	r25, Y+14	; 0x0e
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	40 e2       	ldi	r20, 0x20	; 32
    218c:	51 e4       	ldi	r21, 0x41	; 65
    218e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	bc 01       	movw	r22, r24
    2198:	cd 01       	movw	r24, r26
    219a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	9e 83       	std	Y+6, r25	; 0x06
    21a4:	8d 83       	std	Y+5, r24	; 0x05
    21a6:	0f c0       	rjmp	.+30     	; 0x21c6 <vid_WelcomeMsg+0x118>
    21a8:	8c e2       	ldi	r24, 0x2C	; 44
    21aa:	91 e0       	ldi	r25, 0x01	; 1
    21ac:	9c 83       	std	Y+4, r25	; 0x04
    21ae:	8b 83       	std	Y+3, r24	; 0x03
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
    21b2:	9c 81       	ldd	r25, Y+4	; 0x04
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	f1 f7       	brne	.-4      	; 0x21b4 <vid_WelcomeMsg+0x106>
    21b8:	9c 83       	std	Y+4, r25	; 0x04
    21ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21bc:	8d 81       	ldd	r24, Y+5	; 0x05
    21be:	9e 81       	ldd	r25, Y+6	; 0x06
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	9e 83       	std	Y+6, r25	; 0x06
    21c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c6:	8d 81       	ldd	r24, Y+5	; 0x05
    21c8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ca:	00 97       	sbiw	r24, 0x00	; 0
    21cc:	69 f7       	brne	.-38     	; 0x21a8 <vid_WelcomeMsg+0xfa>
    21ce:	14 c0       	rjmp	.+40     	; 0x21f8 <vid_WelcomeMsg+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d0:	6f 81       	ldd	r22, Y+7	; 0x07
    21d2:	78 85       	ldd	r23, Y+8	; 0x08
    21d4:	89 85       	ldd	r24, Y+9	; 0x09
    21d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	9e 83       	std	Y+6, r25	; 0x06
    21e2:	8d 83       	std	Y+5, r24	; 0x05
    21e4:	8d 81       	ldd	r24, Y+5	; 0x05
    21e6:	9e 81       	ldd	r25, Y+6	; 0x06
    21e8:	9a 83       	std	Y+2, r25	; 0x02
    21ea:	89 83       	std	Y+1, r24	; 0x01
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	9a 81       	ldd	r25, Y+2	; 0x02
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	f1 f7       	brne	.-4      	; 0x21f0 <vid_WelcomeMsg+0x142>
    21f4:	9a 83       	std	Y+2, r25	; 0x02
    21f6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000) ;

	LCD_vidClear();
    21f8:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <LCD_vidClear>


}
    21fc:	6e 96       	adiw	r28, 0x1e	; 30
    21fe:	0f b6       	in	r0, 0x3f	; 63
    2200:	f8 94       	cli
    2202:	de bf       	out	0x3e, r29	; 62
    2204:	0f be       	out	0x3f, r0	; 63
    2206:	cd bf       	out	0x3d, r28	; 61
    2208:	cf 91       	pop	r28
    220a:	df 91       	pop	r29
    220c:	08 95       	ret

0000220e <Check_ID>:

/************************************************************/



u16 Check_ID (void){
    220e:	df 93       	push	r29
    2210:	cf 93       	push	r28
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	a4 97       	sbiw	r28, 0x24	; 36
    2218:	0f b6       	in	r0, 0x3f	; 63
    221a:	f8 94       	cli
    221c:	de bf       	out	0x3e, r29	; 62
    221e:	0f be       	out	0x3f, r0	; 63
    2220:	cd bf       	out	0x3d, r28	; 61

	u8 u8_KPD_NB = 0 ;
    2222:	1a 8a       	std	Y+18, r1	; 0x12
	u8 ID[4] = {0,0,0,0} ;
    2224:	1b 8a       	std	Y+19, r1	; 0x13
    2226:	1c 8a       	std	Y+20, r1	; 0x14
    2228:	1d 8a       	std	Y+21, r1	; 0x15
    222a:	1e 8a       	std	Y+22, r1	; 0x16
	u16 u16_ID =0 ;
    222c:	19 8a       	std	Y+17, r1	; 0x11
    222e:	18 8a       	std	Y+16, r1	; 0x10
	u8 i = 0 ;
    2230:	1f 86       	std	Y+15, r1	; 0x0f
	u8 String_ID [9] = ("Enter ID") ;
    2232:	be 01       	movw	r22, r28
    2234:	69 5e       	subi	r22, 0xE9	; 233
    2236:	7f 4f       	sbci	r23, 0xFF	; 255
    2238:	79 a3       	std	Y+33, r23	; 0x21
    223a:	68 a3       	std	Y+32, r22	; 0x20
    223c:	8b e6       	ldi	r24, 0x6B	; 107
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	9b a3       	std	Y+35, r25	; 0x23
    2242:	8a a3       	std	Y+34, r24	; 0x22
    2244:	99 e0       	ldi	r25, 0x09	; 9
    2246:	9c a3       	std	Y+36, r25	; 0x24
    2248:	ea a1       	ldd	r30, Y+34	; 0x22
    224a:	fb a1       	ldd	r31, Y+35	; 0x23
    224c:	00 80       	ld	r0, Z
    224e:	6a a1       	ldd	r22, Y+34	; 0x22
    2250:	7b a1       	ldd	r23, Y+35	; 0x23
    2252:	6f 5f       	subi	r22, 0xFF	; 255
    2254:	7f 4f       	sbci	r23, 0xFF	; 255
    2256:	7b a3       	std	Y+35, r23	; 0x23
    2258:	6a a3       	std	Y+34, r22	; 0x22
    225a:	e8 a1       	ldd	r30, Y+32	; 0x20
    225c:	f9 a1       	ldd	r31, Y+33	; 0x21
    225e:	00 82       	st	Z, r0
    2260:	68 a1       	ldd	r22, Y+32	; 0x20
    2262:	79 a1       	ldd	r23, Y+33	; 0x21
    2264:	6f 5f       	subi	r22, 0xFF	; 255
    2266:	7f 4f       	sbci	r23, 0xFF	; 255
    2268:	79 a3       	std	Y+33, r23	; 0x21
    226a:	68 a3       	std	Y+32, r22	; 0x20
    226c:	7c a1       	ldd	r23, Y+36	; 0x24
    226e:	71 50       	subi	r23, 0x01	; 1
    2270:	7c a3       	std	Y+36, r23	; 0x24
    2272:	8c a1       	ldd	r24, Y+36	; 0x24
    2274:	88 23       	and	r24, r24
    2276:	41 f7       	brne	.-48     	; 0x2248 <Check_ID+0x3a>

	Gotoxy(1,1) ;
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	61 e0       	ldi	r22, 0x01	; 1
    227c:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <Gotoxy>
	LCD_vidWriteString(String_ID,8) ;
    2280:	ce 01       	movw	r24, r28
    2282:	47 96       	adiw	r24, 0x17	; 23
    2284:	68 e0       	ldi	r22, 0x08	; 8
    2286:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_vidWriteString>

	Gotoxy(1,2) ;
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	62 e0       	ldi	r22, 0x02	; 2
    228e:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <Gotoxy>
    2292:	1a c0       	rjmp	.+52     	; 0x22c8 <Check_ID+0xba>


		while (i<4) {         // id : 4 digits

			u8_KPD_NB = KPD_u8GetPressedKey();
    2294:	0e 94 03 09 	call	0x1206	; 0x1206 <KPD_u8GetPressedKey>
    2298:	8a 8b       	std	Y+18, r24	; 0x12

			if(u8_KPD_NB!=0) {
    229a:	8a 89       	ldd	r24, Y+18	; 0x12
    229c:	88 23       	and	r24, r24
    229e:	a1 f0       	breq	.+40     	; 0x22c8 <Check_ID+0xba>

				ID[i] = u8_KPD_NB ;
    22a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    22a2:	28 2f       	mov	r18, r24
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	ce 01       	movw	r24, r28
    22a8:	43 96       	adiw	r24, 0x13	; 19
    22aa:	fc 01       	movw	r30, r24
    22ac:	e2 0f       	add	r30, r18
    22ae:	f3 1f       	adc	r31, r19
    22b0:	8a 89       	ldd	r24, Y+18	; 0x12
    22b2:	80 83       	st	Z, r24
				LCDWriteInteger(u8_KPD_NB,1);
    22b4:	8a 89       	ldd	r24, Y+18	; 0x12
    22b6:	88 2f       	mov	r24, r24
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	61 e0       	ldi	r22, 0x01	; 1
    22bc:	70 e0       	ldi	r23, 0x00	; 0
    22be:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <LCDWriteInteger>

				i++ ;
    22c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    22c4:	8f 5f       	subi	r24, 0xFF	; 255
    22c6:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_vidWriteString(String_ID,8) ;

	Gotoxy(1,2) ;


		while (i<4) {         // id : 4 digits
    22c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    22ca:	84 30       	cpi	r24, 0x04	; 4
    22cc:	18 f3       	brcs	.-58     	; 0x2294 <Check_ID+0x86>
				}
			}



		u16_ID =( 1000 * ID[0] ) + ( 100 * ID[1]) + ( 10 * ID[2]) +( ID[3])  ;
    22ce:	8b 89       	ldd	r24, Y+19	; 0x13
    22d0:	28 2f       	mov	r18, r24
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	88 ee       	ldi	r24, 0xE8	; 232
    22d6:	93 e0       	ldi	r25, 0x03	; 3
    22d8:	28 9f       	mul	r18, r24
    22da:	a0 01       	movw	r20, r0
    22dc:	29 9f       	mul	r18, r25
    22de:	50 0d       	add	r21, r0
    22e0:	38 9f       	mul	r19, r24
    22e2:	50 0d       	add	r21, r0
    22e4:	11 24       	eor	r1, r1
    22e6:	8c 89       	ldd	r24, Y+20	; 0x14
    22e8:	28 2f       	mov	r18, r24
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	84 e6       	ldi	r24, 0x64	; 100
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	fc 01       	movw	r30, r24
    22f2:	2e 9f       	mul	r18, r30
    22f4:	c0 01       	movw	r24, r0
    22f6:	2f 9f       	mul	r18, r31
    22f8:	90 0d       	add	r25, r0
    22fa:	3e 9f       	mul	r19, r30
    22fc:	90 0d       	add	r25, r0
    22fe:	11 24       	eor	r1, r1
    2300:	48 0f       	add	r20, r24
    2302:	59 1f       	adc	r21, r25
    2304:	8d 89       	ldd	r24, Y+21	; 0x15
    2306:	88 2f       	mov	r24, r24
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	9c 01       	movw	r18, r24
    230c:	22 0f       	add	r18, r18
    230e:	33 1f       	adc	r19, r19
    2310:	c9 01       	movw	r24, r18
    2312:	88 0f       	add	r24, r24
    2314:	99 1f       	adc	r25, r25
    2316:	88 0f       	add	r24, r24
    2318:	99 1f       	adc	r25, r25
    231a:	82 0f       	add	r24, r18
    231c:	93 1f       	adc	r25, r19
    231e:	9a 01       	movw	r18, r20
    2320:	28 0f       	add	r18, r24
    2322:	39 1f       	adc	r19, r25
    2324:	8e 89       	ldd	r24, Y+22	; 0x16
    2326:	88 2f       	mov	r24, r24
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	82 0f       	add	r24, r18
    232c:	93 1f       	adc	r25, r19
    232e:	99 8b       	std	Y+17, r25	; 0x11
    2330:	88 8b       	std	Y+16, r24	; 0x10
		LCDWriteInteger(u16_ID,4);
    2332:	88 89       	ldd	r24, Y+16	; 0x10
    2334:	99 89       	ldd	r25, Y+17	; 0x11
    2336:	64 e0       	ldi	r22, 0x04	; 4
    2338:	70 e0       	ldi	r23, 0x00	; 0
    233a:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <LCDWriteInteger>
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	aa ef       	ldi	r26, 0xFA	; 250
    2344:	b3 e4       	ldi	r27, 0x43	; 67
    2346:	8b 87       	std	Y+11, r24	; 0x0b
    2348:	9c 87       	std	Y+12, r25	; 0x0c
    234a:	ad 87       	std	Y+13, r26	; 0x0d
    234c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    234e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2350:	7c 85       	ldd	r23, Y+12	; 0x0c
    2352:	8d 85       	ldd	r24, Y+13	; 0x0d
    2354:	9e 85       	ldd	r25, Y+14	; 0x0e
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e8       	ldi	r19, 0x80	; 128
    235a:	4b e3       	ldi	r20, 0x3B	; 59
    235c:	55 e4       	ldi	r21, 0x45	; 69
    235e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	8f 83       	std	Y+7, r24	; 0x07
    2368:	98 87       	std	Y+8, r25	; 0x08
    236a:	a9 87       	std	Y+9, r26	; 0x09
    236c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    236e:	6f 81       	ldd	r22, Y+7	; 0x07
    2370:	78 85       	ldd	r23, Y+8	; 0x08
    2372:	89 85       	ldd	r24, Y+9	; 0x09
    2374:	9a 85       	ldd	r25, Y+10	; 0x0a
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	40 e8       	ldi	r20, 0x80	; 128
    237c:	5f e3       	ldi	r21, 0x3F	; 63
    237e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2382:	88 23       	and	r24, r24
    2384:	2c f4       	brge	.+10     	; 0x2390 <Check_ID+0x182>
		__ticks = 1;
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	9e 83       	std	Y+6, r25	; 0x06
    238c:	8d 83       	std	Y+5, r24	; 0x05
    238e:	3f c0       	rjmp	.+126    	; 0x240e <Check_ID+0x200>
	else if (__tmp > 65535)
    2390:	6f 81       	ldd	r22, Y+7	; 0x07
    2392:	78 85       	ldd	r23, Y+8	; 0x08
    2394:	89 85       	ldd	r24, Y+9	; 0x09
    2396:	9a 85       	ldd	r25, Y+10	; 0x0a
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	3f ef       	ldi	r19, 0xFF	; 255
    239c:	4f e7       	ldi	r20, 0x7F	; 127
    239e:	57 e4       	ldi	r21, 0x47	; 71
    23a0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23a4:	18 16       	cp	r1, r24
    23a6:	4c f5       	brge	.+82     	; 0x23fa <Check_ID+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	40 e2       	ldi	r20, 0x20	; 32
    23b6:	51 e4       	ldi	r21, 0x41	; 65
    23b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	bc 01       	movw	r22, r24
    23c2:	cd 01       	movw	r24, r26
    23c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	9e 83       	std	Y+6, r25	; 0x06
    23ce:	8d 83       	std	Y+5, r24	; 0x05
    23d0:	0f c0       	rjmp	.+30     	; 0x23f0 <Check_ID+0x1e2>
    23d2:	8c e2       	ldi	r24, 0x2C	; 44
    23d4:	91 e0       	ldi	r25, 0x01	; 1
    23d6:	9c 83       	std	Y+4, r25	; 0x04
    23d8:	8b 83       	std	Y+3, r24	; 0x03
    23da:	8b 81       	ldd	r24, Y+3	; 0x03
    23dc:	9c 81       	ldd	r25, Y+4	; 0x04
    23de:	01 97       	sbiw	r24, 0x01	; 1
    23e0:	f1 f7       	brne	.-4      	; 0x23de <Check_ID+0x1d0>
    23e2:	9c 83       	std	Y+4, r25	; 0x04
    23e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e6:	8d 81       	ldd	r24, Y+5	; 0x05
    23e8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	9e 83       	std	Y+6, r25	; 0x06
    23ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f0:	8d 81       	ldd	r24, Y+5	; 0x05
    23f2:	9e 81       	ldd	r25, Y+6	; 0x06
    23f4:	00 97       	sbiw	r24, 0x00	; 0
    23f6:	69 f7       	brne	.-38     	; 0x23d2 <Check_ID+0x1c4>
    23f8:	14 c0       	rjmp	.+40     	; 0x2422 <Check_ID+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23fa:	6f 81       	ldd	r22, Y+7	; 0x07
    23fc:	78 85       	ldd	r23, Y+8	; 0x08
    23fe:	89 85       	ldd	r24, Y+9	; 0x09
    2400:	9a 85       	ldd	r25, Y+10	; 0x0a
    2402:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	9e 83       	std	Y+6, r25	; 0x06
    240c:	8d 83       	std	Y+5, r24	; 0x05
    240e:	8d 81       	ldd	r24, Y+5	; 0x05
    2410:	9e 81       	ldd	r25, Y+6	; 0x06
    2412:	9a 83       	std	Y+2, r25	; 0x02
    2414:	89 83       	std	Y+1, r24	; 0x01
    2416:	89 81       	ldd	r24, Y+1	; 0x01
    2418:	9a 81       	ldd	r25, Y+2	; 0x02
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	f1 f7       	brne	.-4      	; 0x241a <Check_ID+0x20c>
    241e:	9a 83       	std	Y+2, r25	; 0x02
    2420:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(500) ;



return u16_ID ;
    2422:	88 89       	ldd	r24, Y+16	; 0x10
    2424:	99 89       	ldd	r25, Y+17	; 0x11


}
    2426:	a4 96       	adiw	r28, 0x24	; 36
    2428:	0f b6       	in	r0, 0x3f	; 63
    242a:	f8 94       	cli
    242c:	de bf       	out	0x3e, r29	; 62
    242e:	0f be       	out	0x3f, r0	; 63
    2430:	cd bf       	out	0x3d, r28	; 61
    2432:	cf 91       	pop	r28
    2434:	df 91       	pop	r29
    2436:	08 95       	ret

00002438 <Check_Password>:

/*************************************************************/

u16 Check_Password (void) {
    2438:	df 93       	push	r29
    243a:	cf 93       	push	r28
    243c:	cd b7       	in	r28, 0x3d	; 61
    243e:	de b7       	in	r29, 0x3e	; 62
    2440:	aa 97       	sbiw	r28, 0x2a	; 42
    2442:	0f b6       	in	r0, 0x3f	; 63
    2444:	f8 94       	cli
    2446:	de bf       	out	0x3e, r29	; 62
    2448:	0f be       	out	0x3f, r0	; 63
    244a:	cd bf       	out	0x3d, r28	; 61

	u8 u8_KPD_NB = 0 ;
    244c:	1a 8a       	std	Y+18, r1	; 0x12

	u8 PASS[4] = {0,0,0,0} ;
    244e:	1b 8a       	std	Y+19, r1	; 0x13
    2450:	1c 8a       	std	Y+20, r1	; 0x14
    2452:	1d 8a       	std	Y+21, r1	; 0x15
    2454:	1e 8a       	std	Y+22, r1	; 0x16
	u16 u16_PASS =0 ;
    2456:	19 8a       	std	Y+17, r1	; 0x11
    2458:	18 8a       	std	Y+16, r1	; 0x10

		u8 j = 0 ;
    245a:	1f 86       	std	Y+15, r1	; 0x0f
		u8 String_Pass [15] = ("Enter Password") ;
    245c:	be 01       	movw	r22, r28
    245e:	69 5e       	subi	r22, 0xE9	; 233
    2460:	7f 4f       	sbci	r23, 0xFF	; 255
    2462:	7f a3       	std	Y+39, r23	; 0x27
    2464:	6e a3       	std	Y+38, r22	; 0x26
    2466:	84 e7       	ldi	r24, 0x74	; 116
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	99 a7       	std	Y+41, r25	; 0x29
    246c:	88 a7       	std	Y+40, r24	; 0x28
    246e:	9f e0       	ldi	r25, 0x0F	; 15
    2470:	9a a7       	std	Y+42, r25	; 0x2a
    2472:	e8 a5       	ldd	r30, Y+40	; 0x28
    2474:	f9 a5       	ldd	r31, Y+41	; 0x29
    2476:	00 80       	ld	r0, Z
    2478:	68 a5       	ldd	r22, Y+40	; 0x28
    247a:	79 a5       	ldd	r23, Y+41	; 0x29
    247c:	6f 5f       	subi	r22, 0xFF	; 255
    247e:	7f 4f       	sbci	r23, 0xFF	; 255
    2480:	79 a7       	std	Y+41, r23	; 0x29
    2482:	68 a7       	std	Y+40, r22	; 0x28
    2484:	ee a1       	ldd	r30, Y+38	; 0x26
    2486:	ff a1       	ldd	r31, Y+39	; 0x27
    2488:	00 82       	st	Z, r0
    248a:	6e a1       	ldd	r22, Y+38	; 0x26
    248c:	7f a1       	ldd	r23, Y+39	; 0x27
    248e:	6f 5f       	subi	r22, 0xFF	; 255
    2490:	7f 4f       	sbci	r23, 0xFF	; 255
    2492:	7f a3       	std	Y+39, r23	; 0x27
    2494:	6e a3       	std	Y+38, r22	; 0x26
    2496:	7a a5       	ldd	r23, Y+42	; 0x2a
    2498:	71 50       	subi	r23, 0x01	; 1
    249a:	7a a7       	std	Y+42, r23	; 0x2a
    249c:	8a a5       	ldd	r24, Y+42	; 0x2a
    249e:	88 23       	and	r24, r24
    24a0:	41 f7       	brne	.-48     	; 0x2472 <Check_Password+0x3a>

		LCD_vidClear();
    24a2:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <LCD_vidClear>
		Gotoxy(1,1) ;
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	61 e0       	ldi	r22, 0x01	; 1
    24aa:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <Gotoxy>
		LCD_vidWriteString(String_Pass,15) ;
    24ae:	ce 01       	movw	r24, r28
    24b0:	47 96       	adiw	r24, 0x17	; 23
    24b2:	6f e0       	ldi	r22, 0x0F	; 15
    24b4:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_vidWriteString>

		Gotoxy(1,2) ;
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	62 e0       	ldi	r22, 0x02	; 2
    24bc:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <Gotoxy>
    24c0:	1a c0       	rjmp	.+52     	; 0x24f6 <Check_Password+0xbe>

		while (j<4) {

			u8_KPD_NB = KPD_u8GetPressedKey();
    24c2:	0e 94 03 09 	call	0x1206	; 0x1206 <KPD_u8GetPressedKey>
    24c6:	8a 8b       	std	Y+18, r24	; 0x12

			if(u8_KPD_NB!=0) {
    24c8:	8a 89       	ldd	r24, Y+18	; 0x12
    24ca:	88 23       	and	r24, r24
    24cc:	a1 f0       	breq	.+40     	; 0x24f6 <Check_Password+0xbe>

				PASS[j] = u8_KPD_NB ;
    24ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    24d0:	28 2f       	mov	r18, r24
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	ce 01       	movw	r24, r28
    24d6:	43 96       	adiw	r24, 0x13	; 19
    24d8:	fc 01       	movw	r30, r24
    24da:	e2 0f       	add	r30, r18
    24dc:	f3 1f       	adc	r31, r19
    24de:	8a 89       	ldd	r24, Y+18	; 0x12
    24e0:	80 83       	st	Z, r24
				LCDWriteInteger(u8_KPD_NB,1);
    24e2:	8a 89       	ldd	r24, Y+18	; 0x12
    24e4:	88 2f       	mov	r24, r24
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	61 e0       	ldi	r22, 0x01	; 1
    24ea:	70 e0       	ldi	r23, 0x00	; 0
    24ec:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <LCDWriteInteger>

				j++ ;
    24f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    24f2:	8f 5f       	subi	r24, 0xFF	; 255
    24f4:	8f 87       	std	Y+15, r24	; 0x0f
		Gotoxy(1,1) ;
		LCD_vidWriteString(String_Pass,15) ;

		Gotoxy(1,2) ;

		while (j<4) {
    24f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    24f8:	84 30       	cpi	r24, 0x04	; 4
    24fa:	18 f3       	brcs	.-58     	; 0x24c2 <Check_Password+0x8a>
				j++ ;

			}

		}
		u16_PASS =( 1000*PASS[0] ) + ( 100*PASS[1]) + ( 10*PASS[2]) +( PASS[3])  ;
    24fc:	8b 89       	ldd	r24, Y+19	; 0x13
    24fe:	28 2f       	mov	r18, r24
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	88 ee       	ldi	r24, 0xE8	; 232
    2504:	93 e0       	ldi	r25, 0x03	; 3
    2506:	28 9f       	mul	r18, r24
    2508:	a0 01       	movw	r20, r0
    250a:	29 9f       	mul	r18, r25
    250c:	50 0d       	add	r21, r0
    250e:	38 9f       	mul	r19, r24
    2510:	50 0d       	add	r21, r0
    2512:	11 24       	eor	r1, r1
    2514:	8c 89       	ldd	r24, Y+20	; 0x14
    2516:	28 2f       	mov	r18, r24
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	84 e6       	ldi	r24, 0x64	; 100
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	fc 01       	movw	r30, r24
    2520:	2e 9f       	mul	r18, r30
    2522:	c0 01       	movw	r24, r0
    2524:	2f 9f       	mul	r18, r31
    2526:	90 0d       	add	r25, r0
    2528:	3e 9f       	mul	r19, r30
    252a:	90 0d       	add	r25, r0
    252c:	11 24       	eor	r1, r1
    252e:	48 0f       	add	r20, r24
    2530:	59 1f       	adc	r21, r25
    2532:	8d 89       	ldd	r24, Y+21	; 0x15
    2534:	88 2f       	mov	r24, r24
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	9c 01       	movw	r18, r24
    253a:	22 0f       	add	r18, r18
    253c:	33 1f       	adc	r19, r19
    253e:	c9 01       	movw	r24, r18
    2540:	88 0f       	add	r24, r24
    2542:	99 1f       	adc	r25, r25
    2544:	88 0f       	add	r24, r24
    2546:	99 1f       	adc	r25, r25
    2548:	82 0f       	add	r24, r18
    254a:	93 1f       	adc	r25, r19
    254c:	9a 01       	movw	r18, r20
    254e:	28 0f       	add	r18, r24
    2550:	39 1f       	adc	r19, r25
    2552:	8e 89       	ldd	r24, Y+22	; 0x16
    2554:	88 2f       	mov	r24, r24
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	82 0f       	add	r24, r18
    255a:	93 1f       	adc	r25, r19
    255c:	99 8b       	std	Y+17, r25	; 0x11
    255e:	88 8b       	std	Y+16, r24	; 0x10
		LCDWriteInteger(u16_PASS,4) ;
    2560:	88 89       	ldd	r24, Y+16	; 0x10
    2562:	99 89       	ldd	r25, Y+17	; 0x11
    2564:	64 e0       	ldi	r22, 0x04	; 4
    2566:	70 e0       	ldi	r23, 0x00	; 0
    2568:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <LCDWriteInteger>
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	aa ef       	ldi	r26, 0xFA	; 250
    2572:	b3 e4       	ldi	r27, 0x43	; 67
    2574:	8b 87       	std	Y+11, r24	; 0x0b
    2576:	9c 87       	std	Y+12, r25	; 0x0c
    2578:	ad 87       	std	Y+13, r26	; 0x0d
    257a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    257c:	6b 85       	ldd	r22, Y+11	; 0x0b
    257e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2580:	8d 85       	ldd	r24, Y+13	; 0x0d
    2582:	9e 85       	ldd	r25, Y+14	; 0x0e
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e8       	ldi	r19, 0x80	; 128
    2588:	4b e3       	ldi	r20, 0x3B	; 59
    258a:	55 e4       	ldi	r21, 0x45	; 69
    258c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	8f 83       	std	Y+7, r24	; 0x07
    2596:	98 87       	std	Y+8, r25	; 0x08
    2598:	a9 87       	std	Y+9, r26	; 0x09
    259a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    259c:	6f 81       	ldd	r22, Y+7	; 0x07
    259e:	78 85       	ldd	r23, Y+8	; 0x08
    25a0:	89 85       	ldd	r24, Y+9	; 0x09
    25a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	40 e8       	ldi	r20, 0x80	; 128
    25aa:	5f e3       	ldi	r21, 0x3F	; 63
    25ac:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25b0:	88 23       	and	r24, r24
    25b2:	2c f4       	brge	.+10     	; 0x25be <Check_Password+0x186>
		__ticks = 1;
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	9e 83       	std	Y+6, r25	; 0x06
    25ba:	8d 83       	std	Y+5, r24	; 0x05
    25bc:	3f c0       	rjmp	.+126    	; 0x263c <Check_Password+0x204>
	else if (__tmp > 65535)
    25be:	6f 81       	ldd	r22, Y+7	; 0x07
    25c0:	78 85       	ldd	r23, Y+8	; 0x08
    25c2:	89 85       	ldd	r24, Y+9	; 0x09
    25c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	3f ef       	ldi	r19, 0xFF	; 255
    25ca:	4f e7       	ldi	r20, 0x7F	; 127
    25cc:	57 e4       	ldi	r21, 0x47	; 71
    25ce:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25d2:	18 16       	cp	r1, r24
    25d4:	4c f5       	brge	.+82     	; 0x2628 <Check_Password+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25da:	8d 85       	ldd	r24, Y+13	; 0x0d
    25dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	40 e2       	ldi	r20, 0x20	; 32
    25e4:	51 e4       	ldi	r21, 0x41	; 65
    25e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	bc 01       	movw	r22, r24
    25f0:	cd 01       	movw	r24, r26
    25f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	9e 83       	std	Y+6, r25	; 0x06
    25fc:	8d 83       	std	Y+5, r24	; 0x05
    25fe:	0f c0       	rjmp	.+30     	; 0x261e <Check_Password+0x1e6>
    2600:	8c e2       	ldi	r24, 0x2C	; 44
    2602:	91 e0       	ldi	r25, 0x01	; 1
    2604:	9c 83       	std	Y+4, r25	; 0x04
    2606:	8b 83       	std	Y+3, r24	; 0x03
    2608:	8b 81       	ldd	r24, Y+3	; 0x03
    260a:	9c 81       	ldd	r25, Y+4	; 0x04
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	f1 f7       	brne	.-4      	; 0x260c <Check_Password+0x1d4>
    2610:	9c 83       	std	Y+4, r25	; 0x04
    2612:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2614:	8d 81       	ldd	r24, Y+5	; 0x05
    2616:	9e 81       	ldd	r25, Y+6	; 0x06
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	9e 83       	std	Y+6, r25	; 0x06
    261c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    261e:	8d 81       	ldd	r24, Y+5	; 0x05
    2620:	9e 81       	ldd	r25, Y+6	; 0x06
    2622:	00 97       	sbiw	r24, 0x00	; 0
    2624:	69 f7       	brne	.-38     	; 0x2600 <Check_Password+0x1c8>
    2626:	14 c0       	rjmp	.+40     	; 0x2650 <Check_Password+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2628:	6f 81       	ldd	r22, Y+7	; 0x07
    262a:	78 85       	ldd	r23, Y+8	; 0x08
    262c:	89 85       	ldd	r24, Y+9	; 0x09
    262e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2630:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	9e 83       	std	Y+6, r25	; 0x06
    263a:	8d 83       	std	Y+5, r24	; 0x05
    263c:	8d 81       	ldd	r24, Y+5	; 0x05
    263e:	9e 81       	ldd	r25, Y+6	; 0x06
    2640:	9a 83       	std	Y+2, r25	; 0x02
    2642:	89 83       	std	Y+1, r24	; 0x01
    2644:	89 81       	ldd	r24, Y+1	; 0x01
    2646:	9a 81       	ldd	r25, Y+2	; 0x02
    2648:	01 97       	sbiw	r24, 0x01	; 1
    264a:	f1 f7       	brne	.-4      	; 0x2648 <Check_Password+0x210>
    264c:	9a 83       	std	Y+2, r25	; 0x02
    264e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500)  ;

return u16_PASS ;
    2650:	88 89       	ldd	r24, Y+16	; 0x10
    2652:	99 89       	ldd	r25, Y+17	; 0x11
}
    2654:	aa 96       	adiw	r28, 0x2a	; 42
    2656:	0f b6       	in	r0, 0x3f	; 63
    2658:	f8 94       	cli
    265a:	de bf       	out	0x3e, r29	; 62
    265c:	0f be       	out	0x3f, r0	; 63
    265e:	cd bf       	out	0x3d, r28	; 61
    2660:	cf 91       	pop	r28
    2662:	df 91       	pop	r29
    2664:	08 95       	ret

00002666 <vid_LCD_vid_DisplayData>:


/*************************************************************/


void vid_LCD_vid_DisplayData(void) {
    2666:	df 93       	push	r29
    2668:	cf 93       	push	r28
    266a:	cd b7       	in	r28, 0x3d	; 61
    266c:	de b7       	in	r29, 0x3e	; 62
    266e:	6d 97       	sbiw	r28, 0x1d	; 29
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	f8 94       	cli
    2674:	de bf       	out	0x3e, r29	; 62
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	cd bf       	out	0x3d, r28	; 61

	u8  u8Temp = 0 ;
    267a:	1d 82       	std	Y+5, r1	; 0x05
	u16 u16Lumen = 0 ;              // each Lamp lumen = 1020 lumen
    267c:	1c 82       	std	Y+4, r1	; 0x04
    267e:	1b 82       	std	Y+3, r1	; 0x03
	u8  u8PeopleInside = 0 ;
    2680:	1a 82       	std	Y+2, r1	; 0x02
	u8 u8_AlertStatus = 0 ;
    2682:	19 82       	std	Y+1, r1	; 0x01

	u8 String_TEMP [4] = ("TMP") ;
    2684:	80 91 83 00 	lds	r24, 0x0083
    2688:	90 91 84 00 	lds	r25, 0x0084
    268c:	a0 91 85 00 	lds	r26, 0x0085
    2690:	b0 91 86 00 	lds	r27, 0x0086
    2694:	8e 83       	std	Y+6, r24	; 0x06
    2696:	9f 83       	std	Y+7, r25	; 0x07
    2698:	a8 87       	std	Y+8, r26	; 0x08
    269a:	b9 87       	std	Y+9, r27	; 0x09
	u8 String_LUMEN [4] = ("LUM") ;
    269c:	80 91 87 00 	lds	r24, 0x0087
    26a0:	90 91 88 00 	lds	r25, 0x0088
    26a4:	a0 91 89 00 	lds	r26, 0x0089
    26a8:	b0 91 8a 00 	lds	r27, 0x008A
    26ac:	8a 87       	std	Y+10, r24	; 0x0a
    26ae:	9b 87       	std	Y+11, r25	; 0x0b
    26b0:	ac 87       	std	Y+12, r26	; 0x0c
    26b2:	bd 87       	std	Y+13, r27	; 0x0d
	u8 String_NBOfPeople [3] = ("NB") ;
    26b4:	ce 01       	movw	r24, r28
    26b6:	0e 96       	adiw	r24, 0x0e	; 14
    26b8:	9d 8b       	std	Y+21, r25	; 0x15
    26ba:	8c 8b       	std	Y+20, r24	; 0x14
    26bc:	eb e8       	ldi	r30, 0x8B	; 139
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	ff 8b       	std	Y+23, r31	; 0x17
    26c2:	ee 8b       	std	Y+22, r30	; 0x16
    26c4:	f3 e0       	ldi	r31, 0x03	; 3
    26c6:	f8 8f       	std	Y+24, r31	; 0x18
    26c8:	ee 89       	ldd	r30, Y+22	; 0x16
    26ca:	ff 89       	ldd	r31, Y+23	; 0x17
    26cc:	00 80       	ld	r0, Z
    26ce:	8e 89       	ldd	r24, Y+22	; 0x16
    26d0:	9f 89       	ldd	r25, Y+23	; 0x17
    26d2:	01 96       	adiw	r24, 0x01	; 1
    26d4:	9f 8b       	std	Y+23, r25	; 0x17
    26d6:	8e 8b       	std	Y+22, r24	; 0x16
    26d8:	ec 89       	ldd	r30, Y+20	; 0x14
    26da:	fd 89       	ldd	r31, Y+21	; 0x15
    26dc:	00 82       	st	Z, r0
    26de:	8c 89       	ldd	r24, Y+20	; 0x14
    26e0:	9d 89       	ldd	r25, Y+21	; 0x15
    26e2:	01 96       	adiw	r24, 0x01	; 1
    26e4:	9d 8b       	std	Y+21, r25	; 0x15
    26e6:	8c 8b       	std	Y+20, r24	; 0x14
    26e8:	98 8d       	ldd	r25, Y+24	; 0x18
    26ea:	91 50       	subi	r25, 0x01	; 1
    26ec:	98 8f       	std	Y+24, r25	; 0x18
    26ee:	e8 8d       	ldd	r30, Y+24	; 0x18
    26f0:	ee 23       	and	r30, r30
    26f2:	51 f7       	brne	.-44     	; 0x26c8 <vid_LCD_vid_DisplayData+0x62>
	u8 String_Alert [3] = ("AL") ;
    26f4:	ce 01       	movw	r24, r28
    26f6:	41 96       	adiw	r24, 0x11	; 17
    26f8:	9a 8f       	std	Y+26, r25	; 0x1a
    26fa:	89 8f       	std	Y+25, r24	; 0x19
    26fc:	ee e8       	ldi	r30, 0x8E	; 142
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	fc 8f       	std	Y+28, r31	; 0x1c
    2702:	eb 8f       	std	Y+27, r30	; 0x1b
    2704:	f3 e0       	ldi	r31, 0x03	; 3
    2706:	fd 8f       	std	Y+29, r31	; 0x1d
    2708:	eb 8d       	ldd	r30, Y+27	; 0x1b
    270a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    270c:	00 80       	ld	r0, Z
    270e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2710:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2712:	01 96       	adiw	r24, 0x01	; 1
    2714:	9c 8f       	std	Y+28, r25	; 0x1c
    2716:	8b 8f       	std	Y+27, r24	; 0x1b
    2718:	e9 8d       	ldd	r30, Y+25	; 0x19
    271a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    271c:	00 82       	st	Z, r0
    271e:	89 8d       	ldd	r24, Y+25	; 0x19
    2720:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2722:	01 96       	adiw	r24, 0x01	; 1
    2724:	9a 8f       	std	Y+26, r25	; 0x1a
    2726:	89 8f       	std	Y+25, r24	; 0x19
    2728:	9d 8d       	ldd	r25, Y+29	; 0x1d
    272a:	91 50       	subi	r25, 0x01	; 1
    272c:	9d 8f       	std	Y+29, r25	; 0x1d
    272e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2730:	ee 23       	and	r30, r30
    2732:	51 f7       	brne	.-44     	; 0x2708 <vid_LCD_vid_DisplayData+0xa2>

	LCD_vidClear();
    2734:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <LCD_vidClear>

	while (1)

	{

	asm ("CLI") ;
    2738:	f8 94       	cli


		if(u8_UART_u8_GetChar() == 'a'){
    273a:	0e 94 8a 14 	call	0x2914	; 0x2914 <u8_UART_u8_GetChar>
    273e:	81 36       	cpi	r24, 0x61	; 97
    2740:	99 f4       	brne	.+38     	; 0x2768 <vid_LCD_vid_DisplayData+0x102>
			  u8Temp = u8_UART_u8_GetChar() ;
    2742:	0e 94 8a 14 	call	0x2914	; 0x2914 <u8_UART_u8_GetChar>
    2746:	8d 83       	std	Y+5, r24	; 0x05

			  Gotoxy(1,1) ;
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	61 e0       	ldi	r22, 0x01	; 1
    274c:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <Gotoxy>
			  LCD_vidWriteString(String_TEMP,3) ;
    2750:	ce 01       	movw	r24, r28
    2752:	06 96       	adiw	r24, 0x06	; 6
    2754:	63 e0       	ldi	r22, 0x03	; 3
    2756:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_vidWriteString>
			  LCDWriteInteger(u8Temp,2) ;
    275a:	8d 81       	ldd	r24, Y+5	; 0x05
    275c:	88 2f       	mov	r24, r24
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	62 e0       	ldi	r22, 0x02	; 2
    2762:	70 e0       	ldi	r23, 0x00	; 0
    2764:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <LCDWriteInteger>
		}
		else {

		}
/*---------------------------------------------------------------------------------*/
			if (u8_UART_u8_GetChar() == 'b') {
    2768:	0e 94 8a 14 	call	0x2914	; 0x2914 <u8_UART_u8_GetChar>
    276c:	82 36       	cpi	r24, 0x62	; 98
    276e:	c9 f4       	brne	.+50     	; 0x27a2 <vid_LCD_vid_DisplayData+0x13c>
			  u16Lumen = 4*(u16)u8_UART_u8_GetChar() ;  // max lamp lumen  = 1020  (4*255)
    2770:	0e 94 8a 14 	call	0x2914	; 0x2914 <u8_UART_u8_GetChar>
    2774:	88 2f       	mov	r24, r24
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	88 0f       	add	r24, r24
    277a:	99 1f       	adc	r25, r25
    277c:	88 0f       	add	r24, r24
    277e:	99 1f       	adc	r25, r25
    2780:	9c 83       	std	Y+4, r25	; 0x04
    2782:	8b 83       	std	Y+3, r24	; 0x03

			  Gotoxy(1,2) ;
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	62 e0       	ldi	r22, 0x02	; 2
    2788:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <Gotoxy>
			  LCD_vidWriteString(String_LUMEN,4) ;
    278c:	ce 01       	movw	r24, r28
    278e:	0a 96       	adiw	r24, 0x0a	; 10
    2790:	64 e0       	ldi	r22, 0x04	; 4
    2792:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_vidWriteString>
			  LCDWriteInteger(u16Lumen,4) ;
    2796:	8b 81       	ldd	r24, Y+3	; 0x03
    2798:	9c 81       	ldd	r25, Y+4	; 0x04
    279a:	64 e0       	ldi	r22, 0x04	; 4
    279c:	70 e0       	ldi	r23, 0x00	; 0
    279e:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <LCDWriteInteger>
		else {

		}
/*---------------------------------------------------------------------------------*/

			if (u8_UART_u8_GetChar() == 'c') {
    27a2:	0e 94 8a 14 	call	0x2914	; 0x2914 <u8_UART_u8_GetChar>
    27a6:	83 36       	cpi	r24, 0x63	; 99
    27a8:	99 f4       	brne	.+38     	; 0x27d0 <vid_LCD_vid_DisplayData+0x16a>
			  u8PeopleInside = u8_UART_u8_GetChar() ;
    27aa:	0e 94 8a 14 	call	0x2914	; 0x2914 <u8_UART_u8_GetChar>
    27ae:	8a 83       	std	Y+2, r24	; 0x02

			  Gotoxy(10,1) ;
    27b0:	8a e0       	ldi	r24, 0x0A	; 10
    27b2:	61 e0       	ldi	r22, 0x01	; 1
    27b4:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <Gotoxy>
			  LCD_vidWriteString(String_NBOfPeople,2) ;
    27b8:	ce 01       	movw	r24, r28
    27ba:	0e 96       	adiw	r24, 0x0e	; 14
    27bc:	62 e0       	ldi	r22, 0x02	; 2
    27be:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_vidWriteString>
			  LCDWriteInteger(u8PeopleInside,2) ;
    27c2:	8a 81       	ldd	r24, Y+2	; 0x02
    27c4:	88 2f       	mov	r24, r24
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	62 e0       	ldi	r22, 0x02	; 2
    27ca:	70 e0       	ldi	r23, 0x00	; 0
    27cc:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <LCDWriteInteger>
		 else {

		 }
/*---------------------------------------------------------------------------------*/

	    	if (u8_UART_u8_GetChar() == 'd') {
    27d0:	0e 94 8a 14 	call	0x2914	; 0x2914 <u8_UART_u8_GetChar>
    27d4:	84 36       	cpi	r24, 0x64	; 100
    27d6:	01 f5       	brne	.+64     	; 0x2818 <vid_LCD_vid_DisplayData+0x1b2>

	    		u8_AlertStatus = u8_UART_u8_GetChar() ;
    27d8:	0e 94 8a 14 	call	0x2914	; 0x2914 <u8_UART_u8_GetChar>
    27dc:	89 83       	std	Y+1, r24	; 0x01

	    		Gotoxy(11,2) ;
    27de:	8b e0       	ldi	r24, 0x0B	; 11
    27e0:	62 e0       	ldi	r22, 0x02	; 2
    27e2:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <Gotoxy>
	    		LCD_vidWriteString(String_Alert,2) ;
    27e6:	ce 01       	movw	r24, r28
    27e8:	41 96       	adiw	r24, 0x11	; 17
    27ea:	62 e0       	ldi	r22, 0x02	; 2
    27ec:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_vidWriteString>

	        if (u8_AlertStatus == 1){
    27f0:	89 81       	ldd	r24, Y+1	; 0x01
    27f2:	81 30       	cpi	r24, 0x01	; 1
    27f4:	49 f4       	brne	.+18     	; 0x2808 <vid_LCD_vid_DisplayData+0x1a2>
	        	LCD_vidWriteCharacter('1') ;
    27f6:	81 e3       	ldi	r24, 0x31	; 49
    27f8:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <LCD_vidWriteCharacter>
	        	DIO_SetPinValue(PORTD_DIO , PIN7 , HIGH ) ;
    27fc:	83 e0       	ldi	r24, 0x03	; 3
    27fe:	67 e0       	ldi	r22, 0x07	; 7
    2800:	41 e0       	ldi	r20, 0x01	; 1
    2802:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_SetPinValue>
    2806:	08 c0       	rjmp	.+16     	; 0x2818 <vid_LCD_vid_DisplayData+0x1b2>
	        }
	        else {
	        	LCD_vidWriteCharacter('0') ;
    2808:	80 e3       	ldi	r24, 0x30	; 48
    280a:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <LCD_vidWriteCharacter>
	    		DIO_SetPinValue(PORTD_DIO , PIN7 , LOW ) ;
    280e:	83 e0       	ldi	r24, 0x03	; 3
    2810:	67 e0       	ldi	r22, 0x07	; 7
    2812:	40 e0       	ldi	r20, 0x00	; 0
    2814:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_SetPinValue>





	  asm ("SEI") ;
    2818:	78 94       	sei
    281a:	8e cf       	rjmp	.-228    	; 0x2738 <vid_LCD_vid_DisplayData+0xd2>

0000281c <vid_ErrorLogInMsg>:
}


/********************************************************************/

void vid_ErrorLogInMsg(void){
    281c:	df 93       	push	r29
    281e:	cf 93       	push	r28
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62
    2824:	65 97       	sbiw	r28, 0x15	; 21
    2826:	0f b6       	in	r0, 0x3f	; 63
    2828:	f8 94       	cli
    282a:	de bf       	out	0x3e, r29	; 62
    282c:	0f be       	out	0x3f, r0	; 63
    282e:	cd bf       	out	0x3d, r28	; 61


	u8 String_Error [16] = ("Error Log In") ;
    2830:	ce 01       	movw	r24, r28
    2832:	01 96       	adiw	r24, 0x01	; 1
    2834:	9a 8b       	std	Y+18, r25	; 0x12
    2836:	89 8b       	std	Y+17, r24	; 0x11
    2838:	a1 e9       	ldi	r26, 0x91	; 145
    283a:	b0 e0       	ldi	r27, 0x00	; 0
    283c:	bc 8b       	std	Y+20, r27	; 0x14
    283e:	ab 8b       	std	Y+19, r26	; 0x13
    2840:	bd e0       	ldi	r27, 0x0D	; 13
    2842:	bd 8b       	std	Y+21, r27	; 0x15
    2844:	eb 89       	ldd	r30, Y+19	; 0x13
    2846:	fc 89       	ldd	r31, Y+20	; 0x14
    2848:	00 80       	ld	r0, Z
    284a:	8b 89       	ldd	r24, Y+19	; 0x13
    284c:	9c 89       	ldd	r25, Y+20	; 0x14
    284e:	01 96       	adiw	r24, 0x01	; 1
    2850:	9c 8b       	std	Y+20, r25	; 0x14
    2852:	8b 8b       	std	Y+19, r24	; 0x13
    2854:	a9 89       	ldd	r26, Y+17	; 0x11
    2856:	ba 89       	ldd	r27, Y+18	; 0x12
    2858:	0c 92       	st	X, r0
    285a:	e9 89       	ldd	r30, Y+17	; 0x11
    285c:	fa 89       	ldd	r31, Y+18	; 0x12
    285e:	31 96       	adiw	r30, 0x01	; 1
    2860:	fa 8b       	std	Y+18, r31	; 0x12
    2862:	e9 8b       	std	Y+17, r30	; 0x11
    2864:	fd 89       	ldd	r31, Y+21	; 0x15
    2866:	f1 50       	subi	r31, 0x01	; 1
    2868:	fd 8b       	std	Y+21, r31	; 0x15
    286a:	8d 89       	ldd	r24, Y+21	; 0x15
    286c:	88 23       	and	r24, r24
    286e:	51 f7       	brne	.-44     	; 0x2844 <vid_ErrorLogInMsg+0x28>
    2870:	83 e0       	ldi	r24, 0x03	; 3
    2872:	fe 01       	movw	r30, r28
    2874:	3e 96       	adiw	r30, 0x0e	; 14
    2876:	df 01       	movw	r26, r30
    2878:	98 2f       	mov	r25, r24
    287a:	1d 92       	st	X+, r1
    287c:	9a 95       	dec	r25
    287e:	e9 f7       	brne	.-6      	; 0x287a <vid_ErrorLogInMsg+0x5e>



	LCD_vidClear();
    2880:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <LCD_vidClear>
	Gotoxy(1,1) ;
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	61 e0       	ldi	r22, 0x01	; 1
    2888:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <Gotoxy>
	LCD_vidWriteString(String_Error,13) ;
    288c:	ce 01       	movw	r24, r28
    288e:	01 96       	adiw	r24, 0x01	; 1
    2890:	6d e0       	ldi	r22, 0x0D	; 13
    2892:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_vidWriteString>

}
    2896:	65 96       	adiw	r28, 0x15	; 21
    2898:	0f b6       	in	r0, 0x3f	; 63
    289a:	f8 94       	cli
    289c:	de bf       	out	0x3e, r29	; 62
    289e:	0f be       	out	0x3f, r0	; 63
    28a0:	cd bf       	out	0x3d, r28	; 61
    28a2:	cf 91       	pop	r28
    28a4:	df 91       	pop	r29
    28a6:	08 95       	ret

000028a8 <vid_UART_vid_Initialize>:


/**************************************************************/

void vid_UART_vid_Initialize(void)
{
    28a8:	df 93       	push	r29
    28aa:	cf 93       	push	r28
    28ac:	cd b7       	in	r28, 0x3d	; 61
    28ae:	de b7       	in	r29, 0x3e	; 62
  // Set BaudRate -> 9600/8MhZ
  UBRRL = 51;
    28b0:	e9 e2       	ldi	r30, 0x29	; 41
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	83 e3       	ldi	r24, 0x33	; 51
    28b6:	80 83       	st	Z, r24
  UBRRH = 0;
    28b8:	e0 e4       	ldi	r30, 0x40	; 64
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	10 82       	st	Z, r1
  // Set Frame Format -> 8 data, 1 stop, No Parity
  UCSRC = 0b10000110;
    28be:	e0 e4       	ldi	r30, 0x40	; 64
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	86 e8       	ldi	r24, 0x86	; 134
    28c4:	80 83       	st	Z, r24
  // Enable RX and TX
  UCSRB = 0b00011000;
    28c6:	ea e2       	ldi	r30, 0x2A	; 42
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	88 e1       	ldi	r24, 0x18	; 24
    28cc:	80 83       	st	Z, r24
}
    28ce:	cf 91       	pop	r28
    28d0:	df 91       	pop	r29
    28d2:	08 95       	ret

000028d4 <vid_UART_vid_SendChar>:

/**************************************************************/

void vid_UART_vid_SendChar(u8 data)
{
    28d4:	df 93       	push	r29
    28d6:	cf 93       	push	r28
    28d8:	0f 92       	push	r0
    28da:	cd b7       	in	r28, 0x3d	; 61
    28dc:	de b7       	in	r29, 0x3e	; 62
    28de:	89 83       	std	Y+1, r24	; 0x01
  // Wait until transmission Register Empty
  while(!(UCSRA&0b00100000));
    28e0:	eb e2       	ldi	r30, 0x2B	; 43
    28e2:	f0 e0       	ldi	r31, 0x00	; 0
    28e4:	80 81       	ld	r24, Z
    28e6:	88 2f       	mov	r24, r24
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	80 72       	andi	r24, 0x20	; 32
    28ec:	90 70       	andi	r25, 0x00	; 0
    28ee:	00 97       	sbiw	r24, 0x00	; 0
    28f0:	b9 f3       	breq	.-18     	; 0x28e0 <vid_UART_vid_SendChar+0xc>

  UDR = data;
    28f2:	ec e2       	ldi	r30, 0x2C	; 44
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	89 81       	ldd	r24, Y+1	; 0x01
    28f8:	80 83       	st	Z, r24

  // wait for transmit complete
  while(!(UCSRA&0b01000000));
    28fa:	eb e2       	ldi	r30, 0x2B	; 43
    28fc:	f0 e0       	ldi	r31, 0x00	; 0
    28fe:	80 81       	ld	r24, Z
    2900:	88 2f       	mov	r24, r24
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	80 74       	andi	r24, 0x40	; 64
    2906:	90 70       	andi	r25, 0x00	; 0
    2908:	00 97       	sbiw	r24, 0x00	; 0
    290a:	b9 f3       	breq	.-18     	; 0x28fa <vid_UART_vid_SendChar+0x26>
}
    290c:	0f 90       	pop	r0
    290e:	cf 91       	pop	r28
    2910:	df 91       	pop	r29
    2912:	08 95       	ret

00002914 <u8_UART_u8_GetChar>:

/**************************************************************/

u8 u8_UART_u8_GetChar(void)
{
    2914:	df 93       	push	r29
    2916:	cf 93       	push	r28
    2918:	cd b7       	in	r28, 0x3d	; 61
    291a:	de b7       	in	r29, 0x3e	; 62
  // Wait until Reception Complete
  while(!(UCSRA&0b10000000));
    291c:	eb e2       	ldi	r30, 0x2B	; 43
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	80 81       	ld	r24, Z
    2922:	88 23       	and	r24, r24
    2924:	dc f7       	brge	.-10     	; 0x291c <u8_UART_u8_GetChar+0x8>

  return UDR;
    2926:	ec e2       	ldi	r30, 0x2C	; 44
    2928:	f0 e0       	ldi	r31, 0x00	; 0
    292a:	80 81       	ld	r24, Z
}
    292c:	cf 91       	pop	r28
    292e:	df 91       	pop	r29
    2930:	08 95       	ret

00002932 <__udivmodhi4>:
    2932:	aa 1b       	sub	r26, r26
    2934:	bb 1b       	sub	r27, r27
    2936:	51 e1       	ldi	r21, 0x11	; 17
    2938:	07 c0       	rjmp	.+14     	; 0x2948 <__udivmodhi4_ep>

0000293a <__udivmodhi4_loop>:
    293a:	aa 1f       	adc	r26, r26
    293c:	bb 1f       	adc	r27, r27
    293e:	a6 17       	cp	r26, r22
    2940:	b7 07       	cpc	r27, r23
    2942:	10 f0       	brcs	.+4      	; 0x2948 <__udivmodhi4_ep>
    2944:	a6 1b       	sub	r26, r22
    2946:	b7 0b       	sbc	r27, r23

00002948 <__udivmodhi4_ep>:
    2948:	88 1f       	adc	r24, r24
    294a:	99 1f       	adc	r25, r25
    294c:	5a 95       	dec	r21
    294e:	a9 f7       	brne	.-22     	; 0x293a <__udivmodhi4_loop>
    2950:	80 95       	com	r24
    2952:	90 95       	com	r25
    2954:	bc 01       	movw	r22, r24
    2956:	cd 01       	movw	r24, r26
    2958:	08 95       	ret

0000295a <__udivmodsi4>:
    295a:	a1 e2       	ldi	r26, 0x21	; 33
    295c:	1a 2e       	mov	r1, r26
    295e:	aa 1b       	sub	r26, r26
    2960:	bb 1b       	sub	r27, r27
    2962:	fd 01       	movw	r30, r26
    2964:	0d c0       	rjmp	.+26     	; 0x2980 <__udivmodsi4_ep>

00002966 <__udivmodsi4_loop>:
    2966:	aa 1f       	adc	r26, r26
    2968:	bb 1f       	adc	r27, r27
    296a:	ee 1f       	adc	r30, r30
    296c:	ff 1f       	adc	r31, r31
    296e:	a2 17       	cp	r26, r18
    2970:	b3 07       	cpc	r27, r19
    2972:	e4 07       	cpc	r30, r20
    2974:	f5 07       	cpc	r31, r21
    2976:	20 f0       	brcs	.+8      	; 0x2980 <__udivmodsi4_ep>
    2978:	a2 1b       	sub	r26, r18
    297a:	b3 0b       	sbc	r27, r19
    297c:	e4 0b       	sbc	r30, r20
    297e:	f5 0b       	sbc	r31, r21

00002980 <__udivmodsi4_ep>:
    2980:	66 1f       	adc	r22, r22
    2982:	77 1f       	adc	r23, r23
    2984:	88 1f       	adc	r24, r24
    2986:	99 1f       	adc	r25, r25
    2988:	1a 94       	dec	r1
    298a:	69 f7       	brne	.-38     	; 0x2966 <__udivmodsi4_loop>
    298c:	60 95       	com	r22
    298e:	70 95       	com	r23
    2990:	80 95       	com	r24
    2992:	90 95       	com	r25
    2994:	9b 01       	movw	r18, r22
    2996:	ac 01       	movw	r20, r24
    2998:	bd 01       	movw	r22, r26
    299a:	cf 01       	movw	r24, r30
    299c:	08 95       	ret

0000299e <__prologue_saves__>:
    299e:	2f 92       	push	r2
    29a0:	3f 92       	push	r3
    29a2:	4f 92       	push	r4
    29a4:	5f 92       	push	r5
    29a6:	6f 92       	push	r6
    29a8:	7f 92       	push	r7
    29aa:	8f 92       	push	r8
    29ac:	9f 92       	push	r9
    29ae:	af 92       	push	r10
    29b0:	bf 92       	push	r11
    29b2:	cf 92       	push	r12
    29b4:	df 92       	push	r13
    29b6:	ef 92       	push	r14
    29b8:	ff 92       	push	r15
    29ba:	0f 93       	push	r16
    29bc:	1f 93       	push	r17
    29be:	cf 93       	push	r28
    29c0:	df 93       	push	r29
    29c2:	cd b7       	in	r28, 0x3d	; 61
    29c4:	de b7       	in	r29, 0x3e	; 62
    29c6:	ca 1b       	sub	r28, r26
    29c8:	db 0b       	sbc	r29, r27
    29ca:	0f b6       	in	r0, 0x3f	; 63
    29cc:	f8 94       	cli
    29ce:	de bf       	out	0x3e, r29	; 62
    29d0:	0f be       	out	0x3f, r0	; 63
    29d2:	cd bf       	out	0x3d, r28	; 61
    29d4:	09 94       	ijmp

000029d6 <__epilogue_restores__>:
    29d6:	2a 88       	ldd	r2, Y+18	; 0x12
    29d8:	39 88       	ldd	r3, Y+17	; 0x11
    29da:	48 88       	ldd	r4, Y+16	; 0x10
    29dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    29de:	6e 84       	ldd	r6, Y+14	; 0x0e
    29e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    29e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    29e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    29e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    29e8:	b9 84       	ldd	r11, Y+9	; 0x09
    29ea:	c8 84       	ldd	r12, Y+8	; 0x08
    29ec:	df 80       	ldd	r13, Y+7	; 0x07
    29ee:	ee 80       	ldd	r14, Y+6	; 0x06
    29f0:	fd 80       	ldd	r15, Y+5	; 0x05
    29f2:	0c 81       	ldd	r16, Y+4	; 0x04
    29f4:	1b 81       	ldd	r17, Y+3	; 0x03
    29f6:	aa 81       	ldd	r26, Y+2	; 0x02
    29f8:	b9 81       	ldd	r27, Y+1	; 0x01
    29fa:	ce 0f       	add	r28, r30
    29fc:	d1 1d       	adc	r29, r1
    29fe:	0f b6       	in	r0, 0x3f	; 63
    2a00:	f8 94       	cli
    2a02:	de bf       	out	0x3e, r29	; 62
    2a04:	0f be       	out	0x3f, r0	; 63
    2a06:	cd bf       	out	0x3d, r28	; 61
    2a08:	ed 01       	movw	r28, r26
    2a0a:	08 95       	ret

00002a0c <_exit>:
    2a0c:	f8 94       	cli

00002a0e <__stop_program>:
    2a0e:	ff cf       	rjmp	.-2      	; 0x2a0e <__stop_program>
